<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>MPLS 实验1</title>
    <url>/2014/MPLS_Lab_1/</url>
    <content><![CDATA[<h1 id="实验环境："><a href="#实验环境：" class="headerlink" title="实验环境："></a>实验环境：</h1><ul>
<li>模拟器：GNS3 0.8.6</li>
<li>路由器IOS：c7200-adventerprisek9-mz.151-4.M2.image</li>
</ul>
<h1 id="GNS3实验拓扑文件："><a href="#GNS3实验拓扑文件：" class="headerlink" title="GNS3实验拓扑文件："></a>GNS3实验拓扑文件：</h1><p><a href="topology.net">拓扑文件</a></p>
<h1 id="实验拓扑："><a href="#实验拓扑：" class="headerlink" title="实验拓扑："></a>实验拓扑：</h1><p><img src="/2014/MPLS_Lab_1/topo.png"></p>
<span id="more"></span>

<h1 id="基本预配置："><a href="#基本预配置：" class="headerlink" title="基本预配置："></a>基本预配置：</h1><h2 id="R1："><a href="#R1：" class="headerlink" title="R1："></a>R1：</h2><pre class="language-none"><code class="language-none">hostname R1
!
ip cef
!
interface Loopback0
    ip address 1.1.1.1 255.255.255.255
    ip ospf 1 area 0
!
interface FastEthernet0&#x2F;0
    ip address 192.168.12.1 255.255.255.0
    ip ospf 1 area 0
    no shut
!
interface FastEthernet0&#x2F;1
    ip address 192.168.15.1 255.255.255.0
    no shut
!
router ospf 1
    router-id 1.1.1.1
!
line con 0
    exec-timeout 0 0
    logging synchronous
!
end</code></pre>
<h2 id="R2："><a href="#R2：" class="headerlink" title="R2："></a>R2：</h2><pre class="language-none"><code class="language-none">hostname R2
!
ip cef
!
interface Loopback0
    ip address 2.2.2.2 255.255.255.255
    ip ospf 1 area 0
!
interface FastEthernet0&#x2F;0
    ip address 192.168.12.2 255.255.255.0
    ip ospf 1 area 0
    no shutdown
!
interface FastEthernet0&#x2F;1
    ip address 192.168.23.2 255.255.255.0
    ip ospf 1 area 0
    no shutdown
!
router ospf 1
    router-id 2.2.2.2
!
line con 0
    exec-timeout 0 0
    logging synchronous
!
end</code></pre>
<h2 id="R3："><a href="#R3：" class="headerlink" title="R3："></a>R3：</h2><pre class="language-none"><code class="language-none">hostname R3
!
ip cef
!
interface Loopback0
    ip address 3.3.3.3 255.255.255.255
    ip ospf 1 area 0
!
interface FastEthernet0&#x2F;0
    ip address 192.168.34.3 255.255.255.0
    ip ospf 1 area 0
    no shutdown
!
interface FastEthernet0&#x2F;1
    ip address 192.168.23.3 255.255.255.0
    ip ospf 1 area 0
    no shutdown
!
router ospf 1
    router-id 3.3.3.3
!
line con 0
    exec-timeout 0 0
    logging synchronous
!
end</code></pre>
<h2 id="R4："><a href="#R4：" class="headerlink" title="R4："></a>R4：</h2><pre class="language-none"><code class="language-none">hostname R4
!
ip cef
!
interface Loopback0
    ip address 4.4.4.4 255.255.255.255
    ip ospf 1 area 0
!
interface FastEthernet0&#x2F;0
    ip address 192.168.34.4 255.255.255.0
    ip ospf 1 area 0
    no shutdown
!
interface FastEthernet0&#x2F;1
    ip address 192.168.47.4 255.255.255.0
    no shutdown
!
router ospf 1
    router-id 4.4.4.4
!
line con 0
    exec-timeout 0 0
    logging synchronous
!
end</code></pre>
<h1 id="实验与调试（本实验仅涉及AS1中的4台路由器）："><a href="#实验与调试（本实验仅涉及AS1中的4台路由器）：" class="headerlink" title="实验与调试（本实验仅涉及AS1中的4台路由器）："></a>实验与调试（本实验仅涉及AS1中的4台路由器）：</h1><h2 id="实验1：MPLS基本配置与验证：AS1作为MPLS域，在AS1中的所有路由器上运行MPLS；"><a href="#实验1：MPLS基本配置与验证：AS1作为MPLS域，在AS1中的所有路由器上运行MPLS；" class="headerlink" title="实验1：MPLS基本配置与验证：AS1作为MPLS域，在AS1中的所有路由器上运行MPLS；"></a>实验1：MPLS基本配置与验证：AS1作为MPLS域，在AS1中的所有路由器上运行MPLS；</h2><p>可以使用命令<code>mpls label protocol &#123;ldp | tdp&#125;</code> ,来指定标签分发协议；<br>可以看到支持两种标签分发协议，LDP和TDP，默认使用LDP作为标签分发协议；</p>
<pre class="language-none"><code class="language-none">R1(config)#mpls label protocol ?
 ldp  Use LDP (default)
 tdp  Use TDP

R1(config)#mpls label protocol ldp</code></pre>
<p>可以使用命令<code>mpls ldp router-id interface [force]</code>来强制改变LDP路由ID；<br>如果不指定LDP router-id则LDP router-id选举规则同 OSPF ；</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token comment">//手动指定R1将l0接口地址作为LDP router-id的一部分，force选项表示立即生效；</span>
<span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>#mpls ldp router<span class="token operator">-</span>id l0 force</code></pre>

<p>使用接口命令<code>mpls ip</code>，在R1所有已激活的接口上启用MPLS ：</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token operator">-</span><span class="token keyword">if</span><span class="token punctuation">)</span>#interface FastEthernet0<span class="token operator">/</span><span class="token number">0</span>
<span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token operator">-</span><span class="token keyword">if</span><span class="token punctuation">)</span>#mpls ip</code></pre>

<p>可以看到在R1的loopback 0接口配置启用MPLS时，IOS日志提示回环接口不支持MPLS ：</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token operator">-</span><span class="token keyword">if</span><span class="token punctuation">)</span>#interface Loopback0
<span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token operator">-</span><span class="token keyword">if</span><span class="token punctuation">)</span>#mpls ip
<span class="token operator">%</span> MPLS not supported on interface Loopback0</code></pre>


<p>在R2上，使用 LDP 作为 MPLS 标签分发协议，指定 loopback 0 作为 LDP 的 <code>router-id</code>，并使用接口命令 <code>mpls ip</code> ，在适当的的接口上启用 MPLS ；</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token function">R2</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>#mpls label protocol ldp
<span class="token function">R2</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>#mpls ldp router<span class="token operator">-</span>id l0 force

<span class="token function">R2</span><span class="token punctuation">(</span>config<span class="token operator">-</span><span class="token keyword">if</span><span class="token punctuation">)</span>#interface FastEthernet0<span class="token operator">/</span><span class="token number">0</span>
<span class="token function">R2</span><span class="token punctuation">(</span>config<span class="token operator">-</span><span class="token keyword">if</span><span class="token punctuation">)</span>#mpls ip

<span class="token operator">*</span>Mar  <span class="token number">1</span> <span class="token number">00</span><span class="token operator">:</span><span class="token number">09</span><span class="token operator">:</span><span class="token number">05.223</span><span class="token operator">:</span> <span class="token operator">%</span>LDP<span class="token operator">-</span><span class="token number">5</span><span class="token operator">-</span>NBRCHG<span class="token operator">:</span> LDP Neighbor <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">0</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> is UP

<span class="token comment">// 可以看到LDP邻居变化日志提示，LDP邻居已经UP，邻居为1.1.1.1:0；</span>

<span class="token function">R2</span><span class="token punctuation">(</span>config<span class="token operator">-</span><span class="token keyword">if</span><span class="token punctuation">)</span>#interface FastEthernet0<span class="token operator">/</span><span class="token number">1</span>
<span class="token function">R2</span><span class="token punctuation">(</span>config<span class="token operator">-</span><span class="token keyword">if</span><span class="token punctuation">)</span>#mpls ip</code></pre>
<p>在R3上，使用LDP作为MPLS标签分发协议，指定loopback 0作为LDP的<code>router-id</code>，并使用接口命令<code>mpls ip</code>，在适当的的接口上启用MPLS；</p>
<pre class="language-none"><code class="language-none">R3(config)#mpls label protocol ldp
R3(config)#mpls ldp router-id l0 force

R3(config-if)#interface FastEthernet0&#x2F;0
R3(config-if)#mpls ip
R3(config-if)#interface FastEthernet0&#x2F;1
R3(config-if)#mpls ip</code></pre>

<p>在R4上，使用 LDP 作为 MPLS 标签分发协议，指定 loopback 0 作为 LDP 的<code>router-id</code>，并使用接口命令<code>mpls ip</code>，在适当的的接口上启用 MPLS ；</p>
<pre class="language-none"><code class="language-none">R4(config)#mpls label protocol ldp
R4(config)#mpls ldp router-id l0 force

R4(config-if)#interface FastEthernet0&#x2F;0
R4(config-if)#mpls ip</code></pre>

<p><strong>抓包查看分析LDP包结构：</strong><br><img src="/2014/MPLS_Lab_1/pic1.png"><br><img src="/2014/MPLS_Lab_1/pic2.png"><br>可以看到LDP hello包使用UDP进行封装，而Keep Alive包使用TCP进行封装；</p>
<p><strong>附件：</strong><a href="LDP.pcapng">Wireshark抓包文件</a></p>
<p>在 R1 上查看启用 MPLS 的接口：</p>
<pre class="language-none"><code class="language-none">R1(config)#do show mpls interface
Interface              IP            Tunnel   BGP Static Operational
FastEthernet0&#x2F;0        Yes (ldp)     No       No  No     Yes</code></pre>
<p>R1上只用<code>f0/0</code>启用了 MPLS ，可以看到 MPLS 使用 LDP 作为标签分发协议；</p>
<p>在R1上查看LDP邻居发现：</p>
<pre class="language-none"><code class="language-none">R1#show mpls ldp discovery 
 Local LDP Identifier:
  1.1.1.1:0
  Discovery Sources:
  Interfaces:
    FastEthernet0&#x2F;0 (ldp): xmit&#x2F;recv
      LDP Id: 2.2.2.2:0</code></pre>
<ul>
<li>可以看到R1本地的LDP标识符为<code>1.1.1.1:0</code>，其中LDP路由器标识符由两部分组成：<ul>
<li>其中第一部分为接口IP地址；</li>
<li>第二部分为LSR所使用的标签空间字节。如果为0则表示LSR是使用整个设备的标签空间，如果不为0则表示LSR是使用接口标签空间；</li>
</ul>
</li>
<li>还可以看出，R1在启用LDP的接口f0&#x2F;0上发现了LDP邻居;</li>
</ul>
<p>在R1上查看LDP邻居发现详细信息：</p>
<pre class="language-c" data-language="c"><code class="language-c">R1#show mpls ldp discovery detail 
    Local LDP Identifier<span class="token operator">:</span>
    <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">0</span>
    Discovery Sources<span class="token operator">:</span>
    Interfaces<span class="token operator">:</span>
        FastEthernet0<span class="token operator">/</span><span class="token number">0</span> <span class="token punctuation">(</span>ldp<span class="token punctuation">)</span><span class="token operator">:</span> xmit<span class="token operator">/</span>recv
            Enabled<span class="token operator">:</span> Interface config    
            Hello interval<span class="token operator">:</span> <span class="token number">5000</span> ms<span class="token punctuation">;</span> Transport IP addr<span class="token operator">:</span> <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span>   <span class="token comment">//Discovery hello时间间隔为5秒；</span>
            LDP Id<span class="token operator">:</span> <span class="token number">2.2</span><span class="token number">.2</span><span class="token number">.2</span><span class="token operator">:</span><span class="token number">0</span>
                Src IP addr<span class="token operator">:</span> <span class="token number">192.168</span><span class="token number">.12</span><span class="token number">.2</span><span class="token punctuation">;</span> Transport IP addr<span class="token operator">:</span> <span class="token number">2.2</span><span class="token number">.2</span><span class="token number">.2</span>
                Hold time<span class="token operator">:</span> <span class="token number">15</span> sec<span class="token punctuation">;</span> Proposed local<span class="token operator">/</span>peer<span class="token operator">:</span> <span class="token number">15</span><span class="token operator">/</span><span class="token number">15</span> sec  <span class="token comment">//Discovery保持时间为15秒；</span>
                Reachable via <span class="token number">2.2</span><span class="token number">.2</span><span class="token number">.2</span><span class="token operator">/</span><span class="token number">32</span></code></pre>
<p>在R1上查看LDP邻居关系：</p>
<pre class="language-c" data-language="c"><code class="language-c">R1#show mpls ldp neighbor 
    Peer LDP Ident<span class="token operator">:</span> <span class="token number">2.2</span><span class="token number">.2</span><span class="token number">.2</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">;</span> Local LDP Ident <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">0</span>
        TCP connection<span class="token operator">:</span> <span class="token number">2.2</span><span class="token number">.2</span><span class="token number">.2</span><span class="token number">.13634</span> <span class="token operator">-</span> <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span><span class="token number">.646</span>
        State<span class="token operator">:</span> Oper<span class="token punctuation">;</span> Msgs sent<span class="token operator">/</span>rcvd<span class="token operator">:</span> <span class="token number">643</span><span class="token operator">/</span><span class="token number">640</span><span class="token punctuation">;</span> Downstream
        Up time<span class="token operator">:</span> <span class="token number">09</span><span class="token operator">:</span><span class="token number">11</span><span class="token operator">:</span><span class="token number">15</span>
        LDP discovery sources<span class="token operator">:</span>
            FastEthernet0<span class="token operator">/</span><span class="token number">0</span><span class="token punctuation">,</span> Src IP addr<span class="token operator">:</span> <span class="token number">192.168</span><span class="token number">.12</span><span class="token number">.2</span>
        Addresses bound to peer LDP Ident<span class="token operator">:</span>
            <span class="token number">192.168</span><span class="token number">.12</span><span class="token number">.2</span>    <span class="token number">192.168</span><span class="token number">.23</span><span class="token number">.2</span>    <span class="token number">2.2</span><span class="token number">.2</span><span class="token number">.2</span>   </code></pre>
<ul>
<li>可以看到R1有一个LDP邻居，并且邻居标识符为2.2.2.2:0；</li>
<li>而R1本地的LDP标识符为1.1.1.1:0;TCP连接为2.2.2.2的13634端口到1.1.1.1的646端口；</li>
<li>邻居已经建立了9个小时11分15秒；</li>
<li>LDP发现源为f0&#x2F;0接口，地址为f0&#x2F;0的接口地址192.168.12.2；</li>
</ul>
<p>在R1上<code>traceroute 4.4.4.4</code>：</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token operator">-</span><span class="token keyword">if</span><span class="token punctuation">)</span>#<span class="token keyword">do</span> traceroute <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span>
Type escape sequence to abort<span class="token punctuation">.</span>
Tracing the route to <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span>
VRF info<span class="token operator">:</span> <span class="token punctuation">(</span>vrf in name<span class="token operator">/</span>id<span class="token punctuation">,</span> vrf out name<span class="token operator">/</span>id<span class="token punctuation">)</span>
    <span class="token number">1</span> <span class="token number">192.168</span><span class="token number">.12</span><span class="token number">.2</span> <span class="token punctuation">[</span>MPLS<span class="token operator">:</span> Label <span class="token number">18</span> Exp <span class="token number">0</span><span class="token punctuation">]</span> <span class="token number">76</span> msec <span class="token number">80</span> msec <span class="token number">76</span> msec
    <span class="token number">2</span> <span class="token number">192.168</span><span class="token number">.23</span><span class="token number">.3</span> <span class="token punctuation">[</span>MPLS<span class="token operator">:</span> Label <span class="token number">18</span> Exp <span class="token number">0</span><span class="token punctuation">]</span> <span class="token number">96</span> msec <span class="token number">44</span> msec <span class="token number">68</span> msec
    <span class="token number">3</span> <span class="token number">192.168</span><span class="token number">.34</span><span class="token number">.4</span> <span class="token number">120</span> msec <span class="token operator">*</span>  <span class="token number">116</span> msec</code></pre>
<p>可以看到 MPLS 已经生效，<code>traceroute</code>的 ICMP 包当前正是使用 MPLS 进行转发；</p>
<h2 id="实验2：MPLS-LDP自动配置；"><a href="#实验2：MPLS-LDP自动配置；" class="headerlink" title="实验2：MPLS LDP自动配置；"></a>实验2：MPLS LDP自动配置；</h2><p>在R4上查看启用MPLS的接口详细信息：</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token operator">-</span><span class="token keyword">if</span><span class="token punctuation">)</span>#<span class="token keyword">do</span> show mpls interface detail
Interface FastEthernet0<span class="token operator">/</span><span class="token number">0</span><span class="token operator">:</span>
  IP labeling <span class="token function">enabled</span> <span class="token punctuation">(</span>ldp<span class="token punctuation">)</span><span class="token operator">:</span> 
   Interface config
  LSP Tunnel labeling not enabled
  BGP labeling not enabled
  MPLS operational
  MTU <span class="token operator">=</span> <span class="token number">1500</span>
<span class="token comment">//可以看到接口F0/0已经启用了LDP，并且是在接口下通过手动配置启用的；</span>

<span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token operator">-</span><span class="token keyword">if</span><span class="token punctuation">)</span>#<span class="token keyword">do</span> sh mpls ldp discovery detail
 Local LDP Identifier<span class="token operator">:</span>
 <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span><span class="token operator">:</span><span class="token number">0</span>
 Discovery Sources<span class="token operator">:</span>
 Interfaces<span class="token operator">:</span>
  FastEthernet0<span class="token operator">/</span><span class="token number">0</span> <span class="token punctuation">(</span>ldp<span class="token punctuation">)</span><span class="token operator">:</span> xmit<span class="token operator">/</span>recv
   Enabled<span class="token operator">:</span> Interface config
   Hello interval<span class="token operator">:</span> <span class="token number">5000</span> ms<span class="token punctuation">;</span> Transport IP addr<span class="token operator">:</span> <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span> 
   LDP Id<span class="token operator">:</span> <span class="token number">3.3</span><span class="token number">.3</span><span class="token number">.3</span><span class="token operator">:</span><span class="token number">0</span>
    Src IP addr<span class="token operator">:</span> <span class="token number">192.168</span><span class="token number">.34</span><span class="token number">.3</span><span class="token punctuation">;</span> Transport IP addr<span class="token operator">:</span> <span class="token number">3.3</span><span class="token number">.3</span><span class="token number">.3</span>
    Hold time<span class="token operator">:</span> <span class="token number">15</span> sec<span class="token punctuation">;</span> Proposed local<span class="token operator">/</span>peer<span class="token operator">:</span> <span class="token number">15</span><span class="token operator">/</span><span class="token number">15</span> sec
    Reachable via <span class="token number">3.3</span><span class="token number">.3</span><span class="token number">.3</span><span class="token operator">/</span><span class="token number">32</span>
    Password<span class="token operator">:</span> not required<span class="token punctuation">,</span> none<span class="token punctuation">,</span> in use
   Clients<span class="token operator">:</span> IPv4
<span class="token comment">//通过查看R4的LDP邻居发现详情也可以看到接口F0/0是通过在接口下手动配置启用的MPLS LDP；</span></code></pre>

<p>禁用之前在接口下启用的MPLS：</p>
<pre class="language-none"><code class="language-none">R4(config)#int f0&#x2F;0
R4(config-if)#no mpls ip</code></pre>

<p>在R4的OSPF路由器配置模式下启用MPLS LDP自动配置；</p>
<pre class="language-none"><code class="language-none">R4(config)#router ospf 1
R4(config-router)#mpls ldp autoconfig </code></pre>

<p>在R4上验证：</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span>#<span class="token keyword">do</span> sh mpls interface detail
Interface FastEthernet0<span class="token operator">/</span><span class="token number">0</span><span class="token operator">:</span>
  IP labeling <span class="token function">enabled</span> <span class="token punctuation">(</span>ldp<span class="token punctuation">)</span><span class="token operator">:</span>
   IGP config
  LSP Tunnel labeling not enabled
  BGP labeling not enabled
  MPLS operational
  MTU <span class="token operator">=</span> <span class="token number">1500</span>
<span class="token comment">//可以看到，接口F0/0现在已经启用了LDP，但现在是通过IGP自动配置的方式启用的；</span>

<span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span>#<span class="token keyword">do</span> show mpls ldp discovery detail
 Local LDP Identifier<span class="token operator">:</span>
 <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span><span class="token operator">:</span><span class="token number">0</span>
 Discovery Sources<span class="token operator">:</span>
 Interfaces<span class="token operator">:</span>
  FastEthernet0<span class="token operator">/</span><span class="token number">0</span> <span class="token punctuation">(</span>ldp<span class="token punctuation">)</span><span class="token operator">:</span> xmit<span class="token operator">/</span>recv
   Enabled<span class="token operator">:</span> IGP config<span class="token punctuation">;</span>
   Hello interval<span class="token operator">:</span> <span class="token number">5000</span> ms<span class="token punctuation">;</span> Transport IP addr<span class="token operator">:</span> <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span> 
   LDP Id<span class="token operator">:</span> <span class="token number">3.3</span><span class="token number">.3</span><span class="token number">.3</span><span class="token operator">:</span><span class="token number">0</span>
    Src IP addr<span class="token operator">:</span> <span class="token number">192.168</span><span class="token number">.34</span><span class="token number">.3</span><span class="token punctuation">;</span> Transport IP addr<span class="token operator">:</span> <span class="token number">3.3</span><span class="token number">.3</span><span class="token number">.3</span>
    Hold time<span class="token operator">:</span> <span class="token number">15</span> sec<span class="token punctuation">;</span> Proposed local<span class="token operator">/</span>peer<span class="token operator">:</span> <span class="token number">15</span><span class="token operator">/</span><span class="token number">15</span> sec
    Reachable via <span class="token number">3.3</span><span class="token number">.3</span><span class="token number">.3</span><span class="token operator">/</span><span class="token number">32</span>
    Password<span class="token operator">:</span> not required<span class="token punctuation">,</span> none<span class="token punctuation">,</span> in use
   Clients<span class="token operator">:</span> IPv4
<span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span>#<span class="token keyword">do</span> sh mpls interface detail
Interface FastEthernet0<span class="token operator">/</span><span class="token number">0</span><span class="token operator">:</span>
  IP labeling <span class="token function">enabled</span> <span class="token punctuation">(</span>ldp<span class="token punctuation">)</span><span class="token operator">:</span>
   IGP config
  LSP Tunnel labeling not enabled
  BGP labeling not enabled
  MPLS operational
  MTU <span class="token operator">=</span> <span class="token number">1500</span>
<span class="token comment">//可以看到，接口F0/0现在已经启用了LDP，但现在是通过IGP自动配置的方式启用的；</span></code></pre>
<blockquote>
<p>注意：MPLS LDP自动配置目前只支持OSPF；</p>
</blockquote>
<h2 id="实验3：修改MPLS-LDP-计时器；"><a href="#实验3：修改MPLS-LDP-计时器；" class="headerlink" title="实验3：修改MPLS LDP 计时器；"></a>实验3：修改MPLS LDP 计时器；</h2><p>可以使用命令<code>show mpls ldp parameters</code>查看 LDP 当前使用的计时器参数：</p>
<pre class="language-c" data-language="c"><code class="language-c">R1#show mpls ldp parameters 
Protocol version<span class="token operator">:</span> <span class="token number">1</span>
Downstream label generic region<span class="token operator">:</span> min label<span class="token operator">:</span> <span class="token number">16</span><span class="token punctuation">;</span> max label<span class="token operator">:</span> <span class="token number">100000</span>
Session hold time<span class="token operator">:</span> <span class="token number">180</span> sec<span class="token punctuation">;</span> keep alive interval<span class="token operator">:</span> <span class="token number">60</span> sec   <span class="token comment">//LDP TCP会话保持时间为180秒，LDP TCP会话Keep Alive消息发送间隔为60秒；</span>
Discovery hello<span class="token operator">:</span> holdtime<span class="token operator">:</span> <span class="token number">15</span> sec<span class="token punctuation">;</span> interval<span class="token operator">:</span> <span class="token number">5</span> sec  <span class="token comment">//LDP Discovery hello保持时间为15秒，hello消息发送时间间隔为5秒；</span>
Discovery targeted hello<span class="token operator">:</span> holdtime<span class="token operator">:</span> <span class="token number">90</span> sec<span class="token punctuation">;</span> interval<span class="token operator">:</span> <span class="token number">10</span> sec  <span class="token comment">//目标邻居Discovery hello保持时间为90秒，hello消息发送间隔为10秒；</span>
Downstream on Demand max hop count<span class="token operator">:</span> <span class="token number">255</span>
Downstream on Demand Path Vector Limit<span class="token operator">:</span> <span class="token number">255</span>
LDP <span class="token keyword">for</span> targeted sessions
LDP initial<span class="token operator">/</span>maximum backoff<span class="token operator">:</span> <span class="token number">15</span><span class="token operator">/</span><span class="token number">120</span> sec
LDP loop detection<span class="token operator">:</span> off</code></pre>

<p>在R1上修改MPLS LDP邻居发现hello 发送间隔和保持时间：</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token comment">//将R1的MPLS LDP邻居发现hello时间间隔设置为10秒；</span>
<span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>#mpls ldp discovery hello interval <span class="token number">10</span>
<span class="token comment">//将R1的MPLS LDP邻居发现保持时间设置为30秒；</span>
<span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>#mpls ldp discovery hello holdtime <span class="token number">30</span></code></pre>

<p>在R1上验证MPLS LDP参数信息：</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>#<span class="token keyword">do</span> sh mpls ldp parameter
LDP Feature Set Manager<span class="token operator">:</span> State Initialized
 LDP features<span class="token operator">:</span>
 Basic
 IP<span class="token operator">-</span>over<span class="token operator">-</span>MPLS
 TDP
 IGP<span class="token operator">-</span>Sync
 Auto<span class="token operator">-</span>Configuration
 TCP<span class="token operator">-</span>MD5<span class="token operator">-</span>Rollover
Protocol version<span class="token operator">:</span> <span class="token number">1</span>
Session hold time<span class="token operator">:</span> <span class="token number">180</span> sec<span class="token punctuation">;</span> keep alive interval<span class="token operator">:</span> <span class="token number">60</span> sec
Discovery hello<span class="token operator">:</span> holdtime<span class="token operator">:</span> <span class="token number">30</span> sec<span class="token punctuation">;</span> interval<span class="token operator">:</span> <span class="token number">10</span> sec
Discovery targeted hello<span class="token operator">:</span> holdtime<span class="token operator">:</span> <span class="token number">90</span> sec<span class="token punctuation">;</span> interval<span class="token operator">:</span> <span class="token number">10</span> sec
Downstream on Demand max hop count<span class="token operator">:</span> <span class="token number">255</span>
LDP <span class="token keyword">for</span> targeted sessions
LDP initial<span class="token operator">/</span>maximum backoff<span class="token operator">:</span> <span class="token number">15</span><span class="token operator">/</span><span class="token number">120</span> sec
LDP loop detection<span class="token operator">:</span> off
<span class="token comment">//可以看到R1的LDP Discovery计时器的hello interval被修改为30秒，holdtime被修改为10秒；</span></code></pre>

<p>验证LDP Discovery 计时器：</p>
<pre class="language-c" data-language="c"><code class="language-c">R1#show mpls ldp neighbor <span class="token number">2.2</span><span class="token number">.2</span><span class="token number">.2</span> detail
 Peer LDP Ident<span class="token operator">:</span> <span class="token number">2.2</span><span class="token number">.2</span><span class="token number">.2</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">;</span> Local LDP Ident <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">0</span>
  TCP connection<span class="token operator">:</span> <span class="token number">2.2</span><span class="token number">.2</span><span class="token number">.2</span><span class="token number">.42221</span> <span class="token operator">-</span> <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span><span class="token number">.646</span>
  Password<span class="token operator">:</span> not required<span class="token punctuation">,</span> none<span class="token punctuation">,</span> in use
  State<span class="token operator">:</span> Oper<span class="token punctuation">;</span> Msgs sent<span class="token operator">/</span>rcvd<span class="token operator">:</span> <span class="token number">82</span><span class="token operator">/</span><span class="token number">81</span><span class="token punctuation">;</span> Downstream<span class="token punctuation">;</span> Last TIB rev sent <span class="token number">16</span>
  Up time<span class="token operator">:</span> <span class="token number">01</span><span class="token operator">:</span><span class="token number">02</span><span class="token operator">:</span><span class="token number">47</span><span class="token punctuation">;</span> UID<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">;</span> Peer Id <span class="token number">0</span><span class="token punctuation">;</span>
  LDP discovery sources<span class="token operator">:</span>
   FastEthernet0<span class="token operator">/</span><span class="token number">0</span><span class="token punctuation">;</span> Src IP addr<span class="token operator">:</span> <span class="token number">192.168</span><span class="token number">.12</span><span class="token number">.2</span> 
   holdtime<span class="token operator">:</span> <span class="token number">15000</span> ms<span class="token punctuation">,</span> hello interval<span class="token operator">:</span> <span class="token number">5000</span> ms
  Addresses bound to peer LDP Ident<span class="token operator">:</span>
   <span class="token number">192.168</span><span class="token number">.12</span><span class="token number">.2</span>    <span class="token number">192.168</span><span class="token number">.23</span><span class="token number">.2</span>    <span class="token number">2.2</span><span class="token number">.2</span><span class="token number">.2</span>         
  Peer holdtime<span class="token operator">:</span> <span class="token number">180000</span> ms<span class="token punctuation">;</span> KA interval<span class="token operator">:</span> <span class="token number">60000</span> ms<span class="token punctuation">;</span> Peer state<span class="token operator">:</span> estab
  Capabilities Sent<span class="token operator">:</span>
   <span class="token punctuation">[</span><span class="token function">ICCP</span> <span class="token punctuation">(</span>type <span class="token number">0x0405</span><span class="token punctuation">)</span> MajVer <span class="token number">1</span> MinVer <span class="token number">0</span><span class="token punctuation">]</span>
   <span class="token punctuation">[</span>Dynamic <span class="token function">Announcement</span> <span class="token punctuation">(</span><span class="token number">0x0506</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
   <span class="token punctuation">[</span>Typed <span class="token function">Wildcard</span> <span class="token punctuation">(</span><span class="token number">0x050B</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
  Capabilities Received<span class="token operator">:</span>
   <span class="token punctuation">[</span><span class="token function">ICCP</span> <span class="token punctuation">(</span>type <span class="token number">0x0405</span><span class="token punctuation">)</span> MajVer <span class="token number">1</span> MinVer <span class="token number">0</span><span class="token punctuation">]</span>
   <span class="token punctuation">[</span>Dynamic <span class="token function">Announcement</span> <span class="token punctuation">(</span><span class="token number">0x0506</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
   <span class="token punctuation">[</span>Typed <span class="token function">Wildcard</span> <span class="token punctuation">(</span><span class="token number">0x050B</span><span class="token punctuation">)</span><span class="token punctuation">]</span>

R1#show mpls ldp discovery detail
 Local LDP Identifier<span class="token operator">:</span>
 <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">0</span>
 Discovery Sources<span class="token operator">:</span>
 Interfaces<span class="token operator">:</span>
  FastEthernet0<span class="token operator">/</span><span class="token number">0</span> <span class="token punctuation">(</span>ldp<span class="token punctuation">)</span><span class="token operator">:</span> xmit<span class="token operator">/</span>recv
   Enabled<span class="token operator">:</span> Interface config
   Hello interval<span class="token operator">:</span> <span class="token number">5000</span> ms<span class="token punctuation">;</span> Transport IP addr<span class="token operator">:</span> <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span> 
   LDP Id<span class="token operator">:</span> <span class="token number">2.2</span><span class="token number">.2</span><span class="token number">.2</span><span class="token operator">:</span><span class="token number">0</span>
    Src IP addr<span class="token operator">:</span> <span class="token number">192.168</span><span class="token number">.12</span><span class="token number">.2</span><span class="token punctuation">;</span> Transport IP addr<span class="token operator">:</span> <span class="token number">2.2</span><span class="token number">.2</span><span class="token number">.2</span>
    Hold time<span class="token operator">:</span> <span class="token number">15</span> sec<span class="token punctuation">;</span> Proposed local<span class="token operator">/</span>peer<span class="token operator">:</span> <span class="token number">30</span><span class="token operator">/</span><span class="token number">15</span> sec
    Reachable via <span class="token number">2.2</span><span class="token number">.2</span><span class="token number">.2</span><span class="token operator">/</span><span class="token number">32</span>
    Password<span class="token operator">:</span> not required<span class="token punctuation">,</span> none<span class="token punctuation">,</span> in use
   Clients<span class="token operator">:</span> IPv4
<span class="token comment">//可以看到邻居LSR的LDP Discovery hello interval为5秒,holdtime为15秒；</span>
<span class="token comment">//本地的Holdtime为30秒；</span></code></pre>

<p>在R1上修改LDP TCP会话保持时间设置为300秒：</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>#mpls ldp holdtime <span class="token number">300</span> 
<span class="token operator">%</span>Previously established sessions may not use the new holdtime<span class="token punctuation">.</span>
<span class="token comment">//要让新的保持时间立即生效，需要重置一下LDP邻居关系；</span>
<span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>#<span class="token keyword">do</span> clear mpls ldp neighbor <span class="token operator">*</span></code></pre>
<blockquote>
<p>注意：LDP TCP会话保持时间被修改后，LDP会话的Keep Alive计时器值自动被修改为保持时间的1&#x2F;3；</p>
</blockquote>
<p>验证R1的MPLS LDP TCP会话保持时间：</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>#<span class="token keyword">do</span> sh mpls ldp parameters
LDP Feature Set Manager<span class="token operator">:</span> State Initialized
 LDP features<span class="token operator">:</span>
 Basic
 IP<span class="token operator">-</span>over<span class="token operator">-</span>MPLS
 TDP
 IGP<span class="token operator">-</span>Sync
 Auto<span class="token operator">-</span>Configuration
 TCP<span class="token operator">-</span>MD5<span class="token operator">-</span>Rollover
Protocol version<span class="token operator">:</span> <span class="token number">1</span>
Session hold time<span class="token operator">:</span> <span class="token number">300</span> sec<span class="token punctuation">;</span> keep alive interval<span class="token operator">:</span> <span class="token number">100</span> sec
Discovery hello<span class="token operator">:</span> holdtime<span class="token operator">:</span> <span class="token number">30</span> sec<span class="token punctuation">;</span> interval<span class="token operator">:</span> <span class="token number">10</span> sec
Discovery targeted hello<span class="token operator">:</span> holdtime<span class="token operator">:</span> <span class="token number">90</span> sec<span class="token punctuation">;</span> interval<span class="token operator">:</span> <span class="token number">10</span> sec
Downstream on Demand max hop count<span class="token operator">:</span> <span class="token number">255</span>
LDP <span class="token keyword">for</span> targeted sessions
LDP initial<span class="token operator">/</span>maximum backoff<span class="token operator">:</span> <span class="token number">15</span><span class="token operator">/</span><span class="token number">120</span> sec
LDP loop detection<span class="token operator">:</span> off
<span class="token comment">//可以看到R1本地的LDP会话保持时间已经为300秒，其Keep Alive Interval自动被设置为100秒；</span></code></pre>

<p>查看邻居LDP对等体的MPLS LDP TCP会话保持时间：</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>#<span class="token keyword">do</span> sh mpls ldp neighbor <span class="token number">2.2</span><span class="token number">.2</span><span class="token number">.2</span> detail                         
 Peer LDP Ident<span class="token operator">:</span> <span class="token number">2.2</span><span class="token number">.2</span><span class="token number">.2</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">;</span> Local LDP Ident <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">0</span>
  TCP connection<span class="token operator">:</span> <span class="token number">2.2</span><span class="token number">.2</span><span class="token number">.2</span><span class="token number">.21743</span> <span class="token operator">-</span> <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span><span class="token number">.646</span>
  Password<span class="token operator">:</span> not required<span class="token punctuation">,</span> none<span class="token punctuation">,</span> in use
  State<span class="token operator">:</span> Oper<span class="token punctuation">;</span> Msgs sent<span class="token operator">/</span>rcvd<span class="token operator">:</span> <span class="token number">15</span><span class="token operator">/</span><span class="token number">14</span><span class="token punctuation">;</span> Downstream<span class="token punctuation">;</span> Last TIB rev sent <span class="token number">16</span>
  Up time<span class="token operator">:</span> <span class="token number">00</span><span class="token operator">:</span><span class="token number">04</span><span class="token operator">:</span><span class="token number">00</span><span class="token punctuation">;</span> UID<span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">;</span> Peer Id <span class="token number">0</span><span class="token punctuation">;</span>
  LDP discovery sources<span class="token operator">:</span>
   FastEthernet0<span class="token operator">/</span><span class="token number">0</span><span class="token punctuation">;</span> Src IP addr<span class="token operator">:</span> <span class="token number">192.168</span><span class="token number">.12</span><span class="token number">.2</span> 
   holdtime<span class="token operator">:</span> <span class="token number">15000</span> ms<span class="token punctuation">,</span> hello interval<span class="token operator">:</span> <span class="token number">5000</span> ms
  Addresses bound to peer LDP Ident<span class="token operator">:</span>
   <span class="token number">192.168</span><span class="token number">.12</span><span class="token number">.2</span>    <span class="token number">192.168</span><span class="token number">.23</span><span class="token number">.2</span>    <span class="token number">2.2</span><span class="token number">.2</span><span class="token number">.2</span>         
  Peer holdtime<span class="token operator">:</span> <span class="token number">180000</span> ms<span class="token punctuation">;</span> KA interval<span class="token operator">:</span> <span class="token number">60000</span> ms<span class="token punctuation">;</span> Peer state<span class="token operator">:</span> estab
  Capabilities Sent<span class="token operator">:</span>
   <span class="token punctuation">[</span><span class="token function">ICCP</span> <span class="token punctuation">(</span>type <span class="token number">0x0405</span><span class="token punctuation">)</span> MajVer <span class="token number">1</span> MinVer <span class="token number">0</span><span class="token punctuation">]</span>
   <span class="token punctuation">[</span>Dynamic <span class="token function">Announcement</span> <span class="token punctuation">(</span><span class="token number">0x0506</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
   <span class="token punctuation">[</span>Typed <span class="token function">Wildcard</span> <span class="token punctuation">(</span><span class="token number">0x050B</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
  Capabilities Received<span class="token operator">:</span>
   <span class="token punctuation">[</span><span class="token function">ICCP</span> <span class="token punctuation">(</span>type <span class="token number">0x0405</span><span class="token punctuation">)</span> MajVer <span class="token number">1</span> MinVer <span class="token number">0</span><span class="token punctuation">]</span>
   <span class="token punctuation">[</span>Dynamic <span class="token function">Announcement</span> <span class="token punctuation">(</span><span class="token number">0x0506</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
   <span class="token punctuation">[</span>Typed <span class="token function">Wildcard</span> <span class="token punctuation">(</span><span class="token number">0x050B</span><span class="token punctuation">)</span><span class="token punctuation">]</span></code></pre>
<ul>
<li>注意到邻居对等体的保持时间仍然为180秒，Keep Alive Interval仍然是60秒；其原因在于，和LDP Discovery计时器取较小值相同，LDP TCP会话计时器也取较小值；</li>
<li>由于刚刚修改LDP 会话保持时间为300秒，此值大于默认的180秒；</li>
</ul>
<p>修改R2的LDP TCP会话保持时间改为900秒：</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token function">R2</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>#mpls ldp holdtime <span class="token number">900</span>
<span class="token operator">%</span>Previously established sessions may not use the new holdtime<span class="token punctuation">.</span>

<span class="token function">R2</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>#<span class="token keyword">do</span> clear mpls ldp neighbor <span class="token operator">*</span></code></pre>

<p>可以看到R2本地的LDP TCP会话保持时间已经被设置为900秒，KA Interval自动被设置为300秒：</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token function">R2</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>#<span class="token keyword">do</span> show mpls ldp parameters
LDP Feature Set Manager<span class="token operator">:</span> State Initialized
 LDP features<span class="token operator">:</span>
 Basic
 IP<span class="token operator">-</span>over<span class="token operator">-</span>MPLS
 TDP
 IGP<span class="token operator">-</span>Sync
 Auto<span class="token operator">-</span>Configuration
 TCP<span class="token operator">-</span>MD5<span class="token operator">-</span>Rollover
Protocol version<span class="token operator">:</span> <span class="token number">1</span>
Session hold time<span class="token operator">:</span> <span class="token number">900</span> sec<span class="token punctuation">;</span> keep alive interval<span class="token operator">:</span> <span class="token number">300</span> sec
Discovery hello<span class="token operator">:</span> holdtime<span class="token operator">:</span> <span class="token number">15</span> sec<span class="token punctuation">;</span> interval<span class="token operator">:</span> <span class="token number">5</span> sec
Discovery targeted hello<span class="token operator">:</span> holdtime<span class="token operator">:</span> <span class="token number">90</span> sec<span class="token punctuation">;</span> interval<span class="token operator">:</span> <span class="token number">10</span> sec
Downstream on Demand max hop count<span class="token operator">:</span> <span class="token number">255</span>
LDP <span class="token keyword">for</span> targeted sessions
LDP initial<span class="token operator">/</span>maximum backoff<span class="token operator">:</span> <span class="token number">15</span><span class="token operator">/</span><span class="token number">120</span> sec
LDP loop detection<span class="token operator">:</span> off</code></pre>
<p>回到R1上查看LDP 邻居对等体R2实际使用的LDP会话保持时间：</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>#<span class="token keyword">do</span> sh mpls ldp neighbor <span class="token number">2.2</span><span class="token number">.2</span><span class="token number">.2</span> detail
 Peer LDP Ident<span class="token operator">:</span> <span class="token number">2.2</span><span class="token number">.2</span><span class="token number">.2</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">;</span> Local LDP Ident <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">0</span>
  TCP connection<span class="token operator">:</span> <span class="token number">2.2</span><span class="token number">.2</span><span class="token number">.2</span><span class="token number">.37641</span> <span class="token operator">-</span> <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span><span class="token number">.646</span>
  Password<span class="token operator">:</span> not required<span class="token punctuation">,</span> none<span class="token punctuation">,</span> in use
  State<span class="token operator">:</span> Oper<span class="token punctuation">;</span> Msgs sent<span class="token operator">/</span>rcvd<span class="token operator">:</span> <span class="token number">12</span><span class="token operator">/</span><span class="token number">12</span><span class="token punctuation">;</span> Downstream<span class="token punctuation">;</span> Last TIB rev sent <span class="token number">16</span>
  Up time<span class="token operator">:</span> <span class="token number">00</span><span class="token operator">:</span><span class="token number">02</span><span class="token operator">:</span><span class="token number">58</span><span class="token punctuation">;</span> UID<span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">;</span> Peer Id <span class="token number">0</span><span class="token punctuation">;</span>
  LDP discovery sources<span class="token operator">:</span>
   FastEthernet0<span class="token operator">/</span><span class="token number">0</span><span class="token punctuation">;</span> Src IP addr<span class="token operator">:</span> <span class="token number">192.168</span><span class="token number">.12</span><span class="token number">.2</span> 
   holdtime<span class="token operator">:</span> <span class="token number">15000</span> ms<span class="token punctuation">,</span> hello interval<span class="token operator">:</span> <span class="token number">5000</span> ms
  Addresses bound to peer LDP Ident<span class="token operator">:</span>
   <span class="token number">192.168</span><span class="token number">.12</span><span class="token number">.2</span>    <span class="token number">192.168</span><span class="token number">.23</span><span class="token number">.2</span>    <span class="token number">2.2</span><span class="token number">.2</span><span class="token number">.2</span>         
  Peer holdtime<span class="token operator">:</span> <span class="token number">300000</span> ms<span class="token punctuation">;</span> KA interval<span class="token operator">:</span> <span class="token number">100000</span> ms<span class="token punctuation">;</span> Peer state<span class="token operator">:</span> estab
  Capabilities Sent<span class="token operator">:</span>
   <span class="token punctuation">[</span><span class="token function">ICCP</span> <span class="token punctuation">(</span>type <span class="token number">0x0405</span><span class="token punctuation">)</span> MajVer <span class="token number">1</span> MinVer <span class="token number">0</span><span class="token punctuation">]</span>
   <span class="token punctuation">[</span>Dynamic <span class="token function">Announcement</span> <span class="token punctuation">(</span><span class="token number">0x0506</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
   <span class="token punctuation">[</span>Typed <span class="token function">Wildcard</span> <span class="token punctuation">(</span><span class="token number">0x050B</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
  Capabilities Received<span class="token operator">:</span>
   <span class="token punctuation">[</span><span class="token function">ICCP</span> <span class="token punctuation">(</span>type <span class="token number">0x0405</span><span class="token punctuation">)</span> MajVer <span class="token number">1</span> MinVer <span class="token number">0</span><span class="token punctuation">]</span>
   <span class="token punctuation">[</span>Dynamic <span class="token function">Announcement</span> <span class="token punctuation">(</span><span class="token number">0x0506</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
   <span class="token punctuation">[</span>Typed <span class="token function">Wildcard</span> <span class="token punctuation">(</span><span class="token number">0x050B</span><span class="token punctuation">)</span><span class="token punctuation">]</span></code></pre>
<ul>
<li>可以看到虽然R2本地的LDP 会话保持时间已经被设置为900秒，但是在与R1协商后，由于R1的LDP会话保持时间300秒小于R2的900秒，所以R2使用300秒作为LDP会话保持时间；<blockquote>
<p><strong>注意，LDP邻居计时器可以不一致，当两台LDP邻居对等体在交换参数的时候，取较小的计时器值，Discovery计时器如此，LDP TCP会话保持时间亦如此，基于目标的LDP邻居会话同样如此；</strong></p>
</blockquote>
</li>
</ul>
<h2 id="实验4：LDP认证：在R1和R2之间配置LDP身份认证"><a href="#实验4：LDP认证：在R1和R2之间配置LDP身份认证" class="headerlink" title="实验4：LDP认证：在R1和R2之间配置LDP身份认证"></a>实验4：LDP认证：在R1和R2之间配置LDP身份认证</h2><p>为避免等待验证实验现象时间较长，修改LDP 会话保持时间为15秒：</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>#mpls ldp holdtime <span class="token number">15</span></code></pre>

<p>在R1上针对邻居2.2.2.2启用LDP认证：</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>#mpls ldp neighbor <span class="token number">2.2</span><span class="token number">.2</span><span class="token number">.2</span> password cisco</code></pre>

<p><strong>注意：实验中，发现如果不重置LDP邻居对等体关系，LDP身份认证配置无法生效；</strong></p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>#<span class="token keyword">do</span> clear mpls ldp nei <span class="token number">2.2</span><span class="token number">.2</span><span class="token number">.2</span>  
<span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>#
<span class="token operator">*</span>Mar <span class="token number">13</span> <span class="token number">21</span><span class="token operator">:</span><span class="token number">36</span><span class="token operator">:</span><span class="token number">40.426</span><span class="token operator">:</span> <span class="token operator">%</span>LDP<span class="token operator">-</span><span class="token number">5</span><span class="token operator">-</span>CLEAR_NBRS<span class="token operator">:</span> Clear LDP <span class="token function">neighbors</span> <span class="token punctuation">(</span><span class="token number">2.2</span><span class="token number">.2</span><span class="token number">.2</span><span class="token punctuation">)</span> by console
<span class="token operator">*</span>Mar <span class="token number">13</span> <span class="token number">21</span><span class="token operator">:</span><span class="token number">36</span><span class="token operator">:</span><span class="token number">40.466</span><span class="token operator">:</span> <span class="token operator">%</span>LDP<span class="token operator">-</span><span class="token number">5</span><span class="token operator">-</span>NBRCHG<span class="token operator">:</span> LDP Neighbor <span class="token number">2.2</span><span class="token number">.2</span><span class="token number">.2</span><span class="token operator">:</span><span class="token number">0</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> is <span class="token function">DOWN</span> <span class="token punctuation">(</span>User cleared session manually<span class="token punctuation">)</span>
<span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>#
<span class="token operator">*</span>Mar <span class="token number">13</span> <span class="token number">21</span><span class="token operator">:</span><span class="token number">36</span><span class="token operator">:</span><span class="token number">42.822</span><span class="token operator">:</span> <span class="token operator">%</span>TCP<span class="token operator">-</span><span class="token number">6</span><span class="token operator">-</span>BADAUTH<span class="token operator">:</span> No MD5 digest from <span class="token number">2.2</span><span class="token number">.2</span><span class="token number">.2</span><span class="token punctuation">(</span><span class="token number">11164</span><span class="token punctuation">)</span> to <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span><span class="token punctuation">(</span><span class="token number">646</span><span class="token punctuation">)</span></code></pre>

<p>由于R2还未配置LDP认证，重置LDP邻居关系后，出现TCP认证报错日志，没有MD5摘要来自2.2.2.2：</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token comment">//在R2上针对邻居1.1.1.1启用LDP认证；</span>
<span class="token function">R2</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>#mpls ldp neighbor <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span> password cisco    
<span class="token comment">//注意：实验中，发现如果不重置LDP邻居对等体关系，LDP身份认证配置无法生效；</span>
<span class="token function">R2</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>#<span class="token keyword">do</span> clear mpls ldp nei <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span></code></pre>

<h2 id="实验5：基于目标的LDP会话"><a href="#实验5：基于目标的LDP会话" class="headerlink" title="实验5：基于目标的LDP会话"></a>实验5：基于目标的LDP会话</h2><p>配置R1与R4建立基于目标的远程LDP会话</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token comment">//在R1上指定远程LDP邻居；</span>
 <span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>#mpls ldp neighbor <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span> targeted
 <span class="token comment">//注意，如果一台LSR只配置命令mpls ldp neighbor ip-address targeted，则这台LSR为远程LDP会话的主动发起方；</span>

<span class="token comment">//设置的基于目标的LDP邻居会话Discovery Hello Interval和Holdtime；</span>
 <span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>#mpls ldp discovery targeted<span class="token operator">-</span>hello interval <span class="token number">10</span>
 <span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>#mpls ldp discovery targeted<span class="token operator">-</span>hello holdtime <span class="token number">30</span>

<span class="token comment">//配置R1只允许R4与自己建立远程LDP邻居，通过配置R1只接受R4发送给自己的Discovery Hello消息来实现；</span>
 <span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>#mpls ldp discovery targeted<span class="token operator">-</span>hello accept from <span class="token number">1</span>
 <span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>#access<span class="token operator">-</span>list <span class="token number">1</span> permit host <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span>
 <span class="token comment">//注意，如果一台LSR只配置命令mpls ldp discovery targeted-hello accept from，则这台LSR为远程LDP会话的被动接受方；</span>
 <span class="token comment">//注意：当一台LSR只配置此命令，并不是说这台LSR只能接收主动发起方通告来的标签绑定信息，</span>
 <span class="token comment">//即使，一台LSR只配置了此命令，当其与远程LDP会话主动发起方建立LDP远程会话之后，</span>
 <span class="token comment">//被动接受方LSR也会向主动发起方LSR通告自己的入标签；</span></code></pre>

<p>在R4上指定远程LDP邻居；</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>#mpls ldp neighbor <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span> targeted

<span class="token comment">//配置R4只允许R1与自己建立远程LDP邻居，通过配置R4只接受R1发送给自己的Discovery Hello消息来实现；</span>
<span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>#mpls ldp discovery targeted<span class="token operator">-</span>hello accept from <span class="token number">1</span>
<span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>#access<span class="token operator">-</span>list <span class="token number">1</span> permit host <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span>

<span class="token comment">//注意：如果一台LSR同时配置了命令mpls ldp discovery targeted-hello accept from和命令mpls ldp neighbor ip-address targeted，</span>
<span class="token comment">//则这台路由器既是远程基于目标LDP会话的主动发起方，同时也是被动接受方；</span></code></pre>

<p>验证R1基于目标LDP会话计时器配置</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>#<span class="token keyword">do</span> sh mpls ldp parameters               
LDP Feature Set Manager<span class="token operator">:</span> State Initialized
 LDP features<span class="token operator">:</span>
 Basic
 IP<span class="token operator">-</span>over<span class="token operator">-</span>MPLS
 TDP
 IGP<span class="token operator">-</span>Sync
 Auto<span class="token operator">-</span>Configuration
 TCP<span class="token operator">-</span>MD5<span class="token operator">-</span>Rollover
Protocol version<span class="token operator">:</span> <span class="token number">1</span>
Session hold time<span class="token operator">:</span> <span class="token number">15</span> sec<span class="token punctuation">;</span> keep alive interval<span class="token operator">:</span> <span class="token number">5</span> sec
Discovery hello<span class="token operator">:</span> holdtime<span class="token operator">:</span> <span class="token number">30</span> sec<span class="token punctuation">;</span> interval<span class="token operator">:</span> <span class="token number">10</span> sec
Discovery targeted hello<span class="token operator">:</span> holdtime<span class="token operator">:</span> <span class="token number">30</span> sec<span class="token punctuation">;</span> interval<span class="token operator">:</span> <span class="token number">10</span> sec
Accepting targeted hellos<span class="token punctuation">;</span> peer acl<span class="token operator">:</span> <span class="token number">1</span>
Downstream on Demand max hop count<span class="token operator">:</span> <span class="token number">255</span>
LDP <span class="token keyword">for</span> targeted sessions
LDP initial<span class="token operator">/</span>maximum backoff<span class="token operator">:</span> <span class="token number">15</span><span class="token operator">/</span><span class="token number">120</span> sec
LDP loop detection<span class="token operator">:</span> off
<span class="token comment">//可以看到R1本地基于目标的LDP会话Discovery Hello Interval为10秒，Holdtime为30秒；</span>
<span class="token comment">//R1接受基于目标的Hello消息，并且基于ACL1来进行远程邻居对等体过滤；</span></code></pre>

<p>在R1上查看MPLS LDP邻居R4的信息；</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>#<span class="token keyword">do</span> show mpls ldp neighbor <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span> detail
 Peer LDP Ident<span class="token operator">:</span> <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">;</span> Local LDP Ident <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">0</span>
  TCP connection<span class="token operator">:</span> <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span><span class="token number">.61631</span> <span class="token operator">-</span> <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span><span class="token number">.646</span>
  Password<span class="token operator">:</span> not required<span class="token punctuation">,</span> none<span class="token punctuation">,</span> in use
  State<span class="token operator">:</span> Oper<span class="token punctuation">;</span> Msgs sent<span class="token operator">/</span>rcvd<span class="token operator">:</span> <span class="token number">75</span><span class="token operator">/</span><span class="token number">75</span><span class="token punctuation">;</span> Downstream<span class="token punctuation">;</span> Last TIB rev sent <span class="token number">17</span>
  Up time<span class="token operator">:</span> <span class="token number">00</span><span class="token operator">:</span><span class="token number">04</span><span class="token operator">:</span><span class="token number">44</span><span class="token punctuation">;</span> UID<span class="token operator">:</span> <span class="token number">8</span><span class="token punctuation">;</span> Peer Id <span class="token number">2</span><span class="token punctuation">;</span>
  LDP discovery sources<span class="token operator">:</span>
   Targeted Hello <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span> <span class="token operator">-></span> <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span><span class="token punctuation">,</span> active<span class="token punctuation">,</span> passive<span class="token punctuation">;</span><span class="token comment">//R1与R4已建立远程LDP会话；关键字active和passive表示R1是远程会话的主动发起方和被动接受方；</span>
   holdtime<span class="token operator">:</span> infinite<span class="token punctuation">,</span> hello interval<span class="token operator">:</span> <span class="token number">3333</span> ms
  Addresses bound to peer LDP Ident<span class="token operator">:</span>
   <span class="token number">192.168</span><span class="token number">.34</span><span class="token number">.4</span>    <span class="token number">192.168</span><span class="token number">.47</span><span class="token number">.4</span>    <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span>         
  Peer holdtime<span class="token operator">:</span> <span class="token number">15000</span> ms<span class="token punctuation">;</span> KA interval<span class="token operator">:</span> <span class="token number">5000</span> ms<span class="token punctuation">;</span> Peer state<span class="token operator">:</span> estab
  Clients<span class="token operator">:</span> Dir Adj Client
  Capabilities Sent<span class="token operator">:</span>
   <span class="token punctuation">[</span><span class="token function">ICCP</span> <span class="token punctuation">(</span>type <span class="token number">0x0405</span><span class="token punctuation">)</span> MajVer <span class="token number">1</span> MinVer <span class="token number">0</span><span class="token punctuation">]</span>
   <span class="token punctuation">[</span>Dynamic <span class="token function">Announcement</span> <span class="token punctuation">(</span><span class="token number">0x0506</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
   <span class="token punctuation">[</span>Typed <span class="token function">Wildcard</span> <span class="token punctuation">(</span><span class="token number">0x050B</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
  Capabilities Received<span class="token operator">:</span>
   <span class="token punctuation">[</span><span class="token function">ICCP</span> <span class="token punctuation">(</span>type <span class="token number">0x0405</span><span class="token punctuation">)</span> MajVer <span class="token number">1</span> MinVer <span class="token number">0</span><span class="token punctuation">]</span>
   <span class="token punctuation">[</span>Dynamic <span class="token function">Announcement</span> <span class="token punctuation">(</span><span class="token number">0x0506</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
   <span class="token punctuation">[</span>Typed <span class="token function">Wildcard</span> <span class="token punctuation">(</span><span class="token number">0x050B</span><span class="token punctuation">)</span><span class="token punctuation">]</span></code></pre>

<p>在R4上查看MPLS LDP邻居R1的信息；</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>#<span class="token keyword">do</span> show mpls ldp neighbor <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span> detail
 Peer LDP Ident<span class="token operator">:</span> <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">;</span> Local LDP Ident <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span><span class="token operator">:</span><span class="token number">0</span>
  TCP connection<span class="token operator">:</span> <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span><span class="token number">.646</span> <span class="token operator">-</span> <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span><span class="token number">.61631</span>
  Password<span class="token operator">:</span> not required<span class="token punctuation">,</span> none<span class="token punctuation">,</span> in use
  State<span class="token operator">:</span> Oper<span class="token punctuation">;</span> Msgs sent<span class="token operator">/</span>rcvd<span class="token operator">:</span> <span class="token number">86</span><span class="token operator">/</span><span class="token number">85</span><span class="token punctuation">;</span> Downstream<span class="token punctuation">;</span> Last TIB rev sent <span class="token number">17</span>
  Up time<span class="token operator">:</span> <span class="token number">00</span><span class="token operator">:</span><span class="token number">05</span><span class="token operator">:</span><span class="token number">31</span><span class="token punctuation">;</span> UID<span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">;</span> Peer Id <span class="token number">2</span><span class="token punctuation">;</span>
  LDP discovery sources<span class="token operator">:</span>
   Targeted Hello <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span> <span class="token operator">-></span> <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span><span class="token punctuation">,</span> active<span class="token punctuation">,</span> passive<span class="token punctuation">;</span><span class="token comment">//R1与R4已建立远程LDP会话；关键字active和passive表示R1是远程会话的主动发起方和被动接受方；</span>
   holdtime<span class="token operator">:</span> infinite<span class="token punctuation">,</span> hello interval<span class="token operator">:</span> <span class="token number">3333</span> ms
  Addresses bound to peer LDP Ident<span class="token operator">:</span>
   <span class="token number">192.168</span><span class="token number">.12</span><span class="token number">.1</span>    <span class="token number">192.168</span><span class="token number">.15</span><span class="token number">.1</span>    <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span>         
  Peer holdtime<span class="token operator">:</span> <span class="token number">15000</span> ms<span class="token punctuation">;</span> KA interval<span class="token operator">:</span> <span class="token number">5000</span> ms<span class="token punctuation">;</span> Peer state<span class="token operator">:</span> estab
  Clients<span class="token operator">:</span> Dir Adj Client
  Capabilities Sent<span class="token operator">:</span>
   <span class="token punctuation">[</span><span class="token function">ICCP</span> <span class="token punctuation">(</span>type <span class="token number">0x0405</span><span class="token punctuation">)</span> MajVer <span class="token number">1</span> MinVer <span class="token number">0</span><span class="token punctuation">]</span>
   <span class="token punctuation">[</span>Dynamic <span class="token function">Announcement</span> <span class="token punctuation">(</span><span class="token number">0x0506</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
   <span class="token punctuation">[</span>Typed <span class="token function">Wildcard</span> <span class="token punctuation">(</span><span class="token number">0x050B</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
  Capabilities Received<span class="token operator">:</span>
   <span class="token punctuation">[</span><span class="token function">ICCP</span> <span class="token punctuation">(</span>type <span class="token number">0x0405</span><span class="token punctuation">)</span> MajVer <span class="token number">1</span> MinVer <span class="token number">0</span><span class="token punctuation">]</span>
   <span class="token punctuation">[</span>Dynamic <span class="token function">Announcement</span> <span class="token punctuation">(</span><span class="token number">0x0506</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
   <span class="token punctuation">[</span>Typed <span class="token function">Wildcard</span> <span class="token punctuation">(</span><span class="token number">0x050B</span><span class="token punctuation">)</span><span class="token punctuation">]</span></code></pre>


<h2 id="实验6：控制LDP标签通告；"><a href="#实验6：控制LDP标签通告；" class="headerlink" title="实验6：控制LDP标签通告；"></a>实验6：控制LDP标签通告；</h2><p>配置MPLS LDP来向特定的LDP对等体通告或者不通告特定的标签；</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token comment">//在R4上查看LIB;</span>
R4#show mpls ldp bindings
 lib entry<span class="token operator">:</span> <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span><span class="token operator">/</span><span class="token number">32</span><span class="token punctuation">,</span> rev <span class="token number">14</span>
  local binding<span class="token operator">:</span>  label<span class="token operator">:</span> <span class="token number">19</span>
  remote binding<span class="token operator">:</span> lsr<span class="token operator">:</span> <span class="token number">3.3</span><span class="token number">.3</span><span class="token number">.3</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span> label<span class="token operator">:</span> <span class="token number">18</span>
  remote binding<span class="token operator">:</span> lsr<span class="token operator">:</span> <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span> label<span class="token operator">:</span> imp<span class="token operator">-</span>null
 lib entry<span class="token operator">:</span> <span class="token number">2.2</span><span class="token number">.2</span><span class="token number">.2</span><span class="token operator">/</span><span class="token number">32</span><span class="token punctuation">,</span> rev <span class="token number">12</span>
  local binding<span class="token operator">:</span>  label<span class="token operator">:</span> <span class="token number">18</span>
  remote binding<span class="token operator">:</span> lsr<span class="token operator">:</span> <span class="token number">3.3</span><span class="token number">.3</span><span class="token number">.3</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span> label<span class="token operator">:</span> <span class="token number">17</span>
  remote binding<span class="token operator">:</span> lsr<span class="token operator">:</span> <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span> label<span class="token operator">:</span> <span class="token number">16</span>
 lib entry<span class="token operator">:</span> <span class="token number">3.3</span><span class="token number">.3</span><span class="token number">.3</span><span class="token operator">/</span><span class="token number">32</span><span class="token punctuation">,</span> rev <span class="token number">8</span>
  local binding<span class="token operator">:</span>  label<span class="token operator">:</span> <span class="token number">16</span>
  remote binding<span class="token operator">:</span> lsr<span class="token operator">:</span> <span class="token number">3.3</span><span class="token number">.3</span><span class="token number">.3</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span> label<span class="token operator">:</span> imp<span class="token operator">-</span>null
  remote binding<span class="token operator">:</span> lsr<span class="token operator">:</span> <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span> label<span class="token operator">:</span> <span class="token number">19</span>
 lib entry<span class="token operator">:</span> <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span><span class="token operator">/</span><span class="token number">32</span><span class="token punctuation">,</span> rev <span class="token number">2</span>
  local binding<span class="token operator">:</span>  label<span class="token operator">:</span> imp<span class="token operator">-</span>null
  remote binding<span class="token operator">:</span> lsr<span class="token operator">:</span> <span class="token number">3.3</span><span class="token number">.3</span><span class="token number">.3</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span> label<span class="token operator">:</span> <span class="token number">16</span>
  remote binding<span class="token operator">:</span> lsr<span class="token operator">:</span> <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span> label<span class="token operator">:</span> <span class="token number">18</span>
 lib entry<span class="token operator">:</span> <span class="token number">192.168</span><span class="token number">.12</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span><span class="token punctuation">,</span> rev <span class="token number">16</span>
  local binding<span class="token operator">:</span>  label<span class="token operator">:</span> <span class="token number">20</span>
  remote binding<span class="token operator">:</span> lsr<span class="token operator">:</span> <span class="token number">3.3</span><span class="token number">.3</span><span class="token number">.3</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span> label<span class="token operator">:</span> <span class="token number">19</span>
  remote binding<span class="token operator">:</span> lsr<span class="token operator">:</span> <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span> label<span class="token operator">:</span> imp<span class="token operator">-</span>null
 lib entry<span class="token operator">:</span> <span class="token number">192.168</span><span class="token number">.15</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span><span class="token punctuation">,</span> rev <span class="token number">17</span>
  remote binding<span class="token operator">:</span> lsr<span class="token operator">:</span> <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span> label<span class="token operator">:</span> imp<span class="token operator">-</span>null
 lib entry<span class="token operator">:</span> <span class="token number">192.168</span><span class="token number">.23</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span><span class="token punctuation">,</span> rev <span class="token number">10</span>
  local binding<span class="token operator">:</span>  label<span class="token operator">:</span> <span class="token number">17</span>
  remote binding<span class="token operator">:</span> lsr<span class="token operator">:</span> <span class="token number">3.3</span><span class="token number">.3</span><span class="token number">.3</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span> label<span class="token operator">:</span> imp<span class="token operator">-</span>null
  remote binding<span class="token operator">:</span> lsr<span class="token operator">:</span> <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span> label<span class="token operator">:</span> <span class="token number">17</span>
 lib entry<span class="token operator">:</span> <span class="token number">192.168</span><span class="token number">.34</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span><span class="token punctuation">,</span> rev <span class="token number">6</span>
  local binding<span class="token operator">:</span>  label<span class="token operator">:</span> imp<span class="token operator">-</span>null
  remote binding<span class="token operator">:</span> lsr<span class="token operator">:</span> <span class="token number">3.3</span><span class="token number">.3</span><span class="token number">.3</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span> label<span class="token operator">:</span> imp<span class="token operator">-</span>null
  remote binding<span class="token operator">:</span> lsr<span class="token operator">:</span> <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span> label<span class="token operator">:</span> <span class="token number">20</span>
 lib entry<span class="token operator">:</span> <span class="token number">192.168</span><span class="token number">.47</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span><span class="token punctuation">,</span> rev <span class="token number">4</span>
  local binding<span class="token operator">:</span>  label<span class="token operator">:</span> imp<span class="token operator">-</span>null

R4#show mpls ip binding
 <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span><span class="token operator">/</span><span class="token number">32</span> 
  in label<span class="token operator">:</span>     <span class="token number">19</span>        
  out label<span class="token operator">:</span>    <span class="token number">18</span>        lsr<span class="token operator">:</span> <span class="token number">3.3</span><span class="token number">.3</span><span class="token number">.3</span><span class="token operator">:</span><span class="token number">0</span>        inuse
  out label<span class="token operator">:</span>    imp<span class="token operator">-</span>null  lsr<span class="token operator">:</span> <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">0</span>       
 <span class="token number">2.2</span><span class="token number">.2</span><span class="token number">.2</span><span class="token operator">/</span><span class="token number">32</span> 
  in label<span class="token operator">:</span>     <span class="token number">18</span>        
  out label<span class="token operator">:</span>    <span class="token number">17</span>        lsr<span class="token operator">:</span> <span class="token number">3.3</span><span class="token number">.3</span><span class="token number">.3</span><span class="token operator">:</span><span class="token number">0</span>        inuse
  out label<span class="token operator">:</span>    <span class="token number">16</span>        lsr<span class="token operator">:</span> <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">0</span>       
 <span class="token number">3.3</span><span class="token number">.3</span><span class="token number">.3</span><span class="token operator">/</span><span class="token number">32</span> 
  in label<span class="token operator">:</span>     <span class="token number">16</span>        
  out label<span class="token operator">:</span>    imp<span class="token operator">-</span>null  lsr<span class="token operator">:</span> <span class="token number">3.3</span><span class="token number">.3</span><span class="token number">.3</span><span class="token operator">:</span><span class="token number">0</span>        inuse
  out label<span class="token operator">:</span>    <span class="token number">19</span>        lsr<span class="token operator">:</span> <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">0</span>       
 <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span><span class="token operator">/</span><span class="token number">32</span> 
  in label<span class="token operator">:</span>     imp<span class="token operator">-</span>null  
  out label<span class="token operator">:</span>    <span class="token number">16</span>        lsr<span class="token operator">:</span> <span class="token number">3.3</span><span class="token number">.3</span><span class="token number">.3</span><span class="token operator">:</span><span class="token number">0</span>       
  out label<span class="token operator">:</span>    <span class="token number">18</span>        lsr<span class="token operator">:</span> <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">0</span>       
 <span class="token number">192.168</span><span class="token number">.12</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span> 
  in label<span class="token operator">:</span>     <span class="token number">20</span>        
  out label<span class="token operator">:</span>    <span class="token number">19</span>        lsr<span class="token operator">:</span> <span class="token number">3.3</span><span class="token number">.3</span><span class="token number">.3</span><span class="token operator">:</span><span class="token number">0</span>        inuse
  out label<span class="token operator">:</span>    imp<span class="token operator">-</span>null  lsr<span class="token operator">:</span> <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">0</span>       
 <span class="token number">192.168</span><span class="token number">.15</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span> 
  out label<span class="token operator">:</span>    imp<span class="token operator">-</span>null  lsr<span class="token operator">:</span> <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">0</span>       
 <span class="token number">192.168</span><span class="token number">.23</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span> 
  in label<span class="token operator">:</span>     <span class="token number">17</span>        
  out label<span class="token operator">:</span>    imp<span class="token operator">-</span>null  lsr<span class="token operator">:</span> <span class="token number">3.3</span><span class="token number">.3</span><span class="token number">.3</span><span class="token operator">:</span><span class="token number">0</span>        inuse
  out label<span class="token operator">:</span>    <span class="token number">17</span>        lsr<span class="token operator">:</span> <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">0</span>       
 <span class="token number">192.168</span><span class="token number">.34</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span> 
  in label<span class="token operator">:</span>     imp<span class="token operator">-</span>null  
  out label<span class="token operator">:</span>    imp<span class="token operator">-</span>null  lsr<span class="token operator">:</span> <span class="token number">3.3</span><span class="token number">.3</span><span class="token number">.3</span><span class="token operator">:</span><span class="token number">0</span>       
  out label<span class="token operator">:</span>    <span class="token number">20</span>        lsr<span class="token operator">:</span> <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">0</span>       
 <span class="token number">192.168</span><span class="token number">.47</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span> 
  in label<span class="token operator">:</span>     imp<span class="token operator">-</span>null</code></pre>


<p><strong>在R3上进行配置，让R3只将与环回口的前缀相绑定的标签通告给R4；</strong></p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token comment">//配置ACL以确定准许通告的特定前缀；</span>
<span class="token function">R3</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>#ip access<span class="token operator">-</span>list standard PERMIT_LOOPBACK 
<span class="token function">R3</span><span class="token punctuation">(</span>config<span class="token operator">-</span>std<span class="token operator">-</span>nacl<span class="token punctuation">)</span>#permit
<span class="token function">R3</span><span class="token punctuation">(</span>config<span class="token operator">-</span>std<span class="token operator">-</span>nacl<span class="token punctuation">)</span>#permit host <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span>
<span class="token function">R3</span><span class="token punctuation">(</span>config<span class="token operator">-</span>std<span class="token operator">-</span>nacl<span class="token punctuation">)</span>#permit host <span class="token number">2.2</span><span class="token number">.2</span><span class="token number">.2</span>
<span class="token function">R3</span><span class="token punctuation">(</span>config<span class="token operator">-</span>std<span class="token operator">-</span>nacl<span class="token punctuation">)</span>#permit host <span class="token number">3.3</span><span class="token number">.3</span><span class="token number">.3</span> 
<span class="token function">R3</span><span class="token punctuation">(</span>config<span class="token operator">-</span>std<span class="token operator">-</span>nacl<span class="token punctuation">)</span>#exit

<span class="token comment">//配置ACL以确定特定的LDP对等体可以接收标签绑定信息；</span>
<span class="token function">R3</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>#ip access<span class="token operator">-</span>list standard PEER_R4
<span class="token function">R3</span><span class="token punctuation">(</span>config<span class="token operator">-</span>std<span class="token operator">-</span>nacl<span class="token punctuation">)</span>#permit host <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span> 
<span class="token function">R3</span><span class="token punctuation">(</span>config<span class="token operator">-</span>std<span class="token operator">-</span>nacl<span class="token punctuation">)</span>#exit

<span class="token comment">//配置LDP不向外通告任何标签；</span>
<span class="token function">R3</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>#no mpls ldp advertise<span class="token operator">-</span>labels

<span class="token comment">//配置LDP向对等体PEER_R4通告前缀PERMIT_LOOPBACK的标签绑定信息；</span>
<span class="token function">R3</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>#mpls ldp advertise<span class="token operator">-</span>labels <span class="token keyword">for</span> PERMIT_LOOPBACK to PEER_R4

<span class="token comment">//查看R3的标签通告信息；</span>
<span class="token function">R3</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>#<span class="token keyword">do</span> show mpls ldp bindings advertisement<span class="token operator">-</span>acls
Advertisement spec<span class="token operator">:</span>
 Prefix acl <span class="token operator">=</span> PERMIT_LOOPBACK<span class="token punctuation">;</span> Peer acl <span class="token operator">=</span> PEER_R4

lib entry<span class="token operator">:</span> <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span><span class="token operator">/</span><span class="token number">32</span><span class="token punctuation">,</span> rev <span class="token number">22</span>
 Advert <span class="token function">acl</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token operator">:</span> Prefix acl PERMIT_LOOPBACK<span class="token punctuation">;</span> Peer acl PEER_R4
lib entry<span class="token operator">:</span> <span class="token number">2.2</span><span class="token number">.2</span><span class="token number">.2</span><span class="token operator">/</span><span class="token number">32</span><span class="token punctuation">,</span> rev <span class="token number">23</span>
 Advert <span class="token function">acl</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token operator">:</span> Prefix acl PERMIT_LOOPBACK<span class="token punctuation">;</span> Peer acl PEER_R4
lib entry<span class="token operator">:</span> <span class="token number">3.3</span><span class="token number">.3</span><span class="token number">.3</span><span class="token operator">/</span><span class="token number">32</span><span class="token punctuation">,</span> rev <span class="token number">24</span>
 Advert <span class="token function">acl</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token operator">:</span> Prefix acl PERMIT_LOOPBACK<span class="token punctuation">;</span> Peer acl PEER_R4
lib entry<span class="token operator">:</span> <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span><span class="token operator">/</span><span class="token number">32</span><span class="token punctuation">,</span> rev <span class="token number">25</span>
lib entry<span class="token operator">:</span> <span class="token number">192.168</span><span class="token number">.12</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span><span class="token punctuation">,</span> rev <span class="token number">26</span>
lib entry<span class="token operator">:</span> <span class="token number">192.168</span><span class="token number">.23</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span><span class="token punctuation">,</span> rev <span class="token number">27</span>
lib entry<span class="token operator">:</span> <span class="token number">192.168</span><span class="token number">.34</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span><span class="token punctuation">,</span> rev <span class="token number">28</span>
lib entry<span class="token operator">:</span> <span class="token number">192.168</span><span class="token number">.47</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span><span class="token punctuation">,</span> rev <span class="token number">29</span>
<span class="token comment">//可以看到R3基于ACL PERMIT_LOOPBACK来确定需要通告的与特定前缀相绑定的标签和可以接收标签绑定信息的LDP对等体PEER_R4；</span></code></pre>

<p>在R4上查看来自LDP对等体的标签绑定信息；</p>
<pre class="language-c" data-language="c"><code class="language-c">R4#show mpls ldp bindings neighbor <span class="token number">3.3</span><span class="token number">.3</span><span class="token number">.3</span> detail
 lib entry<span class="token operator">:</span> <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span><span class="token operator">/</span><span class="token number">32</span><span class="token punctuation">,</span> rev <span class="token number">14</span><span class="token punctuation">,</span> chkpt<span class="token operator">:</span> none
  remote binding<span class="token operator">:</span> lsr<span class="token operator">:</span> <span class="token number">3.3</span><span class="token number">.3</span><span class="token number">.3</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span> label<span class="token operator">:</span> <span class="token number">18</span>
 lib entry<span class="token operator">:</span> <span class="token number">2.2</span><span class="token number">.2</span><span class="token number">.2</span><span class="token operator">/</span><span class="token number">32</span><span class="token punctuation">,</span> rev <span class="token number">12</span><span class="token punctuation">,</span> chkpt<span class="token operator">:</span> none
  remote binding<span class="token operator">:</span> lsr<span class="token operator">:</span> <span class="token number">3.3</span><span class="token number">.3</span><span class="token number">.3</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span> label<span class="token operator">:</span> <span class="token number">17</span>
 lib entry<span class="token operator">:</span> <span class="token number">3.3</span><span class="token number">.3</span><span class="token number">.3</span><span class="token operator">/</span><span class="token number">32</span><span class="token punctuation">,</span> rev <span class="token number">8</span><span class="token punctuation">,</span> chkpt<span class="token operator">:</span> none
  remote binding<span class="token operator">:</span> lsr<span class="token operator">:</span> <span class="token number">3.3</span><span class="token number">.3</span><span class="token number">.3</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span> label<span class="token operator">:</span> imp<span class="token operator">-</span>null
 lib entry<span class="token operator">:</span> <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span><span class="token operator">/</span><span class="token number">32</span><span class="token punctuation">,</span> rev <span class="token number">2</span>
 lib entry<span class="token operator">:</span> <span class="token number">192.168</span><span class="token number">.12</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span><span class="token punctuation">,</span> rev <span class="token number">16</span>
 lib entry<span class="token operator">:</span> <span class="token number">192.168</span><span class="token number">.15</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span><span class="token punctuation">,</span> rev <span class="token number">17</span>
 lib entry<span class="token operator">:</span> <span class="token number">192.168</span><span class="token number">.23</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span><span class="token punctuation">,</span> rev <span class="token number">10</span>
 lib entry<span class="token operator">:</span> <span class="token number">192.168</span><span class="token number">.34</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span><span class="token punctuation">,</span> rev <span class="token number">6</span>
 lib entry<span class="token operator">:</span> <span class="token number">192.168</span><span class="token number">.47</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span><span class="token punctuation">,</span> rev <span class="token number">4</span>
<span class="token comment">//可以看到R4确实只收到了与环回口前缀相绑定的标签；</span>

<span class="token comment">//查看R4的LIB；</span>
R4#show mpls ip binding
 <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span><span class="token operator">/</span><span class="token number">32</span> 
  in label<span class="token operator">:</span>     <span class="token number">19</span>        
  out label<span class="token operator">:</span>    <span class="token number">18</span>        lsr<span class="token operator">:</span> <span class="token number">3.3</span><span class="token number">.3</span><span class="token number">.3</span><span class="token operator">:</span><span class="token number">0</span>        inuse  <span class="token comment">//inuse表示该标签已被放入LFIB表，并用来转发流量；</span>
  out label<span class="token operator">:</span>    imp<span class="token operator">-</span>null  lsr<span class="token operator">:</span> <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">0</span>       
 <span class="token number">2.2</span><span class="token number">.2</span><span class="token number">.2</span><span class="token operator">/</span><span class="token number">32</span> 
  in label<span class="token operator">:</span>     <span class="token number">18</span>        
  out label<span class="token operator">:</span>    <span class="token number">17</span>        lsr<span class="token operator">:</span> <span class="token number">3.3</span><span class="token number">.3</span><span class="token number">.3</span><span class="token operator">:</span><span class="token number">0</span>        inuse
  out label<span class="token operator">:</span>    <span class="token number">16</span>        lsr<span class="token operator">:</span> <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">0</span>       
 <span class="token number">3.3</span><span class="token number">.3</span><span class="token number">.3</span><span class="token operator">/</span><span class="token number">32</span> 
  in label<span class="token operator">:</span>     <span class="token number">16</span>        
  out label<span class="token operator">:</span>    imp<span class="token operator">-</span>null  lsr<span class="token operator">:</span> <span class="token number">3.3</span><span class="token number">.3</span><span class="token number">.3</span><span class="token operator">:</span><span class="token number">0</span>        inuse
  out label<span class="token operator">:</span>    <span class="token number">19</span>        lsr<span class="token operator">:</span> <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">0</span>       
 <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span><span class="token operator">/</span><span class="token number">32</span> 
  in label<span class="token operator">:</span>     imp<span class="token operator">-</span>null  
  out label<span class="token operator">:</span>    <span class="token number">18</span>        lsr<span class="token operator">:</span> <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">0</span>       
 <span class="token number">192.168</span><span class="token number">.12</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span> 
  in label<span class="token operator">:</span>     <span class="token number">20</span>        
  out label<span class="token operator">:</span>    imp<span class="token operator">-</span>null  lsr<span class="token operator">:</span> <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">0</span>       
 <span class="token number">192.168</span><span class="token number">.15</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span> 
  out label<span class="token operator">:</span>    imp<span class="token operator">-</span>null  lsr<span class="token operator">:</span> <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">0</span>       
 <span class="token number">192.168</span><span class="token number">.23</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span> 
  in label<span class="token operator">:</span>     <span class="token number">17</span>        
  out label<span class="token operator">:</span>    <span class="token number">17</span>        lsr<span class="token operator">:</span> <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">0</span>       
 <span class="token number">192.168</span><span class="token number">.34</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span> 
  in label<span class="token operator">:</span>     imp<span class="token operator">-</span>null  
  out label<span class="token operator">:</span>    <span class="token number">20</span>        lsr<span class="token operator">:</span> <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">0</span>       
 <span class="token number">192.168</span><span class="token number">.47</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span> 
  in label<span class="token operator">:</span>     imp<span class="token operator">-</span>null
<span class="token comment">//可以看到虽然R3只向R4通告了环回口前缀的标签绑定信息，</span>
<span class="token comment">//但是由于R4和R1有远程目标对等体关系，所R4还是从R1哪里收到其他前缀的标签；</span>

<span class="token comment">//查看R4的LFIB；</span>
R4#show mpls forwarding<span class="token operator">-</span>table
Local      Outgoing   Prefix           Bytes Label   Outgoing   Next Hop    
Label      Label      or Tunnel Id     Switched      interface              
<span class="token number">16</span>         Pop Label  <span class="token number">3.3</span><span class="token number">.3</span><span class="token number">.3</span><span class="token operator">/</span><span class="token number">32</span>       <span class="token number">0</span>             Fa0<span class="token operator">/</span><span class="token number">0</span>      <span class="token number">192.168</span><span class="token number">.34</span><span class="token number">.3</span>
<span class="token number">17</span>         No Label   <span class="token number">192.168</span><span class="token number">.23</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span>  <span class="token number">0</span>             Fa0<span class="token operator">/</span><span class="token number">0</span>      <span class="token number">192.168</span><span class="token number">.34</span><span class="token number">.3</span>
<span class="token number">18</span>         <span class="token number">17</span>         <span class="token number">2.2</span><span class="token number">.2</span><span class="token number">.2</span><span class="token operator">/</span><span class="token number">32</span>       <span class="token number">0</span>             Fa0<span class="token operator">/</span><span class="token number">0</span>      <span class="token number">192.168</span><span class="token number">.34</span><span class="token number">.3</span>
<span class="token number">19</span>         <span class="token number">18</span>         <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span><span class="token operator">/</span><span class="token number">32</span>       <span class="token number">0</span>             Fa0<span class="token operator">/</span><span class="token number">0</span>      <span class="token number">192.168</span><span class="token number">.34</span><span class="token number">.3</span>
<span class="token number">20</span>         No Label   <span class="token number">192.168</span><span class="token number">.12</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span>  <span class="token number">0</span>             Fa0<span class="token operator">/</span><span class="token number">0</span>      <span class="token number">192.168</span><span class="token number">.34</span><span class="token number">.3</span></code></pre>
<p><strong>配置MPLS LDP，使其有选择地过滤接收到的特定前缀标签绑定信息</strong></p>
<ul>
<li>配置R4仅仅接收R1环回口1.1.1.1&#x2F;32的标签绑定信息；</li>
</ul>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token comment">//配置ACL以确定准许接受的特定前缀；</span>
<span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>#ip access<span class="token operator">-</span>list standard PERMIT_R1_LOOPBACK
<span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token operator">-</span>std<span class="token operator">-</span>nacl<span class="token punctuation">)</span>#permit host <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span>
<span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token operator">-</span>std<span class="token operator">-</span>nacl<span class="token punctuation">)</span>#exit
 
<span class="token comment">//针对LDP邻居R1和R3应用ACL以过滤接收到的特定前缀的绑定信息；</span>
<span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>#mpls ldp neighbor <span class="token number">3.3</span><span class="token number">.3</span><span class="token number">.3</span> labels accept PERMIT_R1_LOOPBACK
<span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>#mpls ldp neighbor <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span> labels accept PERMIT_R1_LOOPBACK
  
<span class="token comment">//查看R4的LIB表，以验证实验配置；</span>
<span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>#<span class="token keyword">do</span> show mpls ldp bindings
 lib entry<span class="token operator">:</span> <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span><span class="token operator">/</span><span class="token number">32</span><span class="token punctuation">,</span> rev <span class="token number">14</span>
  local binding<span class="token operator">:</span>  label<span class="token operator">:</span> <span class="token number">19</span>
  remote binding<span class="token operator">:</span> lsr<span class="token operator">:</span> <span class="token number">3.3</span><span class="token number">.3</span><span class="token number">.3</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span> label<span class="token operator">:</span> <span class="token number">18</span>
  remote binding<span class="token operator">:</span> lsr<span class="token operator">:</span> <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span> label<span class="token operator">:</span> imp<span class="token operator">-</span>null
 lib entry<span class="token operator">:</span> <span class="token number">2.2</span><span class="token number">.2</span><span class="token number">.2</span><span class="token operator">/</span><span class="token number">32</span><span class="token punctuation">,</span> rev <span class="token number">12</span>
  local binding<span class="token operator">:</span>  label<span class="token operator">:</span> <span class="token number">18</span>
 lib entry<span class="token operator">:</span> <span class="token number">3.3</span><span class="token number">.3</span><span class="token number">.3</span><span class="token operator">/</span><span class="token number">32</span><span class="token punctuation">,</span> rev <span class="token number">8</span>
  local binding<span class="token operator">:</span>  label<span class="token operator">:</span> <span class="token number">16</span>
 lib entry<span class="token operator">:</span> <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span><span class="token operator">/</span><span class="token number">32</span><span class="token punctuation">,</span> rev <span class="token number">2</span>
  local binding<span class="token operator">:</span>  label<span class="token operator">:</span> imp<span class="token operator">-</span>null
 lib entry<span class="token operator">:</span> <span class="token number">192.168</span><span class="token number">.12</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span><span class="token punctuation">,</span> rev <span class="token number">16</span>
  local binding<span class="token operator">:</span>  label<span class="token operator">:</span> <span class="token number">20</span>
 lib entry<span class="token operator">:</span> <span class="token number">192.168</span><span class="token number">.23</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span><span class="token punctuation">,</span> rev <span class="token number">10</span>
  local binding<span class="token operator">:</span>  label<span class="token operator">:</span> <span class="token number">17</span>
 lib entry<span class="token operator">:</span> <span class="token number">192.168</span><span class="token number">.34</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span><span class="token punctuation">,</span> rev <span class="token number">6</span>
  local binding<span class="token operator">:</span>  label<span class="token operator">:</span> imp<span class="token operator">-</span>null
 lib entry<span class="token operator">:</span> <span class="token number">192.168</span><span class="token number">.47</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span><span class="token punctuation">,</span> rev <span class="token number">4</span>
  local binding<span class="token operator">:</span>  label<span class="token operator">:</span> imp<span class="token operator">-</span>null

<span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>#<span class="token keyword">do</span> show mpls ip binding
 <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span><span class="token operator">/</span><span class="token number">32</span> 
  in label<span class="token operator">:</span>     <span class="token number">19</span>        
  out label<span class="token operator">:</span>    <span class="token number">18</span>        lsr<span class="token operator">:</span> <span class="token number">3.3</span><span class="token number">.3</span><span class="token number">.3</span><span class="token operator">:</span><span class="token number">0</span>        inuse
  out label<span class="token operator">:</span>    imp<span class="token operator">-</span>null  lsr<span class="token operator">:</span> <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">0</span>       
 <span class="token number">2.2</span><span class="token number">.2</span><span class="token number">.2</span><span class="token operator">/</span><span class="token number">32</span> 
  in label<span class="token operator">:</span>     <span class="token number">18</span>        
 <span class="token number">3.3</span><span class="token number">.3</span><span class="token number">.3</span><span class="token operator">/</span><span class="token number">32</span> 
  in label<span class="token operator">:</span>     <span class="token number">16</span>        
 <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span><span class="token operator">/</span><span class="token number">32</span> 
  in label<span class="token operator">:</span>     imp<span class="token operator">-</span>null  
 <span class="token number">192.168</span><span class="token number">.12</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span> 
  in label<span class="token operator">:</span>     <span class="token number">20</span>        
 <span class="token number">192.168</span><span class="token number">.23</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span> 
  in label<span class="token operator">:</span>     <span class="token number">17</span>        
 <span class="token number">192.168</span><span class="token number">.34</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span> 
  in label<span class="token operator">:</span>     imp<span class="token operator">-</span>null  
 <span class="token number">192.168</span><span class="token number">.47</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span> 
  in label<span class="token operator">:</span>     imp<span class="token operator">-</span>null
<span class="token comment">//可以看到R4的LIB表中确实只有R1前缀1.1.1.1/32的标签绑定信息；</span></code></pre>
]]></content>
      <categories>
        <category>Network</category>
      </categories>
      <tags>
        <tag>MPLS</tag>
        <tag>Network</tag>
      </tags>
  </entry>
  <entry>
    <title>MPLS 实验10：OSPF Loop Prevention in MPLS VPN</title>
    <url>/2014/MPLS_Lab_10/</url>
    <content><![CDATA[<h1 id="实验环境："><a href="#实验环境：" class="headerlink" title="实验环境："></a>实验环境：</h1><ul>
<li>模拟器：GNS3 0.8.6</li>
<li>Cisco IOS：c7200-adventerprisek9-mz.151-4.M2.image</li>
</ul>
<h1 id="GNS3实验拓扑文件："><a href="#GNS3实验拓扑文件：" class="headerlink" title="GNS3实验拓扑文件："></a>GNS3实验拓扑文件：</h1><p><a href="topology.net">拓扑文件</a></p>
<h1 id="实验拓扑："><a href="#实验拓扑：" class="headerlink" title="实验拓扑："></a>实验拓扑：</h1><p><img src="/2014/MPLS_Lab_10/topo.png"></p>
<span id="more"></span>

<h1 id="基本预配置："><a href="#基本预配置：" class="headerlink" title="基本预配置："></a>基本预配置：</h1><h2 id="R1："><a href="#R1：" class="headerlink" title="R1："></a>R1：</h2><pre class="language-c" data-language="c"><code class="language-c">hostname R1
<span class="token operator">!</span>
ip cef
<span class="token operator">!</span>
interface Loopback0
        ip address <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span> <span class="token number">255.255</span><span class="token number">.255</span><span class="token number">.255</span>
        ip ospf <span class="token number">1</span> area <span class="token number">0</span>
<span class="token operator">!</span>
interface FastEthernet0<span class="token operator">/</span><span class="token number">0</span>
        ip address <span class="token number">192.168</span><span class="token number">.12</span><span class="token number">.1</span> <span class="token number">255.255</span><span class="token number">.255</span><span class="token number">.0</span>
        ip ospf <span class="token number">1</span> area <span class="token number">0</span>
        no shutdown
<span class="token operator">!</span>
interface FastEthernet0<span class="token operator">/</span><span class="token number">1</span>
        ip address <span class="token number">192.168</span><span class="token number">.13</span><span class="token number">.1</span> <span class="token number">255.255</span><span class="token number">.255</span><span class="token number">.0</span>
        ip ospf <span class="token number">1</span> area <span class="token number">0</span>
        no shutdown
<span class="token operator">!</span>
router ospf <span class="token number">1</span>
        router<span class="token operator">-</span>id <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span>
<span class="token operator">!</span>
line con <span class="token number">0</span>
        exec<span class="token operator">-</span>timeout <span class="token number">0</span> <span class="token number">0</span>
        logging synchronous
<span class="token operator">!</span>
end</code></pre>

<h2 id="R2"><a href="#R2" class="headerlink" title="R2:"></a>R2:</h2><pre class="language-c" data-language="c"><code class="language-c">hostname R2
<span class="token operator">!</span>
ip cef
<span class="token operator">!</span>
ip vrf A<span class="token operator">-</span>Site1
        rd <span class="token number">1</span><span class="token operator">:</span><span class="token number">1</span>
<span class="token comment">//注意：连接到同一站点的同一ISP的多个不同PE可以使用相同的RD，也可以使用不同的RD；</span>
        route<span class="token operator">-</span>target export <span class="token number">1</span><span class="token operator">:</span><span class="token number">1</span>
        route<span class="token operator">-</span>target import <span class="token number">1</span><span class="token operator">:</span><span class="token number">1</span>
<span class="token operator">!</span>
mpls label protocol ldp
<span class="token operator">!</span>
interface Loopback0
        ip address <span class="token number">2.2</span><span class="token number">.2</span><span class="token number">.2</span> <span class="token number">255.255</span><span class="token number">.255</span><span class="token number">.255</span>
        ip ospf <span class="token number">1</span> area <span class="token number">0</span>
<span class="token operator">!</span>
interface Loopback1
        ip vrf forwarding A<span class="token operator">-</span>Site1
        ip address <span class="token number">22.22</span><span class="token number">.22</span><span class="token number">.22</span> <span class="token number">255.255</span><span class="token number">.255</span><span class="token number">.255</span>
        ip ospf <span class="token number">2</span> area <span class="token number">0</span>
<span class="token operator">!</span>
interface FastEthernet0<span class="token operator">/</span><span class="token number">0</span>
        ip vrf forwarding A<span class="token operator">-</span>Site1
        ip address <span class="token number">192.168</span><span class="token number">.12</span><span class="token number">.2</span> <span class="token number">255.255</span><span class="token number">.255</span><span class="token number">.0</span>
        ip ospf <span class="token number">2</span> area <span class="token number">0</span>
        no shutdown
<span class="token operator">!</span>
interface FastEthernet0<span class="token operator">/</span><span class="token number">1</span>
        ip address <span class="token number">192.168</span><span class="token number">.24</span><span class="token number">.2</span> <span class="token number">255.255</span><span class="token number">.255</span><span class="token number">.0</span>
        ip ospf <span class="token number">1</span> area <span class="token number">0</span>
        no shutdown
mpls ip
<span class="token operator">!</span>
router ospf <span class="token number">2</span> vrf A<span class="token operator">-</span>Site1
        router<span class="token operator">-</span>id <span class="token number">22.22</span><span class="token number">.22</span><span class="token number">.22</span>
        redistribute bgp <span class="token number">1</span> subnets
<span class="token operator">!</span>
router ospf <span class="token number">1</span>
        router<span class="token operator">-</span>id <span class="token number">2.2</span><span class="token number">.2</span><span class="token number">.2</span>
<span class="token operator">!</span>
router bgp <span class="token number">1</span>
        bgp log<span class="token operator">-</span>neighbor<span class="token operator">-</span>changes
        neighbor <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span> remote<span class="token operator">-</span>as <span class="token number">1</span>
        neighbor <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span> update<span class="token operator">-</span>source Loopback0
        neighbor <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span> next<span class="token operator">-</span>hop<span class="token operator">-</span>self
        <span class="token operator">!</span>
        address<span class="token operator">-</span>family vpnv4
        neighbor <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span> activate
        neighbor <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span> send<span class="token operator">-</span>community both
        exit<span class="token operator">-</span>address<span class="token operator">-</span>family
        <span class="token operator">!</span>
        address<span class="token operator">-</span>family ipv4 vrf A<span class="token operator">-</span>Site1
        redistribute connected
        redistribute ospf <span class="token number">2</span> match internal external <span class="token number">1</span> external <span class="token number">2</span>
        exit<span class="token operator">-</span>address<span class="token operator">-</span>family
<span class="token operator">!</span>
mpls ldp router<span class="token operator">-</span>id Loopback0 force
<span class="token operator">!</span>
line con <span class="token number">0</span>
        exec<span class="token operator">-</span>timeout <span class="token number">0</span> <span class="token number">0</span>
        logging synchronous
<span class="token operator">!</span>
end</code></pre>
<h2 id="R3"><a href="#R3" class="headerlink" title="R3:"></a>R3:</h2><pre class="language-c" data-language="c"><code class="language-c">hostname R3
<span class="token operator">!</span>
ip cef
<span class="token operator">!</span>
ip vrf A<span class="token operator">-</span>Site1
        rd <span class="token number">1</span><span class="token operator">:</span><span class="token number">1</span>
<span class="token comment">//注意：连接到同一站点的同一ISP的多个不同PE可以使用相同的RD，也可以使用不同的RD；</span>
        route<span class="token operator">-</span>target export <span class="token number">1</span><span class="token operator">:</span><span class="token number">1</span>
        route<span class="token operator">-</span>target import <span class="token number">1</span><span class="token operator">:</span><span class="token number">1</span>
<span class="token operator">!</span>
mpls label protocol ldp
<span class="token operator">!</span>
interface Loopback0
        ip address <span class="token number">3.3</span><span class="token number">.3</span><span class="token number">.3</span> <span class="token number">255.255</span><span class="token number">.255</span><span class="token number">.255</span>
        ip ospf <span class="token number">1</span> area <span class="token number">0</span>
<span class="token operator">!</span>
interface Loopback1
        ip vrf forwarding A<span class="token operator">-</span>Site1
        ip address <span class="token number">33.33</span><span class="token number">.33</span><span class="token number">.33</span> <span class="token number">255.255</span><span class="token number">.255</span><span class="token number">.255</span>
        ip ospf <span class="token number">2</span> area <span class="token number">0</span>
<span class="token operator">!</span>
interface FastEthernet0<span class="token operator">/</span><span class="token number">0</span>
        ip address <span class="token number">192.168</span><span class="token number">.34</span><span class="token number">.3</span> <span class="token number">255.255</span><span class="token number">.255</span><span class="token number">.0</span>
        ip ospf <span class="token number">1</span> area <span class="token number">0</span>
        no shutdown
mpls ip
<span class="token operator">!</span>
interface FastEthernet0<span class="token operator">/</span><span class="token number">1</span>
        ip vrf forwarding A<span class="token operator">-</span>Site1
        ip address <span class="token number">192.168</span><span class="token number">.13</span><span class="token number">.3</span> <span class="token number">255.255</span><span class="token number">.255</span><span class="token number">.0</span>
        ip ospf <span class="token number">2</span> area <span class="token number">0</span>
        no shutdown
<span class="token operator">!</span>
router ospf <span class="token number">2</span> vrf A<span class="token operator">-</span>Site1
        router<span class="token operator">-</span>id <span class="token number">33.33</span><span class="token number">.33</span><span class="token number">.33</span>
        redistribute bgp <span class="token number">1</span> subnets
<span class="token operator">!</span>
router ospf <span class="token number">1</span>
        router<span class="token operator">-</span>id <span class="token number">3.3</span><span class="token number">.3</span><span class="token number">.3</span>
<span class="token operator">!</span>
router bgp <span class="token number">1</span>
        bgp log<span class="token operator">-</span>neighbor<span class="token operator">-</span>changes
        neighbor <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span> remote<span class="token operator">-</span>as <span class="token number">1</span>
        neighbor <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span> update<span class="token operator">-</span>source Loopback0
        neighbor <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span> next<span class="token operator">-</span>hop<span class="token operator">-</span>self
        <span class="token operator">!</span>
        address<span class="token operator">-</span>family vpnv4
        neighbor <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span> activate
        neighbor <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span> send<span class="token operator">-</span>community both
        exit<span class="token operator">-</span>address<span class="token operator">-</span>family
        <span class="token operator">!</span>
        address<span class="token operator">-</span>family ipv4 vrf A<span class="token operator">-</span>Site1
        redistribute connected
        redistribute ospf <span class="token number">2</span> match internal external <span class="token number">1</span> external <span class="token number">2</span>
        exit<span class="token operator">-</span>address<span class="token operator">-</span>family
<span class="token operator">!</span>
mpls ldp router<span class="token operator">-</span>id Loopback0 force
<span class="token operator">!</span>
line con <span class="token number">0</span>
        exec<span class="token operator">-</span>timeout <span class="token number">0</span> <span class="token number">0</span>
        logging synchronous
<span class="token operator">!</span>
end</code></pre>
<h2 id="R4"><a href="#R4" class="headerlink" title="R4:"></a>R4:</h2><pre class="language-c" data-language="c"><code class="language-c">hostname R4
<span class="token operator">!</span>
ip cef
<span class="token operator">!</span>
ip vrf A<span class="token operator">-</span>Site2
        rd <span class="token number">1</span><span class="token operator">:</span><span class="token number">2</span>
        route<span class="token operator">-</span>target export <span class="token number">1</span><span class="token operator">:</span><span class="token number">1</span>
        route<span class="token operator">-</span>target import <span class="token number">1</span><span class="token operator">:</span><span class="token number">1</span>
<span class="token operator">!</span>
mpls label protocol ldp
<span class="token operator">!</span>
interface Loopback0
        ip address <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span> <span class="token number">255.255</span><span class="token number">.255</span><span class="token number">.255</span>
        ip ospf <span class="token number">1</span> area <span class="token number">0</span>
<span class="token operator">!</span>
interface Loopback1
        ip vrf forwarding A<span class="token operator">-</span>Site2
        ip address <span class="token number">44.44</span><span class="token number">.44</span><span class="token number">.44</span> <span class="token number">255.255</span><span class="token number">.255</span><span class="token number">.255</span>
        ip ospf <span class="token number">2</span> area <span class="token number">0</span>
<span class="token operator">!</span>
interface FastEthernet0<span class="token operator">/</span><span class="token number">0</span>
        ip address <span class="token number">192.168</span><span class="token number">.34</span><span class="token number">.4</span> <span class="token number">255.255</span><span class="token number">.255</span><span class="token number">.0</span>
        ip ospf <span class="token number">1</span> area <span class="token number">0</span>
        no shutdown
mpls ip
<span class="token operator">!</span>
interface FastEthernet0<span class="token operator">/</span><span class="token number">1</span>
        ip address <span class="token number">192.168</span><span class="token number">.24</span><span class="token number">.4</span> <span class="token number">255.255</span><span class="token number">.255</span><span class="token number">.0</span>
        ip ospf <span class="token number">1</span> area <span class="token number">0</span>
        no shutdown
mpls ip
<span class="token operator">!</span>
interface FastEthernet1<span class="token operator">/</span><span class="token number">0</span>
        ip vrf forwarding A<span class="token operator">-</span>Site2
        ip address <span class="token number">192.168</span><span class="token number">.45</span><span class="token number">.4</span> <span class="token number">255.255</span><span class="token number">.255</span><span class="token number">.0</span>
        ip ospf <span class="token number">2</span> area <span class="token number">0</span>
        no shutdown
<span class="token operator">!</span>
router ospf <span class="token number">2</span> vrf A<span class="token operator">-</span>Site2
        router<span class="token operator">-</span>id <span class="token number">44.44</span><span class="token number">.44</span><span class="token number">.44</span>
        redistribute bgp <span class="token number">1</span> subnets
<span class="token operator">!</span>
router ospf <span class="token number">1</span>
        router<span class="token operator">-</span>id <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span>
<span class="token operator">!</span>
router bgp <span class="token number">1</span>
        bgp log<span class="token operator">-</span>neighbor<span class="token operator">-</span>changes
        neighbor ibgp peer<span class="token operator">-</span>group
        neighbor ibgp remote<span class="token operator">-</span>as <span class="token number">1</span>
        neighbor ibgp update<span class="token operator">-</span>source Loopback0
        neighbor ibgp next<span class="token operator">-</span>hop<span class="token operator">-</span>self
        neighbor <span class="token number">2.2</span><span class="token number">.2</span><span class="token number">.2</span> peer<span class="token operator">-</span>group ibgp
        neighbor <span class="token number">3.3</span><span class="token number">.3</span><span class="token number">.3</span> peer<span class="token operator">-</span>group ibgp
        <span class="token operator">!</span>
        address<span class="token operator">-</span>family vpnv4
        neighbor ibgp send<span class="token operator">-</span>community both
        neighbor <span class="token number">2.2</span><span class="token number">.2</span><span class="token number">.2</span> activate
        neighbor <span class="token number">3.3</span><span class="token number">.3</span><span class="token number">.3</span> activate
        exit<span class="token operator">-</span>address<span class="token operator">-</span>family
        <span class="token operator">!</span>
        address<span class="token operator">-</span>family ipv4 vrf A<span class="token operator">-</span>Site2
        redistribute connected
        redistribute ospf <span class="token number">2</span> match internal external <span class="token number">1</span> external <span class="token number">2</span>
        exit<span class="token operator">-</span>address<span class="token operator">-</span>family
<span class="token operator">!</span>
mpls ldp router<span class="token operator">-</span>id Loopback0 force
<span class="token operator">!</span>
line con <span class="token number">0</span>
        exec<span class="token operator">-</span>timeout <span class="token number">0</span> <span class="token number">0</span>
        logging synchronous
<span class="token operator">!</span>
end</code></pre>
<h2 id="R5"><a href="#R5" class="headerlink" title="R5:"></a>R5:</h2><pre class="language-none"><code class="language-none">hostname R5
!
ip cef
!
interface Loopback0
        ip address 5.5.5.5 255.255.255.255
        ip ospf 1 area 0
!
interface FastEthernet0&#x2F;0
        ip address 192.168.45.5 255.255.255.0
        ip ospf 1 area 0
        no shutdown
!
router ospf 1
        router-id 5.5.5.5
        redistribute connected subnets route-map CREATE_LSA5
&#x2F;&#x2F;为了创造出类型5的LSA；
!
route-map CREATE_LSA5 permit 10
        match interface Loopback1
&#x2F;&#x2F;为了创造出类型5的LSA；
!
line con 0
        exec-timeout 0 0
        logging synchronous
!
end</code></pre>
<h1 id="实验与调试："><a href="#实验与调试：" class="headerlink" title="实验与调试："></a>实验与调试：</h1><h2 id="实验1：OSPF内部路由Down-bit"><a href="#实验1：OSPF内部路由Down-bit" class="headerlink" title="实验1：OSPF内部路由Down-bit"></a>实验1：OSPF内部路由Down-bit</h2>]]></content>
      <categories>
        <category>Network</category>
      </categories>
      <tags>
        <tag>MPLS</tag>
        <tag>Network</tag>
      </tags>
  </entry>
  <entry>
    <title>MPLS 实验11：MPLS VPN running eBGP on the PE-CE link</title>
    <url>/2014/MPLS_Lab_11/</url>
    <content><![CDATA[<h1 id="实验环境："><a href="#实验环境：" class="headerlink" title="实验环境："></a>实验环境：</h1><ul>
<li>模拟器：GNS3 0.8.6</li>
<li>Cisco IOS：c7200-adventerprisek9-mz.151-4.M2.image</li>
</ul>
<h1 id="GNS3实验拓扑文件："><a href="#GNS3实验拓扑文件：" class="headerlink" title="GNS3实验拓扑文件："></a>GNS3实验拓扑文件：</h1><p><a href="topology.net">拓扑文件</a></p>
<h1 id="实验拓扑："><a href="#实验拓扑：" class="headerlink" title="实验拓扑："></a>实验拓扑：</h1><p><img src="/2014/MPLS_Lab_11/topo.png"></p>
<span id="more"></span>

<h1 id="基本预配置："><a href="#基本预配置：" class="headerlink" title="基本预配置："></a>基本预配置：</h1><h2 id="R1："><a href="#R1：" class="headerlink" title="R1："></a>R1：</h2><pre class="language-c" data-language="c"><code class="language-c">hostname R1
<span class="token operator">!</span>
ip cef
<span class="token operator">!</span>
mpls label protocol ldp
<span class="token operator">!</span>
interface Loopback0
        ip address <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span> <span class="token number">255.255</span><span class="token number">.255</span><span class="token number">.255</span>
        ip ospf <span class="token number">1</span> area <span class="token number">0</span>
<span class="token operator">!</span>
interface FastEthernet0<span class="token operator">/</span><span class="token number">0</span>
        ip address <span class="token number">192.168</span><span class="token number">.12</span><span class="token number">.1</span> <span class="token number">255.255</span><span class="token number">.255</span><span class="token number">.0</span>
        ip ospf <span class="token number">1</span> area <span class="token number">0</span>
        no shut
mpls ip
<span class="token operator">!</span>
interface FastEthernet0<span class="token operator">/</span><span class="token number">1</span>
        ip address <span class="token number">192.168</span><span class="token number">.15</span><span class="token number">.1</span> <span class="token number">255.255</span><span class="token number">.255</span><span class="token number">.0</span>
        no shut
<span class="token operator">!</span>
router ospf <span class="token number">1</span>
        router<span class="token operator">-</span>id <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span>
<span class="token operator">!</span>         
mpls ldp router<span class="token operator">-</span>id Loopback0 force
<span class="token operator">!</span>
line con <span class="token number">0</span>
        exec<span class="token operator">-</span>timeout <span class="token number">0</span> <span class="token number">0</span>
        logging synchronous
<span class="token operator">!</span>
end</code></pre>

<h2 id="R2"><a href="#R2" class="headerlink" title="R2:"></a>R2:</h2><pre class="language-c" data-language="c"><code class="language-c">hostname R2
<span class="token operator">!</span>
ip cef
<span class="token operator">!</span>
mpls label protocol ldp
<span class="token operator">!</span>
interface Loopback0
        ip address <span class="token number">2.2</span><span class="token number">.2</span><span class="token number">.2</span> <span class="token number">255.255</span><span class="token number">.255</span><span class="token number">.255</span>
        ip ospf <span class="token number">1</span> area <span class="token number">0</span>
<span class="token operator">!</span>
interface FastEthernet0<span class="token operator">/</span><span class="token number">0</span>
        ip address <span class="token number">192.168</span><span class="token number">.12</span><span class="token number">.2</span> <span class="token number">255.255</span><span class="token number">.255</span><span class="token number">.0</span>
        ip ospf <span class="token number">1</span> area <span class="token number">0</span>
        no shutdown
mpls ip
<span class="token operator">!</span>
interface FastEthernet0<span class="token operator">/</span><span class="token number">1</span>
        ip address <span class="token number">192.168</span><span class="token number">.23</span><span class="token number">.2</span> <span class="token number">255.255</span><span class="token number">.255</span><span class="token number">.0</span>
        ip ospf <span class="token number">1</span> area <span class="token number">0</span>
        no shutdown
mpls ip
<span class="token operator">!</span>
router ospf <span class="token number">1</span>
        router<span class="token operator">-</span>id <span class="token number">2.2</span><span class="token number">.2</span><span class="token number">.2</span>
<span class="token operator">!</span>
mpls ldp router<span class="token operator">-</span>id Loopback0 force
<span class="token operator">!</span>
line con <span class="token number">0</span>
        exec<span class="token operator">-</span>timeout <span class="token number">0</span> <span class="token number">0</span>
        logging synchronous
<span class="token operator">!</span>
end</code></pre>

<h2 id="R3"><a href="#R3" class="headerlink" title="R3:"></a>R3:</h2><pre class="language-c" data-language="c"><code class="language-c">hostname R3
<span class="token operator">!</span>
ip cef
<span class="token operator">!</span>
mpls label protocol ldp
<span class="token operator">!</span>
interface Loopback0
        ip address <span class="token number">3.3</span><span class="token number">.3</span><span class="token number">.3</span> <span class="token number">255.255</span><span class="token number">.255</span><span class="token number">.255</span>
        ip ospf <span class="token number">1</span> area <span class="token number">0</span>
<span class="token operator">!</span>
interface FastEthernet0<span class="token operator">/</span><span class="token number">0</span>
        ip address <span class="token number">192.168</span><span class="token number">.34</span><span class="token number">.3</span> <span class="token number">255.255</span><span class="token number">.255</span><span class="token number">.0</span>
        ip ospf <span class="token number">1</span> area <span class="token number">0</span>
        no shutdown
mpls ip
<span class="token operator">!</span>
interface FastEthernet0<span class="token operator">/</span><span class="token number">1</span>
        ip address <span class="token number">192.168</span><span class="token number">.23</span><span class="token number">.3</span> <span class="token number">255.255</span><span class="token number">.255</span><span class="token number">.0</span>
        ip ospf <span class="token number">1</span> area <span class="token number">0</span>
        no shutdown
mpls ip
<span class="token operator">!</span>
router ospf <span class="token number">1</span>
        router<span class="token operator">-</span>id <span class="token number">3.3</span><span class="token number">.3</span><span class="token number">.3</span>
<span class="token operator">!</span>
mpls ldp router<span class="token operator">-</span>id Loopback0 force
<span class="token operator">!</span>
line con <span class="token number">0</span>
        exec<span class="token operator">-</span>timeout <span class="token number">0</span> <span class="token number">0</span>
        logging synchronous
<span class="token operator">!</span>
end</code></pre>

<h2 id="R4"><a href="#R4" class="headerlink" title="R4:"></a>R4:</h2><pre class="language-c" data-language="c"><code class="language-c">hostname R4
<span class="token operator">!</span>
ip cef
<span class="token operator">!</span>
mpls label protocol ldp
<span class="token operator">!</span>
interface Loopback0
        ip address <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span> <span class="token number">255.255</span><span class="token number">.255</span><span class="token number">.255</span>
        ip ospf <span class="token number">1</span> area <span class="token number">0</span>
<span class="token operator">!</span>
interface FastEthernet0<span class="token operator">/</span><span class="token number">0</span>
        ip address <span class="token number">192.168</span><span class="token number">.34</span><span class="token number">.4</span> <span class="token number">255.255</span><span class="token number">.255</span><span class="token number">.0</span>
        ip ospf <span class="token number">1</span> area <span class="token number">0</span>
        no shutdown
mpls ip
<span class="token operator">!</span>
interface FastEthernet0<span class="token operator">/</span><span class="token number">1</span>
        ip address <span class="token number">192.168</span><span class="token number">.47</span><span class="token number">.4</span> <span class="token number">255.255</span><span class="token number">.255</span><span class="token number">.0</span>
        no shutdown
<span class="token operator">!</span>
router ospf <span class="token number">1</span>
        router<span class="token operator">-</span>id <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span>
<span class="token operator">!</span>
mpls ldp router<span class="token operator">-</span>id Loopback0 force
<span class="token operator">!</span>
line con <span class="token number">0</span>
        exec<span class="token operator">-</span>timeout <span class="token number">0</span> <span class="token number">0</span>
        logging synchronous
<span class="token operator">!</span>
end</code></pre>

<h2 id="R5"><a href="#R5" class="headerlink" title="R5:"></a>R5:</h2><pre class="language-c" data-language="c"><code class="language-c">hostname R5
<span class="token operator">!</span>
ip cef
<span class="token operator">!</span>
interface Loopback0
        ip address <span class="token number">5.5</span><span class="token number">.5</span><span class="token number">.5</span> <span class="token number">255.255</span><span class="token number">.255</span><span class="token number">.255</span>
        ip ospf <span class="token number">1</span> area <span class="token number">0</span>
<span class="token operator">!</span>
interface FastEthernet0<span class="token operator">/</span><span class="token number">0</span>
        ip address <span class="token number">192.168</span><span class="token number">.56</span><span class="token number">.5</span> <span class="token number">255.255</span><span class="token number">.255</span><span class="token number">.0</span>
        ip ospf <span class="token number">1</span> area <span class="token number">0</span>
        no shutdown
<span class="token operator">!</span>
interface FastEthernet0<span class="token operator">/</span><span class="token number">1</span>
        ip address <span class="token number">192.168</span><span class="token number">.15</span><span class="token number">.5</span> <span class="token number">255.255</span><span class="token number">.255</span><span class="token number">.0</span>
        no shutdown
<span class="token operator">!</span>
router ospf <span class="token number">1</span>
        router<span class="token operator">-</span>id <span class="token number">5.5</span><span class="token number">.5</span><span class="token number">.5</span>
<span class="token operator">!</span>
router bgp <span class="token number">65001</span>
        bgp router<span class="token operator">-</span>id <span class="token number">5.5</span><span class="token number">.5</span><span class="token number">.5</span>
        bgp log<span class="token operator">-</span>neighbor<span class="token operator">-</span>changes
        network <span class="token number">5.5</span><span class="token number">.5</span><span class="token number">.5</span> mask <span class="token number">255.255</span><span class="token number">.255</span><span class="token number">.255</span>
        neighbor <span class="token number">192.168</span><span class="token number">.15</span><span class="token number">.1</span> remote<span class="token operator">-</span>as <span class="token number">1</span>
<span class="token operator">!</span>
line con <span class="token number">0</span>
        exec<span class="token operator">-</span>timeout <span class="token number">0</span> <span class="token number">0</span>
        logging synchronous
<span class="token operator">!</span>
end</code></pre>

<h2 id="R7"><a href="#R7" class="headerlink" title="R7:"></a>R7:</h2><pre class="language-c" data-language="c"><code class="language-c">hostname R7
<span class="token operator">!</span>
ip cef
<span class="token operator">!</span>
interface Loopback0
        ip address <span class="token number">7.7</span><span class="token number">.7</span><span class="token number">.7</span> <span class="token number">255.255</span><span class="token number">.255</span><span class="token number">.255</span>
        ip ospf <span class="token number">1</span> area <span class="token number">0</span>
<span class="token operator">!</span>
interface FastEthernet0<span class="token operator">/</span><span class="token number">0</span>
        ip address <span class="token number">192.168</span><span class="token number">.78</span><span class="token number">.7</span> <span class="token number">255.255</span><span class="token number">.255</span><span class="token number">.0</span>
        ip ospf <span class="token number">1</span> area <span class="token number">0</span>
        no shutdown
<span class="token operator">!</span>
interface FastEthernet0<span class="token operator">/</span><span class="token number">1</span>
        ip address <span class="token number">192.168</span><span class="token number">.47</span><span class="token number">.7</span> <span class="token number">255.255</span><span class="token number">.255</span><span class="token number">.0</span>
        no shutdown
<span class="token operator">!</span>
router ospf <span class="token number">1</span>
        router<span class="token operator">-</span>id <span class="token number">7.7</span><span class="token number">.7</span><span class="token number">.7</span>
<span class="token operator">!</span>
router bgp <span class="token number">65002</span>
        bgp router<span class="token operator">-</span>id <span class="token number">7.7</span><span class="token number">.7</span><span class="token number">.7</span>
        bgp log<span class="token operator">-</span>neighbor<span class="token operator">-</span>changes
        network <span class="token number">7.7</span><span class="token number">.7</span><span class="token number">.7</span> mask <span class="token number">255.255</span><span class="token number">.255</span><span class="token number">.255</span>
        neighbor <span class="token number">192.168</span><span class="token number">.47</span><span class="token number">.4</span> remote<span class="token operator">-</span>as <span class="token number">1</span>
<span class="token operator">!</span>
line con <span class="token number">0</span>
        exec<span class="token operator">-</span>timeout <span class="token number">0</span> <span class="token number">0</span>
        logging synchronous
<span class="token operator">!</span>
end</code></pre>


<h1 id="MPLS-VPN配置步骤："><a href="#MPLS-VPN配置步骤：" class="headerlink" title="MPLS VPN配置步骤："></a>MPLS VPN配置步骤：</h1><ol>
<li>创建VRF（VRF名本地有效）：<ul>
<li>指定RD（提供全局唯一的私网单播地址）；</li>
<li>指定RT的导出（导出：把重分发进MP-BGP的VPNv4路由打上MP-BGP扩展团体属性RT）和导入（导入：把MP-BGP里的VPNv4路由进行RT的匹配，匹配成功的VPNv4路由将放进相应的VRF）；</li>
<li>将与CE相连的PE接口关联特定VRF；</li>
</ul>
</li>
<li>配置MP-BGP：<ul>
<li>配置建立PE之间的IBGP邻居关系；</li>
<li>启用VPNv4地址族（AF），并激活与其他PE设备的邻居关系；</li>
</ul>
</li>
<li>配置PE-CE路由；<ul>
<li>配置IGP，并启用IGP的地址族（AF）；</li>
<li>配置启用MP-BGP IPv4 VRF地址族，然后激活与其他PE路由器的MP-BGP IPv4 VRF邻居关系；</li>
</ul>
</li>
</ol>
<h1 id="实验与调试："><a href="#实验与调试：" class="headerlink" title="实验与调试："></a>实验与调试：</h1><h2 id="实验1：同一VPN的不同站点使用不同的AS号；"><a href="#实验1：同一VPN的不同站点使用不同的AS号；" class="headerlink" title="实验1：同一VPN的不同站点使用不同的AS号；"></a>实验1：同一VPN的不同站点使用不同的AS号；</h2><h3 id="在PE上创建VRF；"><a href="#在PE上创建VRF；" class="headerlink" title="在PE上创建VRF；"></a>在PE上创建VRF；</h3><p>在PE1（R1）上创建VRF，并命名为A-Site1，表示该VRF为VPN A的站点1服务；</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>#ip vrf A<span class="token operator">-</span>Site1   </code></pre>

<p>指定RD，为1:1，如果按照AS：num命名法，以下RD表示AS1中的第2个VRF；</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token operator">-</span>vrf<span class="token punctuation">)</span>#rd <span class="token number">1</span><span class="token operator">:</span><span class="token number">1</span>
```            

指定RT的导入和导出，这里我将RT指定为导入和导出<span class="token number">1</span>：<span class="token number">1</span>；
```c
<span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token operator">-</span>vrf<span class="token punctuation">)</span>#route<span class="token operator">-</span>target <span class="token operator">?</span>        
        ASN<span class="token operator">:</span>nn or IP<span class="token operator">-</span>address<span class="token operator">:</span>nn  Target VPN Extended Community
        both                     Both import and export Target<span class="token operator">-</span>VPN community
        export                   Export Target<span class="token operator">-</span>VPN community
        import                   Import Target<span class="token operator">-</span>VPN community
<span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token operator">-</span>vrf<span class="token punctuation">)</span>#route<span class="token operator">-</span>target both <span class="token number">1</span><span class="token operator">:</span><span class="token number">1</span></code></pre>

<p>将PE1（R1）上与CE相连的PE接口F0&#x2F;1关联到VRF A-Site1；</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>#<span class="token keyword">int</span> f0<span class="token operator">/</span><span class="token number">1</span>
<span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token operator">-</span><span class="token keyword">if</span><span class="token punctuation">)</span>#ip vrf forwarding A<span class="token operator">-</span>Site1
<span class="token operator">%</span> Interface FastEthernet0<span class="token operator">/</span><span class="token number">1</span> IPv4 disabled and <span class="token function">address</span><span class="token punctuation">(</span>es<span class="token punctuation">)</span> removed due to enabling VRF A<span class="token operator">-</span>Site1
        <span class="token comment">//切记先将接口关联VRF，然后再配置IP地址；</span>
<span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token operator">-</span><span class="token keyword">if</span><span class="token punctuation">)</span>#ip add <span class="token number">192.168</span><span class="token number">.15</span><span class="token number">.1</span> <span class="token number">255.255</span><span class="token number">.255</span><span class="token number">.0</span></code></pre>
<p>在PE2（R4）上创建VRF，并命名为A-Site2，表示该VRF为VPN A的站点2服务；</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>#ip vrf A<span class="token operator">-</span>Site2</code></pre>

<p>指定RD，为1:2，如果按照AS：num命名法，以下RD表示AS1中的第2个VRF；</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token operator">-</span>vrf<span class="token punctuation">)</span>#rd <span class="token number">1</span><span class="token operator">:</span><span class="token number">2</span></code></pre>

<p>指定RT的导入和导出，这里我将RT指定为导入和导出1：1；</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token operator">-</span>vrf<span class="token punctuation">)</span>#route<span class="token operator">-</span>target both <span class="token number">1</span><span class="token operator">:</span><span class="token number">1</span></code></pre>
<p>因为PE1导出的RT为1:1，PE2导入的RT正是PE1的导出RT1:1；所以PE1（R1）的RT导出和PE2（R4）的RT导入能够匹配成功，R4能够学到R1导入到MP-BGP中的VPNv4路由；又因为PE2导出的RT为1:1，PE1导入的RT也正好是PE2的导出RT1:1；所以PE2（R4）的RT导出和PE1（R1）的RT导入能够匹配成对，R1能够学到R4导入到MP-BGP中的VPNv4路由</p>
<p>将PE2（R4）上与CE相连的PE接口F0&#x2F;1关联到VRF A-Site2；</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>#<span class="token keyword">int</span> f0<span class="token operator">/</span><span class="token number">1</span>
<span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token operator">-</span><span class="token keyword">if</span><span class="token punctuation">)</span>#ip vrf forwarding A<span class="token operator">-</span>Site2
<span class="token operator">%</span> Interface FastEthernet0<span class="token operator">/</span><span class="token number">1</span> IPv4 disabled and <span class="token function">address</span><span class="token punctuation">(</span>es<span class="token punctuation">)</span> removed due to enabling VRF A<span class="token operator">-</span>Site2
        <span class="token comment">//切记先将接口关联VRF，然后再配置IP地址；</span>
<span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token operator">-</span><span class="token keyword">if</span><span class="token punctuation">)</span>#ip add <span class="token number">192.168</span><span class="token number">.47</span><span class="token number">.4</span> <span class="token number">255.255</span><span class="token number">.255</span><span class="token number">.0</span></code></pre>
<h3 id="配置MP-BGP；"><a href="#配置MP-BGP；" class="headerlink" title="配置MP-BGP；"></a>配置MP-BGP；</h3><p>在PE1（R1）上配置MP-BGP，使之与其他PE建立IBGP关系，在此实验中只有PE1和PE2两台PE设备；</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>#router bgp <span class="token number">1</span>
<span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span>#no <span class="token keyword">auto</span><span class="token operator">-</span>summary
<span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span>#no syn
<span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span>#bgp router<span class="token operator">-</span>id <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span>
<span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span>#neighbor <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span> remote<span class="token operator">-</span>as <span class="token number">1</span>
<span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span>#neighbor <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span> update<span class="token operator">-</span>source l0
<span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span>#neighbor <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span> next<span class="token operator">-</span>hop<span class="token operator">-</span>self</code></pre>

<p>启用PE1（R1）的VPNv4地址族，并激活与IBGP邻居PE2（R4）的MP-BGP VPNv4邻居关系；</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span>#address<span class="token operator">-</span>family vpnv4
<span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token operator">-</span>af<span class="token punctuation">)</span>#neighbor <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span> activate
<span class="token comment">//激活与IBGP邻居R4的VPNv4关系；</span>
<span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token operator">-</span>af<span class="token punctuation">)</span>#neighbor <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span> send<span class="token operator">-</span>community <span class="token operator">?</span>
        both      Send Standard and Extended Community attributes
        extended  Send Extended Community attribute
        standard  Send Standard Community attribute
        <span class="token operator">&lt;</span>cr<span class="token operator">></span>

<span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token operator">-</span>af<span class="token punctuation">)</span>#neighbor <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span> send<span class="token operator">-</span>community both
<span class="token comment">//由于BGP团体属性为可选传递属性，所以必须手动指定R1向IBGP邻居R4发送拓展团体属性和标准团体属性；</span>

<span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token operator">-</span>af<span class="token punctuation">)</span>#exit<span class="token operator">-</span>address<span class="token operator">-</span>family
<span class="token comment">//退出AF配置模式；</span></code></pre>
<p>在PE2（R4）上配置MP-BGP，使之与其他PE建立IBGP关系，</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token operator">-</span><span class="token keyword">if</span><span class="token punctuation">)</span>#router bgp <span class="token number">1</span>
<span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span>#no <span class="token keyword">auto</span><span class="token operator">-</span>summary
<span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span>#no syn
<span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span>#bgp router<span class="token operator">-</span>id <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span>
<span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span>#neighbor <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span> remote<span class="token operator">-</span>as <span class="token number">1</span>
<span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span>#neighbor <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span> update<span class="token operator">-</span>source l0
<span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span>#neighbor <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span> next<span class="token operator">-</span>hop<span class="token operator">-</span>self</code></pre>

<p>启用PE2（R4）的VPNv4地址族，并激活与IBGP邻居PE1（R1）的MP-BGP VPNv4邻居关系；</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span>#address<span class="token operator">-</span>family vpnv4
<span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token operator">-</span>af<span class="token punctuation">)</span>#neighbor <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span> activate
<span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token operator">-</span>af<span class="token punctuation">)</span>#neighbor <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span> send<span class="token operator">-</span>community both</code></pre>
<h3 id="配置PE-CE路由；"><a href="#配置PE-CE路由；" class="headerlink" title="配置PE-CE路由；"></a>配置PE-CE路由；</h3><p>配置PE1（R1）的MP-BGP IPv4 VRF地址族（AF）；</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>#router bgp <span class="token number">1</span>
<span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span>#address<span class="token operator">-</span>family ipv4 vrf A<span class="token operator">-</span>Site1
<span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token operator">-</span>af<span class="token punctuation">)</span>#neighbor <span class="token number">192.168</span><span class="token number">.15</span><span class="token number">.5</span> remote<span class="token operator">-</span>as <span class="token number">65001</span>
<span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token operator">-</span>af<span class="token punctuation">)</span>#neighbor <span class="token number">192.168</span><span class="token number">.15</span><span class="token number">.5</span> activate 
<span class="token comment">//激活与IBGP邻居R4的VPNv4关系；</span>

<span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token operator">-</span>af<span class="token punctuation">)</span>#redistribute connected
<span class="token comment">//如果用户在CE路由器上ping远程网络的另一个VPN站点中的CE或C路由器，</span>
<span class="token comment">//为了使其在没有指定其源地址情况下（即默认使用CE路由器出站接口IP地址），Echo Reply包能够有路由并正常返回,</span>
<span class="token comment">//将PE路由器的直连路由重分布进MP-BGP的IPv4 VRF AF中；</span></code></pre>

<p>配置PE2（R4）的MP-BGP IPv4 VRF地址族（AF）；</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>#router bgp <span class="token number">1</span>
<span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span>#address<span class="token operator">-</span>family ipv4 vrf A<span class="token operator">-</span>Site2
<span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token operator">-</span>af<span class="token punctuation">)</span>#neighbor <span class="token number">192.168</span><span class="token number">.47</span><span class="token number">.7</span> remote<span class="token operator">-</span>as <span class="token number">65002</span>
<span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token operator">-</span>af<span class="token punctuation">)</span>#neighbor <span class="token number">192.168</span><span class="token number">.47</span><span class="token number">.7</span> activate
<span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token operator">-</span>af<span class="token punctuation">)</span>#redistribute connected
<span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token operator">-</span>af<span class="token punctuation">)</span>#exit<span class="token operator">-</span>address<span class="token operator">-</span>family</code></pre>


<h3 id="验证与调试"><a href="#验证与调试" class="headerlink" title="验证与调试:"></a>验证与调试:</h3><p>在VPN A站点1的CE路由器R5上ping远程VPN A站点2的CE路由器R7；</p>
<pre class="language-c" data-language="c"><code class="language-c">R5#ping <span class="token number">7.7</span><span class="token number">.7</span><span class="token number">.7</span>
Type escape sequence to abort<span class="token punctuation">.</span>
Sending <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token operator">-</span>byte ICMP Echos to <span class="token number">7.7</span><span class="token number">.7</span><span class="token number">.7</span><span class="token punctuation">,</span> timeout is <span class="token number">2</span> seconds<span class="token operator">:</span>
<span class="token operator">!</span><span class="token operator">!</span><span class="token operator">!</span><span class="token operator">!</span><span class="token operator">!</span>
Success rate is <span class="token number">100</span> <span class="token function">percent</span> <span class="token punctuation">(</span><span class="token number">5</span><span class="token operator">/</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> round<span class="token operator">-</span>trip min<span class="token operator">/</span>avg<span class="token operator">/</span>max <span class="token operator">=</span> <span class="token number">100</span><span class="token operator">/</span><span class="token number">146</span><span class="token operator">/</span><span class="token number">208</span> ms
<span class="token comment">//成功！</span></code></pre>

<p>查看R1的IP BGP VPNv4路由表；</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>#<span class="token keyword">do</span> sh ip bgp vpnv4 all
BGP table version is <span class="token number">34</span><span class="token punctuation">,</span> local router ID is <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span>
Status codes<span class="token operator">:</span> s suppressed<span class="token punctuation">,</span> d damped<span class="token punctuation">,</span> h history<span class="token punctuation">,</span> <span class="token operator">*</span> valid<span class="token punctuation">,</span> <span class="token operator">></span> best<span class="token punctuation">,</span> i <span class="token operator">-</span> internal<span class="token punctuation">,</span>
                r RIB<span class="token operator">-</span>failure<span class="token punctuation">,</span> S Stale<span class="token punctuation">,</span> m multipath<span class="token punctuation">,</span> b backup<span class="token operator">-</span>path<span class="token punctuation">,</span> x best<span class="token operator">-</span>external<span class="token punctuation">,</span> f RT<span class="token operator">-</span>Filter
Origin codes<span class="token operator">:</span> i <span class="token operator">-</span> IGP<span class="token punctuation">,</span> e <span class="token operator">-</span> EGP<span class="token punctuation">,</span> <span class="token operator">?</span> <span class="token operator">-</span> incomplete
        Network          Next Hop            Metric LocPrf Weight Path
Route Distinguisher<span class="token operator">:</span> <span class="token number">1</span><span class="token operator">:</span><span class="token number">1</span> <span class="token punctuation">(</span><span class="token keyword">default</span> <span class="token keyword">for</span> vrf A<span class="token operator">-</span>Site1<span class="token punctuation">)</span>
<span class="token operator">*</span><span class="token operator">></span> <span class="token number">5.5</span><span class="token number">.5</span><span class="token number">.5</span><span class="token operator">/</span><span class="token number">32</span>       <span class="token number">192.168</span><span class="token number">.15</span><span class="token number">.5</span>             <span class="token number">0</span>             <span class="token number">0</span> <span class="token number">65001</span> i
<span class="token operator">*</span><span class="token operator">></span>i7<span class="token punctuation">.</span><span class="token number">7.7</span><span class="token number">.7</span><span class="token operator">/</span><span class="token number">32</span>       <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span>                  <span class="token number">0</span>    <span class="token number">100</span>      <span class="token number">0</span> <span class="token number">65002</span> i
<span class="token operator">*</span><span class="token operator">></span> <span class="token number">192.168</span><span class="token number">.15</span><span class="token number">.0</span>     <span class="token number">0.0</span><span class="token number">.0</span><span class="token number">.0</span>                  <span class="token number">0</span>         <span class="token number">32768</span> <span class="token operator">?</span>
<span class="token operator">*</span><span class="token operator">></span>i192<span class="token punctuation">.</span><span class="token number">168.47</span><span class="token number">.0</span>     <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span>                  <span class="token number">0</span>    <span class="token number">100</span>      <span class="token number">0</span> <span class="token operator">?</span>
Route Distinguisher<span class="token operator">:</span> <span class="token number">1</span><span class="token operator">:</span><span class="token number">2</span>
<span class="token operator">*</span><span class="token operator">></span>i7<span class="token punctuation">.</span><span class="token number">7.7</span><span class="token number">.7</span><span class="token operator">/</span><span class="token number">32</span>       <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span>                  <span class="token number">0</span>    <span class="token number">100</span>      <span class="token number">0</span> <span class="token number">65002</span> i
<span class="token operator">*</span><span class="token operator">></span>i192<span class="token punctuation">.</span><span class="token number">168.47</span><span class="token number">.0</span>     <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span>                  <span class="token number">0</span>    <span class="token number">100</span>      <span class="token number">0</span> <span class="token operator">?</span></code></pre>

<p>查看R1的vrf路由表；</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>#<span class="token keyword">do</span> sh ip route vrf A<span class="token operator">-</span>Site1
Routing Table<span class="token operator">:</span> A<span class="token operator">-</span>Site1
Codes<span class="token operator">:</span> L <span class="token operator">-</span> local<span class="token punctuation">,</span> C <span class="token operator">-</span> connected<span class="token punctuation">,</span> S <span class="token operator">-</span> <span class="token keyword">static</span><span class="token punctuation">,</span> R <span class="token operator">-</span> RIP<span class="token punctuation">,</span> M <span class="token operator">-</span> mobile<span class="token punctuation">,</span> B <span class="token operator">-</span> BGP
        D <span class="token operator">-</span> EIGRP<span class="token punctuation">,</span> EX <span class="token operator">-</span> EIGRP external<span class="token punctuation">,</span> O <span class="token operator">-</span> OSPF<span class="token punctuation">,</span> IA <span class="token operator">-</span> OSPF inter area 
        N1 <span class="token operator">-</span> OSPF NSSA external type <span class="token number">1</span><span class="token punctuation">,</span> N2 <span class="token operator">-</span> OSPF NSSA external type <span class="token number">2</span>
        E1 <span class="token operator">-</span> OSPF external type <span class="token number">1</span><span class="token punctuation">,</span> E2 <span class="token operator">-</span> OSPF external type <span class="token number">2</span>
        i <span class="token operator">-</span> IS<span class="token operator">-</span>IS<span class="token punctuation">,</span> su <span class="token operator">-</span> IS<span class="token operator">-</span>IS summary<span class="token punctuation">,</span> L1 <span class="token operator">-</span> IS<span class="token operator">-</span>IS level<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> L2 <span class="token operator">-</span> IS<span class="token operator">-</span>IS level<span class="token operator">-</span><span class="token number">2</span>
        ia <span class="token operator">-</span> IS<span class="token operator">-</span>IS inter area<span class="token punctuation">,</span> <span class="token operator">*</span> <span class="token operator">-</span> candidate <span class="token keyword">default</span><span class="token punctuation">,</span> U <span class="token operator">-</span> per<span class="token operator">-</span>user <span class="token keyword">static</span> route
        o <span class="token operator">-</span> ODR<span class="token punctuation">,</span> P <span class="token operator">-</span> periodic downloaded <span class="token keyword">static</span> route<span class="token punctuation">,</span> H <span class="token operator">-</span> NHRP<span class="token punctuation">,</span> l <span class="token operator">-</span> LISP
        <span class="token operator">+</span> <span class="token operator">-</span> replicated route<span class="token punctuation">,</span> <span class="token operator">%</span> <span class="token operator">-</span> next hop override
Gateway of last resort is not set
        <span class="token number">5.0</span><span class="token number">.0</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">32</span> is subnetted<span class="token punctuation">,</span> <span class="token number">1</span> subnets
B        <span class="token number">5.5</span><span class="token number">.5</span><span class="token number">.5</span> <span class="token punctuation">[</span><span class="token number">20</span><span class="token operator">/</span><span class="token number">0</span><span class="token punctuation">]</span> via <span class="token number">192.168</span><span class="token number">.15</span><span class="token number">.5</span><span class="token punctuation">,</span> <span class="token number">00</span><span class="token operator">:</span><span class="token number">48</span><span class="token operator">:</span><span class="token number">25</span>
        <span class="token number">7.0</span><span class="token number">.0</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">32</span> is subnetted<span class="token punctuation">,</span> <span class="token number">1</span> subnets
B        <span class="token number">7.7</span><span class="token number">.7</span><span class="token number">.7</span> <span class="token punctuation">[</span><span class="token number">200</span><span class="token operator">/</span><span class="token number">0</span><span class="token punctuation">]</span> via <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span><span class="token punctuation">,</span> <span class="token number">00</span><span class="token operator">:</span><span class="token number">41</span><span class="token operator">:</span><span class="token number">20</span>
        <span class="token number">192.168</span><span class="token number">.15</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span> is variably subnetted<span class="token punctuation">,</span> <span class="token number">2</span> subnets<span class="token punctuation">,</span> <span class="token number">2</span> masks
C        <span class="token number">192.168</span><span class="token number">.15</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span> is directly connected<span class="token punctuation">,</span> FastEthernet0<span class="token operator">/</span><span class="token number">1</span>
L        <span class="token number">192.168</span><span class="token number">.15</span><span class="token number">.1</span><span class="token operator">/</span><span class="token number">32</span> is directly connected<span class="token punctuation">,</span> FastEthernet0<span class="token operator">/</span><span class="token number">1</span>
B     <span class="token number">192.168</span><span class="token number">.47</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span> <span class="token punctuation">[</span><span class="token number">200</span><span class="token operator">/</span><span class="token number">0</span><span class="token punctuation">]</span> via <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span><span class="token punctuation">,</span> <span class="token number">00</span><span class="token operator">:</span><span class="token number">38</span><span class="token operator">:</span><span class="token number">35</span></code></pre>

<p>查看R5的IP路由表；</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token function">R5</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>#<span class="token keyword">do</span> sh ip route
Codes<span class="token operator">:</span> L <span class="token operator">-</span> local<span class="token punctuation">,</span> C <span class="token operator">-</span> connected<span class="token punctuation">,</span> S <span class="token operator">-</span> <span class="token keyword">static</span><span class="token punctuation">,</span> R <span class="token operator">-</span> RIP<span class="token punctuation">,</span> M <span class="token operator">-</span> mobile<span class="token punctuation">,</span> B <span class="token operator">-</span> BGP
        D <span class="token operator">-</span> EIGRP<span class="token punctuation">,</span> EX <span class="token operator">-</span> EIGRP external<span class="token punctuation">,</span> O <span class="token operator">-</span> OSPF<span class="token punctuation">,</span> IA <span class="token operator">-</span> OSPF inter area 
        N1 <span class="token operator">-</span> OSPF NSSA external type <span class="token number">1</span><span class="token punctuation">,</span> N2 <span class="token operator">-</span> OSPF NSSA external type <span class="token number">2</span>
        E1 <span class="token operator">-</span> OSPF external type <span class="token number">1</span><span class="token punctuation">,</span> E2 <span class="token operator">-</span> OSPF external type <span class="token number">2</span>
        i <span class="token operator">-</span> IS<span class="token operator">-</span>IS<span class="token punctuation">,</span> su <span class="token operator">-</span> IS<span class="token operator">-</span>IS summary<span class="token punctuation">,</span> L1 <span class="token operator">-</span> IS<span class="token operator">-</span>IS level<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> L2 <span class="token operator">-</span> IS<span class="token operator">-</span>IS level<span class="token operator">-</span><span class="token number">2</span>
        ia <span class="token operator">-</span> IS<span class="token operator">-</span>IS inter area<span class="token punctuation">,</span> <span class="token operator">*</span> <span class="token operator">-</span> candidate <span class="token keyword">default</span><span class="token punctuation">,</span> U <span class="token operator">-</span> per<span class="token operator">-</span>user <span class="token keyword">static</span> route
        o <span class="token operator">-</span> ODR<span class="token punctuation">,</span> P <span class="token operator">-</span> periodic downloaded <span class="token keyword">static</span> route<span class="token punctuation">,</span> H <span class="token operator">-</span> NHRP<span class="token punctuation">,</span> l <span class="token operator">-</span> LISP
        <span class="token operator">+</span> <span class="token operator">-</span> replicated route<span class="token punctuation">,</span> <span class="token operator">%</span> <span class="token operator">-</span> next hop override
Gateway of last resort is not set
        <span class="token number">5.0</span><span class="token number">.0</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">32</span> is subnetted<span class="token punctuation">,</span> <span class="token number">1</span> subnets
C        <span class="token number">5.5</span><span class="token number">.5</span><span class="token number">.5</span> is directly connected<span class="token punctuation">,</span> Loopback0
        <span class="token number">7.0</span><span class="token number">.0</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">32</span> is subnetted<span class="token punctuation">,</span> <span class="token number">1</span> subnets
B        <span class="token number">7.7</span><span class="token number">.7</span><span class="token number">.7</span> <span class="token punctuation">[</span><span class="token number">20</span><span class="token operator">/</span><span class="token number">0</span><span class="token punctuation">]</span> via <span class="token number">192.168</span><span class="token number">.15</span><span class="token number">.1</span><span class="token punctuation">,</span> <span class="token number">00</span><span class="token operator">:</span><span class="token number">21</span><span class="token operator">:</span><span class="token number">34</span>
        <span class="token number">192.168</span><span class="token number">.15</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span> is variably subnetted<span class="token punctuation">,</span> <span class="token number">2</span> subnets<span class="token punctuation">,</span> <span class="token number">2</span> masks
C        <span class="token number">192.168</span><span class="token number">.15</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span> is directly connected<span class="token punctuation">,</span> FastEthernet0<span class="token operator">/</span><span class="token number">1</span>
L        <span class="token number">192.168</span><span class="token number">.15</span><span class="token number">.5</span><span class="token operator">/</span><span class="token number">32</span> is directly connected<span class="token punctuation">,</span> FastEthernet0<span class="token operator">/</span><span class="token number">1</span>
B     <span class="token number">192.168</span><span class="token number">.47</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span> <span class="token punctuation">[</span><span class="token number">20</span><span class="token operator">/</span><span class="token number">0</span><span class="token punctuation">]</span> via <span class="token number">192.168</span><span class="token number">.15</span><span class="token number">.1</span><span class="token punctuation">,</span> <span class="token number">00</span><span class="token operator">:</span><span class="token number">22</span><span class="token operator">:</span><span class="token number">04</span>
        <span class="token number">192.168</span><span class="token number">.56</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span> is variably subnetted<span class="token punctuation">,</span> <span class="token number">2</span> subnets<span class="token punctuation">,</span> <span class="token number">2</span> masks
C        <span class="token number">192.168</span><span class="token number">.56</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span> is directly connected<span class="token punctuation">,</span> FastEthernet0<span class="token operator">/</span><span class="token number">0</span>
L        <span class="token number">192.168</span><span class="token number">.56</span><span class="token number">.5</span><span class="token operator">/</span><span class="token number">32</span> is directly connected<span class="token punctuation">,</span> FastEthernet0<span class="token operator">/</span><span class="token number">0</span></code></pre>

<p>查看R5的BGP表；</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token function">R5</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>#<span class="token keyword">do</span> sh ip bgp
BGP table version is <span class="token number">18</span><span class="token punctuation">,</span> local router ID is <span class="token number">5.5</span><span class="token number">.5</span><span class="token number">.5</span>
Status codes<span class="token operator">:</span> s suppressed<span class="token punctuation">,</span> d damped<span class="token punctuation">,</span> h history<span class="token punctuation">,</span> <span class="token operator">*</span> valid<span class="token punctuation">,</span> <span class="token operator">></span> best<span class="token punctuation">,</span> i <span class="token operator">-</span> internal<span class="token punctuation">,</span>
                r RIB<span class="token operator">-</span>failure<span class="token punctuation">,</span> S Stale<span class="token punctuation">,</span> m multipath<span class="token punctuation">,</span> b backup<span class="token operator">-</span>path<span class="token punctuation">,</span> x best<span class="token operator">-</span>external<span class="token punctuation">,</span> f RT<span class="token operator">-</span>Filter
Origin codes<span class="token operator">:</span> i <span class="token operator">-</span> IGP<span class="token punctuation">,</span> e <span class="token operator">-</span> EGP<span class="token punctuation">,</span> <span class="token operator">?</span> <span class="token operator">-</span> incomplete
        Network          Next Hop            Metric LocPrf Weight  Path
<span class="token operator">*</span><span class="token operator">></span> <span class="token number">5.5</span><span class="token number">.5</span><span class="token number">.5</span><span class="token operator">/</span><span class="token number">32</span>       <span class="token number">0.0</span><span class="token number">.0</span><span class="token number">.0</span>                  <span class="token number">0</span>         <span class="token number">32768</span>                             i
<span class="token operator">*</span><span class="token operator">></span> <span class="token number">7.7</span><span class="token number">.7</span><span class="token number">.7</span><span class="token operator">/</span><span class="token number">32</span>       <span class="token number">192.168</span><span class="token number">.15</span><span class="token number">.1</span>                           <span class="token number">0</span>              <span class="token number">1</span> <span class="token number">65002</span> i
r<span class="token operator">></span> <span class="token number">192.168</span><span class="token number">.15</span><span class="token number">.0</span>     <span class="token number">192.168</span><span class="token number">.15</span><span class="token number">.1</span>             <span class="token number">0</span>             <span class="token number">0</span>           <span class="token number">1</span> <span class="token operator">?</span>
<span class="token operator">*</span><span class="token operator">></span> <span class="token number">192.168</span><span class="token number">.47</span><span class="token number">.0</span>     <span class="token number">192.168</span><span class="token number">.15</span><span class="token number">.1</span>                           <span class="token number">0</span>            <span class="token number">1</span> <span class="token operator">?</span>
<span class="token comment">//可以看到前缀7.7.7.7/32的AS_PATH属性中看到起源AS65002；</span></code></pre>
<h2 id="实验2：同一VPN的不同站点使用相同的AS号（使用as-override）；"><a href="#实验2：同一VPN的不同站点使用相同的AS号（使用as-override）；" class="headerlink" title="实验2：同一VPN的不同站点使用相同的AS号（使用as-override）；"></a>实验2：同一VPN的不同站点使用相同的AS号（使用as-override）；</h2><p>修改R7上BGP AS号为65001，使之与站点1的R5的BGP AS号相同；</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token function">R7</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>#no router bgp <span class="token number">65002</span>
<span class="token function">R7</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>#router bgp <span class="token number">65001</span>
<span class="token function">R7</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span>#bgp router<span class="token operator">-</span>id <span class="token number">7.7</span><span class="token number">.7</span><span class="token number">.7</span>
<span class="token function">R7</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span>#bgp log<span class="token operator">-</span>neighbor<span class="token operator">-</span>changes
<span class="token function">R7</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span>#network <span class="token number">7.7</span><span class="token number">.7</span><span class="token number">.7</span> mask <span class="token number">255.255</span><span class="token number">.255</span><span class="token number">.255</span>
<span class="token function">R7</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span>#neighbor <span class="token number">192.168</span><span class="token number">.47</span><span class="token number">.4</span> remote<span class="token operator">-</span>as <span class="token number">1</span>
<span class="token function">R7</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span>#exit</code></pre>

<p>修改PE2（R4）的PE-CE路由配置，将MP-BGP IPv4 VRF A-Site2的EBGP邻居配置进行修改；</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>#router bgp <span class="token number">1</span>
<span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span>#address<span class="token operator">-</span>f ipv4 vrf A<span class="token operator">-</span>Site2
<span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token operator">-</span>af<span class="token punctuation">)</span>#no neighbor <span class="token number">192.168</span><span class="token number">.47</span><span class="token number">.7</span> remote<span class="token operator">-</span>as <span class="token number">65002</span>
<span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token operator">-</span>af<span class="token punctuation">)</span>#neighbor <span class="token number">192.168</span><span class="token number">.47</span><span class="token number">.7</span> remote<span class="token operator">-</span>as <span class="token number">65001</span>
<span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token operator">-</span>af<span class="token punctuation">)</span>#neighbor <span class="token number">192.168</span><span class="token number">.47</span><span class="token number">.7</span> activate</code></pre>

<p>验证：查看R5的IP路由表；</p>
<pre class="language-none"><code class="language-none">R5(config)#do sh ip route
Codes: L - local, C - connected, S - static, R - RIP, M - mobile, B - BGP
        D - EIGRP, EX - EIGRP external, O - OSPF, IA - OSPF inter area 
        N1 - OSPF NSSA external type 1, N2 - OSPF NSSA external type 2
        E1 - OSPF external type 1, E2 - OSPF external type 2
        i - IS-IS, su - IS-IS summary, L1 - IS-IS level-1, L2 - IS-IS level-2
        ia - IS-IS inter area, * - candidate default, U - per-user static route
        o - ODR, P - periodic downloaded static route, H - NHRP, l - LISP
        + - replicated route, % - next hop override
Gateway of last resort is not set
        5.0.0.0&#x2F;32 is subnetted, 1 subnets
C        5.5.5.5 is directly connected, Loopback0
        192.168.15.0&#x2F;24 is variably subnetted, 2 subnets, 2 masks
C        192.168.15.0&#x2F;24 is directly connected, FastEthernet0&#x2F;1
L        192.168.15.5&#x2F;32 is directly connected, FastEthernet0&#x2F;1
B     192.168.47.0&#x2F;24 [20&#x2F;0] via 192.168.15.1, 00:57:01
        192.168.56.0&#x2F;24 is variably subnetted, 2 subnets, 2 masks
C        192.168.56.0&#x2F;24 is directly connected, FastEthernet0&#x2F;0
L        192.168.56.5&#x2F;32 is directly connected, FastEthernet0&#x2F;0
&#x2F;&#x2F;没有发现关于前缀7.7.7.7&#x2F;32的路由；</code></pre>

<p>验证：查看R5的BGP表；</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token function">R5</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>#<span class="token keyword">do</span> sh ip bgp    
BGP table version is <span class="token number">19</span><span class="token punctuation">,</span> local router ID is <span class="token number">5.5</span><span class="token number">.5</span><span class="token number">.5</span>
Status codes<span class="token operator">:</span> s suppressed<span class="token punctuation">,</span> d damped<span class="token punctuation">,</span> h history<span class="token punctuation">,</span> <span class="token operator">*</span> valid<span class="token punctuation">,</span> <span class="token operator">></span> best<span class="token punctuation">,</span> i <span class="token operator">-</span> internal<span class="token punctuation">,</span>
                r RIB<span class="token operator">-</span>failure<span class="token punctuation">,</span> S Stale<span class="token punctuation">,</span> m multipath<span class="token punctuation">,</span> b backup<span class="token operator">-</span>path<span class="token punctuation">,</span> x best<span class="token operator">-</span>external<span class="token punctuation">,</span> f RT<span class="token operator">-</span>Filter
Origin codes<span class="token operator">:</span> i <span class="token operator">-</span> IGP<span class="token punctuation">,</span> e <span class="token operator">-</span> EGP<span class="token punctuation">,</span> <span class="token operator">?</span> <span class="token operator">-</span> incomplete
Network          Next Hop            Metric LocPrf Weight Path
<span class="token operator">*</span><span class="token operator">></span> <span class="token number">5.5</span><span class="token number">.5</span><span class="token number">.5</span><span class="token operator">/</span><span class="token number">32</span>       <span class="token number">0.0</span><span class="token number">.0</span><span class="token number">.0</span>                  <span class="token number">0</span>         <span class="token number">32768</span> i
r<span class="token operator">></span> <span class="token number">192.168</span><span class="token number">.15</span><span class="token number">.0</span>     <span class="token number">192.168</span><span class="token number">.15</span><span class="token number">.1</span>             <span class="token number">0</span>             <span class="token number">0</span> <span class="token number">1</span> <span class="token operator">?</span>
<span class="token operator">*</span><span class="token operator">></span> <span class="token number">192.168</span><span class="token number">.47</span><span class="token number">.0</span>     <span class="token number">192.168</span><span class="token number">.15</span><span class="token number">.1</span>                           <span class="token number">0</span> <span class="token number">1</span> <span class="token operator">?</span>
<span class="token comment">//也没有发现关于前缀7.7.7.7/32的路由；</span>
<span class="token comment">//因为EBGP防环机制，当R5收到来自PE1的BGP路由后，由于前缀7.7.7.7/32的BGP路由中AS_PATH属性有和自己AS相同的65001，</span>
<span class="token comment">//所以将此路由丢弃了；</span></code></pre>

<p>在PE路由器上，针对各自直连到VRF接口的CE路由器EBGP邻居配置<code>as-override</code>；</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>#router bgp <span class="token number">1</span>
<span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span>#address<span class="token operator">-</span>family ipv4 vrf A<span class="token operator">-</span>Site1
<span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token operator">-</span>af<span class="token punctuation">)</span>#neighbor <span class="token number">192.168</span><span class="token number">.15</span><span class="token number">.5</span> as<span class="token operator">-</span>override

<span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>#router bgp <span class="token number">1</span>
<span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span>#address<span class="token operator">-</span>family ipv4 vrf A<span class="token operator">-</span>Site2
<span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token operator">-</span>af<span class="token punctuation">)</span>#neighbor <span class="token number">192.168</span><span class="token number">.47</span><span class="token number">.7</span> as<span class="token operator">-</span>override</code></pre>

<p>查看R5的BGP表；</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token function">R5</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>#<span class="token keyword">do</span> sh ip bgp
BGP table version is <span class="token number">20</span><span class="token punctuation">,</span> local router ID is <span class="token number">5.5</span><span class="token number">.5</span><span class="token number">.5</span>
Status codes<span class="token operator">:</span> s suppressed<span class="token punctuation">,</span> d damped<span class="token punctuation">,</span> h history<span class="token punctuation">,</span> <span class="token operator">*</span> valid<span class="token punctuation">,</span> <span class="token operator">></span> best<span class="token punctuation">,</span> i <span class="token operator">-</span> internal<span class="token punctuation">,</span>
                r RIB<span class="token operator">-</span>failure<span class="token punctuation">,</span> S Stale<span class="token punctuation">,</span> m multipath<span class="token punctuation">,</span> b backup<span class="token operator">-</span>path<span class="token punctuation">,</span> x best<span class="token operator">-</span>external<span class="token punctuation">,</span> f RT<span class="token operator">-</span>Filter
Origin codes<span class="token operator">:</span> i <span class="token operator">-</span> IGP<span class="token punctuation">,</span> e <span class="token operator">-</span> EGP<span class="token punctuation">,</span> <span class="token operator">?</span> <span class="token operator">-</span> incomplete
Network          Next Hop            Metric LocPrf Weight Path
<span class="token operator">*</span><span class="token operator">></span> <span class="token number">5.5</span><span class="token number">.5</span><span class="token number">.5</span><span class="token operator">/</span><span class="token number">32</span>       <span class="token number">0.0</span><span class="token number">.0</span><span class="token number">.0</span>                  <span class="token number">0</span>         <span class="token number">32768</span> i
<span class="token operator">*</span><span class="token operator">></span> <span class="token number">7.7</span><span class="token number">.7</span><span class="token number">.7</span><span class="token operator">/</span><span class="token number">32</span>       <span class="token number">192.168</span><span class="token number">.15</span><span class="token number">.1</span>                           <span class="token number">0</span> <span class="token number">1</span> <span class="token number">1</span> i
r<span class="token operator">></span> <span class="token number">192.168</span><span class="token number">.15</span><span class="token number">.0</span>     <span class="token number">192.168</span><span class="token number">.15</span><span class="token number">.1</span>             <span class="token number">0</span>             <span class="token number">0</span> <span class="token number">1</span> <span class="token operator">?</span>
<span class="token operator">*</span><span class="token operator">></span> <span class="token number">192.168</span><span class="token number">.47</span><span class="token number">.0</span>     <span class="token number">192.168</span><span class="token number">.15</span><span class="token number">.1</span>                           <span class="token number">0</span> <span class="token number">1</span> <span class="token operator">?</span></code></pre>

<p>查看R7的BGP表；</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token function">R7</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>#<span class="token keyword">do</span> sh ip bgp
BGP table version is <span class="token number">5</span><span class="token punctuation">,</span> local router ID is <span class="token number">7.7</span><span class="token number">.7</span><span class="token number">.7</span>
Status codes<span class="token operator">:</span> s suppressed<span class="token punctuation">,</span> d damped<span class="token punctuation">,</span> h history<span class="token punctuation">,</span> <span class="token operator">*</span> valid<span class="token punctuation">,</span> <span class="token operator">></span> best<span class="token punctuation">,</span> i <span class="token operator">-</span> internal<span class="token punctuation">,</span>
                r RIB<span class="token operator">-</span>failure<span class="token punctuation">,</span> S Stale<span class="token punctuation">,</span> m multipath<span class="token punctuation">,</span> b backup<span class="token operator">-</span>path<span class="token punctuation">,</span> x best<span class="token operator">-</span>external<span class="token punctuation">,</span> f RT<span class="token operator">-</span>Filter
Origin codes<span class="token operator">:</span> i <span class="token operator">-</span> IGP<span class="token punctuation">,</span> e <span class="token operator">-</span> EGP<span class="token punctuation">,</span> <span class="token operator">?</span> <span class="token operator">-</span> incomplete
Network          Next Hop            Metric LocPrf Weight Path
<span class="token operator">*</span><span class="token operator">></span> <span class="token number">5.5</span><span class="token number">.5</span><span class="token number">.5</span><span class="token operator">/</span><span class="token number">32</span>       <span class="token number">192.168</span><span class="token number">.47</span><span class="token number">.4</span>                           <span class="token number">0</span>             <span class="token number">1</span> <span class="token number">1</span> i
<span class="token operator">*</span><span class="token operator">></span> <span class="token number">7.7</span><span class="token number">.7</span><span class="token number">.7</span><span class="token operator">/</span><span class="token number">32</span>       <span class="token number">0.0</span><span class="token number">.0</span><span class="token number">.0</span>                  <span class="token number">0</span>         <span class="token number">32768</span>                   i
<span class="token operator">*</span><span class="token operator">></span> <span class="token number">192.168</span><span class="token number">.15</span><span class="token number">.0</span>     <span class="token number">192.168</span><span class="token number">.47</span><span class="token number">.4</span>                                      <span class="token number">0</span> <span class="token number">1</span> <span class="token operator">?</span>
r<span class="token operator">></span> <span class="token number">192.168</span><span class="token number">.47</span><span class="token number">.0</span>     <span class="token number">192.168</span><span class="token number">.47</span><span class="token number">.4</span>             <span class="token number">0</span>                       <span class="token number">0</span> <span class="token number">1</span> <span class="token operator">?</span></code></pre>
<h1 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h1><p>PE路由器简单地比较CE路由器ASN和as-path中的ASN，如果匹配的话，所有在as-path中的该ASN都会被服务提供商的ASN所代替。</p>
<p>这样一来，远程CE就会接受这些路由了，因为它们在这些BGP路由的as-path中看不到自己的ASN了！但这样一来，对于可能存在环路的保护机制，以及非最优路由的as-path检查机制就失效了。因此，在使用as-override功能进行ASN覆盖的时候，明智的做法是为BGP实施SOO特性。</p>
]]></content>
      <categories>
        <category>Network</category>
      </categories>
      <tags>
        <tag>MPLS</tag>
        <tag>Network</tag>
      </tags>
  </entry>
  <entry>
    <title>MPLS 实验12：SOO and EIGRP on Backdoor Link</title>
    <url>/2014/MPLS_Lab_12/</url>
    <content><![CDATA[<h1 id="实验环境："><a href="#实验环境：" class="headerlink" title="实验环境："></a>实验环境：</h1><ul>
<li>模拟器：GNS3 0.8.6</li>
<li>Cisco IOS：c7200-adventerprisek9-mz.151-4.M2.image</li>
</ul>
<h1 id="实验拓扑："><a href="#实验拓扑：" class="headerlink" title="实验拓扑："></a>实验拓扑：</h1><p><img src="/2014/MPLS_Lab_12/topo.png"></p>
<span id="more"></span>

<h1 id="基本预配置："><a href="#基本预配置：" class="headerlink" title="基本预配置："></a>基本预配置：</h1><h2 id="R1："><a href="#R1：" class="headerlink" title="R1："></a>R1：</h2><pre class="language-c" data-language="c"><code class="language-c">hostname R1
<span class="token operator">!</span>
ip cef
<span class="token operator">!</span>
ip vrf A<span class="token operator">-</span>Site1
        rd <span class="token number">1</span><span class="token operator">:</span><span class="token number">1</span>
        route<span class="token operator">-</span>target export <span class="token number">1</span><span class="token operator">:</span><span class="token number">1</span>
        route<span class="token operator">-</span>target import <span class="token number">1</span><span class="token operator">:</span><span class="token number">1</span>
<span class="token operator">!</span>
mpls label protocol ldp
<span class="token operator">!</span>
interface Loopback0
        ip address <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span> <span class="token number">255.255</span><span class="token number">.255</span><span class="token number">.255</span>
        ip ospf <span class="token number">1</span> area <span class="token number">0</span>
<span class="token operator">!</span>
interface FastEthernet0<span class="token operator">/</span><span class="token number">0</span>
        ip address <span class="token number">192.168</span><span class="token number">.12</span><span class="token number">.1</span> <span class="token number">255.255</span><span class="token number">.255</span><span class="token number">.0</span>
        ip ospf <span class="token number">1</span> area <span class="token number">0</span>
        no shutdown
mpls ip
<span class="token operator">!</span>
interface FastEthernet0<span class="token operator">/</span><span class="token number">1</span>
        ip vrf forwarding A<span class="token operator">-</span>Site1
        ip address <span class="token number">192.168</span><span class="token number">.13</span><span class="token number">.1</span> <span class="token number">255.255</span><span class="token number">.255</span><span class="token number">.0</span>
        no shutdown
<span class="token operator">!</span>
<span class="token operator">!</span>
router eigrp <span class="token number">1</span>
        <span class="token operator">!</span>
        address<span class="token operator">-</span>family ipv4 vrf A<span class="token operator">-</span>Site1 autonomous<span class="token operator">-</span>system <span class="token number">1</span>
        redistribute bgp <span class="token number">1</span> metric <span class="token number">10000</span> <span class="token number">100</span> <span class="token number">255</span> <span class="token number">1</span> <span class="token number">1500</span>
        network <span class="token number">192.168</span><span class="token number">.13</span><span class="token number">.0</span>
        eigrp router<span class="token operator">-</span>id <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span>
        exit<span class="token operator">-</span>address<span class="token operator">-</span>family
<span class="token operator">!</span>
router ospf <span class="token number">1</span>
        router<span class="token operator">-</span>id <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span>
<span class="token operator">!</span>
router bgp <span class="token number">1</span>
        bgp log<span class="token operator">-</span>neighbor<span class="token operator">-</span>changes
        neighbor <span class="token number">2.2</span><span class="token number">.2</span><span class="token number">.2</span> remote<span class="token operator">-</span>as <span class="token number">1</span>
        neighbor <span class="token number">2.2</span><span class="token number">.2</span><span class="token number">.2</span> update<span class="token operator">-</span>source Loopback0
        neighbor <span class="token number">2.2</span><span class="token number">.2</span><span class="token number">.2</span> next<span class="token operator">-</span>hop<span class="token operator">-</span>self
        <span class="token operator">!</span>
        address<span class="token operator">-</span>family vpnv4
        neighbor <span class="token number">2.2</span><span class="token number">.2</span><span class="token number">.2</span> activate
        neighbor <span class="token number">2.2</span><span class="token number">.2</span><span class="token number">.2</span> send<span class="token operator">-</span>community both
        exit<span class="token operator">-</span>address<span class="token operator">-</span>family
        <span class="token operator">!</span>
        address<span class="token operator">-</span>family ipv4 vrf A<span class="token operator">-</span>Site1
        network <span class="token number">11.11</span><span class="token number">.11</span><span class="token number">.11</span> mask <span class="token number">255.255</span><span class="token number">.255</span><span class="token number">.255</span>
        redistribute connected
        redistribute eigrp <span class="token number">1</span>
        exit<span class="token operator">-</span>address<span class="token operator">-</span>family
<span class="token operator">!</span>
mpls ldp router<span class="token operator">-</span>id Loopback0 force
<span class="token operator">!</span>
line con <span class="token number">0</span>
        exec<span class="token operator">-</span>timeout <span class="token number">0</span> <span class="token number">0</span>
        logging synchronous
<span class="token operator">!</span>
end</code></pre>
<h2 id="R2"><a href="#R2" class="headerlink" title="R2:"></a>R2:</h2><pre class="language-c" data-language="c"><code class="language-c">hostname R2
<span class="token operator">!</span>
ip cef
<span class="token operator">!</span>
ip vrf A<span class="token operator">-</span>Site2
        rd <span class="token number">1</span><span class="token operator">:</span><span class="token number">2</span>
        route<span class="token operator">-</span>target export <span class="token number">1</span><span class="token operator">:</span><span class="token number">1</span>
        route<span class="token operator">-</span>target import <span class="token number">1</span><span class="token operator">:</span><span class="token number">1</span>
<span class="token operator">!</span>
mpls label protocol ldp
<span class="token operator">!</span>
interface Loopback0
        ip address <span class="token number">2.2</span><span class="token number">.2</span><span class="token number">.2</span> <span class="token number">255.255</span><span class="token number">.255</span><span class="token number">.255</span>
        ip ospf <span class="token number">1</span> area <span class="token number">0</span>
<span class="token operator">!</span>
interface FastEthernet0<span class="token operator">/</span><span class="token number">0</span>
        ip address <span class="token number">192.168</span><span class="token number">.12</span><span class="token number">.2</span> <span class="token number">255.255</span><span class="token number">.255</span><span class="token number">.0</span>
        ip ospf <span class="token number">1</span> area <span class="token number">0</span>
        no shutdown
mpls ip
<span class="token operator">!</span>
interface FastEthernet0<span class="token operator">/</span><span class="token number">1</span>
        ip vrf forwarding A<span class="token operator">-</span>Site2
        ip address <span class="token number">192.168</span><span class="token number">.24</span><span class="token number">.2</span> <span class="token number">255.255</span><span class="token number">.255</span><span class="token number">.0</span>
        no shutdown
<span class="token operator">!</span>
router eigrp <span class="token number">1</span>
        <span class="token operator">!</span>
        address<span class="token operator">-</span>family ipv4 vrf A<span class="token operator">-</span>Site2 autonomous<span class="token operator">-</span>system <span class="token number">1</span>
        redistribute bgp <span class="token number">1</span> metric <span class="token number">10000</span> <span class="token number">100</span> <span class="token number">255</span> <span class="token number">1</span> <span class="token number">1500</span>
        network <span class="token number">192.168</span><span class="token number">.24</span><span class="token number">.0</span>
        eigrp router<span class="token operator">-</span>id <span class="token number">2.2</span><span class="token number">.2</span><span class="token number">.2</span>
        exit<span class="token operator">-</span>address<span class="token operator">-</span>family
<span class="token operator">!</span>
router ospf <span class="token number">1</span>
        router<span class="token operator">-</span>id <span class="token number">2.2</span><span class="token number">.2</span><span class="token number">.2</span>
<span class="token operator">!</span>
router bgp <span class="token number">1</span>
        bgp log<span class="token operator">-</span>neighbor<span class="token operator">-</span>changes
        neighbor <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span> remote<span class="token operator">-</span>as <span class="token number">1</span>
        neighbor <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span> update<span class="token operator">-</span>source Loopback0
        neighbor <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span> next<span class="token operator">-</span>hop<span class="token operator">-</span>self
        <span class="token operator">!</span>
        address<span class="token operator">-</span>family vpnv4
        neighbor <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span> activate
        neighbor <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span> send<span class="token operator">-</span>community both
        exit<span class="token operator">-</span>address<span class="token operator">-</span>family
        <span class="token operator">!</span>
        address<span class="token operator">-</span>family ipv4 vrf A<span class="token operator">-</span>Site2
        network <span class="token number">22.22</span><span class="token number">.22</span><span class="token number">.22</span> mask <span class="token number">255.255</span><span class="token number">.255</span><span class="token number">.255</span>
        redistribute connected
        redistribute eigrp <span class="token number">1</span>
        exit<span class="token operator">-</span>address<span class="token operator">-</span>family
<span class="token operator">!</span>
mpls ldp router<span class="token operator">-</span>id Loopback0 force
<span class="token operator">!</span>
line con <span class="token number">0</span>
        exec<span class="token operator">-</span>timeout <span class="token number">0</span> <span class="token number">0</span>
        logging synchronous
<span class="token operator">!</span>
end</code></pre>
<h2 id="R3"><a href="#R3" class="headerlink" title="R3:"></a>R3:</h2><pre class="language-c" data-language="c"><code class="language-c">hostname R3
<span class="token operator">!</span>
ip cef
<span class="token operator">!</span>
interface Loopback0
        ip address <span class="token number">3.3</span><span class="token number">.3</span><span class="token number">.3</span> <span class="token number">255.255</span><span class="token number">.255</span><span class="token number">.255</span>
<span class="token operator">!</span>
interface FastEthernet0<span class="token operator">/</span><span class="token number">1</span>
        ip address <span class="token number">192.168</span><span class="token number">.13</span><span class="token number">.3</span> <span class="token number">255.255</span><span class="token number">.255</span><span class="token number">.0</span>
        no shutdown
<span class="token operator">!</span>
interface Serial1<span class="token operator">/</span><span class="token number">0</span>
        ip address <span class="token number">192.168</span><span class="token number">.34</span><span class="token number">.3</span> <span class="token number">255.255</span><span class="token number">.255</span><span class="token number">.0</span>
        serial restart<span class="token operator">-</span>delay <span class="token number">0</span>
        clock rate <span class="token number">64000</span>
        no shutdown
<span class="token operator">!</span>
router eigrp <span class="token number">1</span>
        network <span class="token number">3.3</span><span class="token number">.3</span><span class="token number">.3</span> <span class="token number">0.0</span><span class="token number">.0</span><span class="token number">.0</span>
        network <span class="token number">192.168</span><span class="token number">.13</span><span class="token number">.0</span>
        network <span class="token number">192.168</span><span class="token number">.34</span><span class="token number">.0</span>
        eigrp router<span class="token operator">-</span>id <span class="token number">3.3</span><span class="token number">.3</span><span class="token number">.3</span>
<span class="token operator">!</span>
line con <span class="token number">0</span>
        exec<span class="token operator">-</span>timeout <span class="token number">0</span> <span class="token number">0</span>
        logging synchronous
<span class="token operator">!</span>
end</code></pre>

<h2 id="R4"><a href="#R4" class="headerlink" title="R4:"></a>R4:</h2><pre class="language-c" data-language="c"><code class="language-c">hostname R4
<span class="token operator">!</span>
ip cef
<span class="token operator">!</span>
interface Loopback0
        ip address <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span> <span class="token number">255.255</span><span class="token number">.255</span><span class="token number">.255</span>
<span class="token operator">!</span>
interface FastEthernet0<span class="token operator">/</span><span class="token number">1</span>
        ip address <span class="token number">192.168</span><span class="token number">.24</span><span class="token number">.4</span> <span class="token number">255.255</span><span class="token number">.255</span><span class="token number">.0</span>
        no shutdown
<span class="token operator">!</span>
interface Serial1<span class="token operator">/</span><span class="token number">0</span>
        ip address <span class="token number">192.168</span><span class="token number">.34</span><span class="token number">.4</span> <span class="token number">255.255</span><span class="token number">.255</span><span class="token number">.0</span>
        serial restart<span class="token operator">-</span>delay <span class="token number">0</span>
        no shutdown
<span class="token operator">!</span>
router eigrp <span class="token number">1</span>
        network <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span> <span class="token number">0.0</span><span class="token number">.0</span><span class="token number">.0</span>
        network <span class="token number">192.168</span><span class="token number">.24</span><span class="token number">.0</span>
        network <span class="token number">192.168</span><span class="token number">.34</span><span class="token number">.0</span>
<span class="token operator">!</span>
line con <span class="token number">0</span>
        exec<span class="token operator">-</span>timeout <span class="token number">0</span> <span class="token number">0</span>
        logging synchronous
<span class="token operator">!</span>
end</code></pre>
<h1 id="实验与调试："><a href="#实验与调试：" class="headerlink" title="实验与调试："></a>实验与调试：</h1><h2 id="实验1："><a href="#实验1：" class="headerlink" title="实验1："></a>实验1：</h2><p>查看R1的IP BGP VNPv4路由表关于路由4.4.4.4的明细；</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token operator">-</span><span class="token keyword">if</span><span class="token punctuation">)</span>#<span class="token keyword">do</span> sh ip bgp vpnv4 all <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span>
BGP routing table entry <span class="token keyword">for</span> <span class="token number">1</span><span class="token operator">:</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span><span class="token operator">/</span><span class="token number">32</span><span class="token punctuation">,</span> version <span class="token number">79</span>
Paths<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token number">1</span> available<span class="token punctuation">,</span> best #<span class="token number">1</span><span class="token punctuation">,</span> table A<span class="token operator">-</span>Site1<span class="token punctuation">)</span>
Not advertised to any peer
Local<span class="token punctuation">,</span> imported path from <span class="token number">1</span><span class="token operator">:</span><span class="token number">2</span><span class="token operator">:</span><span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span><span class="token operator">/</span><span class="token number">32</span>
<span class="token number">2.2</span><span class="token number">.2</span><span class="token number">.2</span> <span class="token punctuation">(</span>metric <span class="token number">2</span><span class="token punctuation">)</span> from <span class="token number">2.2</span><span class="token number">.2</span><span class="token number">.2</span> <span class="token punctuation">(</span><span class="token number">2.2</span><span class="token number">.2</span><span class="token number">.2</span><span class="token punctuation">)</span>
        Origin incomplete<span class="token punctuation">,</span> metric <span class="token number">156160</span><span class="token punctuation">,</span> localpref <span class="token number">100</span><span class="token punctuation">,</span> valid<span class="token punctuation">,</span> internal<span class="token punctuation">,</span> best
        Extended Community<span class="token operator">:</span> RT<span class="token operator">:</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">1</span> Cost<span class="token operator">:</span>pre<span class="token operator">-</span>bestpath<span class="token operator">:</span><span class="token number">128</span><span class="token operator">:</span><span class="token number">156160</span> <span class="token number">0x8800</span><span class="token operator">:</span><span class="token number">32768</span><span class="token operator">:</span><span class="token number">0</span> 
        <span class="token number">0x8801</span><span class="token operator">:</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">130560</span> <span class="token number">0x8802</span><span class="token operator">:</span><span class="token number">65281</span><span class="token operator">:</span><span class="token number">25600</span> <span class="token number">0x8803</span><span class="token operator">:</span><span class="token number">65281</span><span class="token operator">:</span><span class="token number">1500</span> <span class="token number">0x8806</span><span class="token operator">:</span><span class="token number">0</span><span class="token operator">:</span><span class="token number">67372036</span>
        mpls labels in<span class="token operator">/</span>out nolabel<span class="token operator">/</span><span class="token number">22</span>
BGP routing table entry <span class="token keyword">for</span> <span class="token number">1</span><span class="token operator">:</span><span class="token number">2</span><span class="token operator">:</span><span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span><span class="token operator">/</span><span class="token number">32</span><span class="token punctuation">,</span> version <span class="token number">77</span>
Paths<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token number">1</span> available<span class="token punctuation">,</span> best #<span class="token number">1</span><span class="token punctuation">,</span> no table<span class="token punctuation">)</span>
Not advertised to any peer
Local
<span class="token number">2.2</span><span class="token number">.2</span><span class="token number">.2</span> <span class="token punctuation">(</span>metric <span class="token number">2</span><span class="token punctuation">)</span> from <span class="token number">2.2</span><span class="token number">.2</span><span class="token number">.2</span> <span class="token punctuation">(</span><span class="token number">2.2</span><span class="token number">.2</span><span class="token number">.2</span><span class="token punctuation">)</span>
        Origin incomplete<span class="token punctuation">,</span> metric <span class="token number">156160</span><span class="token punctuation">,</span> localpref <span class="token number">100</span><span class="token punctuation">,</span> valid<span class="token punctuation">,</span> internal<span class="token punctuation">,</span> best
        Extended Community<span class="token operator">:</span> RT<span class="token operator">:</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">1</span> Cost<span class="token operator">:</span>pre<span class="token operator">-</span>bestpath<span class="token operator">:</span><span class="token number">128</span><span class="token operator">:</span><span class="token number">156160</span> <span class="token number">0x8800</span><span class="token operator">:</span><span class="token number">32768</span><span class="token operator">:</span><span class="token number">0</span> 
        <span class="token number">0x8801</span><span class="token operator">:</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">130560</span> <span class="token number">0x8802</span><span class="token operator">:</span><span class="token number">65281</span><span class="token operator">:</span><span class="token number">25600</span> <span class="token number">0x8803</span><span class="token operator">:</span><span class="token number">65281</span><span class="token operator">:</span><span class="token number">1500</span> <span class="token number">0x8806</span><span class="token operator">:</span><span class="token number">0</span><span class="token operator">:</span><span class="token number">67372036</span>
        mpls labels in<span class="token operator">/</span>out nolabel<span class="token operator">/</span><span class="token number">22</span>
<span class="token comment">//VPNv4路由默认不携带SOO；</span></code></pre>

<p>在PE上，创建路由映射表SOO_LAB，对所有VPNv4路由设置MP-BGP拓展团体属性；</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>#route<span class="token operator">-</span>map SOO_LAB permit <span class="token number">10</span>
<span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token operator">-</span>route<span class="token operator">-</span>map<span class="token punctuation">)</span>#set extcommunity <span class="token operator">?</span>
cost  Cost extended community
rt    Route Target extended community
soo   Site<span class="token operator">-</span>of<span class="token operator">-</span>Origin extended community

<span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token operator">-</span>route<span class="token operator">-</span>map<span class="token punctuation">)</span>#set extcommunity soo <span class="token operator">?</span>
ASN<span class="token operator">:</span>nn or IP<span class="token operator">-</span>address<span class="token operator">:</span>nn  VPN extended community

<span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token operator">-</span>route<span class="token operator">-</span>map<span class="token punctuation">)</span>#set extcommunity soo <span class="token number">1</span><span class="token operator">:</span><span class="token number">1</span>
<span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token operator">-</span>route<span class="token operator">-</span>map<span class="token punctuation">)</span>#exit

<span class="token function">R2</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>#route<span class="token operator">-</span>map SOO_LAB permit <span class="token number">10</span> 
<span class="token function">R2</span><span class="token punctuation">(</span>config<span class="token operator">-</span>route<span class="token operator">-</span>map<span class="token punctuation">)</span>#set extcommunity soo <span class="token number">1</span><span class="token operator">:</span><span class="token number">2</span>
<span class="token function">R2</span><span class="token punctuation">(</span>config<span class="token operator">-</span>route<span class="token operator">-</span>map<span class="token punctuation">)</span>#exit</code></pre>
<p>在PE的vrf接口上应用设置SOO的<code>route-map</code>；</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>#<span class="token keyword">int</span> f0<span class="token operator">/</span><span class="token number">1</span>
<span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token operator">-</span><span class="token keyword">if</span><span class="token punctuation">)</span>#ip vrf sitemap <span class="token operator">?</span>
WORD  Name of the route<span class="token operator">-</span>map
<span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token operator">-</span><span class="token keyword">if</span><span class="token punctuation">)</span>#ip vrf sitemap SOO_LAB


<span class="token function">R2</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>#<span class="token keyword">int</span> f0<span class="token operator">/</span><span class="token number">1</span>
<span class="token function">R2</span><span class="token punctuation">(</span>config<span class="token operator">-</span><span class="token keyword">if</span><span class="token punctuation">)</span>#ip vrf sitemap SOO_LAB</code></pre>
<p>在连接到后门链路的CE或C路由器上为EIGRP配置SOO；</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token function">R3</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>#route<span class="token operator">-</span>map SOO_LAB permit <span class="token number">10</span> 
<span class="token function">R3</span><span class="token punctuation">(</span>config<span class="token operator">-</span>route<span class="token operator">-</span>map<span class="token punctuation">)</span>#set extcommunity soo <span class="token number">1</span><span class="token operator">:</span><span class="token number">1</span>

<span class="token function">R3</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>#<span class="token keyword">int</span> f0<span class="token operator">/</span><span class="token number">1</span>
<span class="token function">R3</span><span class="token punctuation">(</span>config<span class="token operator">-</span><span class="token keyword">if</span><span class="token punctuation">)</span>#ip vrf sitemap SOO_LAB

<span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>#route<span class="token operator">-</span>map SOO_LAB permit <span class="token number">10</span> 
<span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token operator">-</span>route<span class="token operator">-</span>map<span class="token punctuation">)</span>#set extcommunity soo <span class="token number">1</span><span class="token operator">:</span><span class="token number">2</span>

<span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>#<span class="token keyword">int</span> f0<span class="token operator">/</span><span class="token number">1</span>
<span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token operator">-</span><span class="token keyword">if</span><span class="token punctuation">)</span>#ip vrf sitemap SOO_LAB</code></pre>
<p>查看R1的IP BGP VNPv4路由表关于路由4.4.4.4的明细；</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token function">R2</span><span class="token punctuation">(</span>config<span class="token operator">-</span><span class="token keyword">if</span><span class="token punctuation">)</span>#<span class="token keyword">do</span> sh ip bgp vpnv4 all <span class="token number">3.3</span><span class="token number">.3</span><span class="token number">.3</span>
BGP routing table entry <span class="token keyword">for</span> <span class="token number">1</span><span class="token operator">:</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">3.3</span><span class="token number">.3</span><span class="token number">.3</span><span class="token operator">/</span><span class="token number">32</span><span class="token punctuation">,</span> version <span class="token number">96</span>
Paths<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token number">1</span> available<span class="token punctuation">,</span> best #<span class="token number">1</span><span class="token punctuation">,</span> no table<span class="token punctuation">)</span>
Not advertised to any peer
Local
<span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span> <span class="token punctuation">(</span>metric <span class="token number">2</span><span class="token punctuation">)</span> from <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span> <span class="token punctuation">(</span><span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span><span class="token punctuation">)</span>
        Origin incomplete<span class="token punctuation">,</span> metric <span class="token number">156160</span><span class="token punctuation">,</span> localpref <span class="token number">100</span><span class="token punctuation">,</span> valid<span class="token punctuation">,</span> internal<span class="token punctuation">,</span> best
        Extended Community<span class="token operator">:</span> SoO<span class="token operator">:</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">1</span> RT<span class="token operator">:</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">1</span> Cost<span class="token operator">:</span>pre<span class="token operator">-</span>bestpath<span class="token operator">:</span><span class="token number">128</span><span class="token operator">:</span><span class="token number">156160</span> 
        <span class="token number">0x8800</span><span class="token operator">:</span><span class="token number">32768</span><span class="token operator">:</span><span class="token number">0</span> <span class="token number">0x8801</span><span class="token operator">:</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">130560</span> <span class="token number">0x8802</span><span class="token operator">:</span><span class="token number">65281</span><span class="token operator">:</span><span class="token number">25600</span> <span class="token number">0x8803</span><span class="token operator">:</span><span class="token number">65281</span><span class="token operator">:</span><span class="token number">1500</span> 
        <span class="token number">0x8806</span><span class="token operator">:</span><span class="token number">0</span><span class="token operator">:</span><span class="token number">50529027</span>
        mpls labels in<span class="token operator">/</span>out nolabel<span class="token operator">/</span><span class="token number">24</span>
BGP routing table entry <span class="token keyword">for</span> <span class="token number">1</span><span class="token operator">:</span><span class="token number">2</span><span class="token operator">:</span><span class="token number">3.3</span><span class="token number">.3</span><span class="token number">.3</span><span class="token operator">/</span><span class="token number">32</span><span class="token punctuation">,</span> version <span class="token number">99</span>
Paths<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token number">1</span> available<span class="token punctuation">,</span> best #<span class="token number">1</span><span class="token punctuation">,</span> table A<span class="token operator">-</span>Site2<span class="token punctuation">)</span>
Not advertised to any peer
Local<span class="token punctuation">,</span> imported path from <span class="token number">1</span><span class="token operator">:</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">3.3</span><span class="token number">.3</span><span class="token number">.3</span><span class="token operator">/</span><span class="token number">32</span>
<span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span> <span class="token punctuation">(</span>metric <span class="token number">2</span><span class="token punctuation">)</span> from <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span> <span class="token punctuation">(</span><span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span><span class="token punctuation">)</span>
        Origin incomplete<span class="token punctuation">,</span> metric <span class="token number">156160</span><span class="token punctuation">,</span> localpref <span class="token number">100</span><span class="token punctuation">,</span> valid<span class="token punctuation">,</span> internal<span class="token punctuation">,</span> best
        Extended Community<span class="token operator">:</span> SoO<span class="token operator">:</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">1</span> RT<span class="token operator">:</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">1</span> Cost<span class="token operator">:</span>pre<span class="token operator">-</span>bestpath<span class="token operator">:</span><span class="token number">128</span><span class="token operator">:</span><span class="token number">156160</span> 
        <span class="token number">0x8800</span><span class="token operator">:</span><span class="token number">32768</span><span class="token operator">:</span><span class="token number">0</span> <span class="token number">0x8801</span><span class="token operator">:</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">130560</span> <span class="token number">0x8802</span><span class="token operator">:</span><span class="token number">65281</span><span class="token operator">:</span><span class="token number">25600</span> <span class="token number">0x8803</span><span class="token operator">:</span><span class="token number">65281</span><span class="token operator">:</span><span class="token number">1500</span> 
        <span class="token number">0x8806</span><span class="token operator">:</span><span class="token number">0</span><span class="token operator">:</span><span class="token number">50529027</span>
        mpls labels in<span class="token operator">/</span>out nolabel<span class="token operator">/</span><span class="token number">24</span></code></pre>

<p>查看R3的EIGRP 拓扑表关于4.4.4.4&#x2F;32的明细；</p>
<pre class="language-c" data-language="c"><code class="language-c">R3#sh ip ei topology <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span><span class="token operator">/</span><span class="token number">32</span>
EIGRP<span class="token operator">-</span>IPv4 Topology Entry <span class="token keyword">for</span> <span class="token function">AS</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token function">ID</span><span class="token punctuation">(</span><span class="token number">3.3</span><span class="token number">.3</span><span class="token number">.3</span><span class="token punctuation">)</span> <span class="token keyword">for</span> <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span><span class="token operator">/</span><span class="token number">32</span>
State is Passive<span class="token punctuation">,</span> Query origin flag is <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token function">Successor</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">,</span> FD is <span class="token number">158720</span>
Descriptor Blocks<span class="token operator">:</span>
<span class="token number">192.168</span><span class="token number">.13</span><span class="token number">.1</span> <span class="token punctuation">(</span>FastEthernet0<span class="token operator">/</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> from <span class="token number">192.168</span><span class="token number">.13</span><span class="token number">.1</span><span class="token punctuation">,</span> Send flag is <span class="token number">0x0</span>
        Composite metric <span class="token function">is</span> <span class="token punctuation">(</span><span class="token number">158720</span><span class="token operator">/</span><span class="token number">156160</span><span class="token punctuation">)</span><span class="token punctuation">,</span> route is Internal
        Vector metric<span class="token operator">:</span>
        Minimum bandwidth is <span class="token number">100000</span> Kbit
        Total delay is <span class="token number">5200</span> microseconds
        Reliability is <span class="token number">255</span><span class="token operator">/</span><span class="token number">255</span>
        Load is <span class="token number">1</span><span class="token operator">/</span><span class="token number">255</span>
        Minimum MTU is <span class="token number">1500</span>
        Hop count is <span class="token number">2</span>
        Originating router is <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span>
        Extended Community<span class="token operator">:</span> SoO<span class="token operator">:</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">2</span>
<span class="token number">192.168</span><span class="token number">.34</span><span class="token number">.4</span> <span class="token punctuation">(</span>Serial1<span class="token operator">/</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> from <span class="token number">192.168</span><span class="token number">.34</span><span class="token number">.4</span><span class="token punctuation">,</span> Send flag is <span class="token number">0x0</span>
        Composite metric <span class="token function">is</span> <span class="token punctuation">(</span><span class="token number">2297856</span><span class="token operator">/</span><span class="token number">128256</span><span class="token punctuation">)</span><span class="token punctuation">,</span> route is Internal
        Vector metric<span class="token operator">:</span>
        Minimum bandwidth is <span class="token number">1544</span> Kbit
        Total delay is <span class="token number">25000</span> microseconds
        Reliability is <span class="token number">255</span><span class="token operator">/</span><span class="token number">255</span>
        Load is <span class="token number">1</span><span class="token operator">/</span><span class="token number">255</span>
        Minimum MTU is <span class="token number">1500</span>
        Hop count is <span class="token number">1</span>
        Originating router is <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span>
<span class="token comment">//R3上来自于R4的关于4.4.4.4/32的路由携带了SOO1:2；</span></code></pre>

<p>查看R4的EIGRP 拓扑表关于3.3.3.3&#x2F;32的明细；</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token operator">-</span><span class="token keyword">if</span><span class="token punctuation">)</span>#<span class="token keyword">do</span> sh ip ei to <span class="token number">3.3</span><span class="token number">.3</span><span class="token number">.3</span><span class="token operator">/</span><span class="token number">32</span>
EIGRP<span class="token operator">-</span>IPv4 Topology Entry <span class="token keyword">for</span> <span class="token function">AS</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token function">ID</span><span class="token punctuation">(</span><span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span><span class="token punctuation">)</span> <span class="token keyword">for</span> <span class="token number">3.3</span><span class="token number">.3</span><span class="token number">.3</span><span class="token operator">/</span><span class="token number">32</span>
State is Passive<span class="token punctuation">,</span> Query origin flag is <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token function">Successor</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">,</span> FD is <span class="token number">158720</span>
Descriptor Blocks<span class="token operator">:</span>
<span class="token number">192.168</span><span class="token number">.24</span><span class="token number">.2</span> <span class="token punctuation">(</span>FastEthernet0<span class="token operator">/</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> from <span class="token number">192.168</span><span class="token number">.24</span><span class="token number">.2</span><span class="token punctuation">,</span> Send flag is <span class="token number">0x0</span>
        Composite metric <span class="token function">is</span> <span class="token punctuation">(</span><span class="token number">158720</span><span class="token operator">/</span><span class="token number">156160</span><span class="token punctuation">)</span><span class="token punctuation">,</span> route is Internal
        Vector metric<span class="token operator">:</span>
        Minimum bandwidth is <span class="token number">100000</span> Kbit
        Total delay is <span class="token number">5200</span> microseconds
        Reliability is <span class="token number">255</span><span class="token operator">/</span><span class="token number">255</span>
        Load is <span class="token number">1</span><span class="token operator">/</span><span class="token number">255</span>
        Minimum MTU is <span class="token number">1500</span>
        Hop count is <span class="token number">2</span>
        Originating router is <span class="token number">3.3</span><span class="token number">.3</span><span class="token number">.3</span>
        Extended Community<span class="token operator">:</span> SoO<span class="token operator">:</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">1</span>
<span class="token number">192.168</span><span class="token number">.34</span><span class="token number">.3</span> <span class="token punctuation">(</span>Serial1<span class="token operator">/</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> from <span class="token number">192.168</span><span class="token number">.34</span><span class="token number">.3</span><span class="token punctuation">,</span> Send flag is <span class="token number">0x0</span>
        Composite metric <span class="token function">is</span> <span class="token punctuation">(</span><span class="token number">2297856</span><span class="token operator">/</span><span class="token number">128256</span><span class="token punctuation">)</span><span class="token punctuation">,</span> route is Internal
        Vector metric<span class="token operator">:</span>
        Minimum bandwidth is <span class="token number">1544</span> Kbit
        Total delay is <span class="token number">25000</span> microseconds
        Reliability is <span class="token number">255</span><span class="token operator">/</span><span class="token number">255</span>
        Load is <span class="token number">1</span><span class="token operator">/</span><span class="token number">255</span>
        Minimum MTU is <span class="token number">1500</span>
        Hop count is <span class="token number">1</span>
        Originating router is <span class="token number">3.3</span><span class="token number">.3</span><span class="token number">.3</span>
        <span class="token comment">//R4上来自于R3的关于3.3.3.3/32的路由携带了SOO1:1；</span></code></pre>

]]></content>
      <categories>
        <category>Network</category>
      </categories>
      <tags>
        <tag>MPLS</tag>
        <tag>Network</tag>
      </tags>
  </entry>
  <entry>
    <title>MPLS 实验13：Hub-and-Spoke</title>
    <url>/2014/MPLS_Lab_13/</url>
    <content><![CDATA[<h1 id="实验环境："><a href="#实验环境：" class="headerlink" title="实验环境："></a>实验环境：</h1><ul>
<li>模拟器：GNS3 0.8.6</li>
<li>Cisco IOS：c7200-adventerprisek9-mz.151-4.M2.image</li>
</ul>
<h1 id="GNS3实验拓扑文件："><a href="#GNS3实验拓扑文件：" class="headerlink" title="GNS3实验拓扑文件："></a>GNS3实验拓扑文件：</h1><p><a href="topology.net">拓扑文件</a></p>
<h1 id="实验拓扑："><a href="#实验拓扑：" class="headerlink" title="实验拓扑："></a>实验拓扑：</h1><p><img src="/2014/MPLS_Lab_13/topo.png"></p>
<span id="more"></span>

<h1 id="实验场景："><a href="#实验场景：" class="headerlink" title="实验场景："></a>实验场景：</h1><ol>
<li>Spoke站点只能与Hub站点进行通信；</li>
<li>Spoke站点到Spoke站点的流量必须首先发送到Hub站点；</li>
</ol>
<p>要实现以上操作，就必须要使用两个不同的RT，分别负责导入和导出；还需要为不同站点分配不同的RD；</p>
<ol>
<li>使用RT控制VPNv4路由的导入导出；</li>
<li>使用在PE和CE使用BGP Allowas-in解决eBGP防环机制导致</li>
<li>使用SOO解决PE-CE路由协议eBGP的路由环路；</li>
</ol>
<h1 id="基本预配置："><a href="#基本预配置：" class="headerlink" title="基本预配置："></a>基本预配置：</h1><h2 id="R1："><a href="#R1：" class="headerlink" title="R1："></a>R1：</h2><pre class="language-c" data-language="c"><code class="language-c">hostname R1
<span class="token operator">!</span>
ip cef
<span class="token operator">!</span>
ip vrf A<span class="token operator">-</span>Site1
        rd <span class="token number">1</span><span class="token operator">:</span><span class="token number">1</span>
        route<span class="token operator">-</span>target export <span class="token number">1</span><span class="token operator">:</span><span class="token number">1</span>
        route<span class="token operator">-</span>target import <span class="token number">1</span><span class="token operator">:</span><span class="token number">2</span>
<span class="token operator">!</span>
mpls label protocol ldp
<span class="token operator">!</span>
interface Loopback0
        ip address <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span> <span class="token number">255.255</span><span class="token number">.255</span><span class="token number">.255</span>
        ip ospf <span class="token number">1</span> area <span class="token number">0</span>
<span class="token operator">!</span>
interface FastEthernet0<span class="token operator">/</span><span class="token number">0</span>
        ip address <span class="token number">192.168</span><span class="token number">.13</span><span class="token number">.1</span> <span class="token number">255.255</span><span class="token number">.255</span><span class="token number">.0</span>
        ip ospf <span class="token number">1</span> area <span class="token number">0</span>
        no shutdown
mpls ip
<span class="token operator">!</span>
interface FastEthernet0<span class="token operator">/</span><span class="token number">1</span>
        ip vrf forwarding A<span class="token operator">-</span>Site1
        ip address <span class="token number">192.168</span><span class="token number">.15</span><span class="token number">.1</span> <span class="token number">255.255</span><span class="token number">.255</span><span class="token number">.0</span>
        no shutdown
<span class="token operator">!</span>
router ospf <span class="token number">1</span>
        router<span class="token operator">-</span>id <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span>
<span class="token operator">!</span>
router bgp <span class="token number">1</span>
        bgp router<span class="token operator">-</span>id <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span>
        bgp log<span class="token operator">-</span>neighbor<span class="token operator">-</span>changes
        neighbor ibgp peer<span class="token operator">-</span>group
        neighbor ibgp remote<span class="token operator">-</span>as <span class="token number">1</span>
        neighbor ibgp update<span class="token operator">-</span>source Loopback0
        neighbor ibgp next<span class="token operator">-</span>hop<span class="token operator">-</span>self
        neighbor <span class="token number">2.2</span><span class="token number">.2</span><span class="token number">.2</span> peer<span class="token operator">-</span>group ibgp
        neighbor <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span> peer<span class="token operator">-</span>group ibgp
        <span class="token operator">!</span>
        address<span class="token operator">-</span>family vpnv4
        neighbor ibgp send<span class="token operator">-</span>community both
        neighbor <span class="token number">2.2</span><span class="token number">.2</span><span class="token number">.2</span> activate
        neighbor <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span> activate
        exit<span class="token operator">-</span>address<span class="token operator">-</span>family
        <span class="token operator">!</span>
        address<span class="token operator">-</span>family ipv4 vrf A<span class="token operator">-</span>Site1
        neighbor <span class="token number">192.168</span><span class="token number">.15</span><span class="token number">.5</span> remote<span class="token operator">-</span>as <span class="token number">65001</span>
        neighbor <span class="token number">192.168</span><span class="token number">.15</span><span class="token number">.5</span> activate
        redistribute connected
        exit<span class="token operator">-</span>address<span class="token operator">-</span>family
<span class="token operator">!</span>
mpls ldp router<span class="token operator">-</span>id Loopback0 force
<span class="token operator">!</span>
line con <span class="token number">0</span>
        exec<span class="token operator">-</span>timeout <span class="token number">0</span> <span class="token number">0</span>
        logging synchronous
<span class="token operator">!</span>
end</code></pre>
<h2 id="R2"><a href="#R2" class="headerlink" title="R2:"></a>R2:</h2><pre class="language-c" data-language="c"><code class="language-c">hostname R2
<span class="token operator">!</span>
ip cef
<span class="token operator">!</span>
ip vrf A<span class="token operator">-</span>Site1
        rd <span class="token number">1</span><span class="token operator">:</span><span class="token number">1</span>
        route<span class="token operator">-</span>target export <span class="token number">1</span><span class="token operator">:</span><span class="token number">1</span>
        route<span class="token operator">-</span>target import <span class="token number">1</span><span class="token operator">:</span><span class="token number">2</span>
<span class="token operator">!</span>
ip vrf A<span class="token operator">-</span>Site2
        rd <span class="token number">1</span><span class="token operator">:</span><span class="token number">2</span>
        route<span class="token operator">-</span>target export <span class="token number">1</span><span class="token operator">:</span><span class="token number">1</span>
        route<span class="token operator">-</span>target import <span class="token number">1</span><span class="token operator">:</span><span class="token number">2</span>
<span class="token operator">!</span>
mpls label protocol ldp
<span class="token operator">!</span>
interface Loopback0
        ip address <span class="token number">2.2</span><span class="token number">.2</span><span class="token number">.2</span> <span class="token number">255.255</span><span class="token number">.255</span><span class="token number">.255</span>
        ip ospf <span class="token number">1</span> area <span class="token number">0</span>
<span class="token operator">!</span>
interface FastEthernet0<span class="token operator">/</span><span class="token number">0</span>
        ip vrf forwarding A<span class="token operator">-</span>Site1
        ip address <span class="token number">192.168</span><span class="token number">.25</span><span class="token number">.2</span> <span class="token number">255.255</span><span class="token number">.255</span><span class="token number">.0</span>
        no shutdown
<span class="token operator">!</span>
interface FastEthernet0<span class="token operator">/</span><span class="token number">1</span>
        ip address <span class="token number">192.168</span><span class="token number">.23</span><span class="token number">.2</span> <span class="token number">255.255</span><span class="token number">.255</span><span class="token number">.0</span>
        ip ospf <span class="token number">1</span> area <span class="token number">0</span>
        no shutdown
mpls ip
<span class="token operator">!</span>
interface FastEthernet1<span class="token operator">/</span><span class="token number">0</span>
        ip vrf forwarding A<span class="token operator">-</span>Site2
        ip address <span class="token number">192.168</span><span class="token number">.26</span><span class="token number">.2</span> <span class="token number">255.255</span><span class="token number">.255</span><span class="token number">.0</span>
        no shutdown
<span class="token operator">!</span>
router ospf <span class="token number">1</span>
        router<span class="token operator">-</span>id <span class="token number">2.2</span><span class="token number">.2</span><span class="token number">.2</span>
<span class="token operator">!</span>
router bgp <span class="token number">1</span>
        bgp log<span class="token operator">-</span>neighbor<span class="token operator">-</span>changes
        neighbor ibgp peer<span class="token operator">-</span>group
        neighbor ibgp remote<span class="token operator">-</span>as <span class="token number">1</span>
        neighbor ibgp update<span class="token operator">-</span>source Loopback0
        neighbor ibgp next<span class="token operator">-</span>hop<span class="token operator">-</span>self
        neighbor <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span> peer<span class="token operator">-</span>group ibgp
        neighbor <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span> peer<span class="token operator">-</span>group ibgp
        <span class="token operator">!</span>
        address<span class="token operator">-</span>family vpnv4
        neighbor ibgp send<span class="token operator">-</span>community both
        neighbor <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span> activate
        neighbor <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span> activate
        exit<span class="token operator">-</span>address<span class="token operator">-</span>family
        <span class="token operator">!</span>
        address<span class="token operator">-</span>family ipv4 vrf A<span class="token operator">-</span>Site1
        redistribute connected
        neighbor <span class="token number">192.168</span><span class="token number">.25</span><span class="token number">.5</span> remote<span class="token operator">-</span>as <span class="token number">65001</span>
        neighbor <span class="token number">192.168</span><span class="token number">.25</span><span class="token number">.5</span> activate
        exit<span class="token operator">-</span>address<span class="token operator">-</span>family
        <span class="token operator">!</span>
        address<span class="token operator">-</span>family ipv4 vrf A<span class="token operator">-</span>Site2
        redistribute connected
        neighbor <span class="token number">192.168</span><span class="token number">.26</span><span class="token number">.6</span> remote<span class="token operator">-</span>as <span class="token number">65002</span>
        neighbor <span class="token number">192.168</span><span class="token number">.26</span><span class="token number">.6</span> activate
        exit<span class="token operator">-</span>address<span class="token operator">-</span>family
<span class="token operator">!</span>
mpls ldp router<span class="token operator">-</span>id Loopback0 force
<span class="token operator">!</span>
line con <span class="token number">0</span>
        exec<span class="token operator">-</span>timeout <span class="token number">0</span> <span class="token number">0</span>
        logging synchronous
<span class="token operator">!</span>
end</code></pre>
<h2 id="R3"><a href="#R3" class="headerlink" title="R3:"></a>R3:</h2><pre class="language-c" data-language="c"><code class="language-c">hostname R3
<span class="token operator">!</span>
ip cef
<span class="token operator">!</span>
mpls label protocol ldp
<span class="token operator">!</span>
interface Loopback0
        ip address <span class="token number">3.3</span><span class="token number">.3</span><span class="token number">.3</span> <span class="token number">255.255</span><span class="token number">.255</span><span class="token number">.255</span>
        ip ospf <span class="token number">1</span> area <span class="token number">0</span>
<span class="token operator">!</span>
interface FastEthernet0<span class="token operator">/</span><span class="token number">0</span>
        ip address <span class="token number">192.168</span><span class="token number">.13</span><span class="token number">.3</span> <span class="token number">255.255</span><span class="token number">.255</span><span class="token number">.0</span>
        ip ospf <span class="token number">1</span> area <span class="token number">0</span>
        no shutdown
mpls ip
<span class="token operator">!</span>
interface FastEthernet0<span class="token operator">/</span><span class="token number">1</span>
        ip address <span class="token number">192.168</span><span class="token number">.23</span><span class="token number">.3</span> <span class="token number">255.255</span><span class="token number">.255</span><span class="token number">.0</span>
        ip ospf <span class="token number">1</span> area <span class="token number">0</span>
        no shutdown
mpls ip
<span class="token operator">!</span>
interface FastEthernet1<span class="token operator">/</span><span class="token number">0</span>
        ip address <span class="token number">192.168</span><span class="token number">.34</span><span class="token number">.3</span> <span class="token number">255.255</span><span class="token number">.255</span><span class="token number">.0</span>
        ip ospf <span class="token number">1</span> area <span class="token number">0</span>
        no shutdown
mpls ip
<span class="token operator">!</span>
router ospf <span class="token number">1</span>
        router<span class="token operator">-</span>id <span class="token number">3.3</span><span class="token number">.3</span><span class="token number">.3</span>
<span class="token operator">!</span>
mpls ldp router<span class="token operator">-</span>id Loopback0 force
<span class="token operator">!</span>         
line con <span class="token number">0</span>
        exec<span class="token operator">-</span>timeout <span class="token number">0</span> <span class="token number">0</span>
        logging synchronous
<span class="token operator">!</span>
end</code></pre>
<h2 id="R4"><a href="#R4" class="headerlink" title="R4:"></a>R4:</h2><pre class="language-c" data-language="c"><code class="language-c">hostname R4
<span class="token operator">!</span>
ip cef
<span class="token operator">!</span>
ip vrf A<span class="token operator">-</span>Site3
        rd <span class="token number">1</span><span class="token operator">:</span><span class="token number">3</span>
        route<span class="token operator">-</span>target export <span class="token number">1</span><span class="token operator">:</span><span class="token number">2</span>
        route<span class="token operator">-</span>target import <span class="token number">1</span><span class="token operator">:</span><span class="token number">1</span>
<span class="token operator">!</span>
mpls label protocol ldp
<span class="token operator">!</span>
interface Loopback0
        ip address <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span> <span class="token number">255.255</span><span class="token number">.255</span><span class="token number">.255</span>
        ip ospf <span class="token number">1</span> area <span class="token number">0</span>
<span class="token operator">!</span>
interface FastEthernet0<span class="token operator">/</span><span class="token number">0</span>
        ip vrf forwarding A<span class="token operator">-</span>Site3
        ip address <span class="token number">192.168</span><span class="token number">.47</span><span class="token number">.4</span> <span class="token number">255.255</span><span class="token number">.255</span><span class="token number">.0</span>
        no shutdown
<span class="token operator">!</span>
interface FastEthernet0<span class="token operator">/</span><span class="token number">1</span>
        ip vrf forwarding A<span class="token operator">-</span>Site3
        ip address <span class="token number">192.168</span><span class="token number">.48</span><span class="token number">.4</span> <span class="token number">255.255</span><span class="token number">.255</span><span class="token number">.0</span>
        no shutdown
<span class="token operator">!</span>
interface FastEthernet1<span class="token operator">/</span><span class="token number">0</span>
        ip address <span class="token number">192.168</span><span class="token number">.34</span><span class="token number">.4</span> <span class="token number">255.255</span><span class="token number">.255</span><span class="token number">.0</span>
        ip ospf <span class="token number">1</span> area <span class="token number">0</span>
        no shutdown
mpls ip
<span class="token operator">!</span>
router ospf <span class="token number">1</span>
        router<span class="token operator">-</span>id <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span>
<span class="token operator">!</span>
router bgp <span class="token number">1</span>
        bgp log<span class="token operator">-</span>neighbor<span class="token operator">-</span>changes
        neighbor ibgp peer<span class="token operator">-</span>group
        neighbor ibgp remote<span class="token operator">-</span>as <span class="token number">1</span>
        neighbor ibgp update<span class="token operator">-</span>source Loopback0
        neighbor ibgp next<span class="token operator">-</span>hop<span class="token operator">-</span>self
        neighbor <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span> peer<span class="token operator">-</span>group ibgp
        neighbor <span class="token number">2.2</span><span class="token number">.2</span><span class="token number">.2</span> peer<span class="token operator">-</span>group ibgp
        <span class="token operator">!</span>
        address<span class="token operator">-</span>family vpnv4
        neighbor ibgp send<span class="token operator">-</span>community both
        neighbor <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span> activate
        neighbor <span class="token number">2.2</span><span class="token number">.2</span><span class="token number">.2</span> activate
        exit<span class="token operator">-</span>address<span class="token operator">-</span>family
        <span class="token operator">!</span>
        address<span class="token operator">-</span>family ipv4 vrf A<span class="token operator">-</span>Site3
        neighbor <span class="token number">192.168</span><span class="token number">.47</span><span class="token number">.7</span> remote<span class="token operator">-</span>as <span class="token number">65003</span>
        neighbor <span class="token number">192.168</span><span class="token number">.47</span><span class="token number">.7</span> activate
        neighbor <span class="token number">192.168</span><span class="token number">.48</span><span class="token number">.8</span> remote<span class="token operator">-</span>as <span class="token number">65003</span>
        neighbor <span class="token number">192.168</span><span class="token number">.48</span><span class="token number">.8</span> activate
        redistribute connected
        exit<span class="token operator">-</span>address<span class="token operator">-</span>family
<span class="token operator">!</span>
mpls ldp router<span class="token operator">-</span>id Loopback0 force
<span class="token operator">!</span>
line con <span class="token number">0</span>
        exec<span class="token operator">-</span>timeout <span class="token number">0</span> <span class="token number">0</span>
        logging synchronous
<span class="token operator">!</span>
end</code></pre>
<h2 id="R5"><a href="#R5" class="headerlink" title="R5:"></a>R5:</h2><pre class="language-c" data-language="c"><code class="language-c">hostname R5
<span class="token operator">!</span>
ip cef
<span class="token operator">!</span>
interface Loopback0
        ip address <span class="token number">5.5</span><span class="token number">.5</span><span class="token number">.5</span> <span class="token number">255.255</span><span class="token number">.255</span><span class="token number">.255</span>
<span class="token operator">!</span>
interface FastEthernet0<span class="token operator">/</span><span class="token number">0</span>
        ip address <span class="token number">192.168</span><span class="token number">.25</span><span class="token number">.5</span> <span class="token number">255.255</span><span class="token number">.255</span><span class="token number">.0</span>
        no shutdown
<span class="token operator">!</span>
interface FastEthernet0<span class="token operator">/</span><span class="token number">1</span>
        ip address <span class="token number">192.168</span><span class="token number">.15</span><span class="token number">.5</span> <span class="token number">255.255</span><span class="token number">.255</span><span class="token number">.0</span>
        no shutdown
<span class="token operator">!</span>
router bgp <span class="token number">65001</span>
        bgp log<span class="token operator">-</span>neighbor<span class="token operator">-</span>changes
        network <span class="token number">5.5</span><span class="token number">.5</span><span class="token number">.5</span> mask <span class="token number">255.255</span><span class="token number">.255</span><span class="token number">.255</span>
        neighbor <span class="token number">192.168</span><span class="token number">.15</span><span class="token number">.1</span> remote<span class="token operator">-</span>as <span class="token number">1</span>
        neighbor <span class="token number">192.168</span><span class="token number">.25</span><span class="token number">.2</span> remote<span class="token operator">-</span>as <span class="token number">1</span>
<span class="token operator">!</span>
line con <span class="token number">0</span>
        exec<span class="token operator">-</span>timeout <span class="token number">0</span> <span class="token number">0</span>
        logging synchronous
<span class="token operator">!</span>
end</code></pre>
<h2 id="R6"><a href="#R6" class="headerlink" title="R6:"></a>R6:</h2><pre class="language-c" data-language="c"><code class="language-c">hostname R6
<span class="token operator">!</span>
ip cef
<span class="token operator">!</span>
interface Loopback0
        ip address <span class="token number">6.6</span><span class="token number">.6</span><span class="token number">.6</span> <span class="token number">255.255</span><span class="token number">.255</span><span class="token number">.255</span>
<span class="token operator">!</span>
interface FastEthernet0<span class="token operator">/</span><span class="token number">0</span>
        ip address <span class="token number">192.168</span><span class="token number">.26</span><span class="token number">.6</span> <span class="token number">255.255</span><span class="token number">.255</span><span class="token number">.0</span>
        no shutdown
<span class="token operator">!</span>
router bgp <span class="token number">65002</span>
        bgp log<span class="token operator">-</span>neighbor<span class="token operator">-</span>changes
        network <span class="token number">6.6</span><span class="token number">.6</span><span class="token number">.6</span> mask <span class="token number">255.255</span><span class="token number">.255</span><span class="token number">.255</span>
        neighbor <span class="token number">192.168</span><span class="token number">.26</span><span class="token number">.2</span> remote<span class="token operator">-</span>as <span class="token number">1</span>
<span class="token operator">!</span>
line con <span class="token number">0</span>
        exec<span class="token operator">-</span>timeout <span class="token number">0</span> <span class="token number">0</span>
        logging synchronous
<span class="token operator">!</span>
end</code></pre>
<h2 id="R7"><a href="#R7" class="headerlink" title="R7:"></a>R7:</h2><pre class="language-c" data-language="c"><code class="language-c">hostname R7
<span class="token operator">!</span>
ip cef
<span class="token operator">!</span>
interface Loopback0
        ip address <span class="token number">7.7</span><span class="token number">.7</span><span class="token number">.7</span> <span class="token number">255.255</span><span class="token number">.255</span><span class="token number">.255</span>
<span class="token operator">!</span>
interface FastEthernet0<span class="token operator">/</span><span class="token number">0</span>
        ip address <span class="token number">192.168</span><span class="token number">.47</span><span class="token number">.7</span> <span class="token number">255.255</span><span class="token number">.255</span><span class="token number">.0</span>
        no shutdown
<span class="token operator">!</span>
router bgp <span class="token number">65003</span>
        bgp log<span class="token operator">-</span>neighbor<span class="token operator">-</span>changes
        network <span class="token number">7.7</span><span class="token number">.7</span><span class="token number">.7</span> mask <span class="token number">255.255</span><span class="token number">.255</span><span class="token number">.255</span>
        neighbor <span class="token number">8.8</span><span class="token number">.8</span><span class="token number">.8</span> remote<span class="token operator">-</span>as <span class="token number">65003</span>
        neighbor <span class="token number">8.8</span><span class="token number">.8</span><span class="token number">.8</span> update<span class="token operator">-</span>source Loopback0
        neighbor <span class="token number">8.8</span><span class="token number">.8</span><span class="token number">.8</span> next<span class="token operator">-</span>hop<span class="token operator">-</span>self
        neighbor <span class="token number">192.168</span><span class="token number">.47</span><span class="token number">.4</span> remote<span class="token operator">-</span>as <span class="token number">1</span>
<span class="token operator">!</span>
line con <span class="token number">0</span>
        exec<span class="token operator">-</span>timeout <span class="token number">0</span> <span class="token number">0</span>
        logging synchronous
<span class="token operator">!</span>
end</code></pre>
<h2 id="R8"><a href="#R8" class="headerlink" title="R8:"></a>R8:</h2><pre class="language-c" data-language="c"><code class="language-c">hostname R8
<span class="token operator">!</span>
ip cef
<span class="token operator">!</span>
interface Loopback0
        ip address <span class="token number">8.8</span><span class="token number">.8</span><span class="token number">.8</span> <span class="token number">255.255</span><span class="token number">.255</span><span class="token number">.255</span>
<span class="token operator">!</span>
interface FastEthernet0<span class="token operator">/</span><span class="token number">1</span>
        ip address <span class="token number">192.168</span><span class="token number">.48</span><span class="token number">.8</span> <span class="token number">255.255</span><span class="token number">.255</span><span class="token number">.0</span>
        no shutdown
<span class="token operator">!</span>
router bgp <span class="token number">65003</span>
        bgp log<span class="token operator">-</span>neighbor<span class="token operator">-</span>changes
        network <span class="token number">8.8</span><span class="token number">.8</span><span class="token number">.8</span> mask <span class="token number">255.255</span><span class="token number">.255</span><span class="token number">.255</span>
        neighbor <span class="token number">7.7</span><span class="token number">.7</span><span class="token number">.7</span> remote<span class="token operator">-</span>as <span class="token number">65003</span>
        neighbor <span class="token number">7.7</span><span class="token number">.7</span><span class="token number">.7</span> update<span class="token operator">-</span>source Loopback0
        neighbor <span class="token number">7.7</span><span class="token number">.7</span><span class="token number">.7</span> next<span class="token operator">-</span>hop<span class="token operator">-</span>self
        neighbor <span class="token number">192.168</span><span class="token number">.48</span><span class="token number">.4</span> remote<span class="token operator">-</span>as <span class="token number">1</span>
<span class="token operator">!</span>
line con <span class="token number">0</span>
        exec<span class="token operator">-</span>timeout <span class="token number">0</span> <span class="token number">0</span>
        logging synchronous
<span class="token operator">!</span>
end</code></pre>


<h1 id="实验与调试："><a href="#实验与调试：" class="headerlink" title="实验与调试："></a>实验与调试：</h1><h2 id="实验1：同一VPN的不同站点使用不同的AS号；"><a href="#实验1：同一VPN的不同站点使用不同的AS号；" class="headerlink" title="实验1：同一VPN的不同站点使用不同的AS号；"></a>实验1：同一VPN的不同站点使用不同的AS号；</h2><p>查看R7的BGP汇总表；</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token function">R7</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span>#<span class="token keyword">do</span> sh ip bgp summary
BGP router identifier <span class="token number">7.7</span><span class="token number">.7</span><span class="token number">.7</span><span class="token punctuation">,</span> local AS number <span class="token number">65003</span>
BGP table version is <span class="token number">12</span><span class="token punctuation">,</span> main routing table version <span class="token number">12</span>
<span class="token number">5</span> network entries using <span class="token number">680</span> bytes of memory
<span class="token number">5</span> path entries using <span class="token number">280</span> bytes of memory
<span class="token number">4</span><span class="token operator">/</span><span class="token number">4</span> BGP path<span class="token operator">/</span>bestpath attribute entries using <span class="token number">512</span> bytes of memory
<span class="token number">3</span> BGP AS<span class="token operator">-</span>PATH entries using <span class="token number">72</span> bytes of memory
<span class="token number">0</span> BGP route<span class="token operator">-</span>map cache entries using <span class="token number">0</span> bytes of memory
<span class="token number">0</span> BGP filter<span class="token operator">-</span>list cache entries using <span class="token number">0</span> bytes of memory
BGP using <span class="token number">1544</span> total bytes of memory
BGP activity <span class="token number">6</span><span class="token operator">/</span><span class="token number">1</span> prefixes<span class="token punctuation">,</span> <span class="token number">16</span><span class="token operator">/</span><span class="token number">11</span> paths<span class="token punctuation">,</span> scan interval <span class="token number">60</span> secs
Neighbor        V           AS MsgRcvd MsgSent   TblVer  InQ OutQ Up<span class="token operator">/</span>Down  State<span class="token operator">/</span>PfxRcd
<span class="token number">8.8</span><span class="token number">.8</span><span class="token number">.8</span>         <span class="token number">4</span>        <span class="token number">65003</span>       <span class="token number">0</span>       <span class="token number">0</span>        <span class="token number">1</span>    <span class="token number">0</span>    <span class="token number">0</span> <span class="token number">00</span><span class="token operator">:</span><span class="token number">04</span><span class="token operator">:</span><span class="token number">50</span> Idle
<span class="token number">192.168</span><span class="token number">.47</span><span class="token number">.4</span>    <span class="token number">4</span>            <span class="token number">1</span>     <span class="token number">107</span>      <span class="token number">87</span>       <span class="token number">12</span>    <span class="token number">0</span>    <span class="token number">0</span> <span class="token number">01</span><span class="token operator">:</span><span class="token number">11</span><span class="token operator">:</span><span class="token number">52</span>        <span class="token number">4</span>
<span class="token comment">//注意到邻居R8处于Idle状态；</span></code></pre>

<p>查看R8的BGP汇总表；</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token function">R8</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span>#<span class="token keyword">do</span> sh ip bgp summary
BGP router identifier <span class="token number">8.8</span><span class="token number">.8</span><span class="token number">.8</span><span class="token punctuation">,</span> local AS number <span class="token number">65003</span>
BGP table version is <span class="token number">12</span><span class="token punctuation">,</span> main routing table version <span class="token number">12</span>
<span class="token number">5</span> network entries using <span class="token number">680</span> bytes of memory
<span class="token number">5</span> path entries using <span class="token number">280</span> bytes of memory
<span class="token number">4</span><span class="token operator">/</span><span class="token number">4</span> BGP path<span class="token operator">/</span>bestpath attribute entries using <span class="token number">512</span> bytes of memory
<span class="token number">3</span> BGP AS<span class="token operator">-</span>PATH entries using <span class="token number">72</span> bytes of memory
<span class="token number">0</span> BGP route<span class="token operator">-</span>map cache entries using <span class="token number">0</span> bytes of memory
<span class="token number">0</span> BGP filter<span class="token operator">-</span>list cache entries using <span class="token number">0</span> bytes of memory
BGP using <span class="token number">1544</span> total bytes of memory
BGP activity <span class="token number">6</span><span class="token operator">/</span><span class="token number">1</span> prefixes<span class="token punctuation">,</span> <span class="token number">14</span><span class="token operator">/</span><span class="token number">9</span> paths<span class="token punctuation">,</span> scan interval <span class="token number">60</span> secs
Neighbor        V           AS MsgRcvd MsgSent   TblVer  InQ OutQ Up<span class="token operator">/</span>Down  State<span class="token operator">/</span>PfxRcd
<span class="token number">7.7</span><span class="token number">.7</span><span class="token number">.7</span>         <span class="token number">4</span>        <span class="token number">65003</span>       <span class="token number">0</span>       <span class="token number">0</span>        <span class="token number">1</span>    <span class="token number">0</span>    <span class="token number">0</span> <span class="token number">00</span><span class="token operator">:</span><span class="token number">07</span><span class="token operator">:</span><span class="token number">55</span> Idle
<span class="token number">192.168</span><span class="token number">.48</span><span class="token number">.4</span>    <span class="token number">4</span>            <span class="token number">1</span>     <span class="token number">101</span>      <span class="token number">92</span>       <span class="token number">12</span>    <span class="token number">0</span>    <span class="token number">0</span> <span class="token number">01</span><span class="token operator">:</span><span class="token number">14</span><span class="token operator">:</span><span class="token number">12</span>        <span class="token number">4</span>
<span class="token comment">//注意到邻居R7处于Idle状态；</span></code></pre>

<p>查看R7的路由表；</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token function">R7</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span>#<span class="token keyword">do</span> sh ip route
Codes<span class="token operator">:</span> L <span class="token operator">-</span> local<span class="token punctuation">,</span> C <span class="token operator">-</span> connected<span class="token punctuation">,</span> S <span class="token operator">-</span> <span class="token keyword">static</span><span class="token punctuation">,</span> R <span class="token operator">-</span> RIP<span class="token punctuation">,</span> M <span class="token operator">-</span> mobile<span class="token punctuation">,</span> B <span class="token operator">-</span> BGP
        D <span class="token operator">-</span> EIGRP<span class="token punctuation">,</span> EX <span class="token operator">-</span> EIGRP external<span class="token punctuation">,</span> O <span class="token operator">-</span> OSPF<span class="token punctuation">,</span> IA <span class="token operator">-</span> OSPF inter area 
        N1 <span class="token operator">-</span> OSPF NSSA external type <span class="token number">1</span><span class="token punctuation">,</span> N2 <span class="token operator">-</span> OSPF NSSA external type <span class="token number">2</span>
        E1 <span class="token operator">-</span> OSPF external type <span class="token number">1</span><span class="token punctuation">,</span> E2 <span class="token operator">-</span> OSPF external type <span class="token number">2</span>
        i <span class="token operator">-</span> IS<span class="token operator">-</span>IS<span class="token punctuation">,</span> su <span class="token operator">-</span> IS<span class="token operator">-</span>IS summary<span class="token punctuation">,</span> L1 <span class="token operator">-</span> IS<span class="token operator">-</span>IS level<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> L2 <span class="token operator">-</span> IS<span class="token operator">-</span>IS level<span class="token operator">-</span><span class="token number">2</span>
        ia <span class="token operator">-</span> IS<span class="token operator">-</span>IS inter area<span class="token punctuation">,</span> <span class="token operator">*</span> <span class="token operator">-</span> candidate <span class="token keyword">default</span><span class="token punctuation">,</span> U <span class="token operator">-</span> per<span class="token operator">-</span>user <span class="token keyword">static</span> route
        o <span class="token operator">-</span> ODR<span class="token punctuation">,</span> P <span class="token operator">-</span> periodic downloaded <span class="token keyword">static</span> route<span class="token punctuation">,</span> H <span class="token operator">-</span> NHRP<span class="token punctuation">,</span> l <span class="token operator">-</span> LISP
        <span class="token operator">+</span> <span class="token operator">-</span> replicated route<span class="token punctuation">,</span> <span class="token operator">%</span> <span class="token operator">-</span> next hop override
Gateway of last resort is not set
        <span class="token number">5.0</span><span class="token number">.0</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">32</span> is subnetted<span class="token punctuation">,</span> <span class="token number">1</span> subnets
B        <span class="token number">5.5</span><span class="token number">.5</span><span class="token number">.5</span> <span class="token punctuation">[</span><span class="token number">20</span><span class="token operator">/</span><span class="token number">0</span><span class="token punctuation">]</span> via <span class="token number">192.168</span><span class="token number">.47</span><span class="token number">.4</span><span class="token punctuation">,</span> <span class="token number">00</span><span class="token operator">:</span><span class="token number">54</span><span class="token operator">:</span><span class="token number">25</span>
        <span class="token number">6.0</span><span class="token number">.0</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">32</span> is subnetted<span class="token punctuation">,</span> <span class="token number">1</span> subnets
B        <span class="token number">6.6</span><span class="token number">.6</span><span class="token number">.6</span> <span class="token punctuation">[</span><span class="token number">20</span><span class="token operator">/</span><span class="token number">0</span><span class="token punctuation">]</span> via <span class="token number">192.168</span><span class="token number">.47</span><span class="token number">.4</span><span class="token punctuation">,</span> <span class="token number">00</span><span class="token operator">:</span><span class="token number">40</span><span class="token operator">:</span><span class="token number">41</span>
        <span class="token number">7.0</span><span class="token number">.0</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">32</span> is subnetted<span class="token punctuation">,</span> <span class="token number">1</span> subnets
C        <span class="token number">7.7</span><span class="token number">.7</span><span class="token number">.7</span> is directly connected<span class="token punctuation">,</span> Loopback0
B     <span class="token number">192.168</span><span class="token number">.25</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span> <span class="token punctuation">[</span><span class="token number">20</span><span class="token operator">/</span><span class="token number">0</span><span class="token punctuation">]</span> via <span class="token number">192.168</span><span class="token number">.47</span><span class="token number">.4</span><span class="token punctuation">,</span> <span class="token number">00</span><span class="token operator">:</span><span class="token number">41</span><span class="token operator">:</span><span class="token number">31</span>
B     <span class="token number">192.168</span><span class="token number">.26</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span> <span class="token punctuation">[</span><span class="token number">20</span><span class="token operator">/</span><span class="token number">0</span><span class="token punctuation">]</span> via <span class="token number">192.168</span><span class="token number">.47</span><span class="token number">.4</span><span class="token punctuation">,</span> <span class="token number">00</span><span class="token operator">:</span><span class="token number">41</span><span class="token operator">:</span><span class="token number">06</span>
        <span class="token number">192.168</span><span class="token number">.47</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span> is variably subnetted<span class="token punctuation">,</span> <span class="token number">2</span> subnets<span class="token punctuation">,</span> <span class="token number">2</span> masks
C        <span class="token number">192.168</span><span class="token number">.47</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span> is directly connected<span class="token punctuation">,</span> FastEthernet0<span class="token operator">/</span><span class="token number">0</span>
L        <span class="token number">192.168</span><span class="token number">.47</span><span class="token number">.7</span><span class="token operator">/</span><span class="token number">32</span> is directly connected<span class="token punctuation">,</span> FastEthernet0<span class="token operator">/</span><span class="token number">0</span>
<span class="token comment">//注意到R7的没有去往BGP邻居R8环回口的路由，所以它们无法建立邻居；</span></code></pre>

<p>查看R8的路由表；</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token function">R8</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span>#<span class="token keyword">do</span> sh ip route
Codes<span class="token operator">:</span> L <span class="token operator">-</span> local<span class="token punctuation">,</span> C <span class="token operator">-</span> connected<span class="token punctuation">,</span> S <span class="token operator">-</span> <span class="token keyword">static</span><span class="token punctuation">,</span> R <span class="token operator">-</span> RIP<span class="token punctuation">,</span> M <span class="token operator">-</span> mobile<span class="token punctuation">,</span> B <span class="token operator">-</span> BGP
        D <span class="token operator">-</span> EIGRP<span class="token punctuation">,</span> EX <span class="token operator">-</span> EIGRP external<span class="token punctuation">,</span> O <span class="token operator">-</span> OSPF<span class="token punctuation">,</span> IA <span class="token operator">-</span> OSPF inter area 
        N1 <span class="token operator">-</span> OSPF NSSA external type <span class="token number">1</span><span class="token punctuation">,</span> N2 <span class="token operator">-</span> OSPF NSSA external type <span class="token number">2</span>
        E1 <span class="token operator">-</span> OSPF external type <span class="token number">1</span><span class="token punctuation">,</span> E2 <span class="token operator">-</span> OSPF external type <span class="token number">2</span>
        i <span class="token operator">-</span> IS<span class="token operator">-</span>IS<span class="token punctuation">,</span> su <span class="token operator">-</span> IS<span class="token operator">-</span>IS summary<span class="token punctuation">,</span> L1 <span class="token operator">-</span> IS<span class="token operator">-</span>IS level<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> L2 <span class="token operator">-</span> IS<span class="token operator">-</span>IS level<span class="token operator">-</span><span class="token number">2</span>
        ia <span class="token operator">-</span> IS<span class="token operator">-</span>IS inter area<span class="token punctuation">,</span> <span class="token operator">*</span> <span class="token operator">-</span> candidate <span class="token keyword">default</span><span class="token punctuation">,</span> U <span class="token operator">-</span> per<span class="token operator">-</span>user <span class="token keyword">static</span> route
        o <span class="token operator">-</span> ODR<span class="token punctuation">,</span> P <span class="token operator">-</span> periodic downloaded <span class="token keyword">static</span> route<span class="token punctuation">,</span> H <span class="token operator">-</span> NHRP<span class="token punctuation">,</span> l <span class="token operator">-</span> LISP
        <span class="token operator">+</span> <span class="token operator">-</span> replicated route<span class="token punctuation">,</span> <span class="token operator">%</span> <span class="token operator">-</span> next hop override
Gateway of last resort is not set
        <span class="token number">5.0</span><span class="token number">.0</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">32</span> is subnetted<span class="token punctuation">,</span> <span class="token number">1</span> subnets
B        <span class="token number">5.5</span><span class="token number">.5</span><span class="token number">.5</span> <span class="token punctuation">[</span><span class="token number">20</span><span class="token operator">/</span><span class="token number">0</span><span class="token punctuation">]</span> via <span class="token number">192.168</span><span class="token number">.48</span><span class="token number">.4</span><span class="token punctuation">,</span> <span class="token number">01</span><span class="token operator">:</span><span class="token number">06</span><span class="token operator">:</span><span class="token number">21</span>
        <span class="token number">6.0</span><span class="token number">.0</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">32</span> is subnetted<span class="token punctuation">,</span> <span class="token number">1</span> subnets
B        <span class="token number">6.6</span><span class="token number">.6</span><span class="token number">.6</span> <span class="token punctuation">[</span><span class="token number">20</span><span class="token operator">/</span><span class="token number">0</span><span class="token punctuation">]</span> via <span class="token number">192.168</span><span class="token number">.48</span><span class="token number">.4</span><span class="token punctuation">,</span> <span class="token number">00</span><span class="token operator">:</span><span class="token number">53</span><span class="token operator">:</span><span class="token number">21</span>
        <span class="token number">8.0</span><span class="token number">.0</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">32</span> is subnetted<span class="token punctuation">,</span> <span class="token number">1</span> subnets
C        <span class="token number">8.8</span><span class="token number">.8</span><span class="token number">.8</span> is directly connected<span class="token punctuation">,</span> Loopback0
B     <span class="token number">192.168</span><span class="token number">.25</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span> <span class="token punctuation">[</span><span class="token number">20</span><span class="token operator">/</span><span class="token number">0</span><span class="token punctuation">]</span> via <span class="token number">192.168</span><span class="token number">.48</span><span class="token number">.4</span><span class="token punctuation">,</span> <span class="token number">00</span><span class="token operator">:</span><span class="token number">54</span><span class="token operator">:</span><span class="token number">12</span>
B     <span class="token number">192.168</span><span class="token number">.26</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span> <span class="token punctuation">[</span><span class="token number">20</span><span class="token operator">/</span><span class="token number">0</span><span class="token punctuation">]</span> via <span class="token number">192.168</span><span class="token number">.48</span><span class="token number">.4</span><span class="token punctuation">,</span> <span class="token number">00</span><span class="token operator">:</span><span class="token number">53</span><span class="token operator">:</span><span class="token number">47</span>
        <span class="token number">192.168</span><span class="token number">.48</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span> is variably subnetted<span class="token punctuation">,</span> <span class="token number">2</span> subnets<span class="token punctuation">,</span> <span class="token number">2</span> masks
C        <span class="token number">192.168</span><span class="token number">.48</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span> is directly connected<span class="token punctuation">,</span> FastEthernet0<span class="token operator">/</span><span class="token number">1</span>
L        <span class="token number">192.168</span><span class="token number">.48</span><span class="token number">.8</span><span class="token operator">/</span><span class="token number">32</span> is directly connected<span class="token punctuation">,</span> FastEthernet0<span class="token operator">/</span><span class="token number">1</span>
<span class="token comment">//注意到R8的没有去往BGP邻居R7环回口的路由，所以它们无法建立邻居；</span></code></pre>

<p>由于R7和R8同属于一个AS，但它们被PE3隔离开了，并且它们之间再没有其他链路可以到达对方，因此，PE3为R7和R8提供到达对方的连通性，但由于EBGP的AS_PATH环路防护机制，<br>导致R7和R8从PE3收到包含自己所在AS的EBGP路由之后，将直接丢弃这些路由，所以R7和R8不会有对方的路由；</p>
<p>配置 <code>allowas-in</code> ，使R7和R8放松对AS_PATH的环路防护检测；</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token function">R7</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span>#nei <span class="token number">192.168</span><span class="token number">.47</span><span class="token number">.4</span> allowas<span class="token operator">-</span>in <span class="token number">2</span></code></pre>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token function">R8</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span>#nei <span class="token number">192.168</span><span class="token number">.48</span><span class="token number">.4</span> allowas<span class="token operator">-</span>in <span class="token number">2</span></code></pre>

<p>查看R7的BGP汇总表；</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token function">R7</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span>#<span class="token keyword">do</span> sh ip bgp summary
BGP router identifier <span class="token number">7.7</span><span class="token number">.7</span><span class="token number">.7</span><span class="token punctuation">,</span> local AS number <span class="token number">65003</span>
BGP table version is <span class="token number">22</span><span class="token punctuation">,</span> main routing table version <span class="token number">22</span>
<span class="token number">6</span> network entries using <span class="token number">816</span> bytes of memory
<span class="token number">13</span> path entries using <span class="token number">728</span> bytes of memory
<span class="token number">10</span><span class="token operator">/</span><span class="token number">5</span> BGP path<span class="token operator">/</span>bestpath attribute entries using <span class="token number">1280</span> bytes of memory
<span class="token number">4</span> BGP AS<span class="token operator">-</span>PATH entries using <span class="token number">96</span> bytes of memory
<span class="token number">0</span> BGP route<span class="token operator">-</span>map cache entries using <span class="token number">0</span> bytes of memory
<span class="token number">0</span> BGP filter<span class="token operator">-</span>list cache entries using <span class="token number">0</span> bytes of memory
BGP using <span class="token number">2920</span> total bytes of memory
BGP activity <span class="token number">7</span><span class="token operator">/</span><span class="token number">1</span> prefixes<span class="token punctuation">,</span> <span class="token number">31</span><span class="token operator">/</span><span class="token number">18</span> paths<span class="token punctuation">,</span> scan interval <span class="token number">60</span> secs
Neighbor        V           AS MsgRcvd MsgSent   TblVer  InQ OutQ Up<span class="token operator">/</span>Down  State<span class="token operator">/</span>PfxRcd
<span class="token number">8.8</span><span class="token number">.8</span><span class="token number">.8</span>         <span class="token number">4</span>        <span class="token number">65003</span>       <span class="token number">9</span>      <span class="token number">13</span>       <span class="token number">22</span>    <span class="token number">0</span>    <span class="token number">0</span> <span class="token number">00</span><span class="token operator">:</span><span class="token number">01</span><span class="token operator">:</span><span class="token number">54</span>        <span class="token number">6</span>
<span class="token number">192.168</span><span class="token number">.47</span><span class="token number">.4</span>    <span class="token number">4</span>            <span class="token number">1</span>     <span class="token number">148</span>     <span class="token number">125</span>       <span class="token number">22</span>    <span class="token number">0</span>    <span class="token number">0</span> <span class="token number">01</span><span class="token operator">:</span><span class="token number">44</span><span class="token operator">:</span><span class="token number">39</span>        <span class="token number">6</span></code></pre>

<p>查看R8的BGP汇总表；</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token function">R8</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span>#<span class="token keyword">do</span> sh ip bgp summary
BGP router identifier <span class="token number">8.8</span><span class="token number">.8</span><span class="token number">.8</span><span class="token punctuation">,</span> local AS number <span class="token number">65003</span>
BGP table version is <span class="token number">26</span><span class="token punctuation">,</span> main routing table version <span class="token number">26</span>
<span class="token number">6</span> network entries using <span class="token number">816</span> bytes of memory
<span class="token number">13</span> path entries using <span class="token number">728</span> bytes of memory
<span class="token number">10</span><span class="token operator">/</span><span class="token number">5</span> BGP path<span class="token operator">/</span>bestpath attribute entries using <span class="token number">1280</span> bytes of memory
<span class="token number">4</span> BGP AS<span class="token operator">-</span>PATH entries using <span class="token number">96</span> bytes of memory
<span class="token number">0</span> BGP route<span class="token operator">-</span>map cache entries using <span class="token number">0</span> bytes of memory
<span class="token number">0</span> BGP filter<span class="token operator">-</span>list cache entries using <span class="token number">0</span> bytes of memory
BGP using <span class="token number">2920</span> total bytes of memory
BGP activity <span class="token number">7</span><span class="token operator">/</span><span class="token number">1</span> prefixes<span class="token punctuation">,</span> <span class="token number">37</span><span class="token operator">/</span><span class="token number">24</span> paths<span class="token punctuation">,</span> scan interval <span class="token number">60</span> secs
Neighbor        V           AS MsgRcvd MsgSent   TblVer  InQ OutQ Up<span class="token operator">/</span>Down  State<span class="token operator">/</span>PfxRcd
<span class="token number">7.7</span><span class="token number">.7</span><span class="token number">.7</span>         <span class="token number">4</span>        <span class="token number">65003</span>       <span class="token number">9</span>      <span class="token number">11</span>       <span class="token number">26</span>    <span class="token number">0</span>    <span class="token number">0</span> <span class="token number">00</span><span class="token operator">:</span><span class="token number">01</span><span class="token operator">:</span><span class="token number">47</span>        <span class="token number">6</span>
<span class="token number">192.168</span><span class="token number">.48</span><span class="token number">.4</span>    <span class="token number">4</span>            <span class="token number">1</span>     <span class="token number">142</span>     <span class="token number">133</span>       <span class="token number">26</span>    <span class="token number">0</span>    <span class="token number">0</span> <span class="token number">01</span><span class="token operator">:</span><span class="token number">47</span><span class="token operator">:</span><span class="token number">10</span>        <span class="token number">6</span></code></pre>

<p>从R7 ping R8；</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token function">R7</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span>#<span class="token keyword">do</span> p <span class="token number">8.8</span><span class="token number">.8</span><span class="token number">.8</span>
Type escape sequence to abort<span class="token punctuation">.</span>
Sending <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token operator">-</span>byte ICMP Echos to <span class="token number">8.8</span><span class="token number">.8</span><span class="token number">.8</span><span class="token punctuation">,</span> timeout is <span class="token number">2</span> seconds<span class="token operator">:</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
Success rate is <span class="token number">0</span> <span class="token function">percent</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">/</span><span class="token number">5</span><span class="token punctuation">)</span>
<span class="token function">R7</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span>#<span class="token keyword">do</span> p <span class="token number">8.8</span><span class="token number">.8</span><span class="token number">.8</span> source <span class="token number">7.7</span><span class="token number">.7</span><span class="token number">.7</span>
Type escape sequence to abort<span class="token punctuation">.</span>
Sending <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token operator">-</span>byte ICMP Echos to <span class="token number">8.8</span><span class="token number">.8</span><span class="token number">.8</span><span class="token punctuation">,</span> timeout is <span class="token number">2</span> seconds<span class="token operator">:</span>
Packet sent with a source address of <span class="token number">7.7</span><span class="token number">.7</span><span class="token number">.7</span> 
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
Success rate is <span class="token number">0</span> <span class="token function">percent</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">/</span><span class="token number">5</span><span class="token punctuation">)</span>
<span class="token comment">//R7无法ping通R8；</span></code></pre>

<p>查看R7的路由表；</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token function">R7</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span>#<span class="token keyword">do</span> sh ip route
Codes<span class="token operator">:</span> L <span class="token operator">-</span> local<span class="token punctuation">,</span> C <span class="token operator">-</span> connected<span class="token punctuation">,</span> S <span class="token operator">-</span> <span class="token keyword">static</span><span class="token punctuation">,</span> R <span class="token operator">-</span> RIP<span class="token punctuation">,</span> M <span class="token operator">-</span> mobile<span class="token punctuation">,</span> B <span class="token operator">-</span> BGP
        D <span class="token operator">-</span> EIGRP<span class="token punctuation">,</span> EX <span class="token operator">-</span> EIGRP external<span class="token punctuation">,</span> O <span class="token operator">-</span> OSPF<span class="token punctuation">,</span> IA <span class="token operator">-</span> OSPF inter area 
        N1 <span class="token operator">-</span> OSPF NSSA external type <span class="token number">1</span><span class="token punctuation">,</span> N2 <span class="token operator">-</span> OSPF NSSA external type <span class="token number">2</span>
        E1 <span class="token operator">-</span> OSPF external type <span class="token number">1</span><span class="token punctuation">,</span> E2 <span class="token operator">-</span> OSPF external type <span class="token number">2</span>
        i <span class="token operator">-</span> IS<span class="token operator">-</span>IS<span class="token punctuation">,</span> su <span class="token operator">-</span> IS<span class="token operator">-</span>IS summary<span class="token punctuation">,</span> L1 <span class="token operator">-</span> IS<span class="token operator">-</span>IS level<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> L2 <span class="token operator">-</span> IS<span class="token operator">-</span>IS level<span class="token operator">-</span><span class="token number">2</span>
        ia <span class="token operator">-</span> IS<span class="token operator">-</span>IS inter area<span class="token punctuation">,</span> <span class="token operator">*</span> <span class="token operator">-</span> candidate <span class="token keyword">default</span><span class="token punctuation">,</span> U <span class="token operator">-</span> per<span class="token operator">-</span>user <span class="token keyword">static</span> route
        o <span class="token operator">-</span> ODR<span class="token punctuation">,</span> P <span class="token operator">-</span> periodic downloaded <span class="token keyword">static</span> route<span class="token punctuation">,</span> H <span class="token operator">-</span> NHRP<span class="token punctuation">,</span> l <span class="token operator">-</span> LISP
        <span class="token operator">+</span> <span class="token operator">-</span> replicated route<span class="token punctuation">,</span> <span class="token operator">%</span> <span class="token operator">-</span> next hop override
Gateway of last resort is not set
        <span class="token number">5.0</span><span class="token number">.0</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">32</span> is subnetted<span class="token punctuation">,</span> <span class="token number">1</span> subnets
B        <span class="token number">5.5</span><span class="token number">.5</span><span class="token number">.5</span> <span class="token punctuation">[</span><span class="token number">20</span><span class="token operator">/</span><span class="token number">0</span><span class="token punctuation">]</span> via <span class="token number">192.168</span><span class="token number">.47</span><span class="token number">.4</span><span class="token punctuation">,</span> <span class="token number">01</span><span class="token operator">:</span><span class="token number">44</span><span class="token operator">:</span><span class="token number">45</span>
        <span class="token number">6.0</span><span class="token number">.0</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">32</span> is subnetted<span class="token punctuation">,</span> <span class="token number">1</span> subnets
B        <span class="token number">6.6</span><span class="token number">.6</span><span class="token number">.6</span> <span class="token punctuation">[</span><span class="token number">20</span><span class="token operator">/</span><span class="token number">0</span><span class="token punctuation">]</span> via <span class="token number">192.168</span><span class="token number">.47</span><span class="token number">.4</span><span class="token punctuation">,</span> <span class="token number">01</span><span class="token operator">:</span><span class="token number">31</span><span class="token operator">:</span><span class="token number">01</span>
        <span class="token number">7.0</span><span class="token number">.0</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">32</span> is subnetted<span class="token punctuation">,</span> <span class="token number">1</span> subnets
C        <span class="token number">7.7</span><span class="token number">.7</span><span class="token number">.7</span> is directly connected<span class="token punctuation">,</span> Loopback0
        <span class="token number">8.0</span><span class="token number">.0</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">32</span> is subnetted<span class="token punctuation">,</span> <span class="token number">1</span> subnets
B        <span class="token number">8.8</span><span class="token number">.8</span><span class="token number">.8</span> <span class="token punctuation">[</span><span class="token number">200</span><span class="token operator">/</span><span class="token number">0</span><span class="token punctuation">]</span> via <span class="token number">8.8</span><span class="token number">.8</span><span class="token number">.8</span><span class="token punctuation">,</span> <span class="token number">00</span><span class="token operator">:</span><span class="token number">01</span><span class="token operator">:</span><span class="token number">41</span>
B     <span class="token number">192.168</span><span class="token number">.25</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span> <span class="token punctuation">[</span><span class="token number">20</span><span class="token operator">/</span><span class="token number">0</span><span class="token punctuation">]</span> via <span class="token number">192.168</span><span class="token number">.47</span><span class="token number">.4</span><span class="token punctuation">,</span> <span class="token number">01</span><span class="token operator">:</span><span class="token number">31</span><span class="token operator">:</span><span class="token number">51</span>
B     <span class="token number">192.168</span><span class="token number">.26</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span> <span class="token punctuation">[</span><span class="token number">20</span><span class="token operator">/</span><span class="token number">0</span><span class="token punctuation">]</span> via <span class="token number">192.168</span><span class="token number">.47</span><span class="token number">.4</span><span class="token punctuation">,</span> <span class="token number">01</span><span class="token operator">:</span><span class="token number">31</span><span class="token operator">:</span><span class="token number">26</span>
        <span class="token number">192.168</span><span class="token number">.47</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span> is variably subnetted<span class="token punctuation">,</span> <span class="token number">2</span> subnets<span class="token punctuation">,</span> <span class="token number">2</span> masks
C        <span class="token number">192.168</span><span class="token number">.47</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span> is directly connected<span class="token punctuation">,</span> FastEthernet0<span class="token operator">/</span><span class="token number">0</span>
L        <span class="token number">192.168</span><span class="token number">.47</span><span class="token number">.7</span><span class="token operator">/</span><span class="token number">32</span> is directly connected<span class="token punctuation">,</span> FastEthernet0<span class="token operator">/</span><span class="token number">0</span></code></pre>

<p>查看R8的路由表；</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token function">R8</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span>#<span class="token keyword">do</span> sh ip route
Codes<span class="token operator">:</span> L <span class="token operator">-</span> local<span class="token punctuation">,</span> C <span class="token operator">-</span> connected<span class="token punctuation">,</span> S <span class="token operator">-</span> <span class="token keyword">static</span><span class="token punctuation">,</span> R <span class="token operator">-</span> RIP<span class="token punctuation">,</span> M <span class="token operator">-</span> mobile<span class="token punctuation">,</span> B <span class="token operator">-</span> BGP
        D <span class="token operator">-</span> EIGRP<span class="token punctuation">,</span> EX <span class="token operator">-</span> EIGRP external<span class="token punctuation">,</span> O <span class="token operator">-</span> OSPF<span class="token punctuation">,</span> IA <span class="token operator">-</span> OSPF inter area 
        N1 <span class="token operator">-</span> OSPF NSSA external type <span class="token number">1</span><span class="token punctuation">,</span> N2 <span class="token operator">-</span> OSPF NSSA external type <span class="token number">2</span>
        E1 <span class="token operator">-</span> OSPF external type <span class="token number">1</span><span class="token punctuation">,</span> E2 <span class="token operator">-</span> OSPF external type <span class="token number">2</span>
        i <span class="token operator">-</span> IS<span class="token operator">-</span>IS<span class="token punctuation">,</span> su <span class="token operator">-</span> IS<span class="token operator">-</span>IS summary<span class="token punctuation">,</span> L1 <span class="token operator">-</span> IS<span class="token operator">-</span>IS level<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> L2 <span class="token operator">-</span> IS<span class="token operator">-</span>IS level<span class="token operator">-</span><span class="token number">2</span>
        ia <span class="token operator">-</span> IS<span class="token operator">-</span>IS inter area<span class="token punctuation">,</span> <span class="token operator">*</span> <span class="token operator">-</span> candidate <span class="token keyword">default</span><span class="token punctuation">,</span> U <span class="token operator">-</span> per<span class="token operator">-</span>user <span class="token keyword">static</span> route
        o <span class="token operator">-</span> ODR<span class="token punctuation">,</span> P <span class="token operator">-</span> periodic downloaded <span class="token keyword">static</span> route<span class="token punctuation">,</span> H <span class="token operator">-</span> NHRP<span class="token punctuation">,</span> l <span class="token operator">-</span> LISP
        <span class="token operator">+</span> <span class="token operator">-</span> replicated route<span class="token punctuation">,</span> <span class="token operator">%</span> <span class="token operator">-</span> next hop override
Gateway of last resort is not set
        <span class="token number">5.0</span><span class="token number">.0</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">32</span> is subnetted<span class="token punctuation">,</span> <span class="token number">1</span> subnets
B        <span class="token number">5.5</span><span class="token number">.5</span><span class="token number">.5</span> <span class="token punctuation">[</span><span class="token number">20</span><span class="token operator">/</span><span class="token number">0</span><span class="token punctuation">]</span> via <span class="token number">192.168</span><span class="token number">.48</span><span class="token number">.4</span><span class="token punctuation">,</span> <span class="token number">01</span><span class="token operator">:</span><span class="token number">47</span><span class="token operator">:</span><span class="token number">33</span>
        <span class="token number">6.0</span><span class="token number">.0</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">32</span> is subnetted<span class="token punctuation">,</span> <span class="token number">1</span> subnets
B        <span class="token number">6.6</span><span class="token number">.6</span><span class="token number">.6</span> <span class="token punctuation">[</span><span class="token number">20</span><span class="token operator">/</span><span class="token number">0</span><span class="token punctuation">]</span> via <span class="token number">192.168</span><span class="token number">.48</span><span class="token number">.4</span><span class="token punctuation">,</span> <span class="token number">01</span><span class="token operator">:</span><span class="token number">34</span><span class="token operator">:</span><span class="token number">33</span>
        <span class="token number">7.0</span><span class="token number">.0</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">32</span> is subnetted<span class="token punctuation">,</span> <span class="token number">1</span> subnets
B        <span class="token number">7.7</span><span class="token number">.7</span><span class="token number">.7</span> <span class="token punctuation">[</span><span class="token number">200</span><span class="token operator">/</span><span class="token number">0</span><span class="token punctuation">]</span> via <span class="token number">7.7</span><span class="token number">.7</span><span class="token number">.7</span><span class="token punctuation">,</span> <span class="token number">00</span><span class="token operator">:</span><span class="token number">02</span><span class="token operator">:</span><span class="token number">03</span>
        <span class="token number">8.0</span><span class="token number">.0</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">32</span> is subnetted<span class="token punctuation">,</span> <span class="token number">1</span> subnets
C        <span class="token number">8.8</span><span class="token number">.8</span><span class="token number">.8</span> is directly connected<span class="token punctuation">,</span> Loopback0
B     <span class="token number">192.168</span><span class="token number">.25</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span> <span class="token punctuation">[</span><span class="token number">20</span><span class="token operator">/</span><span class="token number">0</span><span class="token punctuation">]</span> via <span class="token number">192.168</span><span class="token number">.48</span><span class="token number">.4</span><span class="token punctuation">,</span> <span class="token number">01</span><span class="token operator">:</span><span class="token number">35</span><span class="token operator">:</span><span class="token number">24</span>
B     <span class="token number">192.168</span><span class="token number">.26</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span> <span class="token punctuation">[</span><span class="token number">20</span><span class="token operator">/</span><span class="token number">0</span><span class="token punctuation">]</span> via <span class="token number">192.168</span><span class="token number">.48</span><span class="token number">.4</span><span class="token punctuation">,</span> <span class="token number">01</span><span class="token operator">:</span><span class="token number">34</span><span class="token operator">:</span><span class="token number">59</span>
        <span class="token number">192.168</span><span class="token number">.48</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span> is variably subnetted<span class="token punctuation">,</span> <span class="token number">2</span> subnets<span class="token punctuation">,</span> <span class="token number">2</span> masks
C        <span class="token number">192.168</span><span class="token number">.48</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span> is directly connected<span class="token punctuation">,</span> FastEthernet0<span class="token operator">/</span><span class="token number">1</span>
L        <span class="token number">192.168</span><span class="token number">.48</span><span class="token number">.8</span><span class="token operator">/</span><span class="token number">32</span> is directly connected<span class="token punctuation">,</span> FastEthernet0<span class="token operator">/</span><span class="token number">1</span></code></pre>

<p>查看R7的BGP表；</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token function">R7</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span>#<span class="token keyword">do</span> sh ip bgp
BGP table version is <span class="token number">114</span><span class="token punctuation">,</span> local router ID is <span class="token number">7.7</span><span class="token number">.7</span><span class="token number">.7</span>
Status codes<span class="token operator">:</span> s suppressed<span class="token punctuation">,</span> d damped<span class="token punctuation">,</span> h history<span class="token punctuation">,</span> <span class="token operator">*</span> valid<span class="token punctuation">,</span> <span class="token operator">></span> best<span class="token punctuation">,</span> i <span class="token operator">-</span> internal<span class="token punctuation">,</span>
                r RIB<span class="token operator">-</span>failure<span class="token punctuation">,</span> S Stale<span class="token punctuation">,</span> m multipath<span class="token punctuation">,</span> b backup<span class="token operator">-</span>path<span class="token punctuation">,</span> x best<span class="token operator">-</span>external<span class="token punctuation">,</span> f RT<span class="token operator">-</span>Filter
Origin codes<span class="token operator">:</span> i <span class="token operator">-</span> IGP<span class="token punctuation">,</span> e <span class="token operator">-</span> EGP<span class="token punctuation">,</span> <span class="token operator">?</span> <span class="token operator">-</span> incomplete
Network          Next Hop            Metric LocPrf Weight Path
<span class="token operator">*</span> i5<span class="token punctuation">.</span><span class="token number">5.5</span><span class="token number">.5</span><span class="token operator">/</span><span class="token number">32</span>       <span class="token number">192.168</span><span class="token number">.48</span><span class="token number">.4</span>             <span class="token number">0</span>    <span class="token number">100</span>      <span class="token number">0</span> <span class="token number">1</span> <span class="token number">65001</span> i
<span class="token operator">*</span><span class="token operator">></span>                  <span class="token number">192.168</span><span class="token number">.47</span><span class="token number">.4</span>                           <span class="token number">0</span> <span class="token number">1</span> <span class="token number">65001</span> i
<span class="token operator">*</span> i6<span class="token punctuation">.</span><span class="token number">6.6</span><span class="token number">.6</span><span class="token operator">/</span><span class="token number">32</span>       <span class="token number">192.168</span><span class="token number">.48</span><span class="token number">.4</span>             <span class="token number">0</span>    <span class="token number">100</span>      <span class="token number">0</span> <span class="token number">1</span> <span class="token number">65002</span> i
<span class="token operator">*</span><span class="token operator">></span>                  <span class="token number">192.168</span><span class="token number">.47</span><span class="token number">.4</span>                           <span class="token number">0</span> <span class="token number">1</span> <span class="token number">65002</span> i
<span class="token operator">*</span> i7<span class="token punctuation">.</span><span class="token number">7.7</span><span class="token number">.7</span><span class="token operator">/</span><span class="token number">32</span>       <span class="token number">192.168</span><span class="token number">.48</span><span class="token number">.4</span>             <span class="token number">0</span>    <span class="token number">100</span>      <span class="token number">0</span> <span class="token number">1</span> <span class="token number">65003</span> i<span class="token comment">//可以看到R7的直连环回口却又通过PE被通告了回来，有环路存在；</span>
<span class="token operator">*</span>                   <span class="token number">192.168</span><span class="token number">.47</span><span class="token number">.4</span>                           <span class="token number">0</span> <span class="token number">1</span> <span class="token number">65003</span> i<span class="token comment">//可以看到R7的直连环回口却又通过PE被通告了回来，有环路存在；</span>
<span class="token operator">*</span><span class="token operator">></span>                  <span class="token number">0.0</span><span class="token number">.0</span><span class="token number">.0</span>                  <span class="token number">0</span>         <span class="token number">32768</span> i
<span class="token operator">*</span><span class="token operator">></span>i8<span class="token punctuation">.</span><span class="token number">8.8</span><span class="token number">.8</span><span class="token operator">/</span><span class="token number">32</span>       <span class="token number">8.8</span><span class="token number">.8</span><span class="token number">.8</span>                  <span class="token number">0</span>    <span class="token number">100</span>      <span class="token number">0</span> i
<span class="token operator">*</span>                   <span class="token number">192.168</span><span class="token number">.47</span><span class="token number">.4</span>                           <span class="token number">0</span> <span class="token number">1</span> <span class="token number">65003</span> i
<span class="token operator">*</span> i192<span class="token punctuation">.</span><span class="token number">168.25</span><span class="token number">.0</span>     <span class="token number">192.168</span><span class="token number">.48</span><span class="token number">.4</span>             <span class="token number">0</span>    <span class="token number">100</span>      <span class="token number">0</span> <span class="token number">1</span> <span class="token operator">?</span>
<span class="token operator">*</span><span class="token operator">></span>                  <span class="token number">192.168</span><span class="token number">.47</span><span class="token number">.4</span>                           <span class="token number">0</span> <span class="token number">1</span> <span class="token operator">?</span>
<span class="token operator">*</span> i192<span class="token punctuation">.</span><span class="token number">168.26</span><span class="token number">.0</span>     <span class="token number">192.168</span><span class="token number">.48</span><span class="token number">.4</span>             <span class="token number">0</span>    <span class="token number">100</span>      <span class="token number">0</span> <span class="token number">1</span> <span class="token operator">?</span>
<span class="token operator">*</span><span class="token operator">></span>                  <span class="token number">192.168</span><span class="token number">.47</span><span class="token number">.4</span>                           <span class="token number">0</span> <span class="token number">1</span> <span class="token operator">?</span></code></pre>

<p>查看R8的BGP表；</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token function">R8</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span>#<span class="token keyword">do</span> sh ip bgp
BGP table version is <span class="token number">116</span><span class="token punctuation">,</span> local router ID is <span class="token number">8.8</span><span class="token number">.8</span><span class="token number">.8</span>
Status codes<span class="token operator">:</span> s suppressed<span class="token punctuation">,</span> d damped<span class="token punctuation">,</span> h history<span class="token punctuation">,</span> <span class="token operator">*</span> valid<span class="token punctuation">,</span> <span class="token operator">></span> best<span class="token punctuation">,</span> i <span class="token operator">-</span> internal<span class="token punctuation">,</span>
                r RIB<span class="token operator">-</span>failure<span class="token punctuation">,</span> S Stale<span class="token punctuation">,</span> m multipath<span class="token punctuation">,</span> b backup<span class="token operator">-</span>path<span class="token punctuation">,</span> x best<span class="token operator">-</span>external<span class="token punctuation">,</span> f RT<span class="token operator">-</span>Filter
Origin codes<span class="token operator">:</span> i <span class="token operator">-</span> IGP<span class="token punctuation">,</span> e <span class="token operator">-</span> EGP<span class="token punctuation">,</span> <span class="token operator">?</span> <span class="token operator">-</span> incomplete
Network          Next Hop            Metric LocPrf Weight Path
<span class="token operator">*</span> i5<span class="token punctuation">.</span><span class="token number">5.5</span><span class="token number">.5</span><span class="token operator">/</span><span class="token number">32</span>       <span class="token number">192.168</span><span class="token number">.47</span><span class="token number">.4</span>             <span class="token number">0</span>    <span class="token number">100</span>      <span class="token number">0</span> <span class="token number">1</span> <span class="token number">65001</span> i
<span class="token operator">*</span><span class="token operator">></span>                  <span class="token number">192.168</span><span class="token number">.48</span><span class="token number">.4</span>                           <span class="token number">0</span> <span class="token number">1</span> <span class="token number">65001</span> i
<span class="token operator">*</span> i6<span class="token punctuation">.</span><span class="token number">6.6</span><span class="token number">.6</span><span class="token operator">/</span><span class="token number">32</span>       <span class="token number">192.168</span><span class="token number">.47</span><span class="token number">.4</span>             <span class="token number">0</span>    <span class="token number">100</span>      <span class="token number">0</span> <span class="token number">1</span> <span class="token number">65002</span> i
<span class="token operator">*</span><span class="token operator">></span>                  <span class="token number">192.168</span><span class="token number">.48</span><span class="token number">.4</span>                           <span class="token number">0</span> <span class="token number">1</span> <span class="token number">65002</span> i
<span class="token operator">*</span><span class="token operator">></span>i7<span class="token punctuation">.</span><span class="token number">7.7</span><span class="token number">.7</span><span class="token operator">/</span><span class="token number">32</span>       <span class="token number">7.7</span><span class="token number">.7</span><span class="token number">.7</span>                  <span class="token number">0</span>    <span class="token number">100</span>      <span class="token number">0</span> i
<span class="token operator">*</span>                   <span class="token number">192.168</span><span class="token number">.48</span><span class="token number">.4</span>                           <span class="token number">0</span> <span class="token number">1</span> <span class="token number">65003</span> i
<span class="token operator">*</span> i8<span class="token punctuation">.</span><span class="token number">8.8</span><span class="token number">.8</span><span class="token operator">/</span><span class="token number">32</span>       <span class="token number">192.168</span><span class="token number">.47</span><span class="token number">.4</span>             <span class="token number">0</span>    <span class="token number">100</span>      <span class="token number">0</span> <span class="token number">1</span> <span class="token number">65003</span> i<span class="token comment">//可以看到R8的直连环回口却又通过PE被通告了回来，有环路存在；</span>
<span class="token operator">*</span>                   <span class="token number">192.168</span><span class="token number">.48</span><span class="token number">.4</span>                           <span class="token number">0</span> <span class="token number">1</span> <span class="token number">65003</span> i<span class="token comment">//可以看到R8的直连环回口却又通过PE被通告了回来，有环路存在；</span>
<span class="token operator">*</span><span class="token operator">></span>                  <span class="token number">0.0</span><span class="token number">.0</span><span class="token number">.0</span>                  <span class="token number">0</span>         <span class="token number">32768</span> i
<span class="token operator">*</span> i192<span class="token punctuation">.</span><span class="token number">168.25</span><span class="token number">.0</span>     <span class="token number">192.168</span><span class="token number">.47</span><span class="token number">.4</span>             <span class="token number">0</span>    <span class="token number">100</span>      <span class="token number">0</span> <span class="token number">1</span> <span class="token operator">?</span>
<span class="token operator">*</span><span class="token operator">></span>                  <span class="token number">192.168</span><span class="token number">.48</span><span class="token number">.4</span>                           <span class="token number">0</span> <span class="token number">1</span> <span class="token operator">?</span>
<span class="token operator">*</span> i192<span class="token punctuation">.</span><span class="token number">168.26</span><span class="token number">.0</span>     <span class="token number">192.168</span><span class="token number">.47</span><span class="token number">.4</span>             <span class="token number">0</span>    <span class="token number">100</span>      <span class="token number">0</span> <span class="token number">1</span> <span class="token operator">?</span>
<span class="token operator">*</span><span class="token operator">></span>                  <span class="token number">192.168</span><span class="token number">.48</span><span class="token number">.4</span>                           <span class="token number">0</span> <span class="token number">1</span> <span class="token operator">?</span></code></pre>
<p>可以看到，现在虽然将R7和R8配置为iBGP邻居，并且由于MPLS VPN的存在R7和R8通过MPLS VPN将iBGP路由发送给对方，而由PE通告的eBGP路由具有更长的AS_PATH，所以R7和R8会优选自己通告的BGP路由。</p>
<p>但是实际上它们之间的连通性是由同PE的eBGP邻居提供的，如果不走PE，就无法到达对方！</p>
<p><strong>解决方案是，不让R7和R8建立iBGP邻居；</strong></p>
<p>删除R7的iBGP邻居配置；</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token function">R7</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span>#no nei <span class="token number">8.8</span><span class="token number">.8</span><span class="token number">.8</span> remote<span class="token operator">-</span>as <span class="token number">65003</span></code></pre>

<p>删除R8的iBGP邻居配置；</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token function">R8</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span>#no nei <span class="token number">7.7</span><span class="token number">.7</span><span class="token number">.7</span> remote<span class="token operator">-</span>as <span class="token number">65003</span></code></pre>

<p>查看R7的路由表；</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token function">R7</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span>#<span class="token keyword">do</span> sh ip route
Codes<span class="token operator">:</span> L <span class="token operator">-</span> local<span class="token punctuation">,</span> C <span class="token operator">-</span> connected<span class="token punctuation">,</span> S <span class="token operator">-</span> <span class="token keyword">static</span><span class="token punctuation">,</span> R <span class="token operator">-</span> RIP<span class="token punctuation">,</span> M <span class="token operator">-</span> mobile<span class="token punctuation">,</span> B <span class="token operator">-</span> BGP
        D <span class="token operator">-</span> EIGRP<span class="token punctuation">,</span> EX <span class="token operator">-</span> EIGRP external<span class="token punctuation">,</span> O <span class="token operator">-</span> OSPF<span class="token punctuation">,</span> IA <span class="token operator">-</span> OSPF inter area 
        N1 <span class="token operator">-</span> OSPF NSSA external type <span class="token number">1</span><span class="token punctuation">,</span> N2 <span class="token operator">-</span> OSPF NSSA external type <span class="token number">2</span>
        E1 <span class="token operator">-</span> OSPF external type <span class="token number">1</span><span class="token punctuation">,</span> E2 <span class="token operator">-</span> OSPF external type <span class="token number">2</span>
        i <span class="token operator">-</span> IS<span class="token operator">-</span>IS<span class="token punctuation">,</span> su <span class="token operator">-</span> IS<span class="token operator">-</span>IS summary<span class="token punctuation">,</span> L1 <span class="token operator">-</span> IS<span class="token operator">-</span>IS level<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> L2 <span class="token operator">-</span> IS<span class="token operator">-</span>IS level<span class="token operator">-</span><span class="token number">2</span>
        ia <span class="token operator">-</span> IS<span class="token operator">-</span>IS inter area<span class="token punctuation">,</span> <span class="token operator">*</span> <span class="token operator">-</span> candidate <span class="token keyword">default</span><span class="token punctuation">,</span> U <span class="token operator">-</span> per<span class="token operator">-</span>user <span class="token keyword">static</span> route
        o <span class="token operator">-</span> ODR<span class="token punctuation">,</span> P <span class="token operator">-</span> periodic downloaded <span class="token keyword">static</span> route<span class="token punctuation">,</span> H <span class="token operator">-</span> NHRP<span class="token punctuation">,</span> l <span class="token operator">-</span> LISP
        <span class="token operator">+</span> <span class="token operator">-</span> replicated route<span class="token punctuation">,</span> <span class="token operator">%</span> <span class="token operator">-</span> next hop override
Gateway of last resort is not set
        <span class="token number">5.0</span><span class="token number">.0</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">32</span> is subnetted<span class="token punctuation">,</span> <span class="token number">1</span> subnets
B        <span class="token number">5.5</span><span class="token number">.5</span><span class="token number">.5</span> <span class="token punctuation">[</span><span class="token number">20</span><span class="token operator">/</span><span class="token number">0</span><span class="token punctuation">]</span> via <span class="token number">192.168</span><span class="token number">.47</span><span class="token number">.4</span><span class="token punctuation">,</span> <span class="token number">03</span><span class="token operator">:</span><span class="token number">22</span><span class="token operator">:</span><span class="token number">49</span>
        <span class="token number">6.0</span><span class="token number">.0</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">32</span> is subnetted<span class="token punctuation">,</span> <span class="token number">1</span> subnets
B        <span class="token number">6.6</span><span class="token number">.6</span><span class="token number">.6</span> <span class="token punctuation">[</span><span class="token number">20</span><span class="token operator">/</span><span class="token number">0</span><span class="token punctuation">]</span> via <span class="token number">192.168</span><span class="token number">.47</span><span class="token number">.4</span><span class="token punctuation">,</span> <span class="token number">03</span><span class="token operator">:</span><span class="token number">09</span><span class="token operator">:</span><span class="token number">05</span>
        <span class="token number">7.0</span><span class="token number">.0</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">32</span> is subnetted<span class="token punctuation">,</span> <span class="token number">1</span> subnets
C        <span class="token number">7.7</span><span class="token number">.7</span><span class="token number">.7</span> is directly connected<span class="token punctuation">,</span> Loopback0
        <span class="token number">8.0</span><span class="token number">.0</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">32</span> is subnetted<span class="token punctuation">,</span> <span class="token number">1</span> subnets
B        <span class="token number">8.8</span><span class="token number">.8</span><span class="token number">.8</span> <span class="token punctuation">[</span><span class="token number">20</span><span class="token operator">/</span><span class="token number">0</span><span class="token punctuation">]</span> via <span class="token number">192.168</span><span class="token number">.47</span><span class="token number">.4</span><span class="token punctuation">,</span> <span class="token number">00</span><span class="token operator">:</span><span class="token number">00</span><span class="token operator">:</span><span class="token number">11</span>
B     <span class="token number">192.168</span><span class="token number">.25</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span> <span class="token punctuation">[</span><span class="token number">20</span><span class="token operator">/</span><span class="token number">0</span><span class="token punctuation">]</span> via <span class="token number">192.168</span><span class="token number">.47</span><span class="token number">.4</span><span class="token punctuation">,</span> <span class="token number">03</span><span class="token operator">:</span><span class="token number">09</span><span class="token operator">:</span><span class="token number">55</span>
B     <span class="token number">192.168</span><span class="token number">.26</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span> <span class="token punctuation">[</span><span class="token number">20</span><span class="token operator">/</span><span class="token number">0</span><span class="token punctuation">]</span> via <span class="token number">192.168</span><span class="token number">.47</span><span class="token number">.4</span><span class="token punctuation">,</span> <span class="token number">03</span><span class="token operator">:</span><span class="token number">09</span><span class="token operator">:</span><span class="token number">30</span>
        <span class="token number">192.168</span><span class="token number">.47</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span> is variably subnetted<span class="token punctuation">,</span> <span class="token number">2</span> subnets<span class="token punctuation">,</span> <span class="token number">2</span> masks
C        <span class="token number">192.168</span><span class="token number">.47</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span> is directly connected<span class="token punctuation">,</span> FastEthernet0<span class="token operator">/</span><span class="token number">0</span>
L        <span class="token number">192.168</span><span class="token number">.47</span><span class="token number">.7</span><span class="token operator">/</span><span class="token number">32</span> is directly connected<span class="token punctuation">,</span> FastEthernet0<span class="token operator">/</span><span class="token number">0</span></code></pre>

<p>查看R8的路由表；</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token function">R8</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span>#<span class="token keyword">do</span> sh ip route
Codes<span class="token operator">:</span> L <span class="token operator">-</span> local<span class="token punctuation">,</span> C <span class="token operator">-</span> connected<span class="token punctuation">,</span> S <span class="token operator">-</span> <span class="token keyword">static</span><span class="token punctuation">,</span> R <span class="token operator">-</span> RIP<span class="token punctuation">,</span> M <span class="token operator">-</span> mobile<span class="token punctuation">,</span> B <span class="token operator">-</span> BGP
        D <span class="token operator">-</span> EIGRP<span class="token punctuation">,</span> EX <span class="token operator">-</span> EIGRP external<span class="token punctuation">,</span> O <span class="token operator">-</span> OSPF<span class="token punctuation">,</span> IA <span class="token operator">-</span> OSPF inter area 
        N1 <span class="token operator">-</span> OSPF NSSA external type <span class="token number">1</span><span class="token punctuation">,</span> N2 <span class="token operator">-</span> OSPF NSSA external type <span class="token number">2</span>
        E1 <span class="token operator">-</span> OSPF external type <span class="token number">1</span><span class="token punctuation">,</span> E2 <span class="token operator">-</span> OSPF external type <span class="token number">2</span>
        i <span class="token operator">-</span> IS<span class="token operator">-</span>IS<span class="token punctuation">,</span> su <span class="token operator">-</span> IS<span class="token operator">-</span>IS summary<span class="token punctuation">,</span> L1 <span class="token operator">-</span> IS<span class="token operator">-</span>IS level<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> L2 <span class="token operator">-</span> IS<span class="token operator">-</span>IS level<span class="token operator">-</span><span class="token number">2</span>
        ia <span class="token operator">-</span> IS<span class="token operator">-</span>IS inter area<span class="token punctuation">,</span> <span class="token operator">*</span> <span class="token operator">-</span> candidate <span class="token keyword">default</span><span class="token punctuation">,</span> U <span class="token operator">-</span> per<span class="token operator">-</span>user <span class="token keyword">static</span> route
        o <span class="token operator">-</span> ODR<span class="token punctuation">,</span> P <span class="token operator">-</span> periodic downloaded <span class="token keyword">static</span> route<span class="token punctuation">,</span> H <span class="token operator">-</span> NHRP<span class="token punctuation">,</span> l <span class="token operator">-</span> LISP
        <span class="token operator">+</span> <span class="token operator">-</span> replicated route<span class="token punctuation">,</span> <span class="token operator">%</span> <span class="token operator">-</span> next hop override
Gateway of last resort is not set
        <span class="token number">5.0</span><span class="token number">.0</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">32</span> is subnetted<span class="token punctuation">,</span> <span class="token number">1</span> subnets
B        <span class="token number">5.5</span><span class="token number">.5</span><span class="token number">.5</span> <span class="token punctuation">[</span><span class="token number">20</span><span class="token operator">/</span><span class="token number">0</span><span class="token punctuation">]</span> via <span class="token number">192.168</span><span class="token number">.48</span><span class="token number">.4</span><span class="token punctuation">,</span> <span class="token number">03</span><span class="token operator">:</span><span class="token number">24</span><span class="token operator">:</span><span class="token number">23</span>
        <span class="token number">6.0</span><span class="token number">.0</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">32</span> is subnetted<span class="token punctuation">,</span> <span class="token number">1</span> subnets
B        <span class="token number">6.6</span><span class="token number">.6</span><span class="token number">.6</span> <span class="token punctuation">[</span><span class="token number">20</span><span class="token operator">/</span><span class="token number">0</span><span class="token punctuation">]</span> via <span class="token number">192.168</span><span class="token number">.48</span><span class="token number">.4</span><span class="token punctuation">,</span> <span class="token number">03</span><span class="token operator">:</span><span class="token number">11</span><span class="token operator">:</span><span class="token number">23</span>
        <span class="token number">7.0</span><span class="token number">.0</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">32</span> is subnetted<span class="token punctuation">,</span> <span class="token number">1</span> subnets
B        <span class="token number">7.7</span><span class="token number">.7</span><span class="token number">.7</span> <span class="token punctuation">[</span><span class="token number">20</span><span class="token operator">/</span><span class="token number">0</span><span class="token punctuation">]</span> via <span class="token number">192.168</span><span class="token number">.48</span><span class="token number">.4</span><span class="token punctuation">,</span> <span class="token number">00</span><span class="token operator">:</span><span class="token number">02</span><span class="token operator">:</span><span class="token number">34</span>
        <span class="token number">8.0</span><span class="token number">.0</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">32</span> is subnetted<span class="token punctuation">,</span> <span class="token number">1</span> subnets
C        <span class="token number">8.8</span><span class="token number">.8</span><span class="token number">.8</span> is directly connected<span class="token punctuation">,</span> Loopback0
B     <span class="token number">192.168</span><span class="token number">.25</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span> <span class="token punctuation">[</span><span class="token number">20</span><span class="token operator">/</span><span class="token number">0</span><span class="token punctuation">]</span> via <span class="token number">192.168</span><span class="token number">.48</span><span class="token number">.4</span><span class="token punctuation">,</span> <span class="token number">03</span><span class="token operator">:</span><span class="token number">12</span><span class="token operator">:</span><span class="token number">14</span>
B     <span class="token number">192.168</span><span class="token number">.26</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span> <span class="token punctuation">[</span><span class="token number">20</span><span class="token operator">/</span><span class="token number">0</span><span class="token punctuation">]</span> via <span class="token number">192.168</span><span class="token number">.48</span><span class="token number">.4</span><span class="token punctuation">,</span> <span class="token number">03</span><span class="token operator">:</span><span class="token number">11</span><span class="token operator">:</span><span class="token number">49</span>
        <span class="token number">192.168</span><span class="token number">.48</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span> is variably subnetted<span class="token punctuation">,</span> <span class="token number">2</span> subnets<span class="token punctuation">,</span> <span class="token number">2</span> masks
C        <span class="token number">192.168</span><span class="token number">.48</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span> is directly connected<span class="token punctuation">,</span> FastEthernet0<span class="token operator">/</span><span class="token number">1</span>
L        <span class="token number">192.168</span><span class="token number">.48</span><span class="token number">.8</span><span class="token operator">/</span><span class="token number">32</span> is directly connected<span class="token punctuation">,</span> FastEthernet0<span class="token operator">/</span><span class="token number">1</span></code></pre>

<p>查看R7的BGP表；</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token function">R7</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>#<span class="token keyword">do</span> sh ip bgp                                                   
BGP table version is <span class="token number">147</span><span class="token punctuation">,</span> local router ID is <span class="token number">7.7</span><span class="token number">.7</span><span class="token number">.7</span>
Status codes<span class="token operator">:</span> s suppressed<span class="token punctuation">,</span> d damped<span class="token punctuation">,</span> h history<span class="token punctuation">,</span> <span class="token operator">*</span> valid<span class="token punctuation">,</span> <span class="token operator">></span> best<span class="token punctuation">,</span> i <span class="token operator">-</span> internal<span class="token punctuation">,</span>
                r RIB<span class="token operator">-</span>failure<span class="token punctuation">,</span> S Stale<span class="token punctuation">,</span> m multipath<span class="token punctuation">,</span> b backup<span class="token operator">-</span>path<span class="token punctuation">,</span> x best<span class="token operator">-</span>external<span class="token punctuation">,</span> f RT<span class="token operator">-</span>Filter
Origin codes<span class="token operator">:</span> i <span class="token operator">-</span> IGP<span class="token punctuation">,</span> e <span class="token operator">-</span> EGP<span class="token punctuation">,</span> <span class="token operator">?</span> <span class="token operator">-</span> incomplete
Network          Next Hop            Metric LocPrf Weight Path
<span class="token operator">*</span><span class="token operator">></span> <span class="token number">5.5</span><span class="token number">.5</span><span class="token number">.5</span><span class="token operator">/</span><span class="token number">32</span>       <span class="token number">192.168</span><span class="token number">.47</span><span class="token number">.4</span>                           <span class="token number">0</span> <span class="token number">1</span> <span class="token number">65001</span> i
<span class="token operator">*</span><span class="token operator">></span> <span class="token number">6.6</span><span class="token number">.6</span><span class="token number">.6</span><span class="token operator">/</span><span class="token number">32</span>       <span class="token number">192.168</span><span class="token number">.47</span><span class="token number">.4</span>                           <span class="token number">0</span> <span class="token number">1</span> <span class="token number">65002</span> i
<span class="token operator">*</span>  <span class="token number">7.7</span><span class="token number">.7</span><span class="token number">.7</span><span class="token operator">/</span><span class="token number">32</span>       <span class="token number">192.168</span><span class="token number">.47</span><span class="token number">.4</span>                           <span class="token number">0</span> <span class="token number">1</span> <span class="token number">65003</span> i
<span class="token operator">*</span><span class="token operator">></span>                  <span class="token number">0.0</span><span class="token number">.0</span><span class="token number">.0</span>                  <span class="token number">0</span>         <span class="token number">32768</span> i
<span class="token operator">*</span><span class="token operator">></span> <span class="token number">8.8</span><span class="token number">.8</span><span class="token number">.8</span><span class="token operator">/</span><span class="token number">32</span>       <span class="token number">192.168</span><span class="token number">.47</span><span class="token number">.4</span>                           <span class="token number">0</span> <span class="token number">1</span> <span class="token number">65003</span> i
<span class="token operator">*</span><span class="token operator">></span> <span class="token number">192.168</span><span class="token number">.25</span><span class="token number">.0</span>     <span class="token number">192.168</span><span class="token number">.47</span><span class="token number">.4</span>                           <span class="token number">0</span> <span class="token number">1</span> <span class="token operator">?</span>
<span class="token operator">*</span><span class="token operator">></span> <span class="token number">192.168</span><span class="token number">.26</span><span class="token number">.0</span>     <span class="token number">192.168</span><span class="token number">.47</span><span class="token number">.4</span>                           <span class="token number">0</span> <span class="token number">1</span> <span class="token operator">?</span>
<span class="token comment">//虽然现在把下一跳解决了，但是环路依然存在；</span></code></pre>

<p>查看R8的BGP表；</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token function">R8</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span>#<span class="token keyword">do</span> sh ip bgp 
BGP table version is <span class="token number">147</span><span class="token punctuation">,</span> local router ID is <span class="token number">8.8</span><span class="token number">.8</span><span class="token number">.8</span>
Status codes<span class="token operator">:</span> s suppressed<span class="token punctuation">,</span> d damped<span class="token punctuation">,</span> h history<span class="token punctuation">,</span> <span class="token operator">*</span> valid<span class="token punctuation">,</span> <span class="token operator">></span> best<span class="token punctuation">,</span> i <span class="token operator">-</span> internal<span class="token punctuation">,</span>
                r RIB<span class="token operator">-</span>failure<span class="token punctuation">,</span> S Stale<span class="token punctuation">,</span> m multipath<span class="token punctuation">,</span> b backup<span class="token operator">-</span>path<span class="token punctuation">,</span> x best<span class="token operator">-</span>external<span class="token punctuation">,</span> f RT<span class="token operator">-</span>Filter
Origin codes<span class="token operator">:</span> i <span class="token operator">-</span> IGP<span class="token punctuation">,</span> e <span class="token operator">-</span> EGP<span class="token punctuation">,</span> <span class="token operator">?</span> <span class="token operator">-</span> incomplete
Network          Next Hop            Metric LocPrf Weight Path
<span class="token operator">*</span><span class="token operator">></span> <span class="token number">5.5</span><span class="token number">.5</span><span class="token number">.5</span><span class="token operator">/</span><span class="token number">32</span>       <span class="token number">192.168</span><span class="token number">.48</span><span class="token number">.4</span>                           <span class="token number">0</span> <span class="token number">1</span> <span class="token number">65001</span> i
<span class="token operator">*</span><span class="token operator">></span> <span class="token number">6.6</span><span class="token number">.6</span><span class="token number">.6</span><span class="token operator">/</span><span class="token number">32</span>       <span class="token number">192.168</span><span class="token number">.48</span><span class="token number">.4</span>                           <span class="token number">0</span> <span class="token number">1</span> <span class="token number">65002</span> i
<span class="token operator">*</span><span class="token operator">></span> <span class="token number">7.7</span><span class="token number">.7</span><span class="token number">.7</span><span class="token operator">/</span><span class="token number">32</span>       <span class="token number">192.168</span><span class="token number">.48</span><span class="token number">.4</span>                           <span class="token number">0</span> <span class="token number">1</span> <span class="token number">65003</span> i
<span class="token operator">*</span>  <span class="token number">8.8</span><span class="token number">.8</span><span class="token number">.8</span><span class="token operator">/</span><span class="token number">32</span>       <span class="token number">192.168</span><span class="token number">.48</span><span class="token number">.4</span>                           <span class="token number">0</span> <span class="token number">1</span> <span class="token number">65003</span> i
<span class="token operator">*</span><span class="token operator">></span>                  <span class="token number">0.0</span><span class="token number">.0</span><span class="token number">.0</span>                  <span class="token number">0</span>         <span class="token number">32768</span> i
<span class="token operator">*</span><span class="token operator">></span> <span class="token number">192.168</span><span class="token number">.25</span><span class="token number">.0</span>     <span class="token number">192.168</span><span class="token number">.48</span><span class="token number">.4</span>                           <span class="token number">0</span> <span class="token number">1</span> <span class="token operator">?</span>
<span class="token operator">*</span><span class="token operator">></span> <span class="token number">192.168</span><span class="token number">.26</span><span class="token number">.0</span>     <span class="token number">192.168</span><span class="token number">.48</span><span class="token number">.4</span>                           <span class="token number">0</span> <span class="token number">1</span> <span class="token operator">?</span>
<span class="token comment">//虽然现在把下一跳解决了，但是环路依然存在；</span></code></pre>

<p>在R4上配置：</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>#route<span class="token operator">-</span>map SOO1<span class="token operator">:</span><span class="token number">1</span> permit <span class="token number">10</span>    
<span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token operator">-</span>route<span class="token operator">-</span>map<span class="token punctuation">)</span>#set extcommunity soo <span class="token number">1</span><span class="token operator">:</span><span class="token number">1</span>      
<span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token operator">-</span>route<span class="token operator">-</span>map<span class="token punctuation">)</span>#exit
<span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>#route<span class="token operator">-</span>map SOO1<span class="token operator">:</span><span class="token number">2</span> permit <span class="token number">10</span>
<span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token operator">-</span>route<span class="token operator">-</span>map<span class="token punctuation">)</span>#set extcommunity soo <span class="token number">1</span><span class="token operator">:</span><span class="token number">2</span>  
<span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token operator">-</span>route<span class="token operator">-</span>map<span class="token punctuation">)</span>#exit

<span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>#router bgp <span class="token number">1</span>
<span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span>#add ipv4 vrf A<span class="token operator">-</span>Site3
<span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token operator">-</span>af<span class="token punctuation">)</span>#neighbor <span class="token number">192.168</span><span class="token number">.47</span><span class="token number">.7</span> route<span class="token operator">-</span>map SOO1<span class="token operator">:</span><span class="token number">1</span> in
<span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token operator">-</span>af<span class="token punctuation">)</span>#neighbor <span class="token number">192.168</span><span class="token number">.48</span><span class="token number">.8</span> route<span class="token operator">-</span>map SOO1<span class="token operator">:</span><span class="token number">2</span> in</code></pre>

<pre class="language-c" data-language="c"><code class="language-c">R7#ping <span class="token number">8.8</span><span class="token number">.8</span><span class="token number">.8</span>
Type escape sequence to abort<span class="token punctuation">.</span>
Sending <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token operator">-</span>byte ICMP Echos to <span class="token number">8.8</span><span class="token number">.8</span><span class="token number">.8</span><span class="token punctuation">,</span> timeout is <span class="token number">2</span> seconds<span class="token operator">:</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
Success rate is <span class="token number">0</span> <span class="token function">percent</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">/</span><span class="token number">5</span><span class="token punctuation">)</span>

R7#ping <span class="token number">8.8</span><span class="token number">.8</span><span class="token number">.8</span> source l0
Type escape sequence to abort<span class="token punctuation">.</span>
Sending <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token operator">-</span>byte ICMP Echos to <span class="token number">8.8</span><span class="token number">.8</span><span class="token number">.8</span><span class="token punctuation">,</span> timeout is <span class="token number">2</span> seconds<span class="token operator">:</span>
Packet sent with a source address of <span class="token number">7.7</span><span class="token number">.7</span><span class="token number">.7</span> 
<span class="token operator">!</span><span class="token operator">!</span><span class="token operator">!</span><span class="token operator">!</span><span class="token operator">!</span>
Success rate is <span class="token number">100</span> <span class="token function">percent</span> <span class="token punctuation">(</span><span class="token number">5</span><span class="token operator">/</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> round<span class="token operator">-</span>trip min<span class="token operator">/</span>avg<span class="token operator">/</span>max <span class="token operator">=</span> <span class="token number">44</span><span class="token operator">/</span><span class="token number">64</span><span class="token operator">/</span><span class="token number">88</span> ms
<span class="token comment">//指定源后，成功ping通！</span>
<span class="token comment">//发现是之前疏忽大意了，忘了在预配中将R4的直连路由重分发进MP-BGP了；</span></code></pre>

<p>检查配置，R4和R1上将直连路由重分发进MP-BGP；</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>#router bgp <span class="token number">1</span>
<span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span>#add ipv4 vrf A<span class="token operator">-</span>Site3
<span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token operator">-</span>af<span class="token punctuation">)</span>#redistribute connected

<span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>#router bgp <span class="token number">1</span>
<span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span>#address<span class="token operator">-</span>family ipv4 vrf A<span class="token operator">-</span>Site1
<span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token operator">-</span>af<span class="token punctuation">)</span>#redistribute connected</code></pre>

<p>从R7上ping其他站点的路由器；</p>
<pre class="language-c" data-language="c"><code class="language-c">R7#ping <span class="token number">8.8</span><span class="token number">.8</span><span class="token number">.8</span>
Type escape sequence to abort<span class="token punctuation">.</span>
Sending <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token operator">-</span>byte ICMP Echos to <span class="token number">8.8</span><span class="token number">.8</span><span class="token number">.8</span><span class="token punctuation">,</span> timeout is <span class="token number">2</span> seconds<span class="token operator">:</span>
<span class="token operator">!</span><span class="token operator">!</span><span class="token operator">!</span><span class="token operator">!</span><span class="token operator">!</span>
Success rate is <span class="token number">100</span> <span class="token function">percent</span> <span class="token punctuation">(</span><span class="token number">5</span><span class="token operator">/</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> round<span class="token operator">-</span>trip min<span class="token operator">/</span>avg<span class="token operator">/</span>max <span class="token operator">=</span> <span class="token number">36</span><span class="token operator">/</span><span class="token number">84</span><span class="token operator">/</span><span class="token number">120</span> ms
R7#ping <span class="token number">5.5</span><span class="token number">.5</span><span class="token number">.5</span>
Type escape sequence to abort<span class="token punctuation">.</span>
Sending <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token operator">-</span>byte ICMP Echos to <span class="token number">5.5</span><span class="token number">.5</span><span class="token number">.5</span><span class="token punctuation">,</span> timeout is <span class="token number">2</span> seconds<span class="token operator">:</span>
<span class="token operator">!</span><span class="token operator">!</span><span class="token operator">!</span><span class="token operator">!</span><span class="token operator">!</span>
Success rate is <span class="token number">100</span> <span class="token function">percent</span> <span class="token punctuation">(</span><span class="token number">5</span><span class="token operator">/</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> round<span class="token operator">-</span>trip min<span class="token operator">/</span>avg<span class="token operator">/</span>max <span class="token operator">=</span> <span class="token number">88</span><span class="token operator">/</span><span class="token number">121</span><span class="token operator">/</span><span class="token number">144</span> ms
R7#ping <span class="token number">6.6</span><span class="token number">.6</span><span class="token number">.6</span>  
Type escape sequence to abort<span class="token punctuation">.</span>
Sending <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token operator">-</span>byte ICMP Echos to <span class="token number">6.6</span><span class="token number">.6</span><span class="token number">.6</span><span class="token punctuation">,</span> timeout is <span class="token number">2</span> seconds<span class="token operator">:</span>
<span class="token operator">!</span><span class="token operator">!</span><span class="token operator">!</span><span class="token operator">!</span><span class="token operator">!</span>
Success rate is <span class="token number">100</span> <span class="token function">percent</span> <span class="token punctuation">(</span><span class="token number">5</span><span class="token operator">/</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> round<span class="token operator">-</span>trip min<span class="token operator">/</span>avg<span class="token operator">/</span>max <span class="token operator">=</span> <span class="token number">80</span><span class="token operator">/</span><span class="token number">105</span><span class="token operator">/</span><span class="token number">140</span> ms</code></pre>

<p>查看R5的路由表，发现R5依然没有R6的路由；</p>
<pre class="language-c" data-language="c"><code class="language-c">R5#sh ip route 
Codes<span class="token operator">:</span> L <span class="token operator">-</span> local<span class="token punctuation">,</span> C <span class="token operator">-</span> connected<span class="token punctuation">,</span> S <span class="token operator">-</span> <span class="token keyword">static</span><span class="token punctuation">,</span> R <span class="token operator">-</span> RIP<span class="token punctuation">,</span> M <span class="token operator">-</span> mobile<span class="token punctuation">,</span> B <span class="token operator">-</span> BGP
        D <span class="token operator">-</span> EIGRP<span class="token punctuation">,</span> EX <span class="token operator">-</span> EIGRP external<span class="token punctuation">,</span> O <span class="token operator">-</span> OSPF<span class="token punctuation">,</span> IA <span class="token operator">-</span> OSPF inter area 
        N1 <span class="token operator">-</span> OSPF NSSA external type <span class="token number">1</span><span class="token punctuation">,</span> N2 <span class="token operator">-</span> OSPF NSSA external type <span class="token number">2</span>
        E1 <span class="token operator">-</span> OSPF external type <span class="token number">1</span><span class="token punctuation">,</span> E2 <span class="token operator">-</span> OSPF external type <span class="token number">2</span>
        i <span class="token operator">-</span> IS<span class="token operator">-</span>IS<span class="token punctuation">,</span> su <span class="token operator">-</span> IS<span class="token operator">-</span>IS summary<span class="token punctuation">,</span> L1 <span class="token operator">-</span> IS<span class="token operator">-</span>IS level<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> L2 <span class="token operator">-</span> IS<span class="token operator">-</span>IS level<span class="token operator">-</span><span class="token number">2</span>
        ia <span class="token operator">-</span> IS<span class="token operator">-</span>IS inter area<span class="token punctuation">,</span> <span class="token operator">*</span> <span class="token operator">-</span> candidate <span class="token keyword">default</span><span class="token punctuation">,</span> U <span class="token operator">-</span> per<span class="token operator">-</span>user <span class="token keyword">static</span> route
        o <span class="token operator">-</span> ODR<span class="token punctuation">,</span> P <span class="token operator">-</span> periodic downloaded <span class="token keyword">static</span> route<span class="token punctuation">,</span> H <span class="token operator">-</span> NHRP<span class="token punctuation">,</span> l <span class="token operator">-</span> LISP
        <span class="token operator">+</span> <span class="token operator">-</span> replicated route<span class="token punctuation">,</span> <span class="token operator">%</span> <span class="token operator">-</span> next hop override
Gateway of last resort is not set
        <span class="token number">5.0</span><span class="token number">.0</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">32</span> is subnetted<span class="token punctuation">,</span> <span class="token number">1</span> subnets
C        <span class="token number">5.5</span><span class="token number">.5</span><span class="token number">.5</span> is directly connected<span class="token punctuation">,</span> Loopback0
        <span class="token number">7.0</span><span class="token number">.0</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">32</span> is subnetted<span class="token punctuation">,</span> <span class="token number">1</span> subnets
B        <span class="token number">7.7</span><span class="token number">.7</span><span class="token number">.7</span> <span class="token punctuation">[</span><span class="token number">20</span><span class="token operator">/</span><span class="token number">0</span><span class="token punctuation">]</span> via <span class="token number">192.168</span><span class="token number">.15</span><span class="token number">.1</span><span class="token punctuation">,</span> <span class="token number">04</span><span class="token operator">:</span><span class="token number">17</span><span class="token operator">:</span><span class="token number">22</span>
        <span class="token number">8.0</span><span class="token number">.0</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">32</span> is subnetted<span class="token punctuation">,</span> <span class="token number">1</span> subnets
B        <span class="token number">8.8</span><span class="token number">.8</span><span class="token number">.8</span> <span class="token punctuation">[</span><span class="token number">20</span><span class="token operator">/</span><span class="token number">0</span><span class="token punctuation">]</span> via <span class="token number">192.168</span><span class="token number">.15</span><span class="token number">.1</span><span class="token punctuation">,</span> <span class="token number">04</span><span class="token operator">:</span><span class="token number">16</span><span class="token operator">:</span><span class="token number">37</span>
        <span class="token number">192.168</span><span class="token number">.15</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span> is variably subnetted<span class="token punctuation">,</span> <span class="token number">2</span> subnets<span class="token punctuation">,</span> <span class="token number">2</span> masks
C        <span class="token number">192.168</span><span class="token number">.15</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span> is directly connected<span class="token punctuation">,</span> FastEthernet0<span class="token operator">/</span><span class="token number">1</span>
L        <span class="token number">192.168</span><span class="token number">.15</span><span class="token number">.5</span><span class="token operator">/</span><span class="token number">32</span> is directly connected<span class="token punctuation">,</span> FastEthernet0<span class="token operator">/</span><span class="token number">1</span>
        <span class="token number">192.168</span><span class="token number">.25</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span> is variably subnetted<span class="token punctuation">,</span> <span class="token number">2</span> subnets<span class="token punctuation">,</span> <span class="token number">2</span> masks
C        <span class="token number">192.168</span><span class="token number">.25</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span> is directly connected<span class="token punctuation">,</span> FastEthernet0<span class="token operator">/</span><span class="token number">0</span>
L        <span class="token number">192.168</span><span class="token number">.25</span><span class="token number">.5</span><span class="token operator">/</span><span class="token number">32</span> is directly connected<span class="token punctuation">,</span> FastEthernet0<span class="token operator">/</span><span class="token number">0</span>
B     <span class="token number">192.168</span><span class="token number">.47</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span> <span class="token punctuation">[</span><span class="token number">20</span><span class="token operator">/</span><span class="token number">0</span><span class="token punctuation">]</span> via <span class="token number">192.168</span><span class="token number">.15</span><span class="token number">.1</span><span class="token punctuation">,</span> <span class="token number">00</span><span class="token operator">:</span><span class="token number">11</span><span class="token operator">:</span><span class="token number">01</span>
B     <span class="token number">192.168</span><span class="token number">.48</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span> <span class="token punctuation">[</span><span class="token number">20</span><span class="token operator">/</span><span class="token number">0</span><span class="token punctuation">]</span> via <span class="token number">192.168</span><span class="token number">.15</span><span class="token number">.1</span><span class="token punctuation">,</span> <span class="token number">00</span><span class="token operator">:</span><span class="token number">11</span><span class="token operator">:</span><span class="token number">01</span></code></pre>

<p>查看R6的路由表，发现R6同样没有R5的路由；</p>
<pre class="language-c" data-language="c"><code class="language-c">R6#sh ip route
Codes<span class="token operator">:</span> L <span class="token operator">-</span> local<span class="token punctuation">,</span> C <span class="token operator">-</span> connected<span class="token punctuation">,</span> S <span class="token operator">-</span> <span class="token keyword">static</span><span class="token punctuation">,</span> R <span class="token operator">-</span> RIP<span class="token punctuation">,</span> M <span class="token operator">-</span> mobile<span class="token punctuation">,</span> B <span class="token operator">-</span> BGP
        D <span class="token operator">-</span> EIGRP<span class="token punctuation">,</span> EX <span class="token operator">-</span> EIGRP external<span class="token punctuation">,</span> O <span class="token operator">-</span> OSPF<span class="token punctuation">,</span> IA <span class="token operator">-</span> OSPF inter area 
        N1 <span class="token operator">-</span> OSPF NSSA external type <span class="token number">1</span><span class="token punctuation">,</span> N2 <span class="token operator">-</span> OSPF NSSA external type <span class="token number">2</span>
        E1 <span class="token operator">-</span> OSPF external type <span class="token number">1</span><span class="token punctuation">,</span> E2 <span class="token operator">-</span> OSPF external type <span class="token number">2</span>
        i <span class="token operator">-</span> IS<span class="token operator">-</span>IS<span class="token punctuation">,</span> su <span class="token operator">-</span> IS<span class="token operator">-</span>IS summary<span class="token punctuation">,</span> L1 <span class="token operator">-</span> IS<span class="token operator">-</span>IS level<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> L2 <span class="token operator">-</span> IS<span class="token operator">-</span>IS level<span class="token operator">-</span><span class="token number">2</span>
        ia <span class="token operator">-</span> IS<span class="token operator">-</span>IS inter area<span class="token punctuation">,</span> <span class="token operator">*</span> <span class="token operator">-</span> candidate <span class="token keyword">default</span><span class="token punctuation">,</span> U <span class="token operator">-</span> per<span class="token operator">-</span>user <span class="token keyword">static</span> route
        o <span class="token operator">-</span> ODR<span class="token punctuation">,</span> P <span class="token operator">-</span> periodic downloaded <span class="token keyword">static</span> route<span class="token punctuation">,</span> H <span class="token operator">-</span> NHRP<span class="token punctuation">,</span> l <span class="token operator">-</span> LISP
        <span class="token operator">+</span> <span class="token operator">-</span> replicated route<span class="token punctuation">,</span> <span class="token operator">%</span> <span class="token operator">-</span> next hop override
Gateway of last resort is not set
        <span class="token number">6.0</span><span class="token number">.0</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">32</span> is subnetted<span class="token punctuation">,</span> <span class="token number">1</span> subnets
C        <span class="token number">6.6</span><span class="token number">.6</span><span class="token number">.6</span> is directly connected<span class="token punctuation">,</span> Loopback0
        <span class="token number">7.0</span><span class="token number">.0</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">32</span> is subnetted<span class="token punctuation">,</span> <span class="token number">1</span> subnets
B        <span class="token number">7.7</span><span class="token number">.7</span><span class="token number">.7</span> <span class="token punctuation">[</span><span class="token number">20</span><span class="token operator">/</span><span class="token number">0</span><span class="token punctuation">]</span> via <span class="token number">192.168</span><span class="token number">.26</span><span class="token number">.2</span><span class="token punctuation">,</span> <span class="token number">04</span><span class="token operator">:</span><span class="token number">04</span><span class="token operator">:</span><span class="token number">46</span>
        <span class="token number">8.0</span><span class="token number">.0</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">32</span> is subnetted<span class="token punctuation">,</span> <span class="token number">1</span> subnets
B        <span class="token number">8.8</span><span class="token number">.8</span><span class="token number">.8</span> <span class="token punctuation">[</span><span class="token number">20</span><span class="token operator">/</span><span class="token number">0</span><span class="token punctuation">]</span> via <span class="token number">192.168</span><span class="token number">.26</span><span class="token number">.2</span><span class="token punctuation">,</span> <span class="token number">04</span><span class="token operator">:</span><span class="token number">04</span><span class="token operator">:</span><span class="token number">46</span>
        <span class="token number">192.168</span><span class="token number">.26</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span> is variably subnetted<span class="token punctuation">,</span> <span class="token number">2</span> subnets<span class="token punctuation">,</span> <span class="token number">2</span> masks
C        <span class="token number">192.168</span><span class="token number">.26</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span> is directly connected<span class="token punctuation">,</span> FastEthernet0<span class="token operator">/</span><span class="token number">0</span>
L        <span class="token number">192.168</span><span class="token number">.26</span><span class="token number">.6</span><span class="token operator">/</span><span class="token number">32</span> is directly connected<span class="token punctuation">,</span> FastEthernet0<span class="token operator">/</span><span class="token number">0</span>
B     <span class="token number">192.168</span><span class="token number">.47</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span> <span class="token punctuation">[</span><span class="token number">20</span><span class="token operator">/</span><span class="token number">0</span><span class="token punctuation">]</span> via <span class="token number">192.168</span><span class="token number">.26</span><span class="token number">.2</span><span class="token punctuation">,</span> <span class="token number">00</span><span class="token operator">:</span><span class="token number">12</span><span class="token operator">:</span><span class="token number">07</span>
B     <span class="token number">192.168</span><span class="token number">.48</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span> <span class="token punctuation">[</span><span class="token number">20</span><span class="token operator">/</span><span class="token number">0</span><span class="token punctuation">]</span> via <span class="token number">192.168</span><span class="token number">.26</span><span class="token number">.2</span><span class="token punctuation">,</span> <span class="token number">00</span><span class="token operator">:</span><span class="token number">12</span><span class="token operator">:</span><span class="token number">07</span></code></pre>

<p>由于需求要求Spoke和Spoke间的通信需要先绕经Hub站点，所以R5需要从站点3学到关于R6的路由，R6也需要从站点3学到关于R5的路由；但当路由从R4通告给站点3的时候，路由的AS_PATH携带了AS1，当被站点3通告回R4的时候，R4就会丢弃AS_PATH中携带了和自己所在AS号相同的的路由。</p>
<h1 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h1><p>PE路由器简单地比较CE路由器ASN和 <code>as-path</code> 中的ASN，如果匹配的话，所有在 <code>as-path</code> 中的该ASN都会被服务提供商的ASN所代替。<br>这样一来，远程CE就会接受这些路由了，因为它们在这些BGP路由的 <code>as-path</code> 中看不到自己的ASN了！但这样一来，对于可能存在环路的保护机制，以及非最优路由的 <code>as-path</code> 检查机制就失效了。因此，在使用 <code>as-override</code> 功能进行ASN覆盖的时候，明智的做法是为BGP实施SOO特性。</p>
]]></content>
      <categories>
        <category>Network</category>
      </categories>
      <tags>
        <tag>MPLS</tag>
        <tag>Network</tag>
      </tags>
  </entry>
  <entry>
    <title>MPLS 实验2：MPLS LDP会话保护</title>
    <url>/2014/MPLS_Lab_2/</url>
    <content><![CDATA[<h1 id="理论：MPLS-LDP会话保护"><a href="#理论：MPLS-LDP会话保护" class="headerlink" title="理论：MPLS LDP会话保护"></a>理论：MPLS LDP会话保护</h1><p>在对两台直接连接LSR之间的LDP会话实施保护后，将会在这两台LSR之间建立基于目标的LDP会话。当这两台LSR之间的直连链路断开以后，只要这两台LSR之间存在可替代路径，基于目标的LDP会话将会得到维持。</p>
<h1 id="实验环境："><a href="#实验环境：" class="headerlink" title="实验环境："></a>实验环境：</h1><ul>
<li>模拟器：GNS3 0.8.6</li>
<li>Cisco IOS：c7200-adventerprisek9-mz.151-4.M2.image</li>
</ul>
<h1 id="实验拓扑："><a href="#实验拓扑：" class="headerlink" title="实验拓扑："></a>实验拓扑：</h1><p><img src="/2014/MPLS_Lab_2/topo.png" alt="topology"></p>
<span id="more"></span>

<h1 id="基本预配置："><a href="#基本预配置：" class="headerlink" title="基本预配置："></a>基本预配置：</h1><h2 id="R1："><a href="#R1：" class="headerlink" title="R1："></a>R1：</h2><pre class="language-none"><code class="language-none">hostname R1
!
ip cef
!
multilink bundle-name authenticated
mpls label protocol ldp
!
interface Loopback0
    ip address 1.1.1.1 255.255.255.255
    ip ospf 1 area 0
!
interface FastEthernet0&#x2F;0
    ip address 192.168.12.1 255.255.255.0
    ip ospf 1 area 0
    no shut
mpls ip
!
interface FastEthernet0&#x2F;1
    ip address 192.168.14.1 255.255.255.0
    ip ospf 1 area 0
    no shut
mpls ip
!
router ospf 1
    router-id 1.1.1.1
!
mpls ldp router-id Loopback0 force
!
line con 0
    exec-timeout 0 0
    logging synchronous
!
end</code></pre>

<h2 id="R2"><a href="#R2" class="headerlink" title="R2:"></a>R2:</h2><pre class="language-none"><code class="language-none">hostname R2
!
ip cef
!
mpls label protocol ldp
!
interface Loopback0
    ip address 2.2.2.2 255.255.255.255
    ip ospf 1 area 0
!
interface FastEthernet0&#x2F;0
    ip address 192.168.12.2 255.255.255.0
    ip ospf 1 area 0
    no shut
mpls ip
!
interface FastEthernet0&#x2F;1
    ip address 192.168.23.2 255.255.255.0
    ip ospf 1 area 0
    no shut
mpls ip
!
router ospf 1
    router-id 2.2.2.2
!
mpls ldp router-id Loopback0 force
!
line con 0
    exec-timeout 0 0
    logging synchronous
!
end</code></pre>

<h2 id="R3"><a href="#R3" class="headerlink" title="R3:"></a>R3:</h2><pre class="language-none"><code class="language-none">hostname R3
!
ip cef
!
mpls label protocol ldp
!
interface Loopback0
    ip address 3.3.3.3 255.255.255.255
    ip ospf 1 area 0
!
interface FastEthernet0&#x2F;0
    ip address 192.168.34.3 255.255.255.0
    ip ospf 1 area 0
    no shut
mpls ip
!
interface FastEthernet0&#x2F;1
    ip address 192.168.23.3 255.255.255.0
    ip ospf 1 area 0
    no shut
mpls ip
!
router ospf 1
    router-id 3.3.3.3
!
mpls ldp router-id Loopback0 force
!
line con 0
    exec-timeout 0 0
    logging synchronous
!
end</code></pre>

<h2 id="R4"><a href="#R4" class="headerlink" title="R4:"></a>R4:</h2><pre class="language-none"><code class="language-none">hostname R4
!
ip cef
!
mpls label protocol ldp
!
interface Loopback0
    ip address 4.4.4.4 255.255.255.255
    ip ospf 1 area 0
!
interface FastEthernet0&#x2F;0
    ip address 192.168.34.4 255.255.255.0
    ip ospf 1 area 0
    no shut
mpls ip
!
interface FastEthernet0&#x2F;1
    ip address 192.168.14.4 255.255.255.0
    ip ospf 1 area 0
    no shut
mpls ip
!
router ospf 1
    router-id 4.4.4.4
!
mpls ldp router-id Loopback0 force
!
line con 0
    exec-timeout 0 0
    logging synchronous
!
end</code></pre>


<h1 id="实验与调试："><a href="#实验与调试：" class="headerlink" title="实验与调试："></a>实验与调试：</h1><h2 id="实验1：两台LSR相互将对方配置为受MPLS-LDP会话保护的对等体；"><a href="#实验1：两台LSR相互将对方配置为受MPLS-LDP会话保护的对等体；" class="headerlink" title="实验1：两台LSR相互将对方配置为受MPLS LDP会话保护的对等体；"></a>实验1：两台LSR相互将对方配置为受MPLS LDP会话保护的对等体；</h2><p>配置ACL来指定需要被保护的LDP对等体；</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>#ip access<span class="token operator">-</span>list standard PROTECT_R4
<span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token operator">-</span>std<span class="token operator">-</span>nacl<span class="token punctuation">)</span>#permit host <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span>
<span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token operator">-</span>std<span class="token operator">-</span>nacl<span class="token punctuation">)</span>#exit</code></pre>

<p>配置MPLS LDP会话保护，并将其与指定需要保护的LDP对等体ACL相关联；</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>#mpls ldp session protection <span class="token keyword">for</span> PROTECT_R4 duration <span class="token operator">?</span>
    <span class="token operator">&lt;</span><span class="token number">30</span><span class="token operator">-</span><span class="token number">2147483</span><span class="token operator">></span>  Holdup time in seconds
    infinite      Protect session forever after loss of link discovery
<span class="token comment">//选项duration指出持续时间，持续时间指的是在LDP链路的邻接关系断掉以后，需要得到保护（基于目标的LDP会话）的周期时间；</span>

<span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>#mpls ldp session protection <span class="token keyword">for</span> PROTECT_R4</code></pre>

<p>验证：查看R1的MPLS LDP邻居列表中邻居R4的详细信息；</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>#<span class="token keyword">do</span> sh mpls ldp nei <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span> detail            
    Peer LDP Ident<span class="token operator">:</span> <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">;</span> Local LDP Ident <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">0</span>
        TCP connection<span class="token operator">:</span> <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span><span class="token number">.40199</span> <span class="token operator">-</span> <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span><span class="token number">.646</span>
        Password<span class="token operator">:</span> not required<span class="token punctuation">,</span> none<span class="token punctuation">,</span> in use
        State<span class="token operator">:</span> Oper<span class="token punctuation">;</span> Msgs sent<span class="token operator">/</span>rcvd<span class="token operator">:</span> <span class="token number">61</span><span class="token operator">/</span><span class="token number">59</span><span class="token punctuation">;</span> Downstream<span class="token punctuation">;</span> Last TIB rev sent <span class="token number">16</span>
        Up time<span class="token operator">:</span> <span class="token number">00</span><span class="token operator">:</span><span class="token number">42</span><span class="token operator">:</span><span class="token number">56</span><span class="token punctuation">;</span> UID<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">;</span> Peer Id <span class="token number">1</span><span class="token punctuation">;</span>
        LDP discovery sources<span class="token operator">:</span>
          FastEthernet0<span class="token operator">/</span><span class="token number">1</span><span class="token punctuation">;</span> Src IP addr<span class="token operator">:</span> <span class="token number">192.168</span><span class="token number">.14</span><span class="token number">.4</span> 
            holdtime<span class="token operator">:</span> <span class="token number">15000</span> ms<span class="token punctuation">,</span> hello interval<span class="token operator">:</span> <span class="token number">5000</span> ms
        Addresses bound to peer LDP Ident<span class="token operator">:</span>
          <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span>         <span class="token number">192.168</span><span class="token number">.34</span><span class="token number">.4</span>    <span class="token number">192.168</span><span class="token number">.14</span><span class="token number">.4</span>    
        Peer holdtime<span class="token operator">:</span> <span class="token number">180000</span> ms<span class="token punctuation">;</span> KA interval<span class="token operator">:</span> <span class="token number">60000</span> ms<span class="token punctuation">;</span> Peer state<span class="token operator">:</span> estab
        Clients<span class="token operator">:</span> Dir Adj Client
        LDP Session Protection enabled<span class="token punctuation">,</span> state<span class="token operator">:</span> Incomplete <span class="token comment">//可以看到针对邻居4.4.4.4,LDP会话保护已经启用；但因R1端还未配置，所以状态为Incomplete；</span>
            acl<span class="token operator">:</span> PROTECT_R4<span class="token punctuation">,</span> duration<span class="token operator">:</span> <span class="token number">86400</span> seconds <span class="token comment">//持续保护时间为86400秒，即24小时；</span>
        Capabilities Sent<span class="token operator">:</span>
          <span class="token punctuation">[</span><span class="token function">ICCP</span> <span class="token punctuation">(</span>type <span class="token number">0x0405</span><span class="token punctuation">)</span> MajVer <span class="token number">1</span> MinVer <span class="token number">0</span><span class="token punctuation">]</span>
          <span class="token punctuation">[</span>Dynamic <span class="token function">Announcement</span> <span class="token punctuation">(</span><span class="token number">0x0506</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
          <span class="token punctuation">[</span>Typed <span class="token function">Wildcard</span> <span class="token punctuation">(</span><span class="token number">0x050B</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
        Capabilities Received<span class="token operator">:</span>
          <span class="token punctuation">[</span><span class="token function">ICCP</span> <span class="token punctuation">(</span>type <span class="token number">0x0405</span><span class="token punctuation">)</span> MajVer <span class="token number">1</span> MinVer <span class="token number">0</span><span class="token punctuation">]</span>
          <span class="token punctuation">[</span>Dynamic <span class="token function">Announcement</span> <span class="token punctuation">(</span><span class="token number">0x0506</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
          <span class="token punctuation">[</span>Typed <span class="token function">Wildcard</span> <span class="token punctuation">(</span><span class="token number">0x050B</span><span class="token punctuation">)</span><span class="token punctuation">]</span></code></pre>
<p>注意：根据《MPLS Fundamental》86页所述，默认的持续时间（Duration）为无限期，即永远，<br>但是经过试验发现，如果不指明选项duration，则持续保护时间为86400秒，即24小时；</p>
<p>而明确指定 duration 为 infinite（无限期）之后，持续保护时间才真正变为了 infinite（无限期）；</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>#mpls ldp session protection <span class="token keyword">for</span> PROTECT_R4 duration infinite </code></pre>

<p>验证：查看R1的MPLS LDP邻居列表中邻居R4的详细信息；</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>#<span class="token keyword">do</span> sh mpls ldp nei <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span> detail                           
    Peer LDP Ident<span class="token operator">:</span> <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">;</span> Local LDP Ident <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">0</span>
        TCP connection<span class="token operator">:</span> <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span><span class="token number">.40199</span> <span class="token operator">-</span> <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span><span class="token number">.646</span>
        Password<span class="token operator">:</span> not required<span class="token punctuation">,</span> none<span class="token punctuation">,</span> in use
        State<span class="token operator">:</span> Oper<span class="token punctuation">;</span> Msgs sent<span class="token operator">/</span>rcvd<span class="token operator">:</span> <span class="token number">70</span><span class="token operator">/</span><span class="token number">69</span><span class="token punctuation">;</span> Downstream<span class="token punctuation">;</span> Last TIB rev sent <span class="token number">16</span>
        Up time<span class="token operator">:</span> <span class="token number">00</span><span class="token operator">:</span><span class="token number">51</span><span class="token operator">:</span><span class="token number">05</span><span class="token punctuation">;</span> UID<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">;</span> Peer Id <span class="token number">1</span><span class="token punctuation">;</span>
        LDP discovery sources<span class="token operator">:</span>
            FastEthernet0<span class="token operator">/</span><span class="token number">1</span><span class="token punctuation">;</span> Src IP addr<span class="token operator">:</span> <span class="token number">192.168</span><span class="token number">.14</span><span class="token number">.4</span> 
            holdtime<span class="token operator">:</span> <span class="token number">15000</span> ms<span class="token punctuation">,</span> hello interval<span class="token operator">:</span> <span class="token number">5000</span> ms
        Addresses bound to peer LDP Ident<span class="token operator">:</span>
            <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span>         <span class="token number">192.168</span><span class="token number">.34</span><span class="token number">.4</span>    <span class="token number">192.168</span><span class="token number">.14</span><span class="token number">.4</span>    
        Peer holdtime<span class="token operator">:</span> <span class="token number">180000</span> ms<span class="token punctuation">;</span> KA interval<span class="token operator">:</span> <span class="token number">60000</span> ms<span class="token punctuation">;</span> Peer state<span class="token operator">:</span> estab
        Clients<span class="token operator">:</span> Dir Adj Client
        LDP Session Protection enabled<span class="token punctuation">,</span> state<span class="token operator">:</span> Incomplete  <span class="token comment">//可以看到针对邻居4.4.4.4,LDP会话保护已经启用；但因R1端还未配置，所以状态为Incomplete；</span>
            acl<span class="token operator">:</span> PROTECT_R4<span class="token punctuation">,</span> duration<span class="token operator">:</span> infinite<span class="token comment">//持续保护时间为无限期，即永远保护；</span>
        Capabilities Sent<span class="token operator">:</span>
            <span class="token punctuation">[</span><span class="token function">ICCP</span> <span class="token punctuation">(</span>type <span class="token number">0x0405</span><span class="token punctuation">)</span> MajVer <span class="token number">1</span> MinVer <span class="token number">0</span><span class="token punctuation">]</span>
            <span class="token punctuation">[</span>Dynamic <span class="token function">Announcement</span> <span class="token punctuation">(</span><span class="token number">0x0506</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
            <span class="token punctuation">[</span>Typed <span class="token function">Wildcard</span> <span class="token punctuation">(</span><span class="token number">0x050B</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
        Capabilities Received<span class="token operator">:</span>
            <span class="token punctuation">[</span><span class="token function">ICCP</span> <span class="token punctuation">(</span>type <span class="token number">0x0405</span><span class="token punctuation">)</span> MajVer <span class="token number">1</span> MinVer <span class="token number">0</span><span class="token punctuation">]</span>
            <span class="token punctuation">[</span>Dynamic <span class="token function">Announcement</span> <span class="token punctuation">(</span><span class="token number">0x0506</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
            <span class="token punctuation">[</span>Typed <span class="token function">Wildcard</span> <span class="token punctuation">(</span><span class="token number">0x050B</span><span class="token punctuation">)</span><span class="token punctuation">]</span></code></pre>
<p>而当指定了duration为无限期（infinite）之后，持续保护时间才真正变为了infinite（无限期）；</p>
<p>验证：查看R4的MPLS LDP邻居列表中邻居R1的详细信息；</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>#<span class="token keyword">do</span> sh mpls ldp nei <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span> detail
    Peer LDP Ident<span class="token operator">:</span> <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">;</span> Local LDP Ident <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span><span class="token operator">:</span><span class="token number">0</span>
        TCP connection<span class="token operator">:</span> <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span><span class="token number">.646</span> <span class="token operator">-</span> <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span><span class="token number">.40199</span>
        Password<span class="token operator">:</span> not required<span class="token punctuation">,</span> none<span class="token punctuation">,</span> in use
        State<span class="token operator">:</span> Oper<span class="token punctuation">;</span> Msgs sent<span class="token operator">/</span>rcvd<span class="token operator">:</span> <span class="token number">85</span><span class="token operator">/</span><span class="token number">86</span><span class="token punctuation">;</span> Downstream<span class="token punctuation">;</span> Last TIB rev sent <span class="token number">16</span>
        Up time<span class="token operator">:</span> <span class="token number">01</span><span class="token operator">:</span><span class="token number">05</span><span class="token operator">:</span><span class="token number">13</span><span class="token punctuation">;</span> UID<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">;</span> Peer Id <span class="token number">1</span><span class="token punctuation">;</span>
        LDP discovery sources<span class="token operator">:</span>
            FastEthernet0<span class="token operator">/</span><span class="token number">1</span><span class="token punctuation">;</span> Src IP addr<span class="token operator">:</span> <span class="token number">192.168</span><span class="token number">.14</span><span class="token number">.1</span> 
            holdtime<span class="token operator">:</span> <span class="token number">15000</span> ms<span class="token punctuation">,</span> hello interval<span class="token operator">:</span> <span class="token number">5000</span> ms
        Addresses bound to peer LDP Ident<span class="token operator">:</span>
            <span class="token number">192.168</span><span class="token number">.12</span><span class="token number">.1</span>    <span class="token number">192.168</span><span class="token number">.14</span><span class="token number">.1</span>    <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span>         
        Peer holdtime<span class="token operator">:</span> <span class="token number">180000</span> ms<span class="token punctuation">;</span> KA interval<span class="token operator">:</span> <span class="token number">60000</span> ms<span class="token punctuation">;</span> Peer state<span class="token operator">:</span> estab
        Capabilities Sent<span class="token operator">:</span>
            <span class="token punctuation">[</span><span class="token function">ICCP</span> <span class="token punctuation">(</span>type <span class="token number">0x0405</span><span class="token punctuation">)</span> MajVer <span class="token number">1</span> MinVer <span class="token number">0</span><span class="token punctuation">]</span>
            <span class="token punctuation">[</span>Dynamic <span class="token function">Announcement</span> <span class="token punctuation">(</span><span class="token number">0x0506</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
            <span class="token punctuation">[</span>Typed <span class="token function">Wildcard</span> <span class="token punctuation">(</span><span class="token number">0x050B</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
        Capabilities Received<span class="token operator">:</span>
            <span class="token punctuation">[</span><span class="token function">ICCP</span> <span class="token punctuation">(</span>type <span class="token number">0x0405</span><span class="token punctuation">)</span> MajVer <span class="token number">1</span> MinVer <span class="token number">0</span><span class="token punctuation">]</span>
            <span class="token punctuation">[</span>Dynamic <span class="token function">Announcement</span> <span class="token punctuation">(</span><span class="token number">0x0506</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
            <span class="token punctuation">[</span>Typed <span class="token function">Wildcard</span> <span class="token punctuation">(</span><span class="token number">0x050B</span><span class="token punctuation">)</span><span class="token punctuation">]</span></code></pre>
<p>注意到，虽然此时R1上已经配置了针对邻居R4的LDP会话保护，但是由于R4上未做配置，所以在R4看来，仿佛这一切的一切并未发生过一般；</p>
<p>配置ACL来指定需要被保护的LDP对等体；</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>#ip access<span class="token operator">-</span>list standard PROTECT_R1
<span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token operator">-</span>std<span class="token operator">-</span>nacl<span class="token punctuation">)</span>#permit host <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span>
<span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token operator">-</span>std<span class="token operator">-</span>nacl<span class="token punctuation">)</span>#exit</code></pre>

<p>配置MPLS LDP会话保护，并将其与指定需要保护的LDP对等体ACL相关联；</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>#mpls ldp session protection <span class="token keyword">for</span> PROTECT_R1 duration infinite</code></pre>
<p>验证：查看R4的MPLS LDP邻居列表中邻居R1的详细信息；</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>#<span class="token keyword">do</span> sh mpls ldp nei <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span> detail                           
    Peer LDP Ident<span class="token operator">:</span> <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">;</span> Local LDP Ident <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span><span class="token operator">:</span><span class="token number">0</span>
        TCP connection<span class="token operator">:</span> <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span><span class="token number">.646</span> <span class="token operator">-</span> <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span><span class="token number">.40199</span>
        Password<span class="token operator">:</span> not required<span class="token punctuation">,</span> none<span class="token punctuation">,</span> in use
        State<span class="token operator">:</span> Oper<span class="token punctuation">;</span> Msgs sent<span class="token operator">/</span>rcvd<span class="token operator">:</span> <span class="token number">101</span><span class="token operator">/</span><span class="token number">103</span><span class="token punctuation">;</span> Downstream<span class="token punctuation">;</span> Last TIB rev sent <span class="token number">16</span>
        Up time<span class="token operator">:</span> <span class="token number">01</span><span class="token operator">:</span><span class="token number">19</span><span class="token operator">:</span><span class="token number">22</span><span class="token punctuation">;</span> UID<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">;</span> Peer Id <span class="token number">1</span><span class="token punctuation">;</span>
        LDP discovery sources<span class="token operator">:</span>
            FastEthernet0<span class="token operator">/</span><span class="token number">1</span><span class="token punctuation">;</span> Src IP addr<span class="token operator">:</span> <span class="token number">192.168</span><span class="token number">.14</span><span class="token number">.1</span> 
            holdtime<span class="token operator">:</span> <span class="token number">15000</span> ms<span class="token punctuation">,</span> hello interval<span class="token operator">:</span> <span class="token number">5000</span> ms
            Targeted Hello <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span> <span class="token operator">-></span> <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span><span class="token punctuation">,</span> active<span class="token punctuation">,</span> passive<span class="token punctuation">;</span><span class="token comment">//基于目标的远程LDP会话已经建立；</span>
            holdtime<span class="token operator">:</span> infinite<span class="token punctuation">,</span> hello interval<span class="token operator">:</span> <span class="token number">10000</span> ms
        Addresses bound to peer LDP Ident<span class="token operator">:</span>
            <span class="token number">192.168</span><span class="token number">.12</span><span class="token number">.1</span>    <span class="token number">192.168</span><span class="token number">.14</span><span class="token number">.1</span>    <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span>         
        Peer holdtime<span class="token operator">:</span> <span class="token number">180000</span> ms<span class="token punctuation">;</span> KA interval<span class="token operator">:</span> <span class="token number">60000</span> ms<span class="token punctuation">;</span> Peer state<span class="token operator">:</span> estab
        Clients<span class="token operator">:</span> Dir Adj Client
        LDP Session Protection enabled<span class="token punctuation">,</span> state<span class="token operator">:</span> Ready <span class="token comment">//可以看到R4针对邻居R1的LDP会话保护已经开启，并且状态为Ready，表示已经做好会话保护准备；</span>
            acl<span class="token operator">:</span> PROTECT_R1<span class="token punctuation">,</span> duration<span class="token operator">:</span> infinite<span class="token comment">//持续保护时间为无限期，即永远保护；</span>
        Capabilities Sent<span class="token operator">:</span>
            <span class="token punctuation">[</span><span class="token function">ICCP</span> <span class="token punctuation">(</span>type <span class="token number">0x0405</span><span class="token punctuation">)</span> MajVer <span class="token number">1</span> MinVer <span class="token number">0</span><span class="token punctuation">]</span>
            <span class="token punctuation">[</span>Dynamic <span class="token function">Announcement</span> <span class="token punctuation">(</span><span class="token number">0x0506</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
            <span class="token punctuation">[</span>Typed <span class="token function">Wildcard</span> <span class="token punctuation">(</span><span class="token number">0x050B</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
        Capabilities Received<span class="token operator">:</span>
            <span class="token punctuation">[</span><span class="token function">ICCP</span> <span class="token punctuation">(</span>type <span class="token number">0x0405</span><span class="token punctuation">)</span> MajVer <span class="token number">1</span> MinVer <span class="token number">0</span><span class="token punctuation">]</span>
            <span class="token punctuation">[</span>Dynamic <span class="token function">Announcement</span> <span class="token punctuation">(</span><span class="token number">0x0506</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
            <span class="token punctuation">[</span>Typed <span class="token function">Wildcard</span> <span class="token punctuation">(</span><span class="token number">0x050B</span><span class="token punctuation">)</span><span class="token punctuation">]</span></code></pre>

<p>验证：查看R1的MPLS LDP邻居列表中邻居R4的详细信息；</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>#<span class="token keyword">do</span> sh mpls ldp nei <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span> detail
    Peer LDP Ident<span class="token operator">:</span> <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">;</span> Local LDP Ident <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">0</span>
        TCP connection<span class="token operator">:</span> <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span><span class="token number">.40199</span> <span class="token operator">-</span> <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span><span class="token number">.646</span>
        Password<span class="token operator">:</span> not required<span class="token punctuation">,</span> none<span class="token punctuation">,</span> in use
        State<span class="token operator">:</span> Oper<span class="token punctuation">;</span> Msgs sent<span class="token operator">/</span>rcvd<span class="token operator">:</span> <span class="token number">108</span><span class="token operator">/</span><span class="token number">106</span><span class="token punctuation">;</span> Downstream<span class="token punctuation">;</span> Last TIB rev sent <span class="token number">16</span>
        Up time<span class="token operator">:</span> <span class="token number">01</span><span class="token operator">:</span><span class="token number">24</span><span class="token operator">:</span><span class="token number">16</span><span class="token punctuation">;</span> UID<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">;</span> Peer Id <span class="token number">1</span><span class="token punctuation">;</span>
        LDP discovery sources<span class="token operator">:</span>
            FastEthernet0<span class="token operator">/</span><span class="token number">1</span><span class="token punctuation">;</span> Src IP addr<span class="token operator">:</span> <span class="token number">192.168</span><span class="token number">.14</span><span class="token number">.4</span> 
            holdtime<span class="token operator">:</span> <span class="token number">15000</span> ms<span class="token punctuation">,</span> hello interval<span class="token operator">:</span> <span class="token number">5000</span> ms
            Targeted Hello <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span> <span class="token operator">-></span> <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span><span class="token punctuation">,</span> active<span class="token punctuation">,</span> passive<span class="token punctuation">;</span><span class="token comment">//基于目标的远程LDP会话已经建立；</span>
            holdtime<span class="token operator">:</span> infinite<span class="token punctuation">,</span> hello interval<span class="token operator">:</span> <span class="token number">10000</span> ms
        Addresses bound to peer LDP Ident<span class="token operator">:</span>
            <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span>         <span class="token number">192.168</span><span class="token number">.34</span><span class="token number">.4</span>    <span class="token number">192.168</span><span class="token number">.14</span><span class="token number">.4</span>    
        Peer holdtime<span class="token operator">:</span> <span class="token number">180000</span> ms<span class="token punctuation">;</span> KA interval<span class="token operator">:</span> <span class="token number">60000</span> ms<span class="token punctuation">;</span> Peer state<span class="token operator">:</span> estab
        Clients<span class="token operator">:</span> Dir Adj Client
        LDP Session Protection enabled<span class="token punctuation">,</span> state<span class="token operator">:</span> Ready<span class="token comment">//可以看到R4针对邻居R1的LDP会话保护已经开启，并且状态为Ready，表示已经做好会话保护准备；</span>
            acl<span class="token operator">:</span> PROTECT_R4<span class="token punctuation">,</span> duration<span class="token operator">:</span> infinite<span class="token comment">//持续保护时间为无限期，即永远保护；</span>
        Capabilities Sent<span class="token operator">:</span>
            <span class="token punctuation">[</span><span class="token function">ICCP</span> <span class="token punctuation">(</span>type <span class="token number">0x0405</span><span class="token punctuation">)</span> MajVer <span class="token number">1</span> MinVer <span class="token number">0</span><span class="token punctuation">]</span>
            <span class="token punctuation">[</span>Dynamic <span class="token function">Announcement</span> <span class="token punctuation">(</span><span class="token number">0x0506</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
            <span class="token punctuation">[</span>Typed <span class="token function">Wildcard</span> <span class="token punctuation">(</span><span class="token number">0x050B</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
        Capabilities Received<span class="token operator">:</span>
            <span class="token punctuation">[</span><span class="token function">ICCP</span> <span class="token punctuation">(</span>type <span class="token number">0x0405</span><span class="token punctuation">)</span> MajVer <span class="token number">1</span> MinVer <span class="token number">0</span><span class="token punctuation">]</span>
            <span class="token punctuation">[</span>Dynamic <span class="token function">Announcement</span> <span class="token punctuation">(</span><span class="token number">0x0506</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
            <span class="token punctuation">[</span>Typed <span class="token function">Wildcard</span> <span class="token punctuation">(</span><span class="token number">0x050B</span><span class="token punctuation">)</span><span class="token punctuation">]</span></code></pre>

<p>调试：断开R1和R4之间的直连链路；</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token comment">//将R1上与R4相连的F0/1口shutdown；</span>
<span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>#<span class="token keyword">int</span> f0<span class="token operator">/</span><span class="token number">1</span>
<span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token operator">-</span><span class="token keyword">if</span><span class="token punctuation">)</span>#shutdown
<span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token operator">-</span><span class="token keyword">if</span><span class="token punctuation">)</span>#
<span class="token operator">*</span>Mar <span class="token number">15</span> <span class="token number">11</span><span class="token operator">:</span><span class="token number">24</span><span class="token operator">:</span><span class="token number">27.663</span><span class="token operator">:</span> <span class="token operator">%</span>LDP<span class="token operator">-</span><span class="token number">5</span><span class="token operator">-</span>SP<span class="token operator">:</span> <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span><span class="token operator">:</span><span class="token number">0</span><span class="token operator">:</span> session hold up initiated  <span class="token comment">//LDP会话保护机制已经开始初始化；</span>
<span class="token operator">*</span>Mar <span class="token number">15</span> <span class="token number">11</span><span class="token operator">:</span><span class="token number">24</span><span class="token operator">:</span><span class="token number">27.675</span><span class="token operator">:</span> <span class="token operator">%</span>OSPF<span class="token operator">-</span><span class="token number">5</span><span class="token operator">-</span>ADJCHG<span class="token operator">:</span> Process <span class="token number">1</span><span class="token punctuation">,</span> Nbr <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span> on FastEthernet0<span class="token operator">/</span><span class="token number">1</span> from FULL to DOWN<span class="token punctuation">,</span> Neighbor Down<span class="token operator">:</span> Interface down or detached
<span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token operator">-</span><span class="token keyword">if</span><span class="token punctuation">)</span>#
<span class="token operator">*</span>Mar <span class="token number">15</span> <span class="token number">11</span><span class="token operator">:</span><span class="token number">24</span><span class="token operator">:</span><span class="token number">29.619</span><span class="token operator">:</span> <span class="token operator">%</span>LINK<span class="token operator">-</span><span class="token number">5</span><span class="token operator">-</span>CHANGED<span class="token operator">:</span> Interface FastEthernet0<span class="token operator">/</span><span class="token number">1</span><span class="token punctuation">,</span> changed state to administratively down
<span class="token operator">*</span>Mar <span class="token number">15</span> <span class="token number">11</span><span class="token operator">:</span><span class="token number">24</span><span class="token operator">:</span><span class="token number">30.619</span><span class="token operator">:</span> <span class="token operator">%</span>LINEPROTO<span class="token operator">-</span><span class="token number">5</span><span class="token operator">-</span>UPDOWN<span class="token operator">:</span> Line protocol on Interface FastEthernet0<span class="token operator">/</span><span class="token number">1</span><span class="token punctuation">,</span> changed state to down</code></pre>

<p>验证：查看R1的MPLS LDP邻居列表中邻居R4的详细信息；</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>#<span class="token keyword">do</span> sh mpls ldp nei <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span> detail
    Peer LDP Ident<span class="token operator">:</span> <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">;</span> Local LDP Ident <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">0</span>
        TCP connection<span class="token operator">:</span> <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span><span class="token number">.40199</span> <span class="token operator">-</span> <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span><span class="token number">.646</span>
        Password<span class="token operator">:</span> not required<span class="token punctuation">,</span> none<span class="token punctuation">,</span> in use
        State<span class="token operator">:</span> Oper<span class="token punctuation">;</span> Msgs sent<span class="token operator">/</span>rcvd<span class="token operator">:</span> <span class="token number">120</span><span class="token operator">/</span><span class="token number">116</span><span class="token punctuation">;</span> Downstream<span class="token punctuation">;</span> Last TIB rev sent <span class="token number">18</span>
        Up time<span class="token operator">:</span> <span class="token number">01</span><span class="token operator">:</span><span class="token number">32</span><span class="token operator">:</span><span class="token number">26</span><span class="token punctuation">;</span> UID<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">;</span> Peer Id <span class="token number">1</span><span class="token punctuation">;</span>
        LDP discovery sources<span class="token operator">:</span>
            Targeted Hello <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span> <span class="token operator">-></span> <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span><span class="token punctuation">,</span> active<span class="token punctuation">,</span> passive<span class="token punctuation">;</span>
            holdtime<span class="token operator">:</span> infinite<span class="token punctuation">,</span> hello interval<span class="token operator">:</span> <span class="token number">10000</span> ms
        Addresses bound to peer LDP Ident<span class="token operator">:</span>
            <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span>         <span class="token number">192.168</span><span class="token number">.34</span><span class="token number">.4</span>    <span class="token number">192.168</span><span class="token number">.14</span><span class="token number">.4</span>    
        Peer holdtime<span class="token operator">:</span> <span class="token number">180000</span> ms<span class="token punctuation">;</span> KA interval<span class="token operator">:</span> <span class="token number">60000</span> ms<span class="token punctuation">;</span> Peer state<span class="token operator">:</span> estab
        Clients<span class="token operator">:</span> Dir Adj Client
        LDP Session Protection enabled<span class="token punctuation">,</span> state<span class="token operator">:</span> Protecting <span class="token comment">//LDP会话保护正在进行中，状态为Protecting；</span>
            acl<span class="token operator">:</span> PROTECT_R4<span class="token punctuation">,</span> duration<span class="token operator">:</span> infinite
        Capabilities Sent<span class="token operator">:</span>
            <span class="token punctuation">[</span><span class="token function">ICCP</span> <span class="token punctuation">(</span>type <span class="token number">0x0405</span><span class="token punctuation">)</span> MajVer <span class="token number">1</span> MinVer <span class="token number">0</span><span class="token punctuation">]</span>
            <span class="token punctuation">[</span>Dynamic <span class="token function">Announcement</span> <span class="token punctuation">(</span><span class="token number">0x0506</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
            <span class="token punctuation">[</span>Typed <span class="token function">Wildcard</span> <span class="token punctuation">(</span><span class="token number">0x050B</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
        Capabilities Received<span class="token operator">:</span>
            <span class="token punctuation">[</span><span class="token function">ICCP</span> <span class="token punctuation">(</span>type <span class="token number">0x0405</span><span class="token punctuation">)</span> MajVer <span class="token number">1</span> MinVer <span class="token number">0</span><span class="token punctuation">]</span>
            <span class="token punctuation">[</span>Dynamic <span class="token function">Announcement</span> <span class="token punctuation">(</span><span class="token number">0x0506</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
            <span class="token punctuation">[</span>Typed <span class="token function">Wildcard</span> <span class="token punctuation">(</span><span class="token number">0x050B</span><span class="token punctuation">)</span><span class="token punctuation">]</span></code></pre>
<p>查看R1的LIB表；</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>#<span class="token keyword">do</span> show mpls ldp bindings
    lib entry<span class="token operator">:</span> <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span><span class="token operator">/</span><span class="token number">32</span><span class="token punctuation">,</span> rev <span class="token number">2</span>
        local binding<span class="token operator">:</span>  label<span class="token operator">:</span> imp<span class="token operator">-</span>null
        remote binding<span class="token operator">:</span> lsr<span class="token operator">:</span> <span class="token number">2.2</span><span class="token number">.2</span><span class="token number">.2</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span> label<span class="token operator">:</span> <span class="token number">16</span>
        remote binding<span class="token operator">:</span> lsr<span class="token operator">:</span> <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span> label<span class="token operator">:</span> <span class="token number">16</span>
    lib entry<span class="token operator">:</span> <span class="token number">2.2</span><span class="token number">.2</span><span class="token number">.2</span><span class="token operator">/</span><span class="token number">32</span><span class="token punctuation">,</span> rev <span class="token number">8</span>
        local binding<span class="token operator">:</span>  label<span class="token operator">:</span> <span class="token number">16</span>
        remote binding<span class="token operator">:</span> lsr<span class="token operator">:</span> <span class="token number">2.2</span><span class="token number">.2</span><span class="token number">.2</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span> label<span class="token operator">:</span> imp<span class="token operator">-</span>null
        remote binding<span class="token operator">:</span> lsr<span class="token operator">:</span> <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span> label<span class="token operator">:</span> <span class="token number">17</span>
    lib entry<span class="token operator">:</span> <span class="token number">3.3</span><span class="token number">.3</span><span class="token number">.3</span><span class="token operator">/</span><span class="token number">32</span><span class="token punctuation">,</span> rev <span class="token number">13</span>
        local binding<span class="token operator">:</span>  label<span class="token operator">:</span> <span class="token number">18</span>
        remote binding<span class="token operator">:</span> lsr<span class="token operator">:</span> <span class="token number">2.2</span><span class="token number">.2</span><span class="token number">.2</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span> label<span class="token operator">:</span> <span class="token number">18</span>
        remote binding<span class="token operator">:</span> lsr<span class="token operator">:</span> <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span> label<span class="token operator">:</span> <span class="token number">18</span>
    lib entry<span class="token operator">:</span> <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span><span class="token operator">/</span><span class="token number">32</span><span class="token punctuation">,</span> rev <span class="token number">16</span>
        local binding<span class="token operator">:</span>  label<span class="token operator">:</span> <span class="token number">20</span>
        remote binding<span class="token operator">:</span> lsr<span class="token operator">:</span> <span class="token number">2.2</span><span class="token number">.2</span><span class="token number">.2</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span> label<span class="token operator">:</span> <span class="token number">20</span>
        remote binding<span class="token operator">:</span> lsr<span class="token operator">:</span> <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span> label<span class="token operator">:</span> imp<span class="token operator">-</span>null
    lib entry<span class="token operator">:</span> <span class="token number">192.168</span><span class="token number">.12</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span><span class="token punctuation">,</span> rev <span class="token number">4</span>
        local binding<span class="token operator">:</span>  label<span class="token operator">:</span> imp<span class="token operator">-</span>null
        remote binding<span class="token operator">:</span> lsr<span class="token operator">:</span> <span class="token number">2.2</span><span class="token number">.2</span><span class="token number">.2</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span> label<span class="token operator">:</span> imp<span class="token operator">-</span>null
        remote binding<span class="token operator">:</span> lsr<span class="token operator">:</span> <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span> label<span class="token operator">:</span> <span class="token number">19</span>
    lib entry<span class="token operator">:</span> <span class="token number">192.168</span><span class="token number">.14</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span><span class="token punctuation">,</span> rev <span class="token number">18</span>
        local binding<span class="token operator">:</span>  label<span class="token operator">:</span> <span class="token number">21</span>
        remote binding<span class="token operator">:</span> lsr<span class="token operator">:</span> <span class="token number">2.2</span><span class="token number">.2</span><span class="token number">.2</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span> label<span class="token operator">:</span> <span class="token number">17</span>
        remote binding<span class="token operator">:</span> lsr<span class="token operator">:</span> <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span> label<span class="token operator">:</span> imp<span class="token operator">-</span>null
    lib entry<span class="token operator">:</span> <span class="token number">192.168</span><span class="token number">.23</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span><span class="token punctuation">,</span> rev <span class="token number">10</span>
        local binding<span class="token operator">:</span>  label<span class="token operator">:</span> <span class="token number">17</span>
        remote binding<span class="token operator">:</span> lsr<span class="token operator">:</span> <span class="token number">2.2</span><span class="token number">.2</span><span class="token number">.2</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span> label<span class="token operator">:</span> imp<span class="token operator">-</span>null
        remote binding<span class="token operator">:</span> lsr<span class="token operator">:</span> <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span> label<span class="token operator">:</span> <span class="token number">20</span>
    lib entry<span class="token operator">:</span> <span class="token number">192.168</span><span class="token number">.34</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span><span class="token punctuation">,</span> rev <span class="token number">14</span>
        local binding<span class="token operator">:</span>  label<span class="token operator">:</span> <span class="token number">19</span>
        remote binding<span class="token operator">:</span> lsr<span class="token operator">:</span> <span class="token number">2.2</span><span class="token number">.2</span><span class="token number">.2</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span> label<span class="token operator">:</span> <span class="token number">19</span>
        remote binding<span class="token operator">:</span> lsr<span class="token operator">:</span> <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span> label<span class="token operator">:</span> imp<span class="token operator">-</span>null

<span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>#<span class="token keyword">do</span> show mpls ip binding
    <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span><span class="token operator">/</span><span class="token number">32</span> 
        in label<span class="token operator">:</span>     imp<span class="token operator">-</span>null  
        out label<span class="token operator">:</span>    <span class="token number">16</span>        lsr<span class="token operator">:</span> <span class="token number">2.2</span><span class="token number">.2</span><span class="token number">.2</span><span class="token operator">:</span><span class="token number">0</span>       
        out label<span class="token operator">:</span>    <span class="token number">16</span>        lsr<span class="token operator">:</span> <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span><span class="token operator">:</span><span class="token number">0</span>       
    <span class="token number">2.2</span><span class="token number">.2</span><span class="token number">.2</span><span class="token operator">/</span><span class="token number">32</span> 
        in label<span class="token operator">:</span>     <span class="token number">16</span>        
        out label<span class="token operator">:</span>    imp<span class="token operator">-</span>null  lsr<span class="token operator">:</span> <span class="token number">2.2</span><span class="token number">.2</span><span class="token number">.2</span><span class="token operator">:</span><span class="token number">0</span>        inuse
        out label<span class="token operator">:</span>    <span class="token number">17</span>        lsr<span class="token operator">:</span> <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span><span class="token operator">:</span><span class="token number">0</span>       
    <span class="token number">3.3</span><span class="token number">.3</span><span class="token number">.3</span><span class="token operator">/</span><span class="token number">32</span> 
        in label<span class="token operator">:</span>     <span class="token number">18</span>        
        out label<span class="token operator">:</span>    <span class="token number">18</span>        lsr<span class="token operator">:</span> <span class="token number">2.2</span><span class="token number">.2</span><span class="token number">.2</span><span class="token operator">:</span><span class="token number">0</span>        inuse
        out label<span class="token operator">:</span>    <span class="token number">18</span>        lsr<span class="token operator">:</span> <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span><span class="token operator">:</span><span class="token number">0</span>       
    <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span><span class="token operator">/</span><span class="token number">32</span> 
        in label<span class="token operator">:</span>     <span class="token number">20</span>        
        out label<span class="token operator">:</span>    <span class="token number">20</span>        lsr<span class="token operator">:</span> <span class="token number">2.2</span><span class="token number">.2</span><span class="token number">.2</span><span class="token operator">:</span><span class="token number">0</span>        inuse
        out label<span class="token operator">:</span>    imp<span class="token operator">-</span>null  lsr<span class="token operator">:</span> <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span><span class="token operator">:</span><span class="token number">0</span>       
    <span class="token number">192.168</span><span class="token number">.12</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span> 
        in label<span class="token operator">:</span>     imp<span class="token operator">-</span>null  
        out label<span class="token operator">:</span>    imp<span class="token operator">-</span>null  lsr<span class="token operator">:</span> <span class="token number">2.2</span><span class="token number">.2</span><span class="token number">.2</span><span class="token operator">:</span><span class="token number">0</span>       
        out label<span class="token operator">:</span>    <span class="token number">19</span>        lsr<span class="token operator">:</span> <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span><span class="token operator">:</span><span class="token number">0</span>       
    <span class="token number">192.168</span><span class="token number">.14</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span> 
        in label<span class="token operator">:</span>     <span class="token number">21</span>        
        out label<span class="token operator">:</span>    <span class="token number">17</span>        lsr<span class="token operator">:</span> <span class="token number">2.2</span><span class="token number">.2</span><span class="token number">.2</span><span class="token operator">:</span><span class="token number">0</span>        inuse
        out label<span class="token operator">:</span>    imp<span class="token operator">-</span>null  lsr<span class="token operator">:</span> <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span><span class="token operator">:</span><span class="token number">0</span>       
    <span class="token number">192.168</span><span class="token number">.23</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span> 
        in label<span class="token operator">:</span>     <span class="token number">17</span>        
        out label<span class="token operator">:</span>    imp<span class="token operator">-</span>null  lsr<span class="token operator">:</span> <span class="token number">2.2</span><span class="token number">.2</span><span class="token number">.2</span><span class="token operator">:</span><span class="token number">0</span>        inuse
        out label<span class="token operator">:</span>    <span class="token number">20</span>        lsr<span class="token operator">:</span> <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span><span class="token operator">:</span><span class="token number">0</span>       
    <span class="token number">192.168</span><span class="token number">.34</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span> 
        in label<span class="token operator">:</span>     <span class="token number">19</span>        
        out label<span class="token operator">:</span>    <span class="token number">19</span>        lsr<span class="token operator">:</span> <span class="token number">2.2</span><span class="token number">.2</span><span class="token number">.2</span><span class="token operator">:</span><span class="token number">0</span>        inuse
        out label<span class="token operator">:</span>    imp<span class="token operator">-</span>null  lsr<span class="token operator">:</span> <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span><span class="token operator">:</span><span class="token number">0</span>  
<span class="token comment">//可以看到，即便R1与R4的直连链路已经断开，但是R1的LIB表中仍然保留着通告自R4的标签绑定信息；</span></code></pre>
<p>验证：查看R4的MPLS LDP邻居列表中邻居R1的详细信息；</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>#<span class="token keyword">do</span> sh mpls ldp nei <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span> detail
    Peer LDP Ident<span class="token operator">:</span> <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">;</span> Local LDP Ident <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span><span class="token operator">:</span><span class="token number">0</span>
        TCP connection<span class="token operator">:</span> <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span><span class="token number">.646</span> <span class="token operator">-</span> <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span><span class="token number">.40199</span>
        Password<span class="token operator">:</span> not required<span class="token punctuation">,</span> none<span class="token punctuation">,</span> in use
        State<span class="token operator">:</span> Oper<span class="token punctuation">;</span> Msgs sent<span class="token operator">/</span>rcvd<span class="token operator">:</span> <span class="token number">117</span><span class="token operator">/</span><span class="token number">121</span><span class="token punctuation">;</span> Downstream<span class="token punctuation">;</span> Last TIB rev sent <span class="token number">16</span>
        Up time<span class="token operator">:</span> <span class="token number">01</span><span class="token operator">:</span><span class="token number">33</span><span class="token operator">:</span><span class="token number">22</span><span class="token punctuation">;</span> UID<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">;</span> Peer Id <span class="token number">1</span><span class="token punctuation">;</span>
        LDP discovery sources<span class="token operator">:</span>
            Targeted Hello <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span> <span class="token operator">-></span> <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span><span class="token punctuation">,</span> active<span class="token punctuation">,</span> passive<span class="token punctuation">;</span>
            holdtime<span class="token operator">:</span> infinite<span class="token punctuation">,</span> hello interval<span class="token operator">:</span> <span class="token number">10000</span> ms
        Addresses bound to peer LDP Ident<span class="token operator">:</span>
            <span class="token number">192.168</span><span class="token number">.12</span><span class="token number">.1</span>    <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span>         
        Peer holdtime<span class="token operator">:</span> <span class="token number">180000</span> ms<span class="token punctuation">;</span> KA interval<span class="token operator">:</span> <span class="token number">60000</span> ms<span class="token punctuation">;</span> Peer state<span class="token operator">:</span> estab
        Clients<span class="token operator">:</span> Dir Adj Client
        LDP Session Protection enabled<span class="token punctuation">,</span> state<span class="token operator">:</span> Protecting <span class="token comment">//LDP会话保护正在进行中，状态为Protecting；</span>
            acl<span class="token operator">:</span> PROTECT_R1<span class="token punctuation">,</span> duration<span class="token operator">:</span> infinite
        Capabilities Sent<span class="token operator">:</span>
            <span class="token punctuation">[</span><span class="token function">ICCP</span> <span class="token punctuation">(</span>type <span class="token number">0x0405</span><span class="token punctuation">)</span> MajVer <span class="token number">1</span> MinVer <span class="token number">0</span><span class="token punctuation">]</span>
            <span class="token punctuation">[</span>Dynamic <span class="token function">Announcement</span> <span class="token punctuation">(</span><span class="token number">0x0506</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
            <span class="token punctuation">[</span>Typed <span class="token function">Wildcard</span> <span class="token punctuation">(</span><span class="token number">0x050B</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
        Capabilities Received<span class="token operator">:</span>
            <span class="token punctuation">[</span><span class="token function">ICCP</span> <span class="token punctuation">(</span>type <span class="token number">0x0405</span><span class="token punctuation">)</span> MajVer <span class="token number">1</span> MinVer <span class="token number">0</span><span class="token punctuation">]</span>
            <span class="token punctuation">[</span>Dynamic <span class="token function">Announcement</span> <span class="token punctuation">(</span><span class="token number">0x0506</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
            <span class="token punctuation">[</span>Typed <span class="token function">Wildcard</span> <span class="token punctuation">(</span><span class="token number">0x050B</span><span class="token punctuation">)</span><span class="token punctuation">]</span></code></pre>

<p>查看R4到LIB表；</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>#<span class="token keyword">do</span> show mpls ldp bindings
    lib entry<span class="token operator">:</span> <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span><span class="token operator">/</span><span class="token number">32</span><span class="token punctuation">,</span> rev <span class="token number">2</span>
        local binding<span class="token operator">:</span>  label<span class="token operator">:</span> <span class="token number">16</span>
        remote binding<span class="token operator">:</span> lsr<span class="token operator">:</span> <span class="token number">3.3</span><span class="token number">.3</span><span class="token number">.3</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span> label<span class="token operator">:</span> <span class="token number">17</span>
        remote binding<span class="token operator">:</span> lsr<span class="token operator">:</span> <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span> label<span class="token operator">:</span> imp<span class="token operator">-</span>null
    lib entry<span class="token operator">:</span> <span class="token number">2.2</span><span class="token number">.2</span><span class="token number">.2</span><span class="token operator">/</span><span class="token number">32</span><span class="token punctuation">,</span> rev <span class="token number">4</span>
        local binding<span class="token operator">:</span>  label<span class="token operator">:</span> <span class="token number">17</span>
        remote binding<span class="token operator">:</span> lsr<span class="token operator">:</span> <span class="token number">3.3</span><span class="token number">.3</span><span class="token number">.3</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span> label<span class="token operator">:</span> <span class="token number">16</span>
        remote binding<span class="token operator">:</span> lsr<span class="token operator">:</span> <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span> label<span class="token operator">:</span> <span class="token number">16</span>
    lib entry<span class="token operator">:</span> <span class="token number">3.3</span><span class="token number">.3</span><span class="token number">.3</span><span class="token operator">/</span><span class="token number">32</span><span class="token punctuation">,</span> rev <span class="token number">6</span>
        local binding<span class="token operator">:</span>  label<span class="token operator">:</span> <span class="token number">18</span>
        remote binding<span class="token operator">:</span> lsr<span class="token operator">:</span> <span class="token number">3.3</span><span class="token number">.3</span><span class="token number">.3</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span> label<span class="token operator">:</span> imp<span class="token operator">-</span>null
        remote binding<span class="token operator">:</span> lsr<span class="token operator">:</span> <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span> label<span class="token operator">:</span> <span class="token number">18</span>
    lib entry<span class="token operator">:</span> <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span><span class="token operator">/</span><span class="token number">32</span><span class="token punctuation">,</span> rev <span class="token number">8</span>
        local binding<span class="token operator">:</span>  label<span class="token operator">:</span> imp<span class="token operator">-</span>null
        remote binding<span class="token operator">:</span> lsr<span class="token operator">:</span> <span class="token number">3.3</span><span class="token number">.3</span><span class="token number">.3</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span> label<span class="token operator">:</span> <span class="token number">20</span>
        remote binding<span class="token operator">:</span> lsr<span class="token operator">:</span> <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span> label<span class="token operator">:</span> <span class="token number">20</span>
    lib entry<span class="token operator">:</span> <span class="token number">192.168</span><span class="token number">.12</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span><span class="token punctuation">,</span> rev <span class="token number">10</span>
        local binding<span class="token operator">:</span>  label<span class="token operator">:</span> <span class="token number">19</span>
        remote binding<span class="token operator">:</span> lsr<span class="token operator">:</span> <span class="token number">3.3</span><span class="token number">.3</span><span class="token number">.3</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span> label<span class="token operator">:</span> <span class="token number">19</span>
        remote binding<span class="token operator">:</span> lsr<span class="token operator">:</span> <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span> label<span class="token operator">:</span> imp<span class="token operator">-</span>null
    lib entry<span class="token operator">:</span> <span class="token number">192.168</span><span class="token number">.14</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span><span class="token punctuation">,</span> rev <span class="token number">12</span>
        local binding<span class="token operator">:</span>  label<span class="token operator">:</span> imp<span class="token operator">-</span>null
        remote binding<span class="token operator">:</span> lsr<span class="token operator">:</span> <span class="token number">3.3</span><span class="token number">.3</span><span class="token number">.3</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span> label<span class="token operator">:</span> <span class="token number">18</span>
        remote binding<span class="token operator">:</span> lsr<span class="token operator">:</span> <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span> label<span class="token operator">:</span> <span class="token number">21</span>
    lib entry<span class="token operator">:</span> <span class="token number">192.168</span><span class="token number">.23</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span><span class="token punctuation">,</span> rev <span class="token number">14</span>
        local binding<span class="token operator">:</span>  label<span class="token operator">:</span> <span class="token number">20</span>
        remote binding<span class="token operator">:</span> lsr<span class="token operator">:</span> <span class="token number">3.3</span><span class="token number">.3</span><span class="token number">.3</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span> label<span class="token operator">:</span> imp<span class="token operator">-</span>null
        remote binding<span class="token operator">:</span> lsr<span class="token operator">:</span> <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span> label<span class="token operator">:</span> <span class="token number">17</span>
    lib entry<span class="token operator">:</span> <span class="token number">192.168</span><span class="token number">.34</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span><span class="token punctuation">,</span> rev <span class="token number">16</span>
        local binding<span class="token operator">:</span>  label<span class="token operator">:</span> imp<span class="token operator">-</span>null
        remote binding<span class="token operator">:</span> lsr<span class="token operator">:</span> <span class="token number">3.3</span><span class="token number">.3</span><span class="token number">.3</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span> label<span class="token operator">:</span> imp<span class="token operator">-</span>null
        remote binding<span class="token operator">:</span> lsr<span class="token operator">:</span> <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span> label<span class="token operator">:</span> <span class="token number">19</span>

<span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>#<span class="token keyword">do</span> show mpls ip binding
    <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span><span class="token operator">/</span><span class="token number">32</span> 
        in label<span class="token operator">:</span>     <span class="token number">16</span>        
        out label<span class="token operator">:</span>    <span class="token number">17</span>        lsr<span class="token operator">:</span> <span class="token number">3.3</span><span class="token number">.3</span><span class="token number">.3</span><span class="token operator">:</span><span class="token number">0</span>        inuse
        out label<span class="token operator">:</span>    imp<span class="token operator">-</span>null  lsr<span class="token operator">:</span> <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">0</span>       
    <span class="token number">2.2</span><span class="token number">.2</span><span class="token number">.2</span><span class="token operator">/</span><span class="token number">32</span> 
        in label<span class="token operator">:</span>     <span class="token number">17</span>        
        out label<span class="token operator">:</span>    <span class="token number">16</span>        lsr<span class="token operator">:</span> <span class="token number">3.3</span><span class="token number">.3</span><span class="token number">.3</span><span class="token operator">:</span><span class="token number">0</span>        inuse
        out label<span class="token operator">:</span>    <span class="token number">16</span>        lsr<span class="token operator">:</span> <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">0</span>       
    <span class="token number">3.3</span><span class="token number">.3</span><span class="token number">.3</span><span class="token operator">/</span><span class="token number">32</span> 
        in label<span class="token operator">:</span>     <span class="token number">18</span>        
        out label<span class="token operator">:</span>    imp<span class="token operator">-</span>null  lsr<span class="token operator">:</span> <span class="token number">3.3</span><span class="token number">.3</span><span class="token number">.3</span><span class="token operator">:</span><span class="token number">0</span>        inuse
        out label<span class="token operator">:</span>    <span class="token number">18</span>        lsr<span class="token operator">:</span> <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">0</span>       
    <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span><span class="token operator">/</span><span class="token number">32</span> 
        in label<span class="token operator">:</span>     imp<span class="token operator">-</span>null  
        out label<span class="token operator">:</span>    <span class="token number">20</span>        lsr<span class="token operator">:</span> <span class="token number">3.3</span><span class="token number">.3</span><span class="token number">.3</span><span class="token operator">:</span><span class="token number">0</span>       
        out label<span class="token operator">:</span>    <span class="token number">20</span>        lsr<span class="token operator">:</span> <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">0</span>       
    <span class="token number">192.168</span><span class="token number">.12</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span> 
        in label<span class="token operator">:</span>     <span class="token number">19</span>        
        out label<span class="token operator">:</span>    <span class="token number">19</span>        lsr<span class="token operator">:</span> <span class="token number">3.3</span><span class="token number">.3</span><span class="token number">.3</span><span class="token operator">:</span><span class="token number">0</span>        inuse
        out label<span class="token operator">:</span>    imp<span class="token operator">-</span>null  lsr<span class="token operator">:</span> <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">0</span>       
    <span class="token number">192.168</span><span class="token number">.14</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span> 
        in label<span class="token operator">:</span>     imp<span class="token operator">-</span>null  
        out label<span class="token operator">:</span>    <span class="token number">18</span>        lsr<span class="token operator">:</span> <span class="token number">3.3</span><span class="token number">.3</span><span class="token number">.3</span><span class="token operator">:</span><span class="token number">0</span>       
        out label<span class="token operator">:</span>    <span class="token number">21</span>        lsr<span class="token operator">:</span> <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">0</span>       
    <span class="token number">192.168</span><span class="token number">.23</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span> 
        in label<span class="token operator">:</span>     <span class="token number">20</span>        
        out label<span class="token operator">:</span>    imp<span class="token operator">-</span>null  lsr<span class="token operator">:</span> <span class="token number">3.3</span><span class="token number">.3</span><span class="token number">.3</span><span class="token operator">:</span><span class="token number">0</span>        inuse
        out label<span class="token operator">:</span>    <span class="token number">17</span>        lsr<span class="token operator">:</span> <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">0</span>       
    <span class="token number">192.168</span><span class="token number">.34</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span> 
        in label<span class="token operator">:</span>     imp<span class="token operator">-</span>null  
        out label<span class="token operator">:</span>    imp<span class="token operator">-</span>null  lsr<span class="token operator">:</span> <span class="token number">3.3</span><span class="token number">.3</span><span class="token number">.3</span><span class="token operator">:</span><span class="token number">0</span>       
        out label<span class="token operator">:</span>    <span class="token number">19</span>        lsr<span class="token operator">:</span> <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">0</span> 
<span class="token comment">//可以看到，即便R1与R4的直连链路已经断开，但是R4的LIB表中仍然保留着通告自R1的标签绑定信息；</span></code></pre>

<p>调试：恢复R1和R4之间的链路连接；</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>#<span class="token keyword">int</span> f0<span class="token operator">/</span><span class="token number">1</span>
<span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token operator">-</span><span class="token keyword">if</span><span class="token punctuation">)</span>#no shut
<span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token operator">-</span><span class="token keyword">if</span><span class="token punctuation">)</span>#
<span class="token operator">*</span>Mar <span class="token number">15</span> <span class="token number">11</span><span class="token operator">:</span><span class="token number">44</span><span class="token operator">:</span><span class="token number">21.407</span><span class="token operator">:</span> <span class="token operator">%</span>LDP<span class="token operator">-</span><span class="token number">5</span><span class="token operator">-</span>SP<span class="token operator">:</span> <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span><span class="token operator">:</span><span class="token number">0</span><span class="token operator">:</span> session recovery succeeded <span class="token comment">//R1与R4的会话恢复成功；</span>
<span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token operator">-</span><span class="token keyword">if</span><span class="token punctuation">)</span>#
<span class="token operator">*</span>Mar <span class="token number">15</span> <span class="token number">11</span><span class="token operator">:</span><span class="token number">44</span><span class="token operator">:</span><span class="token number">23.279</span><span class="token operator">:</span> <span class="token operator">%</span>LINK<span class="token operator">-</span><span class="token number">3</span><span class="token operator">-</span>UPDOWN<span class="token operator">:</span> Interface FastEthernet0<span class="token operator">/</span><span class="token number">1</span><span class="token punctuation">,</span> changed state to up
<span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token operator">-</span><span class="token keyword">if</span><span class="token punctuation">)</span>#
<span class="token operator">*</span>Mar <span class="token number">15</span> <span class="token number">11</span><span class="token operator">:</span><span class="token number">44</span><span class="token operator">:</span><span class="token number">24.279</span><span class="token operator">:</span> <span class="token operator">%</span>LINEPROTO<span class="token operator">-</span><span class="token number">5</span><span class="token operator">-</span>UPDOWN<span class="token operator">:</span> Line protocol on Interface FastEthernet0<span class="token operator">/</span><span class="token number">1</span><span class="token punctuation">,</span> changed state to up</code></pre>
<h2 id="实验2：两台LSR中只有一台支持LDP会话保护特性"><a href="#实验2：两台LSR中只有一台支持LDP会话保护特性" class="headerlink" title="实验2：两台LSR中只有一台支持LDP会话保护特性"></a>实验2：两台LSR中只有一台支持LDP会话保护特性</h2><p>要让 LDP 会话保护特性正常工作，你需要在两端的 LSR 上都启用该特性。如果其中一台 LSR 无法实现该特性的话，可以在另一台LSR上启用该特性，而无法启用 LDP 会话保护的 LSR 上需要通过配置命令 <code>mpls ldp discovery targeted-hello accept</code> 来接受基于目标的 LDP Discovery Hello报文。 </p>
<p>配置ACL指定接受其远程LDP会话LSR；</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>#ip access<span class="token operator">-</span>list standard ACCEPT_R1_REMOTE
<span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token operator">-</span>std<span class="token operator">-</span>nacl<span class="token punctuation">)</span>#permit host <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span>
<span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token operator">-</span>std<span class="token operator">-</span>nacl<span class="token punctuation">)</span>#exit</code></pre>

<p>配置R4接受来自ACCEPT_R1_REMOTE的远程LDP会话；</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>#mpls ldp discovery targeted<span class="token operator">-</span>hello accept from ACCEPT_R1_REMOTE    </code></pre>

<p>验证：查看R4的MPLS LDP邻居列表中邻居R1的详细信息；</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>#<span class="token keyword">do</span> sh mpls ldp nei <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span> detail                              
    Peer LDP Ident<span class="token operator">:</span> <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">;</span> Local LDP Ident <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span><span class="token operator">:</span><span class="token number">0</span>
        TCP connection<span class="token operator">:</span> <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span><span class="token number">.646</span> <span class="token operator">-</span> <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span><span class="token number">.40199</span>
        Password<span class="token operator">:</span> not required<span class="token punctuation">,</span> none<span class="token punctuation">,</span> in use
        State<span class="token operator">:</span> Oper<span class="token punctuation">;</span> Msgs sent<span class="token operator">/</span>rcvd<span class="token operator">:</span> <span class="token number">141</span><span class="token operator">/</span><span class="token number">146</span><span class="token punctuation">;</span> Downstream<span class="token punctuation">;</span> Last TIB rev sent <span class="token number">16</span>
        Up time<span class="token operator">:</span> <span class="token number">01</span><span class="token operator">:</span><span class="token number">52</span><span class="token operator">:</span><span class="token number">47</span><span class="token punctuation">;</span> UID<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">;</span> Peer Id <span class="token number">1</span><span class="token punctuation">;</span>
        LDP discovery sources<span class="token operator">:</span>
            FastEthernet0<span class="token operator">/</span><span class="token number">1</span><span class="token punctuation">;</span> Src IP addr<span class="token operator">:</span> <span class="token number">192.168</span><span class="token number">.14</span><span class="token number">.1</span> 
            holdtime<span class="token operator">:</span> <span class="token number">15000</span> ms<span class="token punctuation">,</span> hello interval<span class="token operator">:</span> <span class="token number">5000</span> ms
            Targeted Hello <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span> <span class="token operator">-></span> <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span><span class="token punctuation">,</span> passive<span class="token punctuation">;</span> <span class="token comment">//R4被动接受来自R1的远程LDP会话；关键字passive表示R4是被动方，被动接受与R1的远程LDP会话关系：</span>
            holdtime<span class="token operator">:</span> <span class="token number">90000</span> ms<span class="token punctuation">,</span> hello interval<span class="token operator">:</span> <span class="token number">10000</span> ms
        Addresses bound to peer LDP Ident<span class="token operator">:</span>
            <span class="token number">192.168</span><span class="token number">.12</span><span class="token number">.1</span>    <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span>         <span class="token number">192.168</span><span class="token number">.14</span><span class="token number">.1</span>    
        Peer holdtime<span class="token operator">:</span> <span class="token number">180000</span> ms<span class="token punctuation">;</span> KA interval<span class="token operator">:</span> <span class="token number">60000</span> ms<span class="token punctuation">;</span> Peer state<span class="token operator">:</span> estab
        Capabilities Sent<span class="token operator">:</span>
            <span class="token punctuation">[</span><span class="token function">ICCP</span> <span class="token punctuation">(</span>type <span class="token number">0x0405</span><span class="token punctuation">)</span> MajVer <span class="token number">1</span> MinVer <span class="token number">0</span><span class="token punctuation">]</span>
            <span class="token punctuation">[</span>Dynamic <span class="token function">Announcement</span> <span class="token punctuation">(</span><span class="token number">0x0506</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
            <span class="token punctuation">[</span>Typed <span class="token function">Wildcard</span> <span class="token punctuation">(</span><span class="token number">0x050B</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
        Capabilities Received<span class="token operator">:</span>
            <span class="token punctuation">[</span><span class="token function">ICCP</span> <span class="token punctuation">(</span>type <span class="token number">0x0405</span><span class="token punctuation">)</span> MajVer <span class="token number">1</span> MinVer <span class="token number">0</span><span class="token punctuation">]</span>
            <span class="token punctuation">[</span>Dynamic <span class="token function">Announcement</span> <span class="token punctuation">(</span><span class="token number">0x0506</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
            <span class="token punctuation">[</span>Typed <span class="token function">Wildcard</span> <span class="token punctuation">(</span><span class="token number">0x050B</span><span class="token punctuation">)</span><span class="token punctuation">]</span></code></pre>

<p>验证：查看R1的MPLS LDP邻居列表中邻居R4的详细信息；</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token operator">-</span><span class="token keyword">if</span><span class="token punctuation">)</span>#<span class="token keyword">do</span> show mpls ldp neighbor <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span> detail
    Peer LDP Ident<span class="token operator">:</span> <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">;</span> Local LDP Ident <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">0</span>
        TCP connection<span class="token operator">:</span> <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span><span class="token number">.40199</span> <span class="token operator">-</span> <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span><span class="token number">.646</span>
        Password<span class="token operator">:</span> not required<span class="token punctuation">,</span> none<span class="token punctuation">,</span> in use
        State<span class="token operator">:</span> Oper<span class="token punctuation">;</span> Msgs sent<span class="token operator">/</span>rcvd<span class="token operator">:</span> <span class="token number">146</span><span class="token operator">/</span><span class="token number">140</span><span class="token punctuation">;</span> Downstream<span class="token punctuation">;</span> Last TIB rev sent <span class="token number">20</span>
        Up time<span class="token operator">:</span> <span class="token number">01</span><span class="token operator">:</span><span class="token number">52</span><span class="token operator">:</span><span class="token number">35</span><span class="token punctuation">;</span> UID<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">;</span> Peer Id <span class="token number">1</span><span class="token punctuation">;</span>
        LDP discovery sources<span class="token operator">:</span>
            FastEthernet0<span class="token operator">/</span><span class="token number">1</span><span class="token punctuation">;</span> Src IP addr<span class="token operator">:</span> <span class="token number">192.168</span><span class="token number">.14</span><span class="token number">.4</span> 
            holdtime<span class="token operator">:</span> <span class="token number">15000</span> ms<span class="token punctuation">,</span> hello interval<span class="token operator">:</span> <span class="token number">5000</span> ms
            Targeted Hello <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span> <span class="token operator">-></span> <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span><span class="token punctuation">,</span> active<span class="token punctuation">,</span> passive<span class="token punctuation">;</span> <span class="token comment">//R1与R4已建立远程LDP会话；关键字active和passive表示R1是远程会话的主动发起方和被动接受方；</span>
            holdtime<span class="token operator">:</span> infinite<span class="token punctuation">,</span> hello interval<span class="token operator">:</span> <span class="token number">10000</span> ms
        Addresses bound to peer LDP Ident<span class="token operator">:</span>
            <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span>         <span class="token number">192.168</span><span class="token number">.34</span><span class="token number">.4</span>    <span class="token number">192.168</span><span class="token number">.14</span><span class="token number">.4</span>    
        Peer holdtime<span class="token operator">:</span> <span class="token number">180000</span> ms<span class="token punctuation">;</span> KA interval<span class="token operator">:</span> <span class="token number">60000</span> ms<span class="token punctuation">;</span> Peer state<span class="token operator">:</span> estab
        Clients<span class="token operator">:</span> Dir Adj Client
        LDP Session Protection enabled<span class="token punctuation">,</span> state<span class="token operator">:</span> Ready <span class="token comment">//R1上针对邻居R4的LDP会话保护已经启用；并且状态为Ready，表示已经做了会话保护准备；</span>
            acl<span class="token operator">:</span> PROTECT_R4<span class="token punctuation">,</span> duration<span class="token operator">:</span> infinite
        Capabilities Sent<span class="token operator">:</span>
            <span class="token punctuation">[</span><span class="token function">ICCP</span> <span class="token punctuation">(</span>type <span class="token number">0x0405</span><span class="token punctuation">)</span> MajVer <span class="token number">1</span> MinVer <span class="token number">0</span><span class="token punctuation">]</span>
            <span class="token punctuation">[</span>Dynamic <span class="token function">Announcement</span> <span class="token punctuation">(</span><span class="token number">0x0506</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
            <span class="token punctuation">[</span>Typed <span class="token function">Wildcard</span> <span class="token punctuation">(</span><span class="token number">0x050B</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
        Capabilities Received<span class="token operator">:</span>
            <span class="token punctuation">[</span><span class="token function">ICCP</span> <span class="token punctuation">(</span>type <span class="token number">0x0405</span><span class="token punctuation">)</span> MajVer <span class="token number">1</span> MinVer <span class="token number">0</span><span class="token punctuation">]</span>
            <span class="token punctuation">[</span>Dynamic <span class="token function">Announcement</span> <span class="token punctuation">(</span><span class="token number">0x0506</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
            <span class="token punctuation">[</span>Typed <span class="token function">Wildcard</span> <span class="token punctuation">(</span><span class="token number">0x050B</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
<span class="token comment">//可以看到，即使R4没有启用LDP会话保护特性，但只要R4接受来自R1基于目标的远程LDP会话报文，R1的LDP会话保护特性就可以正常运作；</span></code></pre>

<p>调试：断开R1与R4之间的链路连接；</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token comment">//在R1上，将连接到R4的F0/1口shutdown；</span>
<span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token operator">-</span><span class="token keyword">if</span><span class="token punctuation">)</span>#<span class="token keyword">int</span> f0<span class="token operator">/</span><span class="token number">1</span>
<span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token operator">-</span><span class="token keyword">if</span><span class="token punctuation">)</span>#shutdown
<span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token operator">-</span><span class="token keyword">if</span><span class="token punctuation">)</span>#
<span class="token operator">*</span>Mar <span class="token number">15</span> <span class="token number">12</span><span class="token operator">:</span><span class="token number">10</span><span class="token operator">:</span><span class="token number">34.939</span><span class="token operator">:</span> <span class="token operator">%</span>LDP<span class="token operator">-</span><span class="token number">5</span><span class="token operator">-</span>SP<span class="token operator">:</span> <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span><span class="token operator">:</span><span class="token number">0</span><span class="token operator">:</span> session hold up initiated <span class="token comment">//R1上针对R4的LDP会话保护机制开始初始化；</span>
<span class="token operator">*</span>Mar <span class="token number">15</span> <span class="token number">12</span><span class="token operator">:</span><span class="token number">10</span><span class="token operator">:</span><span class="token number">34.951</span><span class="token operator">:</span> <span class="token operator">%</span>OSPF<span class="token operator">-</span><span class="token number">5</span><span class="token operator">-</span>ADJCHG<span class="token operator">:</span> Process <span class="token number">1</span><span class="token punctuation">,</span> Nbr <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span> on FastEthernet0<span class="token operator">/</span><span class="token number">1</span> from FULL to DOWN<span class="token punctuation">,</span> Neighbor Down<span class="token operator">:</span> Interface down or detached
<span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token operator">-</span><span class="token keyword">if</span><span class="token punctuation">)</span>#
<span class="token operator">*</span>Mar <span class="token number">15</span> <span class="token number">12</span><span class="token operator">:</span><span class="token number">10</span><span class="token operator">:</span><span class="token number">36.899</span><span class="token operator">:</span> <span class="token operator">%</span>LINK<span class="token operator">-</span><span class="token number">5</span><span class="token operator">-</span>CHANGED<span class="token operator">:</span> Interface FastEthernet0<span class="token operator">/</span><span class="token number">1</span><span class="token punctuation">,</span> changed state to administratively down
<span class="token operator">*</span>Mar <span class="token number">15</span> <span class="token number">12</span><span class="token operator">:</span><span class="token number">10</span><span class="token operator">:</span><span class="token number">37.899</span><span class="token operator">:</span> <span class="token operator">%</span>LINEPROTO<span class="token operator">-</span><span class="token number">5</span><span class="token operator">-</span>UPDOWN<span class="token operator">:</span> Line protocol on Interface FastEthernet0<span class="token operator">/</span><span class="token number">1</span><span class="token punctuation">,</span> changed state to down</code></pre>

<p>验证：查看R1的MPLS LDP邻居列表中邻居R4的详细信息；</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token operator">-</span><span class="token keyword">if</span><span class="token punctuation">)</span>#<span class="token keyword">do</span> sh mpls ldp nei <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span> detail  
    Peer LDP Ident<span class="token operator">:</span> <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">;</span> Local LDP Ident <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">0</span>
        TCP connection<span class="token operator">:</span> <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span><span class="token number">.40199</span> <span class="token operator">-</span> <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span><span class="token number">.646</span>
        Password<span class="token operator">:</span> not required<span class="token punctuation">,</span> none<span class="token punctuation">,</span> in use
        State<span class="token operator">:</span> Oper<span class="token punctuation">;</span> Msgs sent<span class="token operator">/</span>rcvd<span class="token operator">:</span> <span class="token number">175</span><span class="token operator">/</span><span class="token number">168</span><span class="token punctuation">;</span> Downstream<span class="token punctuation">;</span> Last TIB rev sent <span class="token number">22</span>
        Up time<span class="token operator">:</span> <span class="token number">02</span><span class="token operator">:</span><span class="token number">15</span><span class="token operator">:</span><span class="token number">35</span><span class="token punctuation">;</span> UID<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">;</span> Peer Id <span class="token number">1</span><span class="token punctuation">;</span>
        LDP discovery sources<span class="token operator">:</span>
            Targeted Hello <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span> <span class="token operator">-></span> <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span><span class="token punctuation">,</span> active<span class="token punctuation">,</span> passive<span class="token punctuation">;</span>
            holdtime<span class="token operator">:</span> infinite<span class="token punctuation">,</span> hello interval<span class="token operator">:</span> <span class="token number">10000</span> ms
        Addresses bound to peer LDP Ident<span class="token operator">:</span>
            <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span>         <span class="token number">192.168</span><span class="token number">.34</span><span class="token number">.4</span>    <span class="token number">192.168</span><span class="token number">.14</span><span class="token number">.4</span>    
        Peer holdtime<span class="token operator">:</span> <span class="token number">180000</span> ms<span class="token punctuation">;</span> KA interval<span class="token operator">:</span> <span class="token number">60000</span> ms<span class="token punctuation">;</span> Peer state<span class="token operator">:</span> estab
        Clients<span class="token operator">:</span> Dir Adj Client
        LDP Session Protection enabled<span class="token punctuation">,</span> state<span class="token operator">:</span> Protecting <span class="token comment">//R1针对邻居R4的LDP会话保护状态变为Protecting；</span>
            acl<span class="token operator">:</span> PROTECT_R4<span class="token punctuation">,</span> duration<span class="token operator">:</span> infinite
        Capabilities Sent<span class="token operator">:</span>
            <span class="token punctuation">[</span><span class="token function">ICCP</span> <span class="token punctuation">(</span>type <span class="token number">0x0405</span><span class="token punctuation">)</span> MajVer <span class="token number">1</span> MinVer <span class="token number">0</span><span class="token punctuation">]</span>
            <span class="token punctuation">[</span>Dynamic <span class="token function">Announcement</span> <span class="token punctuation">(</span><span class="token number">0x0506</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
            <span class="token punctuation">[</span>Typed <span class="token function">Wildcard</span> <span class="token punctuation">(</span><span class="token number">0x050B</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
        Capabilities Received<span class="token operator">:</span>
            <span class="token punctuation">[</span><span class="token function">ICCP</span> <span class="token punctuation">(</span>type <span class="token number">0x0405</span><span class="token punctuation">)</span> MajVer <span class="token number">1</span> MinVer <span class="token number">0</span><span class="token punctuation">]</span>
            <span class="token punctuation">[</span>Dynamic <span class="token function">Announcement</span> <span class="token punctuation">(</span><span class="token number">0x0506</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
            <span class="token punctuation">[</span>Typed <span class="token function">Wildcard</span> <span class="token punctuation">(</span><span class="token number">0x050B</span><span class="token punctuation">)</span><span class="token punctuation">]</span></code></pre>

<p>查看R1的LIB表；</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token operator">-</span><span class="token keyword">if</span><span class="token punctuation">)</span>#<span class="token keyword">do</span> sh mpls ldp bindings
    lib entry<span class="token operator">:</span> <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span><span class="token operator">/</span><span class="token number">32</span><span class="token punctuation">,</span> rev <span class="token number">2</span>
        local binding<span class="token operator">:</span>  label<span class="token operator">:</span> imp<span class="token operator">-</span>null
        remote binding<span class="token operator">:</span> lsr<span class="token operator">:</span> <span class="token number">2.2</span><span class="token number">.2</span><span class="token number">.2</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span> label<span class="token operator">:</span> <span class="token number">16</span>
        remote binding<span class="token operator">:</span> lsr<span class="token operator">:</span> <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span> label<span class="token operator">:</span> <span class="token number">16</span>
    lib entry<span class="token operator">:</span> <span class="token number">2.2</span><span class="token number">.2</span><span class="token number">.2</span><span class="token operator">/</span><span class="token number">32</span><span class="token punctuation">,</span> rev <span class="token number">8</span>
        local binding<span class="token operator">:</span>  label<span class="token operator">:</span> <span class="token number">16</span>
        remote binding<span class="token operator">:</span> lsr<span class="token operator">:</span> <span class="token number">2.2</span><span class="token number">.2</span><span class="token number">.2</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span> label<span class="token operator">:</span> imp<span class="token operator">-</span>null
        remote binding<span class="token operator">:</span> lsr<span class="token operator">:</span> <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span> label<span class="token operator">:</span> <span class="token number">17</span>
    lib entry<span class="token operator">:</span> <span class="token number">3.3</span><span class="token number">.3</span><span class="token number">.3</span><span class="token operator">/</span><span class="token number">32</span><span class="token punctuation">,</span> rev <span class="token number">13</span>
        local binding<span class="token operator">:</span>  label<span class="token operator">:</span> <span class="token number">18</span>
        remote binding<span class="token operator">:</span> lsr<span class="token operator">:</span> <span class="token number">2.2</span><span class="token number">.2</span><span class="token number">.2</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span> label<span class="token operator">:</span> <span class="token number">18</span>
        remote binding<span class="token operator">:</span> lsr<span class="token operator">:</span> <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span> label<span class="token operator">:</span> <span class="token number">18</span>
    lib entry<span class="token operator">:</span> <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span><span class="token operator">/</span><span class="token number">32</span><span class="token punctuation">,</span> rev <span class="token number">16</span>
        local binding<span class="token operator">:</span>  label<span class="token operator">:</span> <span class="token number">20</span>
        remote binding<span class="token operator">:</span> lsr<span class="token operator">:</span> <span class="token number">2.2</span><span class="token number">.2</span><span class="token number">.2</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span> label<span class="token operator">:</span> <span class="token number">20</span>
        remote binding<span class="token operator">:</span> lsr<span class="token operator">:</span> <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span> label<span class="token operator">:</span> imp<span class="token operator">-</span>null
    lib entry<span class="token operator">:</span> <span class="token number">192.168</span><span class="token number">.12</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span><span class="token punctuation">,</span> rev <span class="token number">4</span>
        local binding<span class="token operator">:</span>  label<span class="token operator">:</span> imp<span class="token operator">-</span>null
        remote binding<span class="token operator">:</span> lsr<span class="token operator">:</span> <span class="token number">2.2</span><span class="token number">.2</span><span class="token number">.2</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span> label<span class="token operator">:</span> imp<span class="token operator">-</span>null
        remote binding<span class="token operator">:</span> lsr<span class="token operator">:</span> <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span> label<span class="token operator">:</span> <span class="token number">19</span>
    lib entry<span class="token operator">:</span> <span class="token number">192.168</span><span class="token number">.14</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span><span class="token punctuation">,</span> rev <span class="token number">22</span>
        local binding<span class="token operator">:</span>  label<span class="token operator">:</span> <span class="token number">21</span>
        remote binding<span class="token operator">:</span> lsr<span class="token operator">:</span> <span class="token number">2.2</span><span class="token number">.2</span><span class="token number">.2</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span> label<span class="token operator">:</span> <span class="token number">17</span>
        remote binding<span class="token operator">:</span> lsr<span class="token operator">:</span> <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span> label<span class="token operator">:</span> imp<span class="token operator">-</span>null
    lib entry<span class="token operator">:</span> <span class="token number">192.168</span><span class="token number">.23</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span><span class="token punctuation">,</span> rev <span class="token number">10</span>
        local binding<span class="token operator">:</span>  label<span class="token operator">:</span> <span class="token number">17</span>
        remote binding<span class="token operator">:</span> lsr<span class="token operator">:</span> <span class="token number">2.2</span><span class="token number">.2</span><span class="token number">.2</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span> label<span class="token operator">:</span> imp<span class="token operator">-</span>null
        remote binding<span class="token operator">:</span> lsr<span class="token operator">:</span> <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span> label<span class="token operator">:</span> <span class="token number">20</span>
    lib entry<span class="token operator">:</span> <span class="token number">192.168</span><span class="token number">.34</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span><span class="token punctuation">,</span> rev <span class="token number">14</span>
        local binding<span class="token operator">:</span>  label<span class="token operator">:</span> <span class="token number">19</span>
        remote binding<span class="token operator">:</span> lsr<span class="token operator">:</span> <span class="token number">2.2</span><span class="token number">.2</span><span class="token number">.2</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span> label<span class="token operator">:</span> <span class="token number">19</span>
        remote binding<span class="token operator">:</span> lsr<span class="token operator">:</span> <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span> label<span class="token operator">:</span> imp<span class="token operator">-</span>null

<span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token operator">-</span><span class="token keyword">if</span><span class="token punctuation">)</span>#<span class="token keyword">do</span> sh mpls ip binding
    <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span><span class="token operator">/</span><span class="token number">32</span> 
        in label<span class="token operator">:</span>     imp<span class="token operator">-</span>null  
        out label<span class="token operator">:</span>    <span class="token number">16</span>        lsr<span class="token operator">:</span> <span class="token number">2.2</span><span class="token number">.2</span><span class="token number">.2</span><span class="token operator">:</span><span class="token number">0</span>       
        out label<span class="token operator">:</span>    <span class="token number">16</span>        lsr<span class="token operator">:</span> <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span><span class="token operator">:</span><span class="token number">0</span>       
    <span class="token number">2.2</span><span class="token number">.2</span><span class="token number">.2</span><span class="token operator">/</span><span class="token number">32</span> 
        in label<span class="token operator">:</span>     <span class="token number">16</span>        
        out label<span class="token operator">:</span>    imp<span class="token operator">-</span>null  lsr<span class="token operator">:</span> <span class="token number">2.2</span><span class="token number">.2</span><span class="token number">.2</span><span class="token operator">:</span><span class="token number">0</span>        inuse
        out label<span class="token operator">:</span>    <span class="token number">17</span>        lsr<span class="token operator">:</span> <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span><span class="token operator">:</span><span class="token number">0</span>       
    <span class="token number">3.3</span><span class="token number">.3</span><span class="token number">.3</span><span class="token operator">/</span><span class="token number">32</span> 
        in label<span class="token operator">:</span>     <span class="token number">18</span>        
        out label<span class="token operator">:</span>    <span class="token number">18</span>        lsr<span class="token operator">:</span> <span class="token number">2.2</span><span class="token number">.2</span><span class="token number">.2</span><span class="token operator">:</span><span class="token number">0</span>        inuse
        out label<span class="token operator">:</span>    <span class="token number">18</span>        lsr<span class="token operator">:</span> <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span><span class="token operator">:</span><span class="token number">0</span>       
    <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span><span class="token operator">/</span><span class="token number">32</span> 
        in label<span class="token operator">:</span>     <span class="token number">20</span>        
        out label<span class="token operator">:</span>    <span class="token number">20</span>        lsr<span class="token operator">:</span> <span class="token number">2.2</span><span class="token number">.2</span><span class="token number">.2</span><span class="token operator">:</span><span class="token number">0</span>        inuse
        out label<span class="token operator">:</span>    imp<span class="token operator">-</span>null  lsr<span class="token operator">:</span> <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span><span class="token operator">:</span><span class="token number">0</span>       
    <span class="token number">192.168</span><span class="token number">.12</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span> 
        in label<span class="token operator">:</span>     imp<span class="token operator">-</span>null  
        out label<span class="token operator">:</span>    imp<span class="token operator">-</span>null  lsr<span class="token operator">:</span> <span class="token number">2.2</span><span class="token number">.2</span><span class="token number">.2</span><span class="token operator">:</span><span class="token number">0</span>       
        out label<span class="token operator">:</span>    <span class="token number">19</span>        lsr<span class="token operator">:</span> <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span><span class="token operator">:</span><span class="token number">0</span>       
    <span class="token number">192.168</span><span class="token number">.14</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span> 
        in label<span class="token operator">:</span>     <span class="token number">21</span>        
        out label<span class="token operator">:</span>    <span class="token number">17</span>        lsr<span class="token operator">:</span> <span class="token number">2.2</span><span class="token number">.2</span><span class="token number">.2</span><span class="token operator">:</span><span class="token number">0</span>        inuse
        out label<span class="token operator">:</span>    imp<span class="token operator">-</span>null  lsr<span class="token operator">:</span> <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span><span class="token operator">:</span><span class="token number">0</span>       
    <span class="token number">192.168</span><span class="token number">.23</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span> 
        in label<span class="token operator">:</span>     <span class="token number">17</span>        
        out label<span class="token operator">:</span>    imp<span class="token operator">-</span>null  lsr<span class="token operator">:</span> <span class="token number">2.2</span><span class="token number">.2</span><span class="token number">.2</span><span class="token operator">:</span><span class="token number">0</span>        inuse
        out label<span class="token operator">:</span>    <span class="token number">20</span>        lsr<span class="token operator">:</span> <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span><span class="token operator">:</span><span class="token number">0</span>       
    <span class="token number">192.168</span><span class="token number">.34</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span> 
        in label<span class="token operator">:</span>     <span class="token number">19</span>        
        out label<span class="token operator">:</span>    <span class="token number">19</span>        lsr<span class="token operator">:</span> <span class="token number">2.2</span><span class="token number">.2</span><span class="token number">.2</span><span class="token operator">:</span><span class="token number">0</span>        inuse
        out label<span class="token operator">:</span>    imp<span class="token operator">-</span>null  lsr<span class="token operator">:</span> <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span><span class="token operator">:</span><span class="token number">0</span>   
<span class="token comment">//注意到，由于LDP会话保护机制，R1的LIB表中仍然保留着R4通告来的标签；</span></code></pre>

<p>验证：查看R4的MPLS LDP邻居列表中邻居R1的详细信息；</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>#<span class="token keyword">do</span> show mpls ldp nei <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span> detail
    Peer LDP Ident<span class="token operator">:</span> <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">;</span> Local LDP Ident <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span><span class="token operator">:</span><span class="token number">0</span>
        TCP connection<span class="token operator">:</span> <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span><span class="token number">.646</span> <span class="token operator">-</span> <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span><span class="token number">.40199</span>
        Password<span class="token operator">:</span> not required<span class="token punctuation">,</span> none<span class="token punctuation">,</span> in use
        State<span class="token operator">:</span> Oper<span class="token punctuation">;</span> Msgs sent<span class="token operator">/</span>rcvd<span class="token operator">:</span> <span class="token number">201</span><span class="token operator">/</span><span class="token number">208</span><span class="token punctuation">;</span> Downstream<span class="token punctuation">;</span> Last TIB rev sent <span class="token number">16</span>
        Up time<span class="token operator">:</span> <span class="token number">02</span><span class="token operator">:</span><span class="token number">45</span><span class="token operator">:</span><span class="token number">13</span><span class="token punctuation">;</span> UID<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">;</span> Peer Id <span class="token number">1</span><span class="token punctuation">;</span>
        LDP discovery sources<span class="token operator">:</span>
            Targeted Hello <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span> <span class="token operator">-></span> <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span><span class="token punctuation">,</span> passive<span class="token punctuation">;</span>
            holdtime<span class="token operator">:</span> <span class="token number">90000</span> ms<span class="token punctuation">,</span> hello interval<span class="token operator">:</span> <span class="token number">10000</span> ms
        Addresses bound to peer LDP Ident<span class="token operator">:</span>
            <span class="token number">192.168</span><span class="token number">.12</span><span class="token number">.1</span>    <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span>         
        Peer holdtime<span class="token operator">:</span> <span class="token number">180000</span> ms<span class="token punctuation">;</span> KA interval<span class="token operator">:</span> <span class="token number">60000</span> ms<span class="token punctuation">;</span> Peer state<span class="token operator">:</span> estab
        Capabilities Sent<span class="token operator">:</span>
            <span class="token punctuation">[</span><span class="token function">ICCP</span> <span class="token punctuation">(</span>type <span class="token number">0x0405</span><span class="token punctuation">)</span> MajVer <span class="token number">1</span> MinVer <span class="token number">0</span><span class="token punctuation">]</span>
            <span class="token punctuation">[</span>Dynamic <span class="token function">Announcement</span> <span class="token punctuation">(</span><span class="token number">0x0506</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
            <span class="token punctuation">[</span>Typed <span class="token function">Wildcard</span> <span class="token punctuation">(</span><span class="token number">0x050B</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
        Capabilities Received<span class="token operator">:</span>
            <span class="token punctuation">[</span><span class="token function">ICCP</span> <span class="token punctuation">(</span>type <span class="token number">0x0405</span><span class="token punctuation">)</span> MajVer <span class="token number">1</span> MinVer <span class="token number">0</span><span class="token punctuation">]</span>
            <span class="token punctuation">[</span>Dynamic <span class="token function">Announcement</span> <span class="token punctuation">(</span><span class="token number">0x0506</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
            <span class="token punctuation">[</span>Typed <span class="token function">Wildcard</span> <span class="token punctuation">(</span><span class="token number">0x050B</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
<span class="token comment">//虽然R4没有启用LDP会话保护，但是R4仍然和R1保持着基于目标的LDP远程会话；</span></code></pre>

<p>查看R4的LIB表；</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>#<span class="token keyword">do</span> show mpls ldp bindings
    lib entry<span class="token operator">:</span> <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span><span class="token operator">/</span><span class="token number">32</span><span class="token punctuation">,</span> rev <span class="token number">2</span>
        local binding<span class="token operator">:</span>  label<span class="token operator">:</span> <span class="token number">16</span>
        remote binding<span class="token operator">:</span> lsr<span class="token operator">:</span> <span class="token number">3.3</span><span class="token number">.3</span><span class="token number">.3</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span> label<span class="token operator">:</span> <span class="token number">17</span>
        remote binding<span class="token operator">:</span> lsr<span class="token operator">:</span> <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span> label<span class="token operator">:</span> imp<span class="token operator">-</span>null
    lib entry<span class="token operator">:</span> <span class="token number">2.2</span><span class="token number">.2</span><span class="token number">.2</span><span class="token operator">/</span><span class="token number">32</span><span class="token punctuation">,</span> rev <span class="token number">4</span>
        local binding<span class="token operator">:</span>  label<span class="token operator">:</span> <span class="token number">17</span>
        remote binding<span class="token operator">:</span> lsr<span class="token operator">:</span> <span class="token number">3.3</span><span class="token number">.3</span><span class="token number">.3</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span> label<span class="token operator">:</span> <span class="token number">16</span>
        remote binding<span class="token operator">:</span> lsr<span class="token operator">:</span> <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span> label<span class="token operator">:</span> <span class="token number">16</span>
    lib entry<span class="token operator">:</span> <span class="token number">3.3</span><span class="token number">.3</span><span class="token number">.3</span><span class="token operator">/</span><span class="token number">32</span><span class="token punctuation">,</span> rev <span class="token number">6</span>
        local binding<span class="token operator">:</span>  label<span class="token operator">:</span> <span class="token number">18</span>
        remote binding<span class="token operator">:</span> lsr<span class="token operator">:</span> <span class="token number">3.3</span><span class="token number">.3</span><span class="token number">.3</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span> label<span class="token operator">:</span> imp<span class="token operator">-</span>null
        remote binding<span class="token operator">:</span> lsr<span class="token operator">:</span> <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span> label<span class="token operator">:</span> <span class="token number">18</span>
    lib entry<span class="token operator">:</span> <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span><span class="token operator">/</span><span class="token number">32</span><span class="token punctuation">,</span> rev <span class="token number">8</span>
        local binding<span class="token operator">:</span>  label<span class="token operator">:</span> imp<span class="token operator">-</span>null
        remote binding<span class="token operator">:</span> lsr<span class="token operator">:</span> <span class="token number">3.3</span><span class="token number">.3</span><span class="token number">.3</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span> label<span class="token operator">:</span> <span class="token number">20</span>
        remote binding<span class="token operator">:</span> lsr<span class="token operator">:</span> <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span> label<span class="token operator">:</span> <span class="token number">20</span>
    lib entry<span class="token operator">:</span> <span class="token number">192.168</span><span class="token number">.12</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span><span class="token punctuation">,</span> rev <span class="token number">10</span>
        local binding<span class="token operator">:</span>  label<span class="token operator">:</span> <span class="token number">19</span>
        remote binding<span class="token operator">:</span> lsr<span class="token operator">:</span> <span class="token number">3.3</span><span class="token number">.3</span><span class="token number">.3</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span> label<span class="token operator">:</span> <span class="token number">19</span>
        remote binding<span class="token operator">:</span> lsr<span class="token operator">:</span> <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span> label<span class="token operator">:</span> imp<span class="token operator">-</span>null
    lib entry<span class="token operator">:</span> <span class="token number">192.168</span><span class="token number">.14</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span><span class="token punctuation">,</span> rev <span class="token number">12</span>
        local binding<span class="token operator">:</span>  label<span class="token operator">:</span> imp<span class="token operator">-</span>null
        remote binding<span class="token operator">:</span> lsr<span class="token operator">:</span> <span class="token number">3.3</span><span class="token number">.3</span><span class="token number">.3</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span> label<span class="token operator">:</span> <span class="token number">18</span>
        remote binding<span class="token operator">:</span> lsr<span class="token operator">:</span> <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span> label<span class="token operator">:</span> <span class="token number">21</span>
    lib entry<span class="token operator">:</span> <span class="token number">192.168</span><span class="token number">.23</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span><span class="token punctuation">,</span> rev <span class="token number">14</span>
        local binding<span class="token operator">:</span>  label<span class="token operator">:</span> <span class="token number">20</span>
        remote binding<span class="token operator">:</span> lsr<span class="token operator">:</span> <span class="token number">3.3</span><span class="token number">.3</span><span class="token number">.3</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span> label<span class="token operator">:</span> imp<span class="token operator">-</span>null
        remote binding<span class="token operator">:</span> lsr<span class="token operator">:</span> <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span> label<span class="token operator">:</span> <span class="token number">17</span>
    lib entry<span class="token operator">:</span> <span class="token number">192.168</span><span class="token number">.34</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span><span class="token punctuation">,</span> rev <span class="token number">16</span>
        local binding<span class="token operator">:</span>  label<span class="token operator">:</span> imp<span class="token operator">-</span>null
        remote binding<span class="token operator">:</span> lsr<span class="token operator">:</span> <span class="token number">3.3</span><span class="token number">.3</span><span class="token number">.3</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span> label<span class="token operator">:</span> imp<span class="token operator">-</span>null
        remote binding<span class="token operator">:</span> lsr<span class="token operator">:</span> <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span> label<span class="token operator">:</span> <span class="token number">19</span>

<span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>#<span class="token keyword">do</span> show mpls ip binding
    <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span><span class="token operator">/</span><span class="token number">32</span> 
        in label<span class="token operator">:</span>     <span class="token number">16</span>        
        out label<span class="token operator">:</span>    <span class="token number">17</span>        lsr<span class="token operator">:</span> <span class="token number">3.3</span><span class="token number">.3</span><span class="token number">.3</span><span class="token operator">:</span><span class="token number">0</span>        inuse
        out label<span class="token operator">:</span>    imp<span class="token operator">-</span>null  lsr<span class="token operator">:</span> <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">0</span>       
    <span class="token number">2.2</span><span class="token number">.2</span><span class="token number">.2</span><span class="token operator">/</span><span class="token number">32</span> 
        in label<span class="token operator">:</span>     <span class="token number">17</span>        
        out label<span class="token operator">:</span>    <span class="token number">16</span>        lsr<span class="token operator">:</span> <span class="token number">3.3</span><span class="token number">.3</span><span class="token number">.3</span><span class="token operator">:</span><span class="token number">0</span>        inuse
        out label<span class="token operator">:</span>    <span class="token number">16</span>        lsr<span class="token operator">:</span> <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">0</span>       
    <span class="token number">3.3</span><span class="token number">.3</span><span class="token number">.3</span><span class="token operator">/</span><span class="token number">32</span> 
        in label<span class="token operator">:</span>     <span class="token number">18</span>        
        out label<span class="token operator">:</span>    imp<span class="token operator">-</span>null  lsr<span class="token operator">:</span> <span class="token number">3.3</span><span class="token number">.3</span><span class="token number">.3</span><span class="token operator">:</span><span class="token number">0</span>        inuse
        out label<span class="token operator">:</span>    <span class="token number">18</span>        lsr<span class="token operator">:</span> <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">0</span>       
    <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span><span class="token operator">/</span><span class="token number">32</span> 
        in label<span class="token operator">:</span>     imp<span class="token operator">-</span>null  
        out label<span class="token operator">:</span>    <span class="token number">20</span>        lsr<span class="token operator">:</span> <span class="token number">3.3</span><span class="token number">.3</span><span class="token number">.3</span><span class="token operator">:</span><span class="token number">0</span>       
        out label<span class="token operator">:</span>    <span class="token number">20</span>        lsr<span class="token operator">:</span> <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">0</span>       
    <span class="token number">192.168</span><span class="token number">.12</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span> 
        in label<span class="token operator">:</span>     <span class="token number">19</span>        
        out label<span class="token operator">:</span>    <span class="token number">19</span>        lsr<span class="token operator">:</span> <span class="token number">3.3</span><span class="token number">.3</span><span class="token number">.3</span><span class="token operator">:</span><span class="token number">0</span>        inuse
        out label<span class="token operator">:</span>    imp<span class="token operator">-</span>null  lsr<span class="token operator">:</span> <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">0</span>       
    <span class="token number">192.168</span><span class="token number">.14</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span> 
        in label<span class="token operator">:</span>     imp<span class="token operator">-</span>null  
        out label<span class="token operator">:</span>    <span class="token number">18</span>        lsr<span class="token operator">:</span> <span class="token number">3.3</span><span class="token number">.3</span><span class="token number">.3</span><span class="token operator">:</span><span class="token number">0</span>       
        out label<span class="token operator">:</span>    <span class="token number">21</span>        lsr<span class="token operator">:</span> <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">0</span>       
    <span class="token number">192.168</span><span class="token number">.23</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span> 
        in label<span class="token operator">:</span>     <span class="token number">20</span>        
        out label<span class="token operator">:</span>    imp<span class="token operator">-</span>null  lsr<span class="token operator">:</span> <span class="token number">3.3</span><span class="token number">.3</span><span class="token number">.3</span><span class="token operator">:</span><span class="token number">0</span>        inuse
        out label<span class="token operator">:</span>    <span class="token number">17</span>        lsr<span class="token operator">:</span> <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">0</span>       
    <span class="token number">192.168</span><span class="token number">.34</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span> 
        in label<span class="token operator">:</span>     imp<span class="token operator">-</span>null  
        out label<span class="token operator">:</span>    imp<span class="token operator">-</span>null  lsr<span class="token operator">:</span> <span class="token number">3.3</span><span class="token number">.3</span><span class="token number">.3</span><span class="token operator">:</span><span class="token number">0</span>       
        out label<span class="token operator">:</span>    <span class="token number">19</span>        lsr<span class="token operator">:</span> <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">0</span>      
<span class="token comment">//注意到，虽然R4没有启用LDP会话保护机制，但是R4的LIB表中同样保留着R1通告来的标签；</span></code></pre>
]]></content>
      <categories>
        <category>Network</category>
      </categories>
      <tags>
        <tag>MPLS</tag>
        <tag>Network</tag>
      </tags>
  </entry>
  <entry>
    <title>MPLS 实验3：MPLS LDP-IGP同步</title>
    <url>/2014/MPLS_Lab_3/</url>
    <content><![CDATA[<h1 id="实验环境："><a href="#实验环境：" class="headerlink" title="实验环境："></a>实验环境：</h1><ul>
<li>模拟器：GNS3 0.8.6</li>
<li>Cisco IOS：c7200-adventerprisek9-mz.151-4.M2.image</li>
</ul>
<h1 id="GNS3实验拓扑文件："><a href="#GNS3实验拓扑文件：" class="headerlink" title="GNS3实验拓扑文件："></a>GNS3实验拓扑文件：</h1><p><a href="topology.net">拓扑文件</a></p>
<h1 id="实验拓扑："><a href="#实验拓扑：" class="headerlink" title="实验拓扑："></a>实验拓扑：</h1><p><img src="/2014/MPLS_Lab_3/topo.png"></p>
<span id="more"></span>

<h1 id="基本预配置："><a href="#基本预配置：" class="headerlink" title="基本预配置："></a>基本预配置：</h1><h2 id="R1："><a href="#R1：" class="headerlink" title="R1："></a>R1：</h2><pre class="language-none"><code class="language-none">hostname R1
!
ip cef
!
mpls label protocol ldp
!
interface Loopback0
    ip address 1.1.1.1 255.255.255.255
    ip ospf 1 area 0
!
interface FastEthernet0&#x2F;0
    ip address 192.168.12.1 255.255.255.0
    ip ospf 1 area 0
    no shutdown
    mpls ip
!
interface FastEthernet0&#x2F;1
    ip address 192.168.21.1 255.255.255.0
    ip ospf 1 area 0
    no shutdown
mpls ip
!
router ospf 1
    router-id 1.1.1.1
!
mpls ldp router-id Loopback0 force
!
line con 0
    exec-timeout 0 0
    logging synchronous
!
end</code></pre>

<h2 id="R2"><a href="#R2" class="headerlink" title="R2:"></a>R2:</h2><pre class="language-none"><code class="language-none">hostname R2
!
ip cef
!
mpls label protocol ldp
!
interface Loopback0
    ip address 2.2.2.2 255.255.255.255
    ip ospf 1 area 0
!
interface FastEthernet0&#x2F;0
    ip address 192.168.12.2 255.255.255.0
    ip ospf 1 area 0
    no shutdown
mpls ip
!
interface FastEthernet0&#x2F;1
    ip address 192.168.21.2 255.255.255.0
    ip ospf 1 area 0
    no shutdown
mpls ip
!
router ospf 1
    router-id 2.2.2.2
!
!
mpls ldp router-id Loopback0 force
!
line con 0
    exec-timeout 0 0
    logging synchronous
!
end</code></pre>


<h1 id="实验与调试："><a href="#实验与调试：" class="headerlink" title="实验与调试："></a>实验与调试：</h1><h2 id="实验1：R1和R2之间仅有唯一一条链路时的LDP-IGP同步"><a href="#实验1：R1和R2之间仅有唯一一条链路时的LDP-IGP同步" class="headerlink" title="实验1：R1和R2之间仅有唯一一条链路时的LDP-IGP同步"></a>实验1：R1和R2之间仅有唯一一条链路时的LDP-IGP同步</h2><p>将R1和R2之间的由F0&#x2F;1相连的链路禁用，只留下F0&#x2F;0的链路；</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>#<span class="token keyword">int</span> f0<span class="token operator">/</span><span class="token number">1</span>
<span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token operator">-</span><span class="token keyword">if</span><span class="token punctuation">)</span>#shutdown

<span class="token function">R2</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>#<span class="token keyword">int</span> f0<span class="token operator">/</span><span class="token number">1</span>
<span class="token function">R2</span><span class="token punctuation">(</span>config<span class="token operator">-</span><span class="token keyword">if</span><span class="token punctuation">)</span>#shutdown</code></pre>

<p>查看R1的LDP邻居表；</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token operator">-</span><span class="token keyword">if</span><span class="token punctuation">)</span>#<span class="token keyword">do</span> show mpls ldp nei
    Peer LDP Ident<span class="token operator">:</span> <span class="token number">2.2</span><span class="token number">.2</span><span class="token number">.2</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">;</span> Local LDP Ident <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">0</span>
        TCP connection<span class="token operator">:</span> <span class="token number">2.2</span><span class="token number">.2</span><span class="token number">.2</span><span class="token number">.52561</span> <span class="token operator">-</span> <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span><span class="token number">.646</span>
        State<span class="token operator">:</span> Oper<span class="token punctuation">;</span> Msgs sent<span class="token operator">/</span>rcvd<span class="token operator">:</span> <span class="token number">7</span><span class="token operator">/</span><span class="token number">7</span><span class="token punctuation">;</span> Downstream
        Up time<span class="token operator">:</span> <span class="token number">00</span><span class="token operator">:</span><span class="token number">00</span><span class="token operator">:</span><span class="token number">11</span>
        LDP discovery sources<span class="token operator">:</span>
            FastEthernet0<span class="token operator">/</span><span class="token number">0</span><span class="token punctuation">,</span> Src IP addr<span class="token operator">:</span> <span class="token number">192.168</span><span class="token number">.12</span><span class="token number">.2</span>
        Addresses bound to peer LDP Ident<span class="token operator">:</span>
            <span class="token number">2.2</span><span class="token number">.2</span><span class="token number">.2</span>         <span class="token number">192.168</span><span class="token number">.12</span><span class="token number">.2</span>
<span class="token comment">//可以看到，此时R1只有一个LDP邻居，即R2，并且他们之间只有一条链路，因为R1只在F0/0发现了LDP邻居；</span></code></pre>

<p>在R1和R2上启用LDP-IGP同步功能；</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>#router ospf <span class="token number">1</span>
<span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span>#mpls ldp sync

<span class="token function">R2</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>#router ospf <span class="token number">1</span>
<span class="token function">R2</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span>#mpls ldp sync</code></pre>

<p>查看R1上F0&#x2F;0的LDP和OSPF同步信息；</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>#<span class="token keyword">do</span> show ip ospf mpls ldp interface f0<span class="token operator">/</span><span class="token number">0</span>
FastEthernet0<span class="token operator">/</span><span class="token number">0</span>
    Process ID <span class="token number">1</span><span class="token punctuation">,</span> Area <span class="token number">0</span>
    LDP is not configured through LDP autoconfig
    LDP<span class="token operator">-</span>IGP Synchronization <span class="token operator">:</span> Required <span class="token comment">//接口f0/0的LDP-IGP同步状态为Required，说明LDP-IGP已经开启；</span>
    Holddown timer is not configured <span class="token comment">//LDP-IGP保持计时器没有配置；</span>
    Interface is up <span class="token comment">//接口为UP状态；</span></code></pre>
<h2 id="调试1："><a href="#调试1：" class="headerlink" title="调试1："></a>调试1：</h2><p>清楚MPLS LDP的邻接关系；</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>#<span class="token keyword">do</span> clear mpls ldp neighbor <span class="token operator">*</span>
<span class="token comment">//注意：这两条命令切换要快，否则看不到现象；</span>
<span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>#<span class="token keyword">do</span> show ip ospf mpls ldp interface f0<span class="token operator">/</span><span class="token number">0</span>
FastEthernet0<span class="token operator">/</span><span class="token number">0</span>
    Process ID <span class="token number">1</span><span class="token punctuation">,</span> Area <span class="token number">0</span>
    LDP is not configured through LDP autoconfig
    LDP<span class="token operator">-</span>IGP Synchronization <span class="token operator">:</span> Required
    Holddown timer is not configured
    Interface is up and sending maximum metric <span class="token comment">//接口已经UP，但由于LDP邻居被重置，所以OSPF将度量值用最大值来发送给邻居；</span>
<span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>#
<span class="token operator">*</span>Mar <span class="token number">16</span> <span class="token number">09</span><span class="token operator">:</span><span class="token number">33</span><span class="token operator">:</span><span class="token number">16.371</span><span class="token operator">:</span> <span class="token operator">%</span>LDP<span class="token operator">-</span><span class="token number">5</span><span class="token operator">-</span>CLEAR_NBRS<span class="token operator">:</span> Clear LDP <span class="token function">neighbors</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> by console
<span class="token operator">*</span>Mar <span class="token number">16</span> <span class="token number">09</span><span class="token operator">:</span><span class="token number">33</span><span class="token operator">:</span><span class="token number">16.387</span><span class="token operator">:</span> <span class="token operator">%</span>LDP<span class="token operator">-</span><span class="token number">5</span><span class="token operator">-</span>NBRCHG<span class="token operator">:</span> LDP Neighbor <span class="token number">2.2</span><span class="token number">.2</span><span class="token number">.2</span><span class="token operator">:</span><span class="token number">0</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> is <span class="token function">DOWN</span> <span class="token punctuation">(</span>User cleared session manually<span class="token punctuation">)</span>
<span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>#
<span class="token operator">*</span>Mar <span class="token number">16</span> <span class="token number">09</span><span class="token operator">:</span><span class="token number">33</span><span class="token operator">:</span><span class="token number">20.507</span><span class="token operator">:</span> <span class="token operator">%</span>LDP<span class="token operator">-</span><span class="token number">5</span><span class="token operator">-</span>NBRCHG<span class="token operator">:</span> LDP Neighbor <span class="token number">2.2</span><span class="token number">.2</span><span class="token number">.2</span><span class="token operator">:</span><span class="token number">0</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> is UP
<span class="token comment">//LDP邻居又再度建立；</span></code></pre>

<p>调试MPLS LDP-IGP同步过程；</p>
<p>配置ACL 100以捕获R1发往R2的OSPF LSA；</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>#<span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>#access<span class="token operator">-</span>list <span class="token number">100</span> permit ospf host <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span> any</code></pre>
<p><strong>同时，开启抓包工具Wireshark，捕获F0&#x2F;0上的OSPF数据包；</strong></p>
<p>调试<code>debug mpls ldp igp sync</code> 和 <code>debug ip ospf lsa-generation 100</code>；</p>
<pre class="language-c" data-language="c"><code class="language-c">R1#debug ip ospf lsa<span class="token operator">-</span>generation <span class="token number">100</span>
OSPF LSA generation debugging is on <span class="token keyword">for</span> access list <span class="token number">100</span>
R1#debug mpls ldp igp sync
LDP<span class="token operator">-</span>IGP Synchronization debugging is on
R1#clear mpls ldp neighbor <span class="token operator">*</span>

R1#
<span class="token operator">*</span>Mar <span class="token number">16</span> <span class="token number">10</span><span class="token operator">:</span><span class="token number">51</span><span class="token operator">:</span><span class="token number">55.823</span><span class="token operator">:</span> <span class="token operator">%</span>LDP<span class="token operator">-</span><span class="token number">5</span><span class="token operator">-</span>CLEAR_NBRS<span class="token operator">:</span> Clear LDP <span class="token function">neighbors</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> by console
<span class="token operator">*</span>Mar <span class="token number">16</span> <span class="token number">10</span><span class="token operator">:</span><span class="token number">51</span><span class="token operator">:</span><span class="token number">55.831</span><span class="token operator">:</span> LDP<span class="token operator">-</span>SYNC<span class="token operator">:</span> Fa0<span class="token operator">/</span><span class="token number">0</span><span class="token punctuation">,</span> OSPF <span class="token number">1</span><span class="token operator">:</span> notify <span class="token function">status</span> <span class="token punctuation">(</span>required<span class="token punctuation">,</span> not achieved<span class="token punctuation">,</span> delay<span class="token punctuation">,</span> holddown infinite<span class="token punctuation">)</span> internal <span class="token function">status</span> <span class="token punctuation">(</span>not achieved<span class="token punctuation">,</span> timer not running<span class="token punctuation">)</span>
<span class="token comment">//LDP-IGP未同步；</span>
<span class="token operator">*</span>Mar <span class="token number">16</span> <span class="token number">10</span><span class="token operator">:</span><span class="token number">51</span><span class="token operator">:</span><span class="token number">55.835</span><span class="token operator">:</span> OSPF<span class="token operator">-</span><span class="token number">1</span> LSGEN<span class="token operator">:</span> Scheduling rtr LSA <span class="token keyword">for</span> area <span class="token number">0</span>
<span class="token operator">*</span>Mar <span class="token number">16</span> <span class="token number">10</span><span class="token operator">:</span><span class="token number">51</span><span class="token operator">:</span><span class="token number">55.835</span><span class="token operator">:</span> LDP<span class="token operator">-</span>SYNC<span class="token operator">:</span> Fa0<span class="token operator">/</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2.2</span><span class="token number">.2</span><span class="token number">.2</span><span class="token operator">:</span> Adj being deleted<span class="token punctuation">,</span> sync_achieved goes down
<span class="token comment">//LDP邻接关系被删除，同步完成状态变为down；</span>
<span class="token operator">*</span>Mar <span class="token number">16</span> <span class="token number">10</span><span class="token operator">:</span><span class="token number">51</span><span class="token operator">:</span><span class="token number">55.843</span><span class="token operator">:</span> <span class="token operator">%</span>LDP<span class="token operator">-</span><span class="token number">5</span><span class="token operator">-</span>NBRCHG<span class="token operator">:</span> LDP Neighbor <span class="token number">2.2</span><span class="token number">.2</span><span class="token number">.2</span><span class="token operator">:</span><span class="token number">0</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> is <span class="token function">DOWN</span> <span class="token punctuation">(</span>User cleared session manually<span class="token punctuation">)</span>
<span class="token comment">//LDP邻居关系Down；用户手动清除了会话；</span>
<span class="token operator">*</span>Mar <span class="token number">16</span> <span class="token number">10</span><span class="token operator">:</span><span class="token number">51</span><span class="token operator">:</span><span class="token number">56.335</span><span class="token operator">:</span> OSPF<span class="token operator">-</span><span class="token number">1</span> LSGEN<span class="token operator">:</span> Build router LSA <span class="token keyword">for</span> area <span class="token number">0</span><span class="token punctuation">,</span> router ID <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span><span class="token punctuation">,</span> seq <span class="token number">0x80000059</span></code></pre>

<p><strong>在调试输出过程中飞快按下此命令，得到LDP-IGP同步过程中的OSPF Database中的一类LSA信息；</strong></p>
<pre class="language-c" data-language="c"><code class="language-c">R1#sh ip ospf database router

            OSPF Router with <span class="token function">ID</span> <span class="token punctuation">(</span><span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>Process ID <span class="token number">1</span><span class="token punctuation">)</span>

                Router Link <span class="token function">States</span> <span class="token punctuation">(</span>Area <span class="token number">0</span><span class="token punctuation">)</span>

    LS age<span class="token operator">:</span> <span class="token number">2</span>
    Options<span class="token operator">:</span> <span class="token punctuation">(</span>No TOS<span class="token operator">-</span>capability<span class="token punctuation">,</span> DC<span class="token punctuation">)</span>
    LS Type<span class="token operator">:</span> Router Links
    Link State ID<span class="token operator">:</span> <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span>
    Advertising Router<span class="token operator">:</span> <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span>
    LS Seq Number<span class="token operator">:</span> <span class="token number">80000059</span>
    Checksum<span class="token operator">:</span> <span class="token number">0x814F</span>
    Length<span class="token operator">:</span> <span class="token number">48</span>
    Number of Links<span class="token operator">:</span> <span class="token number">2</span>

    Link connected to<span class="token operator">:</span> a Stub <span class="token function">Network</span>
        <span class="token punctuation">(</span>Link ID<span class="token punctuation">)</span> Network<span class="token operator">/</span>subnet number<span class="token operator">:</span> <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span>
        <span class="token punctuation">(</span>Link Data<span class="token punctuation">)</span> Network Mask<span class="token operator">:</span> <span class="token number">255.255</span><span class="token number">.255</span><span class="token number">.255</span>
        Number of MTID metrics<span class="token operator">:</span> <span class="token number">0</span>
        TOS <span class="token number">0</span> Metrics<span class="token operator">:</span> <span class="token number">1</span>

    Link connected to<span class="token operator">:</span> a Transit <span class="token function">Network</span>
        <span class="token punctuation">(</span>Link ID<span class="token punctuation">)</span> Designated Router address<span class="token operator">:</span> <span class="token number">192.168</span><span class="token number">.12</span><span class="token number">.2</span>
        <span class="token punctuation">(</span>Link Data<span class="token punctuation">)</span> Router Interface address<span class="token operator">:</span> <span class="token number">192.168</span><span class="token number">.12</span><span class="token number">.1</span>
        Number of MTID metrics<span class="token operator">:</span> <span class="token number">0</span>
        TOS <span class="token number">0</span> Metrics<span class="token operator">:</span> <span class="token number">65535</span> <span class="token comment">//注意LDP-IGP同步过程中，度量值变为了最大值65535；</span>


    LS age<span class="token operator">:</span> <span class="token number">3</span>
    Options<span class="token operator">:</span> <span class="token punctuation">(</span>No TOS<span class="token operator">-</span>capability<span class="token punctuation">,</span> DC<span class="token punctuation">)</span>
    LS Type<span class="token operator">:</span> Router Links
    Link State ID<span class="token operator">:</span> <span class="token number">2.2</span><span class="token number">.2</span><span class="token number">.2</span>
    Advertising Router<span class="token operator">:</span> <span class="token number">2.2</span><span class="token number">.2</span><span class="token number">.2</span>
    LS Seq Number<span class="token operator">:</span> <span class="token number">8000004</span>C
    Checksum<span class="token operator">:</span> <span class="token number">0x8B45</span>
    Length<span class="token operator">:</span> <span class="token number">48</span>
    Number of Links<span class="token operator">:</span> <span class="token number">2</span>

    Link connected to<span class="token operator">:</span> a Stub <span class="token function">Network</span>
        <span class="token punctuation">(</span>Link ID<span class="token punctuation">)</span> Network<span class="token operator">/</span>subnet number<span class="token operator">:</span> <span class="token number">2.2</span><span class="token number">.2</span><span class="token number">.2</span>
        <span class="token punctuation">(</span>Link Data<span class="token punctuation">)</span> Network Mask<span class="token operator">:</span> <span class="token number">255.255</span><span class="token number">.255</span><span class="token number">.255</span>
        Number of MTID metrics<span class="token operator">:</span> <span class="token number">0</span>
        TOS <span class="token number">0</span> Metrics<span class="token operator">:</span> <span class="token number">1</span>

    Link connected to<span class="token operator">:</span> a Transit <span class="token function">Network</span>
        <span class="token punctuation">(</span>Link ID<span class="token punctuation">)</span> Designated Router address<span class="token operator">:</span> <span class="token number">192.168</span><span class="token number">.12</span><span class="token number">.2</span>
        <span class="token punctuation">(</span>Link Data<span class="token punctuation">)</span> Router Interface address<span class="token operator">:</span> <span class="token number">192.168</span><span class="token number">.12</span><span class="token number">.2</span>
        Number of MTID metrics<span class="token operator">:</span> <span class="token number">0</span>
        TOS <span class="token number">0</span> Metrics<span class="token operator">:</span> <span class="token number">65535</span><span class="token comment">//注意LDP-IGP同步过程中，度量值变为了最大值65535；</span>
        
R1#
<span class="token operator">*</span>Mar <span class="token number">16</span> <span class="token number">10</span><span class="token operator">:</span><span class="token number">51</span><span class="token operator">:</span><span class="token number">59.543</span><span class="token operator">:</span> LDP<span class="token operator">-</span>SYNC<span class="token operator">:</span> Fa0<span class="token operator">/</span><span class="token number">0</span><span class="token operator">:</span> No session or session has not send initial update<span class="token punctuation">,</span> ignore adj joining event<span class="token punctuation">.</span>
<span class="token operator">*</span>Mar <span class="token number">16</span> <span class="token number">10</span><span class="token operator">:</span><span class="token number">51</span><span class="token operator">:</span><span class="token number">59.547</span><span class="token operator">:</span> <span class="token operator">%</span>LDP<span class="token operator">-</span><span class="token number">5</span><span class="token operator">-</span>NBRCHG<span class="token operator">:</span> LDP Neighbor <span class="token number">2.2</span><span class="token number">.2</span><span class="token number">.2</span><span class="token operator">:</span><span class="token number">0</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> is UP
R1#
<span class="token operator">*</span>Mar <span class="token number">16</span> <span class="token number">10</span><span class="token operator">:</span><span class="token number">51</span><span class="token operator">:</span><span class="token number">59.551</span><span class="token operator">:</span> LDP<span class="token operator">-</span>SYNC<span class="token operator">:</span> Fa0<span class="token operator">/</span><span class="token number">0</span><span class="token operator">:</span> session <span class="token number">2.2</span><span class="token number">.2</span><span class="token number">.2</span><span class="token operator">:</span><span class="token number">0</span> came up<span class="token punctuation">,</span> sync_achieved up
<span class="token comment">//LDP-IGP同步状态UP；</span>
<span class="token operator">*</span>Mar <span class="token number">16</span> <span class="token number">10</span><span class="token operator">:</span><span class="token number">51</span><span class="token operator">:</span><span class="token number">59.555</span><span class="token operator">:</span> LDP<span class="token operator">-</span>SYNC<span class="token operator">:</span> Fa0<span class="token operator">/</span><span class="token number">0</span><span class="token punctuation">,</span> OSPF <span class="token number">1</span><span class="token operator">:</span> notify <span class="token function">status</span> <span class="token punctuation">(</span>required<span class="token punctuation">,</span> achieved<span class="token punctuation">,</span> no delay<span class="token punctuation">,</span> holddown infinite<span class="token punctuation">)</span> internal <span class="token function">status</span> <span class="token punctuation">(</span>achieved<span class="token punctuation">,</span> timer not running<span class="token punctuation">)</span>
<span class="token comment">//LDP-IGP同步完成；</span>
<span class="token operator">*</span>Mar <span class="token number">16</span> <span class="token number">10</span><span class="token operator">:</span><span class="token number">51</span><span class="token operator">:</span><span class="token number">59.555</span><span class="token operator">:</span> OSPF<span class="token operator">-</span><span class="token number">1</span> LSGEN<span class="token operator">:</span> Scheduling rtr LSA <span class="token keyword">for</span> area <span class="token number">0</span>
<span class="token operator">*</span>Mar <span class="token number">16</span> <span class="token number">10</span><span class="token operator">:</span><span class="token number">52</span><span class="token operator">:</span><span class="token number">00.055</span><span class="token operator">:</span> OSPF<span class="token operator">-</span><span class="token number">1</span> LSGEN<span class="token operator">:</span> Rate limit LSA generation <span class="token keyword">for</span> <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span> <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span> <span class="token number">1</span>
R1#
<span class="token operator">*</span>Mar <span class="token number">16</span> <span class="token number">10</span><span class="token operator">:</span><span class="token number">52</span><span class="token operator">:</span><span class="token number">01.335</span><span class="token operator">:</span> OSPF<span class="token operator">-</span><span class="token number">1</span> LSGEN<span class="token operator">:</span> Build router LSA <span class="token keyword">for</span> area <span class="token number">0</span><span class="token punctuation">,</span> router ID <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span><span class="token punctuation">,</span> seq <span class="token number">0x8000005A</span></code></pre>

<pre class="language-c" data-language="c"><code class="language-c">R1#sh ip ospf database router

            OSPF Router with <span class="token function">ID</span> <span class="token punctuation">(</span><span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>Process ID <span class="token number">1</span><span class="token punctuation">)</span>

                Router Link <span class="token function">States</span> <span class="token punctuation">(</span>Area <span class="token number">0</span><span class="token punctuation">)</span>

    LS age<span class="token operator">:</span> <span class="token number">649</span>
    Options<span class="token operator">:</span> <span class="token punctuation">(</span>No TOS<span class="token operator">-</span>capability<span class="token punctuation">,</span> DC<span class="token punctuation">)</span>
    LS Type<span class="token operator">:</span> Router Links
    Link State ID<span class="token operator">:</span> <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span>
    Advertising Router<span class="token operator">:</span> <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span>
    LS Seq Number<span class="token operator">:</span> <span class="token number">8000005</span>A
    Checksum<span class="token operator">:</span> <span class="token number">0x9D31</span>
    Length<span class="token operator">:</span> <span class="token number">48</span>
    Number of Links<span class="token operator">:</span> <span class="token number">2</span>

    Link connected to<span class="token operator">:</span> a Stub <span class="token function">Network</span>
        <span class="token punctuation">(</span>Link ID<span class="token punctuation">)</span> Network<span class="token operator">/</span>subnet number<span class="token operator">:</span> <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span>
        <span class="token punctuation">(</span>Link Data<span class="token punctuation">)</span> Network Mask<span class="token operator">:</span> <span class="token number">255.255</span><span class="token number">.255</span><span class="token number">.255</span>
        Number of MTID metrics<span class="token operator">:</span> <span class="token number">0</span>
        TOS <span class="token number">0</span> Metrics<span class="token operator">:</span> <span class="token number">1</span>

    Link connected to<span class="token operator">:</span> a Transit <span class="token function">Network</span>
        <span class="token punctuation">(</span>Link ID<span class="token punctuation">)</span> Designated Router address<span class="token operator">:</span> <span class="token number">192.168</span><span class="token number">.12</span><span class="token number">.2</span>
        <span class="token punctuation">(</span>Link Data<span class="token punctuation">)</span> Router Interface address<span class="token operator">:</span> <span class="token number">192.168</span><span class="token number">.12</span><span class="token number">.1</span>
        Number of MTID metrics<span class="token operator">:</span> <span class="token number">0</span>
        TOS <span class="token number">0</span> Metrics<span class="token operator">:</span> <span class="token number">1</span><span class="token comment">//注意LDP-IGP同步完成后，度量值恢复到正常的1；</span>


    LS age<span class="token operator">:</span> <span class="token number">650</span>
    Options<span class="token operator">:</span> <span class="token punctuation">(</span>No TOS<span class="token operator">-</span>capability<span class="token punctuation">,</span> DC<span class="token punctuation">)</span>
    LS Type<span class="token operator">:</span> Router Links
    Link State ID<span class="token operator">:</span> <span class="token number">2.2</span><span class="token number">.2</span><span class="token number">.2</span>
    Advertising Router<span class="token operator">:</span> <span class="token number">2.2</span><span class="token number">.2</span><span class="token number">.2</span>
    LS Seq Number<span class="token operator">:</span> <span class="token number">8000004</span>D
    Checksum<span class="token operator">:</span> <span class="token number">0xA727</span>
    Length<span class="token operator">:</span> <span class="token number">48</span>
    Number of Links<span class="token operator">:</span> <span class="token number">2</span>

    Link connected to<span class="token operator">:</span> a Stub <span class="token function">Network</span>
        <span class="token punctuation">(</span>Link ID<span class="token punctuation">)</span> Network<span class="token operator">/</span>subnet number<span class="token operator">:</span> <span class="token number">2.2</span><span class="token number">.2</span><span class="token number">.2</span>
        <span class="token punctuation">(</span>Link Data<span class="token punctuation">)</span> Network Mask<span class="token operator">:</span> <span class="token number">255.255</span><span class="token number">.255</span><span class="token number">.255</span>
        Number of MTID metrics<span class="token operator">:</span> <span class="token number">0</span>
        TOS <span class="token number">0</span> Metrics<span class="token operator">:</span> <span class="token number">1</span>

    Link connected to<span class="token operator">:</span> a Transit <span class="token function">Network</span>
        <span class="token punctuation">(</span>Link ID<span class="token punctuation">)</span> Designated Router address<span class="token operator">:</span> <span class="token number">192.168</span><span class="token number">.12</span><span class="token number">.2</span>
        <span class="token punctuation">(</span>Link Data<span class="token punctuation">)</span> Router Interface address<span class="token operator">:</span> <span class="token number">192.168</span><span class="token number">.12</span><span class="token number">.2</span>
        Number of MTID metrics<span class="token operator">:</span> <span class="token number">0</span>
        TOS <span class="token number">0</span> Metrics<span class="token operator">:</span> <span class="token number">1</span>
<span class="token comment">//注意到，在OSPF邻居已经建立的情况下，OSPF并没有如预期的那样，因为LDP邻居关系的中断破裂（Down），而导致OSPF邻接关系的终端破裂（Down）；</span></code></pre>
<p>查看Wireshark在LDP-IGP收敛过程中捕获的数据包；<br>可以看到，LSA中的Metric和OSPF Database中一致；<br><img src="/2014/MPLS_Lab_3/pic1.png"><br><img src="/2014/MPLS_Lab_3/pic2.png"></p>
<p>继续调试<code>clear ip ospf process</code>：</p>
<pre class="language-c" data-language="c"><code class="language-c">R1#clear ip ospf process 
Reset ALL OSPF processes<span class="token operator">?</span> <span class="token punctuation">[</span>no<span class="token punctuation">]</span><span class="token operator">:</span> yes
R1#
<span class="token operator">*</span>Mar <span class="token number">16</span> <span class="token number">11</span><span class="token operator">:</span><span class="token number">21</span><span class="token operator">:</span><span class="token number">09.559</span><span class="token operator">:</span> OSPF<span class="token operator">-</span><span class="token number">1</span> LSGEN<span class="token operator">:</span> Scheduling rtr LSA <span class="token keyword">for</span> area <span class="token number">0</span>
<span class="token operator">*</span>Mar <span class="token number">16</span> <span class="token number">11</span><span class="token operator">:</span><span class="token number">21</span><span class="token operator">:</span><span class="token number">09.559</span><span class="token operator">:</span> <span class="token operator">%</span>OSPF<span class="token operator">-</span><span class="token number">5</span><span class="token operator">-</span>ADJCHG<span class="token operator">:</span> Process <span class="token number">1</span><span class="token punctuation">,</span> Nbr <span class="token number">2.2</span><span class="token number">.2</span><span class="token number">.2</span> on FastEthernet0<span class="token operator">/</span><span class="token number">0</span> from FULL to DOWN<span class="token punctuation">,</span> Neighbor Down<span class="token operator">:</span> Interface down or detached
<span class="token operator">*</span>Mar <span class="token number">16</span> <span class="token number">11</span><span class="token operator">:</span><span class="token number">21</span><span class="token operator">:</span><span class="token number">09.563</span><span class="token operator">:</span> OSPF<span class="token operator">-</span><span class="token number">1</span> LSGEN<span class="token operator">:</span> Scheduling rtr LSA <span class="token keyword">for</span> area <span class="token number">0</span>
<span class="token operator">*</span>Mar <span class="token number">16</span> <span class="token number">11</span><span class="token operator">:</span><span class="token number">21</span><span class="token operator">:</span><span class="token number">09.563</span><span class="token operator">:</span> OSPF<span class="token operator">-</span><span class="token number">1</span> LSGEN<span class="token operator">:</span> Scheduling network LSA on FastEthernet0<span class="token operator">/</span><span class="token number">0</span>
<span class="token operator">*</span>Mar <span class="token number">16</span> <span class="token number">11</span><span class="token operator">:</span><span class="token number">21</span><span class="token operator">:</span><span class="token number">09.567</span><span class="token operator">:</span> OSPF<span class="token operator">-</span><span class="token number">1</span> LSGEN<span class="token operator">:</span> Scheduling rtr LSA <span class="token keyword">for</span> area <span class="token number">0</span>
<span class="token operator">*</span>Mar <span class="token number">16</span> <span class="token number">11</span><span class="token operator">:</span><span class="token number">21</span><span class="token operator">:</span><span class="token number">09.567</span><span class="token operator">:</span> OSPF<span class="token operator">-</span><span class="token number">1</span> LSGEN<span class="token operator">:</span> Scheduling rtr LSA <span class="token keyword">for</span> area <span class="token number">0</span>
<span class="token operator">*</span>Mar <span class="token number">16</span> <span class="token number">11</span><span class="token operator">:</span><span class="token number">21</span><span class="token operator">:</span><span class="token number">09.571</span><span class="token operator">:</span> OSPF<span class="token operator">-</span><span class="token number">1</span> LSGEN<span class="token operator">:</span> Scheduling rtr LSA <span class="token keyword">for</span> area <span class="token number">0</span>
<span class="token operator">*</span>Mar <span class="token number">16</span> <span class="token number">11</span><span class="token operator">:</span><span class="token number">21</span><span class="token operator">:</span><span class="token number">09.575</span><span class="token operator">:</span> OSPF<span class="token operator">-</span><span class="token number">1</span> LSGEN<span class="token operator">:</span> Scheduling rtr LSA <span class="token keyword">for</span> area <span class="token number">0</span>
<span class="token operator">*</span>Mar <span class="token number">16</span> <span class="token number">11</span><span class="token operator">:</span><span class="token number">21</span><span class="token operator">:</span><span class="token number">09.575</span><span class="token operator">:</span> OSPF<span class="token operator">-</span><span class="token number">1</span> LSGEN<span class="token operator">:</span> Scheduling rtr LSA <span class="token keyword">for</span> area <span class="token number">0</span>
<span class="token operator">*</span>Mar <span class="token number">16</span> <span class="token number">11</span><span class="token operator">:</span><span class="token number">21</span><span class="token operator">:</span><span class="token number">09.603</span><span class="token operator">:</span> OSPF<span class="token operator">-</span><span class="token number">1</span> LSGEN<span class="token operator">:</span> Scheduling rtr LSA <span class="token keyword">for</span> area <span class="token number">0</span>
<span class="token operator">*</span>Mar <span class="token number">16</span> <span class="token number">11</span><span class="token operator">:</span><span class="token number">21</span><span class="token operator">:</span><span class="token number">09.907</span><span class="token operator">:</span> <span class="token operator">%</span>OSPF<span class="token operator">-</span><span class="token number">5</span><span class="token operator">-</span>ADJCHG<span class="token operator">:</span> Process <span class="token number">1</span><span class="token punctuation">,</span> Nbr <span class="token number">2.2</span><span class="token number">.2</span><span class="token number">.2</span> on FastEthernet0<span class="token operator">/</span><span class="token number">0</span> from LOADING to FULL<span class="token punctuation">,</span> Loading Done
R1#
<span class="token operator">*</span>Mar <span class="token number">16</span> <span class="token number">11</span><span class="token operator">:</span><span class="token number">21</span><span class="token operator">:</span><span class="token number">09.911</span><span class="token operator">:</span> OSPF<span class="token operator">-</span><span class="token number">1</span> LSGEN<span class="token operator">:</span> Scheduling rtr LSA <span class="token keyword">for</span> area <span class="token number">0</span>
<span class="token operator">*</span>Mar <span class="token number">16</span> <span class="token number">11</span><span class="token operator">:</span><span class="token number">21</span><span class="token operator">:</span><span class="token number">10.059</span><span class="token operator">:</span> OSPF<span class="token operator">-</span><span class="token number">1</span> LSGEN<span class="token operator">:</span> Build router LSA <span class="token keyword">for</span> area <span class="token number">0</span><span class="token punctuation">,</span> router ID <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span><span class="token punctuation">,</span> seq <span class="token number">0x80000001</span>
R1#
<span class="token operator">*</span>Mar <span class="token number">16</span> <span class="token number">11</span><span class="token operator">:</span><span class="token number">21</span><span class="token operator">:</span><span class="token number">14.591</span><span class="token operator">:</span> OSPF<span class="token operator">-</span><span class="token number">1</span> LSGEN<span class="token operator">:</span> Scheduling rtr LSA <span class="token keyword">for</span> area <span class="token number">0</span>
<span class="token operator">*</span>Mar <span class="token number">16</span> <span class="token number">11</span><span class="token operator">:</span><span class="token number">21</span><span class="token operator">:</span><span class="token number">14.707</span><span class="token operator">:</span> OSPF<span class="token operator">-</span><span class="token number">1</span> LSMAX<span class="token operator">:</span> Rcv Maxage LSA<span class="token punctuation">,</span> Type <span class="token number">1</span><span class="token punctuation">,</span> LSID <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span><span class="token punctuation">,</span> Adv rtr <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span><span class="token punctuation">,</span> age <span class="token number">3600</span><span class="token punctuation">,</span> seq <span class="token number">0x8000005A</span><span class="token punctuation">,</span> from <span class="token number">2.2</span><span class="token number">.2</span><span class="token number">.2</span><span class="token punctuation">,</span> FastEthernet0<span class="token operator">/</span><span class="token number">0</span>
<span class="token operator">*</span>Mar <span class="token number">16</span> <span class="token number">11</span><span class="token operator">:</span><span class="token number">21</span><span class="token operator">:</span><span class="token number">14.707</span><span class="token operator">:</span> OSPF<span class="token operator">-</span><span class="token number">1</span> LSGEN<span class="token operator">:</span> Update router LSA <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span> <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span> <span class="token number">1</span> <span class="token number">8000005</span>A
<span class="token operator">*</span>Mar <span class="token number">16</span> <span class="token number">11</span><span class="token operator">:</span><span class="token number">21</span><span class="token operator">:</span><span class="token number">14.711</span><span class="token operator">:</span> OSPF<span class="token operator">-</span><span class="token number">1</span> LSGEN<span class="token operator">:</span> Rate limit LSA generation <span class="token keyword">for</span> <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span> <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span> <span class="token number">1</span>
<span class="token operator">*</span>Mar <span class="token number">16</span> <span class="token number">11</span><span class="token operator">:</span><span class="token number">21</span><span class="token operator">:</span><span class="token number">15.059</span><span class="token operator">:</span> OSPF<span class="token operator">-</span><span class="token number">1</span> LSGEN<span class="token operator">:</span> Build router LSA <span class="token keyword">for</span> area <span class="token number">0</span><span class="token punctuation">,</span> router ID <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span><span class="token punctuation">,</span> seq <span class="token number">0x8000005B</span>
<span class="token operator">*</span>Mar <span class="token number">16</span> <span class="token number">11</span><span class="token operator">:</span><span class="token number">21</span><span class="token operator">:</span><span class="token number">15.067</span><span class="token operator">:</span> OSPF<span class="token operator">-</span><span class="token number">1</span> LSMAX<span class="token operator">:</span> Rcv Maxage LSA<span class="token punctuation">,</span> Type <span class="token number">1</span><span class="token punctuation">,</span> LSID <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span><span class="token punctuation">,</span> Adv rtr <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span><span class="token punctuation">,</span> age <span class="token number">3600</span><span class="token punctuation">,</span> seq <span class="token number">0x8000005A</span><span class="token punctuation">,</span> from <span class="token number">2.2</span><span class="token number">.2</span><span class="token number">.2</span><span class="token punctuation">,</span> FastEthernet0<span class="token operator">/</span><span class="token number">0</span>
R1#
<span class="token operator">*</span>Mar <span class="token number">16</span> <span class="token number">11</span><span class="token operator">:</span><span class="token number">21</span><span class="token operator">:</span><span class="token number">15.087</span><span class="token operator">:</span> OSPF<span class="token operator">-</span><span class="token number">1</span> LSGEN<span class="token operator">:</span> Rate limit LSA generation <span class="token keyword">for</span> <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span> <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span> <span class="token number">1</span>
R1#
<span class="token operator">*</span>Mar <span class="token number">16</span> <span class="token number">11</span><span class="token operator">:</span><span class="token number">21</span><span class="token operator">:</span><span class="token number">20.059</span><span class="token operator">:</span> OSPF<span class="token operator">-</span><span class="token number">1</span> LSGEN<span class="token operator">:</span> No change in router LSA<span class="token punctuation">,</span> area <span class="token number">0</span>
<span class="token comment">//注意到，由于OSPF收敛迅速，所以LDP没有受到影响，甚至没有出现任何LDP日志信息；</span></code></pre>
<h2 id="调试2："><a href="#调试2：" class="headerlink" title="调试2："></a>调试2：</h2><p>禁用R2上F0&#x2F;0的MPLS，让R1和R2的LDP邻居关系断开，确保LDP会话晚于OSPF邻接关系建立；</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token function">R2</span><span class="token punctuation">(</span>config<span class="token operator">-</span><span class="token keyword">if</span><span class="token punctuation">)</span>#<span class="token keyword">int</span> f0<span class="token operator">/</span><span class="token number">0</span>  
<span class="token function">R2</span><span class="token punctuation">(</span>config<span class="token operator">-</span><span class="token keyword">if</span><span class="token punctuation">)</span>#no mpls ip</code></pre>

<p>在R1上查看OSPF邻接关系；</p>
<pre class="language-c" data-language="c"><code class="language-c">R1#show ip ospf neighbor
Neighbor ID     Pri   State           Dead Time   Address         Interface
<span class="token number">2.2</span><span class="token number">.2</span><span class="token number">.2</span>           <span class="token number">1</span>   FULL<span class="token operator">/</span>DR         <span class="token number">00</span><span class="token operator">:</span><span class="token number">00</span><span class="token operator">:</span><span class="token number">36</span>    <span class="token number">192.168</span><span class="token number">.12</span><span class="token number">.2</span>    FastEthernet0<span class="token operator">/</span><span class="token number">0</span>
<span class="token comment">//注意：可以看到，正如调试1中验证的一样，在OSPF邻接关系已经建立的情况下，终止LDP的邻接关系并不会影响OSPF的邻接关系；</span></code></pre>

<p>此时，在经过将R2的F0&#x2F;0禁用MPLS之后，R1和R2的LDP邻居已经关系；<br>接下来，重置OSPF进程；</p>
<pre class="language-c" data-language="c"><code class="language-c">R1#debug ip ospf adj
OSPF adjacency debugging is on
R1#clear ip ospf process
Reset ALL OSPF processes<span class="token operator">?</span> <span class="token punctuation">[</span>no<span class="token punctuation">]</span><span class="token operator">:</span> yes
R1#
<span class="token operator">*</span>Mar <span class="token number">16</span> <span class="token number">11</span><span class="token operator">:</span><span class="token number">48</span><span class="token operator">:</span><span class="token number">16.419</span><span class="token operator">:</span> OSPF<span class="token operator">-</span><span class="token number">1</span> ADJ   Lo0<span class="token operator">:</span> Interface going Down
<span class="token operator">*</span>Mar <span class="token number">16</span> <span class="token number">11</span><span class="token operator">:</span><span class="token number">48</span><span class="token operator">:</span><span class="token number">16.419</span><span class="token operator">:</span> OSPF<span class="token operator">-</span><span class="token number">1</span> ADJ   Lo0<span class="token operator">:</span> <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span> address <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span> is dead<span class="token punctuation">,</span> state DOWN
<span class="token operator">*</span>Mar <span class="token number">16</span> <span class="token number">11</span><span class="token operator">:</span><span class="token number">48</span><span class="token operator">:</span><span class="token number">16.423</span><span class="token operator">:</span> OSPF<span class="token operator">-</span><span class="token number">1</span> LSGEN<span class="token operator">:</span> Scheduling rtr LSA <span class="token keyword">for</span> area <span class="token number">0</span>
<span class="token operator">*</span>Mar <span class="token number">16</span> <span class="token number">11</span><span class="token operator">:</span><span class="token number">48</span><span class="token operator">:</span><span class="token number">16.423</span><span class="token operator">:</span> OSPF<span class="token operator">-</span><span class="token number">1</span> ADJ   Fa0<span class="token operator">/</span><span class="token number">0</span><span class="token operator">:</span> Interface going Down
<span class="token operator">*</span>Mar <span class="token number">16</span> <span class="token number">11</span><span class="token operator">:</span><span class="token number">48</span><span class="token operator">:</span><span class="token number">16.423</span><span class="token operator">:</span> OSPF<span class="token operator">-</span><span class="token number">1</span> ADJ   Fa0<span class="token operator">/</span><span class="token number">0</span><span class="token operator">:</span> <span class="token number">2.2</span><span class="token number">.2</span><span class="token number">.2</span> address <span class="token number">192.168</span><span class="token number">.12</span><span class="token number">.2</span> is dead<span class="token punctuation">,</span> state DOWN
<span class="token operator">*</span>Mar <span class="token number">16</span> <span class="token number">11</span><span class="token operator">:</span><span class="token number">48</span><span class="token operator">:</span><span class="token number">16.427</span><span class="token operator">:</span> <span class="token operator">%</span>OSPF<span class="token operator">-</span><span class="token number">5</span><span class="token operator">-</span>ADJCHG<span class="token operator">:</span> Process <span class="token number">1</span><span class="token punctuation">,</span> Nbr <span class="token number">2.2</span><span class="token number">.2</span><span class="token number">.2</span> on FastEthernet0<span class="token operator">/</span><span class="token number">0</span> from FULL to DOWN<span class="token punctuation">,</span> Neighbor Down<span class="token operator">:</span> Interface down or detached
<span class="token operator">*</span>Mar <span class="token number">16</span> <span class="token number">11</span><span class="token operator">:</span><span class="token number">48</span><span class="token operator">:</span><span class="token number">16.427</span><span class="token operator">:</span> OSPF<span class="token operator">-</span><span class="token number">1</span> LSGEN<span class="token operator">:</span> Scheduling rtr LSA <span class="token keyword">for</span> area <span class="token number">0</span>
<span class="token operator">*</span>Mar <span class="token number">16</span> <span class="token number">11</span><span class="token operator">:</span><span class="token number">48</span><span class="token operator">:</span><span class="token number">16.431</span><span class="token operator">:</span> OSPF<span class="token operator">-</span><span class="token number">1</span> ADJ   Fa0<span class="token operator">/</span><span class="token number">0</span><span class="token operator">:</span> Neighbor change event
<span class="token operator">*</span>Mar <span class="token number">16</span> <span class="token number">11</span><span class="token operator">:</span><span class="token number">48</span><span class="token operator">:</span><span class="token number">16.431</span><span class="token operator">:</span> OSPF<span class="token operator">-</span><span class="token number">1</span> ADJ   Fa0<span class="token operator">/</span><span class="token number">0</span><span class="token operator">:</span> DR<span class="token operator">/</span>BDR election
<span class="token operator">*</span>Mar <span class="token number">16</span> <span class="token number">11</span><span class="token operator">:</span><span class="token number">48</span><span class="token operator">:</span><span class="token number">16.431</span><span class="token operator">:</span> OSPF<span class="token operator">-</span><span class="token number">1</span> ADJ   Fa0<span class="token operator">/</span><span class="token number">0</span><span class="token operator">:</span> Elect BDR <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span>
<span class="token operator">*</span>Mar <span class="token number">16</span> <span class="token number">11</span><span class="token operator">:</span><span class="token number">48</span><span class="token operator">:</span><span class="token number">16.435</span><span class="token operator">:</span> OSPF<span class="token operator">-</span><span class="token number">1</span> ADJ   Fa0<span class="token operator">/</span><span class="token number">0</span><span class="token operator">:</span> Elect DR <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span>
<span class="token operator">*</span>Mar <span class="token number">16</span> <span class="token number">11</span><span class="token operator">:</span><span class="token number">48</span><span class="token operator">:</span><span class="token number">16.435</span><span class="token operator">:</span> OSPF<span class="token operator">-</span><span class="token number">1</span> ADJ   Fa0<span class="token operator">/</span><span class="token number">0</span><span class="token operator">:</span> Elect BDR <span class="token number">0.0</span><span class="token number">.0</span><span class="token number">.0</span>
<span class="token operator">*</span>Mar <span class="token number">16</span> <span class="token number">11</span><span class="token operator">:</span><span class="token number">48</span><span class="token operator">:</span><span class="token number">16.435</span><span class="token operator">:</span> OSPF<span class="token operator">-</span><span class="token number">1</span> ADJ   Fa0<span class="token operator">/</span><span class="token number">0</span><span class="token operator">:</span> Elect DR <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span>
<span class="token operator">*</span>Mar <span class="token number">16</span> <span class="token number">11</span><span class="token operator">:</span><span class="token number">48</span><span class="token operator">:</span><span class="token number">16.439</span><span class="token operator">:</span> OSPF<span class="token operator">-</span><span class="token number">1</span> ADJ   Fa0<span class="token operator">/</span><span class="token number">0</span><span class="token operator">:</span> DR<span class="token operator">:</span> <span class="token number">1.1</span><span class="token number">.1</span><span class="token punctuation">.</span>
R1#<span class="token number">1</span> <span class="token punctuation">(</span>Id<span class="token punctuation">)</span>   BDR<span class="token operator">:</span> none 
<span class="token operator">*</span>Mar <span class="token number">16</span> <span class="token number">11</span><span class="token operator">:</span><span class="token number">48</span><span class="token operator">:</span><span class="token number">16.439</span><span class="token operator">:</span> OSPF<span class="token operator">-</span><span class="token number">1</span> LSGEN<span class="token operator">:</span> Scheduling network LSA on FastEthernet0<span class="token operator">/</span><span class="token number">0</span>
<span class="token operator">*</span>Mar <span class="token number">16</span> <span class="token number">11</span><span class="token operator">:</span><span class="token number">48</span><span class="token operator">:</span><span class="token number">16.443</span><span class="token operator">:</span> OSPF<span class="token operator">-</span><span class="token number">1</span> ADJ   Fa0<span class="token operator">/</span><span class="token number">0</span><span class="token operator">:</span> Remember old DR <span class="token number">2.2</span><span class="token number">.2</span><span class="token number">.2</span> <span class="token punctuation">(</span>id<span class="token punctuation">)</span>
<span class="token operator">*</span>Mar <span class="token number">16</span> <span class="token number">11</span><span class="token operator">:</span><span class="token number">48</span><span class="token operator">:</span><span class="token number">16.443</span><span class="token operator">:</span> OSPF<span class="token operator">-</span><span class="token number">1</span> LSGEN<span class="token operator">:</span> Scheduling rtr LSA <span class="token keyword">for</span> area <span class="token number">0</span>
<span class="token operator">*</span>Mar <span class="token number">16</span> <span class="token number">11</span><span class="token operator">:</span><span class="token number">48</span><span class="token operator">:</span><span class="token number">16.443</span><span class="token operator">:</span> OSPF<span class="token operator">-</span><span class="token number">1</span> ADJ   Fa0<span class="token operator">/</span><span class="token number">0</span><span class="token operator">:</span> <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span> address <span class="token number">192.168</span><span class="token number">.12</span><span class="token number">.1</span> is dead<span class="token punctuation">,</span> state DOWN
<span class="token operator">*</span>Mar <span class="token number">16</span> <span class="token number">11</span><span class="token operator">:</span><span class="token number">48</span><span class="token operator">:</span><span class="token number">16.447</span><span class="token operator">:</span> OSPF<span class="token operator">-</span><span class="token number">1</span> ADJ   Fa0<span class="token operator">/</span><span class="token number">0</span><span class="token operator">:</span> Neighbor change event
<span class="token operator">*</span>Mar <span class="token number">16</span> <span class="token number">11</span><span class="token operator">:</span><span class="token number">48</span><span class="token operator">:</span><span class="token number">16.447</span><span class="token operator">:</span> OSPF<span class="token operator">-</span><span class="token number">1</span> ADJ   Fa0<span class="token operator">/</span><span class="token number">0</span><span class="token operator">:</span> DR<span class="token operator">/</span>BDR election
<span class="token operator">*</span>Mar <span class="token number">16</span> <span class="token number">11</span><span class="token operator">:</span><span class="token number">48</span><span class="token operator">:</span><span class="token number">16.447</span><span class="token operator">:</span> OSPF<span class="token operator">-</span><span class="token number">1</span> ADJ   Fa0<span class="token operator">/</span><span class="token number">0</span><span class="token operator">:</span> Elect BDR <span class="token number">0.0</span><span class="token number">.0</span><span class="token number">.0</span>
<span class="token operator">*</span>Mar <span class="token number">16</span> <span class="token number">11</span><span class="token operator">:</span><span class="token number">48</span><span class="token operator">:</span><span class="token number">16.451</span><span class="token operator">:</span> OSPF<span class="token operator">-</span><span class="token number">1</span> ADJ   Fa0<span class="token operator">/</span><span class="token number">0</span><span class="token operator">:</span> Elect DR <span class="token number">0.0</span><span class="token number">.0</span><span class="token number">.0</span>
<span class="token operator">*</span>Mar <span class="token number">16</span> <span class="token number">11</span><span class="token operator">:</span><span class="token number">48</span><span class="token operator">:</span><span class="token number">16.451</span><span class="token operator">:</span> OSPF<span class="token operator">-</span><span class="token number">1</span> ADJ   Fa0<span class="token operator">/</span><span class="token number">0</span><span class="token operator">:</span> Elect BDR <span class="token number">0.0</span><span class="token number">.0</span><span class="token number">.0</span>
<span class="token operator">*</span>Mar <span class="token number">16</span> <span class="token number">11</span><span class="token operator">:</span><span class="token number">48</span><span class="token operator">:</span><span class="token number">16.451</span><span class="token operator">:</span> OSPF<span class="token operator">-</span><span class="token number">1</span> ADJ   Fa0<span class="token operator">/</span><span class="token number">0</span><span class="token operator">:</span> Elect DR <span class="token number">0.0</span><span class="token number">.0</span><span class="token number">.0</span>
<span class="token operator">*</span>Mar <span class="token number">16</span> <span class="token number">11</span><span class="token operator">:</span><span class="token number">48</span><span class="token operator">:</span><span class="token number">16.455</span><span class="token operator">:</span> OSPF<span class="token operator">-</span><span class="token number">1</span> ADJ   Fa0<span class="token operator">/</span><span class="token number">0</span><span class="token operator">:</span> DR<span class="token operator">:</span> none    BDR<span class="token operator">:</span> none 
<span class="token operator">*</span>Mar <span class="token number">16</span> <span class="token number">11</span><span class="token operator">:</span><span class="token number">48</span><span class="token operator">:</span><span class="token number">16.455</span><span class="token operator">:</span> OSPF<span class="token operator">-</span><span class="token number">1</span> ADJ   Fa0<span class="token operator">/</span><span class="token number">0</span><span class="token operator">:</span> Flush network LSA immediately
<span class="token operator">*</span>Mar <span class="token number">16</span> <span class="token number">11</span><span class="token operator">:</span><span class="token number">48</span><span class="token operator">:</span><span class="token number">16.459</span><span class="token operator">:</span> OSPF<span class="token operator">-</span><span class="token number">1</span> ADJ   Fa0<span class="token operator">/</span><span class="token number">0</span><span class="token operator">:</span> Remember old DR <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span> <span class="token punctuation">(</span>id<span class="token punctuation">)</span>
<span class="token operator">*</span>Mar <span class="token number">16</span> <span class="token number">11</span><span class="token operator">:</span><span class="token number">48</span><span class="token operator">:</span><span class="token number">16.459</span><span class="token operator">:</span> OSPF<span class="token operator">-</span><span class="token number">1</span> LSGEN<span class="token operator">:</span> Scheduling rtr LSA <span class="token keyword">for</span> area <span class="token number">0</span>
<span class="token operator">*</span>Mar <span class="token number">16</span> <span class="token number">11</span><span class="token operator">:</span><span class="token number">48</span><span class="token operator">:</span><span class="token number">16.459</span><span class="token operator">:</span> OS
R1#PF<span class="token operator">-</span><span class="token number">1</span> LSGEN<span class="token operator">:</span> Scheduling rtr LSA <span class="token keyword">for</span> area <span class="token number">0</span>
<span class="token operator">*</span>Mar <span class="token number">16</span> <span class="token number">11</span><span class="token operator">:</span><span class="token number">48</span><span class="token operator">:</span><span class="token number">16.467</span><span class="token operator">:</span> OSPF<span class="token operator">-</span><span class="token number">1</span> ADJ   Lo0<span class="token operator">:</span> Interface going Up
<span class="token operator">*</span>Mar <span class="token number">16</span> <span class="token number">11</span><span class="token operator">:</span><span class="token number">48</span><span class="token operator">:</span><span class="token number">16.467</span><span class="token operator">:</span> OSPF<span class="token operator">-</span><span class="token number">1</span> LSGEN<span class="token operator">:</span> Scheduling rtr LSA <span class="token keyword">for</span> area <span class="token number">0</span>
<span class="token operator">*</span>Mar <span class="token number">16</span> <span class="token number">11</span><span class="token operator">:</span><span class="token number">48</span><span class="token operator">:</span><span class="token number">16.467</span><span class="token operator">:</span> OSPF<span class="token operator">-</span><span class="token number">1</span> ADJ   Fa0<span class="token operator">/</span><span class="token number">1</span><span class="token operator">:</span> Not sending Hellos until LDP session comes up<span class="token punctuation">,</span> FastEthernet0<span class="token operator">/</span><span class="token number">1</span> remains down
<span class="token operator">*</span>Mar <span class="token number">16</span> <span class="token number">11</span><span class="token operator">:</span><span class="token number">48</span><span class="token operator">:</span><span class="token number">16.471</span><span class="token operator">:</span> OSPF<span class="token operator">-</span><span class="token number">1</span> ADJ   Fa0<span class="token operator">/</span><span class="token number">0</span><span class="token operator">:</span> Not sending Hellos until LDP session comes up<span class="token punctuation">,</span> FastEthernet0<span class="token operator">/</span><span class="token number">0</span> remains down
<span class="token comment">//直到LDP会话建立，否则OSPF不发送Hello消息，F0/0口保持DOWN；</span>
<span class="token operator">*</span>Mar <span class="token number">16</span> <span class="token number">11</span><span class="token operator">:</span><span class="token number">48</span><span class="token operator">:</span><span class="token number">16.927</span><span class="token operator">:</span> OSPF<span class="token operator">-</span><span class="token number">1</span> LSGEN<span class="token operator">:</span> Build router LSA <span class="token keyword">for</span> area <span class="token number">0</span><span class="token punctuation">,</span> router ID <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span><span class="token punctuation">,</span> seq <span class="token number">0x80000001</span>
<span class="token operator">*</span>Mar <span class="token number">16</span> <span class="token number">11</span><span class="token operator">:</span><span class="token number">48</span><span class="token operator">:</span><span class="token number">16.943</span><span class="token operator">:</span> OSPF<span class="token operator">-</span><span class="token number">1</span> ADJ   Fa0<span class="token operator">/</span><span class="token number">0</span><span class="token operator">:</span> We are not DR to build Net LSA
<span class="token operator">*</span>Mar <span class="token number">16</span> <span class="token number">11</span><span class="token operator">:</span><span class="token number">48</span><span class="token operator">:</span><span class="token number">17.611</span><span class="token operator">:</span> OSPF<span class="token operator">-</span><span class="token number">1</span> ADJ   Fa0<span class="token operator">/</span><span class="token number">0</span><span class="token operator">:</span> Interface held DOWN waiting <span class="token keyword">for</span> LDP<span class="token comment">//为了等待LDP会话建立，OSPF保持接口为DOWN；</span>
R1#
<span class="token operator">*</span>Mar <span class="token number">16</span> <span class="token number">11</span><span class="token operator">:</span><span class="token number">48</span><span class="token operator">:</span><span class="token number">18.923</span><span class="token operator">:</span> OSPF<span class="token operator">-</span><span class="token number">1</span> ADJ   Fa0<span class="token operator">/</span><span class="token number">0</span><span class="token operator">:</span> Rcv pkt  src <span class="token number">192.168</span><span class="token number">.12</span><span class="token number">.2</span> dst <span class="token number">224.0</span><span class="token number">.0</span><span class="token number">.5</span> id <span class="token number">2.2</span><span class="token number">.2</span><span class="token number">.2</span> type <span class="token number">5</span> if_state <span class="token number">0</span> <span class="token operator">:</span> ignored due to unknown neighbor
R1#
<span class="token operator">*</span>Mar <span class="token number">16</span> <span class="token number">11</span><span class="token operator">:</span><span class="token number">48</span><span class="token operator">:</span><span class="token number">27.611</span><span class="token operator">:</span> OSPF<span class="token operator">-</span><span class="token number">1</span> ADJ   Fa0<span class="token operator">/</span><span class="token number">0</span><span class="token operator">:</span> Interface held DOWN waiting <span class="token keyword">for</span> LDP
R1#
<span class="token operator">*</span>Mar <span class="token number">16</span> <span class="token number">11</span><span class="token operator">:</span><span class="token number">48</span><span class="token operator">:</span><span class="token number">37.611</span><span class="token operator">:</span> OSPF<span class="token operator">-</span><span class="token number">1</span> ADJ   Fa0<span class="token operator">/</span><span class="token number">0</span><span class="token operator">:</span> Interface held DOWN waiting <span class="token keyword">for</span> LDP
R1#
<span class="token operator">*</span>Mar <span class="token number">16</span> <span class="token number">11</span><span class="token operator">:</span><span class="token number">48</span><span class="token operator">:</span><span class="token number">47.611</span><span class="token operator">:</span> OSPF<span class="token operator">-</span><span class="token number">1</span> ADJ   Fa0<span class="token operator">/</span><span class="token number">0</span><span class="token operator">:</span> Interface held DOWN waiting <span class="token keyword">for</span> LDP<span class="token comment">//为了等待LDP会话建立，OSPF保持接口为DOWN；</span>
<span class="token comment">//可以看到LDP-IGP同步机制开始运作了！</span>
<span class="token comment">//注意：由于LDP会话关系建立在OSPF提供可达性的基础上，而OSPF邻接关系却要等待LDP会话首先建立，</span>
<span class="token comment">//所以此时OSPF和LDP会互相等待对方完成邻居关系的建立，而导致死循环，最终无论是OSPF还是LDP都无法建立邻居关系；</span></code></pre>

<p>查看OSPF接口F0&#x2F;0的信息：</p>
<pre class="language-c" data-language="c"><code class="language-c">R1#show ip ospf interface f0<span class="token operator">/</span><span class="token number">0</span>
FastEthernet0<span class="token operator">/</span><span class="token number">0</span> is up<span class="token punctuation">,</span> line protocol is up 
    Internet Address <span class="token number">192.168</span><span class="token number">.12</span><span class="token number">.1</span><span class="token operator">/</span><span class="token number">24</span><span class="token punctuation">,</span> Area <span class="token number">0</span><span class="token punctuation">,</span> Attached via Interface Enable
    Process ID <span class="token number">1</span><span class="token punctuation">,</span> Router ID <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span><span class="token punctuation">,</span> Network Type BROADCAST<span class="token punctuation">,</span> Cost<span class="token operator">:</span> <span class="token number">1</span>
    Topology<span class="token operator">-</span>MTID    Cost    Disabled    Shutdown      Topology Name
        <span class="token number">0</span>           <span class="token number">1</span>         no          no            Base
    Enabled by interface config<span class="token punctuation">,</span> including secondary ip addresses
    Transmit Delay is <span class="token number">1</span> sec<span class="token punctuation">,</span> State <span class="token function">DOWN</span> <span class="token punctuation">(</span>waiting <span class="token keyword">for</span> LDP<span class="token punctuation">)</span><span class="token punctuation">,</span> Priority <span class="token number">1</span>
    No designated router on this network
    No backup designated router on this network
    Timer intervals configured<span class="token punctuation">,</span> Hello <span class="token number">10</span><span class="token punctuation">,</span> Dead <span class="token number">40</span><span class="token punctuation">,</span> Wait <span class="token number">40</span><span class="token punctuation">,</span> Retransmit <span class="token number">5</span>
    oob<span class="token operator">-</span>resync timeout <span class="token number">40</span></code></pre>

<p>配置命令<code>mpls ldp igp sync holddown msecs</code>，以告知 IGP 只等待配置命令中所规定的时间，一旦保持计时器超时，不管 LDP 会话是否建立，OSPF 都会建立邻接关系；</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>#mpls ldp igp sync holddown <span class="token operator">?</span>
    <span class="token operator">&lt;</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">2147483647</span><span class="token operator">></span>  Hold down time in milliseconds
<span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>#mpls ldp igp sync holddown <span class="token number">5000</span>
<span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>#
<span class="token operator">*</span>Mar <span class="token number">16</span> <span class="token number">12</span><span class="token operator">:</span><span class="token number">11</span><span class="token operator">:</span><span class="token number">01.743</span><span class="token operator">:</span> LDP<span class="token operator">-</span>SYNC<span class="token operator">:</span> Fa0<span class="token operator">/</span><span class="token number">0</span><span class="token punctuation">,</span> OSPF <span class="token number">1</span><span class="token operator">:</span> notify <span class="token function">status</span> <span class="token punctuation">(</span>required<span class="token punctuation">,</span> not achieved<span class="token punctuation">,</span> delay<span class="token punctuation">,</span> holddown <span class="token number">5000</span><span class="token punctuation">)</span> internal <span class="token function">status</span> <span class="token punctuation">(</span>not achieved<span class="token punctuation">,</span> timer not running<span class="token punctuation">)</span>
<span class="token operator">*</span>Mar <span class="token number">16</span> <span class="token number">12</span><span class="token operator">:</span><span class="token number">11</span><span class="token operator">:</span><span class="token number">01.743</span><span class="token operator">:</span> OSPF<span class="token operator">-</span><span class="token number">1</span> ADJ   Fa0<span class="token operator">/</span><span class="token number">0</span><span class="token operator">:</span> Rcv <span class="token keyword">int</span> status from LDP<span class="token operator">:</span> <span class="token number">1</span> <span class="token number">0</span> <span class="token number">1</span> <span class="token number">5000</span>
<span class="token operator">*</span>Mar <span class="token number">16</span> <span class="token number">12</span><span class="token operator">:</span><span class="token number">11</span><span class="token operator">:</span><span class="token number">01.747</span><span class="token operator">:</span> LDP<span class="token operator">-</span>SYNC<span class="token operator">:</span> Fa0<span class="token operator">/</span><span class="token number">1</span><span class="token punctuation">,</span> OSPF <span class="token number">1</span><span class="token operator">:</span> notify <span class="token function">status</span> <span class="token punctuation">(</span>required<span class="token punctuation">,</span> not achieved<span class="token punctuation">,</span> delay<span class="token punctuation">,</span> holddown <span class="token number">5000</span><span class="token punctuation">)</span> internal <span class="token function">status</span> <span class="token punctuation">(</span>not achieved<span class="token punctuation">,</span> timer not running<span class="token punctuation">)</span>
<span class="token operator">*</span>Mar <span class="token number">16</span> <span class="token number">12</span><span class="token operator">:</span><span class="token number">11</span><span class="token operator">:</span><span class="token number">01.747</span><span class="token operator">:</span> OSPF<span class="token operator">-</span><span class="token number">1</span> ADJ   Fa0<span class="token operator">/</span><span class="token number">1</span><span class="token operator">:</span> Rcv <span class="token keyword">int</span> status from LDP<span class="token operator">:</span> <span class="token number">1</span> <span class="token number">0</span> <span class="token number">1</span> <span class="token number">5000</span>
<span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>#
<span class="token operator">*</span>Mar <span class="token number">16</span> <span class="token number">12</span><span class="token operator">:</span><span class="token number">11</span><span class="token operator">:</span><span class="token number">06.743</span><span class="token operator">:</span> OSPF<span class="token operator">-</span><span class="token number">1</span> ADJ   Fa0<span class="token operator">/</span><span class="token number">0</span><span class="token operator">:</span> Interface going Up
<span class="token operator">*</span>Mar <span class="token number">16</span> <span class="token number">12</span><span class="token operator">:</span><span class="token number">11</span><span class="token operator">:</span><span class="token number">06.743</span><span class="token operator">:</span> OSPF<span class="token operator">-</span><span class="token number">1</span> LSGEN<span class="token operator">:</span> Scheduling rtr LSA <span class="token keyword">for</span> area <span class="token number">0</span>
<span class="token operator">*</span>Mar <span class="token number">16</span> <span class="token number">12</span><span class="token operator">:</span><span class="token number">11</span><span class="token operator">:</span><span class="token number">06.747</span><span class="token operator">:</span> OSPF<span class="token operator">-</span><span class="token number">1</span> ADJ   Fa0<span class="token operator">/</span><span class="token number">1</span><span class="token operator">:</span> Interface is down
<span class="token operator">*</span>Mar <span class="token number">16</span> <span class="token number">12</span><span class="token operator">:</span><span class="token number">11</span><span class="token operator">:</span><span class="token number">06.831</span><span class="token operator">:</span> OSPF<span class="token operator">-</span><span class="token number">1</span> ADJ   Fa0<span class="token operator">/</span><span class="token number">0</span><span class="token operator">:</span> <span class="token number">2</span> Way Communication to <span class="token number">2.2</span><span class="token number">.2</span><span class="token number">.2</span><span class="token punctuation">,</span> state <span class="token number">2</span>WAY
<span class="token operator">*</span>Mar <span class="token number">16</span> <span class="token number">12</span><span class="token operator">:</span><span class="token number">11</span><span class="token operator">:</span><span class="token number">06.831</span><span class="token operator">:</span> OSPF<span class="token operator">-</span><span class="token number">1</span> ADJ   Fa0<span class="token operator">/</span><span class="token number">0</span><span class="token operator">:</span> Backup seen event before WAIT timer
<span class="token operator">*</span>Mar <span class="token number">16</span> <span class="token number">12</span><span class="token operator">:</span><span class="token number">11</span><span class="token operator">:</span><span class="token number">06.831</span><span class="token operator">:</span> OSPF<span class="token operator">-</span><span class="token number">1</span> ADJ   Fa0<span class="token operator">/</span><span class="token number">0</span><span class="token operator">:</span> DR<span class="token operator">/</span>BDR election
<span class="token operator">*</span>Mar <span class="token number">16</span> <span class="token number">12</span><span class="token operator">:</span><span class="token number">11</span><span class="token operator">:</span><span class="token number">06.835</span><span class="token operator">:</span> OSPF<span class="token operator">-</span><span class="token number">1</span> ADJ   Fa0<span class="token operator">/</span><span class="token number">0</span><span class="token operator">:</span> Elect BDR <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span>
<span class="token operator">*</span>Mar <span class="token number">16</span> <span class="token number">12</span><span class="token operator">:</span><span class="token number">11</span><span class="token operator">:</span><span class="token number">06.835</span><span class="token operator">:</span> OSPF<span class="token operator">-</span><span class="token number">1</span> ADJ   Fa0<span class="token operator">/</span><span class="token number">0</span><span class="token operator">:</span> Elect DR <span class="token number">2.2</span><span class="token number">.2</span><span class="token number">.2</span>
<span class="token operator">*</span>Mar <span class="token number">16</span> <span class="token number">12</span><span class="token operator">:</span><span class="token number">11</span><span class="token operator">:</span><span class="token number">06.839</span><span class="token operator">:</span> OSPF<span class="token operator">-</span><span class="token number">1</span> ADJ   Fa0<span class="token operator">/</span><span class="token number">0</span><span class="token operator">:</span> Elect BDR <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span>
<span class="token operator">*</span>Mar <span class="token number">16</span> <span class="token number">12</span><span class="token operator">:</span><span class="token number">11</span><span class="token operator">:</span><span class="token number">06.839</span><span class="token operator">:</span> OSPF<span class="token operator">-</span><span class="token number">1</span> ADJ   Fa0<span class="token operator">/</span><span class="token number">0</span><span class="token operator">:</span> Elect DR <span class="token number">2.2</span><span class="token number">.2</span><span class="token number">.2</span>
<span class="token operator">*</span>Mar <span class="token number">16</span> <span class="token number">12</span><span class="token operator">:</span><span class="token number">11</span><span class="token operator">:</span><span class="token number">06.839</span><span class="token operator">:</span> OSPF<span class="token operator">-</span><span class="token number">1</span> ADJ   Fa0<span class="token operator">/</span><span class="token number">0</span><span class="token operator">:</span> DR<span class="token operator">:</span> <span class="token number">2.2</span><span class="token number">.2</span><span class="token number">.2</span> <span class="token punctuation">(</span>Id<span class="token punctuation">)</span>   BDR<span class="token operator">:</span> <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span> <span class="token punctuation">(</span>Id<span class="token punctuation">)</span>
<span class="token operator">*</span>Mar <span class="token number">16</span> <span class="token number">12</span><span class="token operator">:</span><span class="token number">11</span><span class="token operator">:</span><span class="token number">06.843</span><span class="token operator">:</span> OSPF<span class="token operator">-</span><span class="token number">1</span> ADJ   Fa0<span class="token operator">/</span><span class="token number">0</span><span class="token operator">:</span> Nbr <span class="token number">2.2</span><span class="token number">.2</span><span class="token number">.2</span><span class="token operator">:</span> Prepare dbase exchange
<span class="token operator">*</span>Mar <span class="token number">16</span> <span class="token number">12</span><span class="token operator">:</span><span class="token number">11</span><span class="token operator">:</span><span class="token number">06.847</span><span class="token operator">:</span> OSPF<span class="token operator">-</span><span class="token number">1</span> ADJ   Fa0<span class="token operator">/</span><span class="token number">0</span><span class="token operator">:</span> Send DBD to <span class="token number">2.2</span><span class="token number">.2</span><span class="token number">.2</span> seq <span class="token number">0x2542</span> opt <span class="token number">0x52</span> flag <span class="token number">0x7</span> len <span class="token number">32</span>
<span class="token operator">*</span>Mar <span class="token number">16</span> <span class="token number">12</span><span class="token operator">:</span><span class="token number">11</span><span class="token operator">:</span><span class="token number">06.847</span><span class="token operator">:</span> OSPF<span class="token operator">-</span><span class="token number">1</span> LSGEN<span class="token operator">:</span> Scheduling rtr LSA <span class="token keyword">for</span> area <span class="token number">0</span>
<span class="token operator">*</span>Mar <span class="token number">16</span> <span class="token number">12</span><span class="token operator">:</span><span class="token number">11</span><span class="token operator">:</span><span class="token number">06</span>
<span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>#<span class="token number">.891</span><span class="token operator">:</span> OSPF<span class="token operator">-</span><span class="token number">1</span> ADJ   Fa0<span class="token operator">/</span><span class="token number">0</span><span class="token operator">:</span> Rcv DBD from <span class="token number">2.2</span><span class="token number">.2</span><span class="token number">.2</span> seq <span class="token number">0x1A5A</span> opt <span class="token number">0x52</span> flag <span class="token number">0x7</span> len <span class="token number">32</span>  mtu <span class="token number">1500</span> state EXSTART
<span class="token operator">*</span>Mar <span class="token number">16</span> <span class="token number">12</span><span class="token operator">:</span><span class="token number">11</span><span class="token operator">:</span><span class="token number">06.891</span><span class="token operator">:</span> OSPF<span class="token operator">-</span><span class="token number">1</span> ADJ   Fa0<span class="token operator">/</span><span class="token number">0</span><span class="token operator">:</span> NBR Negotiation Done<span class="token punctuation">.</span> We are the SLAVE
<span class="token operator">*</span>Mar <span class="token number">16</span> <span class="token number">12</span><span class="token operator">:</span><span class="token number">11</span><span class="token operator">:</span><span class="token number">06.895</span><span class="token operator">:</span> OSPF<span class="token operator">-</span><span class="token number">1</span> ADJ   Fa0<span class="token operator">/</span><span class="token number">0</span><span class="token operator">:</span> Nbr <span class="token number">2.2</span><span class="token number">.2</span><span class="token number">.2</span><span class="token operator">:</span> Summary list built<span class="token punctuation">,</span> size <span class="token number">1</span>
<span class="token operator">*</span>Mar <span class="token number">16</span> <span class="token number">12</span><span class="token operator">:</span><span class="token number">11</span><span class="token operator">:</span><span class="token number">06.895</span><span class="token operator">:</span> OSPF<span class="token operator">-</span><span class="token number">1</span> ADJ   Fa0<span class="token operator">/</span><span class="token number">0</span><span class="token operator">:</span> Send DBD to <span class="token number">2.2</span><span class="token number">.2</span><span class="token number">.2</span> seq <span class="token number">0x1A5A</span> opt <span class="token number">0x52</span> flag <span class="token number">0x2</span> len <span class="token number">52</span>
<span class="token operator">*</span>Mar <span class="token number">16</span> <span class="token number">12</span><span class="token operator">:</span><span class="token number">11</span><span class="token operator">:</span><span class="token number">06.963</span><span class="token operator">:</span> OSPF<span class="token operator">-</span><span class="token number">1</span> ADJ   Fa0<span class="token operator">/</span><span class="token number">0</span><span class="token operator">:</span> Rcv DBD from <span class="token number">2.2</span><span class="token number">.2</span><span class="token number">.2</span> seq <span class="token number">0x1A5B</span> opt <span class="token number">0x52</span> flag <span class="token number">0x1</span> len <span class="token number">52</span>  mtu <span class="token number">1500</span> state EXCHANGE
<span class="token operator">*</span>Mar <span class="token number">16</span> <span class="token number">12</span><span class="token operator">:</span><span class="token number">11</span><span class="token operator">:</span><span class="token number">06.967</span><span class="token operator">:</span> OSPF<span class="token operator">-</span><span class="token number">1</span> ADJ   Fa0<span class="token operator">/</span><span class="token number">0</span><span class="token operator">:</span> Exchange Done with <span class="token number">2.2</span><span class="token number">.2</span><span class="token number">.2</span>
<span class="token operator">*</span>Mar <span class="token number">16</span> <span class="token number">12</span><span class="token operator">:</span><span class="token number">11</span><span class="token operator">:</span><span class="token number">06.967</span><span class="token operator">:</span> OSPF<span class="token operator">-</span><span class="token number">1</span> ADJ   Fa0<span class="token operator">/</span><span class="token number">0</span><span class="token operator">:</span> Send LS REQ to <span class="token number">2.2</span><span class="token number">.2</span><span class="token number">.2</span> length <span class="token number">12</span> LSA count <span class="token number">1</span>
<span class="token operator">*</span>Mar <span class="token number">16</span> <span class="token number">12</span><span class="token operator">:</span><span class="token number">11</span><span class="token operator">:</span><span class="token number">06.967</span><span class="token operator">:</span> OSPF<span class="token operator">-</span><span class="token number">1</span> ADJ   Fa0<span class="token operator">/</span><span class="token number">0</span><span class="token operator">:</span> Send DBD to <span class="token number">2.2</span><span class="token number">.2</span><span class="token number">.2</span> seq <span class="token number">0x1A5B</span> opt <span class="token number">0x52</span> flag <span class="token number">0x0</span> len <span class="token number">32</span>
<span class="token operator">*</span>Mar <span class="token number">16</span> <span class="token number">12</span><span class="token operator">:</span><span class="token number">11</span><span class="token operator">:</span><span class="token number">07.039</span><span class="token operator">:</span> OSPF<span class="token operator">-</span><span class="token number">1</span> ADJ   Fa0<span class="token operator">/</span><span class="token number">0</span><span class="token operator">:</span> Rcv LS UPD from <span class="token number">2.2</span><span class="token number">.2</span><span class="token number">.2</span> length <span class="token number">76</span> LSA count <span class="token number">1</span>
<span class="token operator">*</span>Mar <span class="token number">16</span> <span class="token number">12</span><span class="token operator">:</span><span class="token number">11</span><span class="token operator">:</span><span class="token number">07.039</span><span class="token operator">:</span> OSPF<span class="token operator">-</span><span class="token number">1</span> ADJ   Fa0<span class="token operator">/</span><span class="token number">0</span><span class="token operator">:</span> Synchronized with <span class="token number">2.2</span><span class="token number">.2</span><span class="token number">.2</span><span class="token punctuation">,</span> state FULL
<span class="token operator">*</span>Mar <span class="token number">16</span> <span class="token number">12</span><span class="token operator">:</span><span class="token number">11</span><span class="token operator">:</span><span class="token number">07.043</span><span class="token operator">:</span> <span class="token operator">%</span>OSPF<span class="token operator">-</span><span class="token number">5</span><span class="token operator">-</span>ADJCHG<span class="token operator">:</span> Process <span class="token number">1</span><span class="token punctuation">,</span> Nbr <span class="token number">2.2</span><span class="token number">.2</span><span class="token number">.2</span> on FastEtherne
<span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>#t0<span class="token operator">/</span><span class="token number">0</span> from LOADING to FULL<span class="token punctuation">,</span> Loading Done
<span class="token operator">*</span>Mar <span class="token number">16</span> <span class="token number">12</span><span class="token operator">:</span><span class="token number">11</span><span class="token operator">:</span><span class="token number">07.043</span><span class="token operator">:</span> OSPF<span class="token operator">-</span><span class="token number">1</span> LSGEN<span class="token operator">:</span> Scheduling rtr LSA <span class="token keyword">for</span> area <span class="token number">0</span>
<span class="token operator">*</span>Mar <span class="token number">16</span> <span class="token number">12</span><span class="token operator">:</span><span class="token number">11</span><span class="token operator">:</span><span class="token number">07.047</span><span class="token operator">:</span> OSPF<span class="token operator">-</span><span class="token number">1</span> ADJ   Fa0<span class="token operator">/</span><span class="token number">0</span><span class="token operator">:</span> Rcv LS REQ from <span class="token number">2.2</span><span class="token number">.2</span><span class="token number">.2</span> length <span class="token number">36</span> LSA count <span class="token number">1</span>
<span class="token operator">*</span>Mar <span class="token number">16</span> <span class="token number">12</span><span class="token operator">:</span><span class="token number">11</span><span class="token operator">:</span><span class="token number">07.243</span><span class="token operator">:</span> OSPF<span class="token operator">-</span><span class="token number">1</span> LSGEN<span class="token operator">:</span> Build router LSA <span class="token keyword">for</span> area <span class="token number">0</span><span class="token punctuation">,</span> router ID <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span><span class="token punctuation">,</span> seq <span class="token number">0x80000002</span> <span class="token comment">//注意此LSA的序列号；</span>
<span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>#
<span class="token operator">*</span>Mar <span class="token number">16</span> <span class="token number">12</span><span class="token operator">:</span><span class="token number">11</span><span class="token operator">:</span><span class="token number">09.979</span><span class="token operator">:</span> OSPF<span class="token operator">-</span><span class="token number">1</span> ADJ   Fa0<span class="token operator">/</span><span class="token number">0</span><span class="token operator">:</span> Neighbor change event
<span class="token operator">*</span>Mar <span class="token number">16</span> <span class="token number">12</span><span class="token operator">:</span><span class="token number">11</span><span class="token operator">:</span><span class="token number">09.983</span><span class="token operator">:</span> OSPF<span class="token operator">-</span><span class="token number">1</span> ADJ   Fa0<span class="token operator">/</span><span class="token number">0</span><span class="token operator">:</span> DR<span class="token operator">/</span>BDR election
<span class="token operator">*</span>Mar <span class="token number">16</span> <span class="token number">12</span><span class="token operator">:</span><span class="token number">11</span><span class="token operator">:</span><span class="token number">09.983</span><span class="token operator">:</span> OSPF<span class="token operator">-</span><span class="token number">1</span> ADJ   Fa0<span class="token operator">/</span><span class="token number">0</span><span class="token operator">:</span> Elect BDR <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span>
<span class="token operator">*</span>Mar <span class="token number">16</span> <span class="token number">12</span><span class="token operator">:</span><span class="token number">11</span><span class="token operator">:</span><span class="token number">09.987</span><span class="token operator">:</span> OSPF<span class="token operator">-</span><span class="token number">1</span> ADJ   Fa0<span class="token operator">/</span><span class="token number">0</span><span class="token operator">:</span> Elect DR <span class="token number">2.2</span><span class="token number">.2</span><span class="token number">.2</span>
<span class="token operator">*</span>Mar <span class="token number">16</span> <span class="token number">12</span><span class="token operator">:</span><span class="token number">11</span><span class="token operator">:</span><span class="token number">09.987</span><span class="token operator">:</span> OSPF<span class="token operator">-</span><span class="token number">1</span> ADJ   Fa0<span class="token operator">/</span><span class="token number">0</span><span class="token operator">:</span> DR<span class="token operator">:</span> <span class="token number">2.2</span><span class="token number">.2</span><span class="token number">.2</span> <span class="token punctuation">(</span>Id<span class="token punctuation">)</span>   BDR<span class="token operator">:</span> <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span> <span class="token punctuation">(</span>Id<span class="token punctuation">)</span>
<span class="token operator">*</span>Mar <span class="token number">16</span> <span class="token number">12</span><span class="token operator">:</span><span class="token number">11</span><span class="token operator">:</span><span class="token number">09.991</span><span class="token operator">:</span> OSPF<span class="token operator">-</span><span class="token number">1</span> LSGEN<span class="token operator">:</span> Scheduling rtr LSA <span class="token keyword">for</span> area <span class="token number">0</span>
<span class="token operator">*</span>Mar <span class="token number">16</span> <span class="token number">12</span><span class="token operator">:</span><span class="token number">11</span><span class="token operator">:</span><span class="token number">10.491</span><span class="token operator">:</span> OSPF<span class="token operator">-</span><span class="token number">1</span> LSGEN<span class="token operator">:</span> Rate limit LSA generation <span class="token keyword">for</span> <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span> <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span> <span class="token number">1</span>
<span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>#
<span class="token operator">*</span>Mar <span class="token number">16</span> <span class="token number">12</span><span class="token operator">:</span><span class="token number">11</span><span class="token operator">:</span><span class="token number">12.243</span><span class="token operator">:</span> OSPF<span class="token operator">-</span><span class="token number">1</span> LSGEN<span class="token operator">:</span> No change in router LSA<span class="token punctuation">,</span> area <span class="token number">0</span> 
<span class="token comment">//当holdtime超时后，虽然LDP会话还没有建立，OSPF却主动建立了邻接关系；</span></code></pre>

<p>查看R1的OSPF Database中1类LSA；</p>
<pre class="language-c" data-language="c"><code class="language-c">R1#show ip ospf database router

            OSPF Router with <span class="token function">ID</span> <span class="token punctuation">(</span><span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>Process ID <span class="token number">1</span><span class="token punctuation">)</span>

                Router Link <span class="token function">States</span> <span class="token punctuation">(</span>Area <span class="token number">0</span><span class="token punctuation">)</span>

    LS age<span class="token operator">:</span> <span class="token number">304</span>
    Options<span class="token operator">:</span> <span class="token punctuation">(</span>No TOS<span class="token operator">-</span>capability<span class="token punctuation">,</span> DC<span class="token punctuation">)</span>
    LS Type<span class="token operator">:</span> Router Links
    Link State ID<span class="token operator">:</span> <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span>
    Advertising Router<span class="token operator">:</span> <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span>
    LS Seq Number<span class="token operator">:</span> <span class="token number">80000002</span>
    Checksum<span class="token operator">:</span> <span class="token number">0x30F7</span>
    Length<span class="token operator">:</span> <span class="token number">48</span>
    Number of Links<span class="token operator">:</span> <span class="token number">2</span>

    Link connected to<span class="token operator">:</span> a Stub <span class="token function">Network</span>
        <span class="token punctuation">(</span>Link ID<span class="token punctuation">)</span> Network<span class="token operator">/</span>subnet number<span class="token operator">:</span> <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span>
        <span class="token punctuation">(</span>Link Data<span class="token punctuation">)</span> Network Mask<span class="token operator">:</span> <span class="token number">255.255</span><span class="token number">.255</span><span class="token number">.255</span>
        Number of MTID metrics<span class="token operator">:</span> <span class="token number">0</span>
        TOS <span class="token number">0</span> Metrics<span class="token operator">:</span> <span class="token number">1</span>

    Link connected to<span class="token operator">:</span> a Transit <span class="token function">Network</span>
        <span class="token punctuation">(</span>Link ID<span class="token punctuation">)</span> Designated Router address<span class="token operator">:</span> <span class="token number">192.168</span><span class="token number">.12</span><span class="token number">.2</span>
        <span class="token punctuation">(</span>Link Data<span class="token punctuation">)</span> Router Interface address<span class="token operator">:</span> <span class="token number">192.168</span><span class="token number">.12</span><span class="token number">.1</span>
        Number of MTID metrics<span class="token operator">:</span> <span class="token number">0</span>
        TOS <span class="token number">0</span> Metrics<span class="token operator">:</span> <span class="token number">65535</span> <span class="token comment">//接口为UP，OSPF正在发送最大度量值；</span>

    LS age<span class="token operator">:</span> <span class="token number">304</span>
    Options<span class="token operator">:</span> <span class="token punctuation">(</span>No TOS<span class="token operator">-</span>capability<span class="token punctuation">,</span> DC<span class="token punctuation">)</span>
    LS Type<span class="token operator">:</span> Router Links
    Link State ID<span class="token operator">:</span> <span class="token number">2.2</span><span class="token number">.2</span><span class="token number">.2</span>
    Advertising Router<span class="token operator">:</span> <span class="token number">2.2</span><span class="token number">.2</span><span class="token number">.2</span>
    LS Seq Number<span class="token operator">:</span> <span class="token number">80000059</span>
    Checksum<span class="token operator">:</span> <span class="token number">0x8F33</span>
    Length<span class="token operator">:</span> <span class="token number">48</span>
    Number of Links<span class="token operator">:</span> <span class="token number">2</span>

    Link connected to<span class="token operator">:</span> a Stub <span class="token function">Network</span>
        <span class="token punctuation">(</span>Link ID<span class="token punctuation">)</span> Network<span class="token operator">/</span>subnet number<span class="token operator">:</span> <span class="token number">2.2</span><span class="token number">.2</span><span class="token number">.2</span>
        <span class="token punctuation">(</span>Link Data<span class="token punctuation">)</span> Network Mask<span class="token operator">:</span> <span class="token number">255.255</span><span class="token number">.255</span><span class="token number">.255</span>
        Number of MTID metrics<span class="token operator">:</span> <span class="token number">0</span>
        TOS <span class="token number">0</span> Metrics<span class="token operator">:</span> <span class="token number">1</span>

    Link connected to<span class="token operator">:</span> a Transit <span class="token function">Network</span>
        <span class="token punctuation">(</span>Link ID<span class="token punctuation">)</span> Designated Router address<span class="token operator">:</span> <span class="token number">192.168</span><span class="token number">.12</span><span class="token number">.2</span>
        <span class="token punctuation">(</span>Link Data<span class="token punctuation">)</span> Router Interface address<span class="token operator">:</span> <span class="token number">192.168</span><span class="token number">.12</span><span class="token number">.2</span>
        Number of MTID metrics<span class="token operator">:</span> <span class="token number">0</span></code></pre>

<p>查看R1上F0&#x2F;0的LDP和OSPF同步信息；</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token comment">//备注：由于holdtime为5秒（5000毫秒），所以输入下一条命令，必须非常快！</span>
<span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>#<span class="token keyword">do</span> sh ip ospf mpls ldp interface
Loopback0
    Process ID <span class="token number">1</span><span class="token punctuation">,</span> Area <span class="token number">0</span>
    LDP is not configured through LDP autoconfig
    LDP<span class="token operator">-</span>IGP Synchronization <span class="token operator">:</span> Not required
    Holddown timer is disabled
    Interface is up 
FastEthernet0<span class="token operator">/</span><span class="token number">1</span>
    Process ID <span class="token number">1</span><span class="token punctuation">,</span> Area <span class="token number">0</span>
    LDP is not configured through LDP autoconfig
    LDP<span class="token operator">-</span>IGP Synchronization <span class="token operator">:</span> Required
    Holddown timer is configured <span class="token operator">:</span> <span class="token number">5000</span> msecs
    Holddown timer is not running
    Interface is down 
FastEthernet0<span class="token operator">/</span><span class="token number">0</span>
    Process ID <span class="token number">1</span><span class="token punctuation">,</span> Area <span class="token number">0</span>
    LDP is not configured through LDP autoconfig
    LDP<span class="token operator">-</span>IGP Synchronization <span class="token operator">:</span> Required
    Holddown timer is configured <span class="token operator">:</span> <span class="token number">5000</span> msecs <span class="token comment">//LDP-IGP同步保持计时器被配置为5000毫秒；</span>
    Holddown timer is running and is expiring in <span class="token number">1848</span> msecs<span class="token comment">//LDP-IGP保持计时器正在运行，并且将在1848毫秒后到期超时；</span>
    Interface is down and pending LDP <span class="token comment">//接口为Down，等待LDP；</span></code></pre>

<p>查看R1上F0&#x2F;0的LDP和OSPF同步信息；</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>#<span class="token keyword">do</span> sh ip ospf mpls ldp interface f0<span class="token operator">/</span><span class="token number">0</span>
FastEthernet0<span class="token operator">/</span><span class="token number">0</span>
    Process ID <span class="token number">1</span><span class="token punctuation">,</span> Area <span class="token number">0</span>
    LDP is not configured through LDP autoconfig
    LDP<span class="token operator">-</span>IGP Synchronization <span class="token operator">:</span> Required
    Holddown timer is configured <span class="token operator">:</span> <span class="token number">5000</span> msecs
    Holddown timer is not running<span class="token comment">//LDP-IGP保持计时器未在运行，说明保持计时器已经超时；</span>
    Interface is up and sending maximum metric<span class="token comment">//接口为UP，OSPF正在发送最大度量值；</span></code></pre>
<blockquote>
<p>可以看到虽然OSPF邻接关系已经建立，但是由于LDP会话还没有建立，所以OSPF向邻居通告的度量值为最大值65535，在具有多条链路同时能够达到目的地的情况下，这一OSPF的这一动作确保此链路不会被用来转发数据；从而防止了到达该此链路的数据包不会因不能被打上标签，而导致数据包被丢弃；</p>
</blockquote>
<p>在R2上，将F0&#x2F;0口的mpls开启：</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token function">R2</span><span class="token punctuation">(</span>config<span class="token operator">-</span><span class="token keyword">if</span><span class="token punctuation">)</span>#<span class="token keyword">int</span> f0<span class="token operator">/</span><span class="token number">0</span> 
<span class="token function">R2</span><span class="token punctuation">(</span>config<span class="token operator">-</span><span class="token keyword">if</span><span class="token punctuation">)</span>#mpls ip

<span class="token operator">*</span>Mar <span class="token number">16</span> <span class="token number">12</span><span class="token operator">:</span><span class="token number">29</span><span class="token operator">:</span><span class="token number">53.575</span><span class="token operator">:</span> <span class="token operator">%</span>LDP<span class="token operator">-</span><span class="token number">5</span><span class="token operator">-</span>NBRCHG<span class="token operator">:</span> LDP Neighbor <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">0</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> is UP
<span class="token comment">//可以看到LDP邻居马上建立；</span></code></pre>

<p>查看R1的OSPF Database中1类LSA：</p>
<pre class="language-c" data-language="c"><code class="language-c">R1#sh ip ospf database router

            OSPF Router with <span class="token function">ID</span> <span class="token punctuation">(</span><span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>Process ID <span class="token number">1</span><span class="token punctuation">)</span>

                Router Link <span class="token function">States</span> <span class="token punctuation">(</span>Area <span class="token number">0</span><span class="token punctuation">)</span>

    LS age<span class="token operator">:</span> <span class="token number">122</span>
    Options<span class="token operator">:</span> <span class="token punctuation">(</span>No TOS<span class="token operator">-</span>capability<span class="token punctuation">,</span> DC<span class="token punctuation">)</span>
    LS Type<span class="token operator">:</span> Router Links
    Link State ID<span class="token operator">:</span> <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span>
    Advertising Router<span class="token operator">:</span> <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span>
    LS Seq Number<span class="token operator">:</span> <span class="token number">80000003</span> <span class="token comment">//R1的OSPF进程更新了之前的Seq：80000002的LSA；</span>
    Checksum<span class="token operator">:</span> <span class="token number">0x4CD9</span>
    Length<span class="token operator">:</span> <span class="token number">48</span>
    Number of Links<span class="token operator">:</span> <span class="token number">2</span>

    Link connected to<span class="token operator">:</span> a Stub <span class="token function">Network</span>
        <span class="token punctuation">(</span>Link ID<span class="token punctuation">)</span> Network<span class="token operator">/</span>subnet number<span class="token operator">:</span> <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span>
        <span class="token punctuation">(</span>Link Data<span class="token punctuation">)</span> Network Mask<span class="token operator">:</span> <span class="token number">255.255</span><span class="token number">.255</span><span class="token number">.255</span>
        Number of MTID metrics<span class="token operator">:</span> <span class="token number">0</span>
        TOS <span class="token number">0</span> Metrics<span class="token operator">:</span> <span class="token number">1</span>

    Link connected to<span class="token operator">:</span> a Transit <span class="token function">Network</span>
        <span class="token punctuation">(</span>Link ID<span class="token punctuation">)</span> Designated Router address<span class="token operator">:</span> <span class="token number">192.168</span><span class="token number">.12</span><span class="token number">.2</span>
        <span class="token punctuation">(</span>Link Data<span class="token punctuation">)</span> Router Interface address<span class="token operator">:</span> <span class="token number">192.168</span><span class="token number">.12</span><span class="token number">.1</span>
        Number of MTID metrics<span class="token operator">:</span> <span class="token number">0</span>
        TOS <span class="token number">0</span> Metrics<span class="token operator">:</span> <span class="token number">1</span> <span class="token comment">//在更新后的Seq：80000003 LSA中，度量值被更改回正常的1；</span>

    LS age<span class="token operator">:</span> <span class="token number">1250</span>
    Options<span class="token operator">:</span> <span class="token punctuation">(</span>No TOS<span class="token operator">-</span>capability<span class="token punctuation">,</span> DC<span class="token punctuation">)</span>
    LS Type<span class="token operator">:</span> Router Links
    Link State ID<span class="token operator">:</span> <span class="token number">2.2</span><span class="token number">.2</span><span class="token number">.2</span>
    Advertising Router<span class="token operator">:</span> <span class="token number">2.2</span><span class="token number">.2</span><span class="token number">.2</span>
    LS Seq Number<span class="token operator">:</span> <span class="token number">80000059</span>
    Checksum<span class="token operator">:</span> <span class="token number">0x8F33</span>
    Length<span class="token operator">:</span> <span class="token number">48</span>
    Number of Links<span class="token operator">:</span> <span class="token number">2</span>

    Link connected to<span class="token operator">:</span> a Stub <span class="token function">Network</span>
        <span class="token punctuation">(</span>Link ID<span class="token punctuation">)</span> Network<span class="token operator">/</span>subnet number<span class="token operator">:</span> <span class="token number">2.2</span><span class="token number">.2</span><span class="token number">.2</span>
        <span class="token punctuation">(</span>Link Data<span class="token punctuation">)</span> Network Mask<span class="token operator">:</span> <span class="token number">255.255</span><span class="token number">.255</span><span class="token number">.255</span>
        Number of MTID metrics<span class="token operator">:</span> <span class="token number">0</span>
        TOS <span class="token number">0</span> Metrics<span class="token operator">:</span> <span class="token number">1</span>

    Link connected to<span class="token operator">:</span> a Transit <span class="token function">Network</span>
        <span class="token punctuation">(</span>Link ID<span class="token punctuation">)</span> Designated Router address<span class="token operator">:</span> <span class="token number">192.168</span><span class="token number">.12</span><span class="token number">.2</span>
        <span class="token punctuation">(</span>Link Data<span class="token punctuation">)</span> Router Interface address<span class="token operator">:</span> <span class="token number">192.168</span><span class="token number">.12</span><span class="token number">.2</span>
        Number of MTID metrics<span class="token operator">:</span> <span class="token number">0</span>
        TOS <span class="token number">0</span> Metrics<span class="token operator">:</span> <span class="token number">1</span></code></pre>

<p>查看R1上F0&#x2F;0的LDP和OSPF同步信息；</p>
<pre class="language-c" data-language="c"><code class="language-c">R1#sh ip ospf mpls ldp interface f0<span class="token operator">/</span><span class="token number">0</span>
FastEthernet0<span class="token operator">/</span><span class="token number">0</span>
    Process ID <span class="token number">1</span><span class="token punctuation">,</span> Area <span class="token number">0</span>
    LDP is not configured through LDP autoconfig
    LDP<span class="token operator">-</span>IGP Synchronization <span class="token operator">:</span> Required
    Holddown timer is configured <span class="token operator">:</span> <span class="token number">5000</span> msecs
    Holddown timer is not running
    Interface is up
<span class="token comment">//可以看到接口已经起来了，说明LDP和OSPF已经同步；</span></code></pre>


<h2 id="实验2：R1和R2之间仅有两条或多条链路时的LDP-IGP同步"><a href="#实验2：R1和R2之间仅有两条或多条链路时的LDP-IGP同步" class="headerlink" title="实验2：R1和R2之间仅有两条或多条链路时的LDP-IGP同步"></a>实验2：R1和R2之间仅有两条或多条链路时的LDP-IGP同步</h2><p>将R1和R2之间的由F0&#x2F;1相连的链路启用，让R1和R2之间形成双链路；</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>#<span class="token keyword">int</span> f0<span class="token operator">/</span><span class="token number">1</span>
<span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token operator">-</span><span class="token keyword">if</span><span class="token punctuation">)</span>#no shutdown

<span class="token function">R2</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>#<span class="token keyword">int</span> f0<span class="token operator">/</span><span class="token number">1</span>
<span class="token function">R2</span><span class="token punctuation">(</span>config<span class="token operator">-</span><span class="token keyword">if</span><span class="token punctuation">)</span>#no shutdown</code></pre>

<p>查看R1的LDP邻居表；</p>
<pre class="language-c" data-language="c"><code class="language-c">R1#show mpls ldp neighbor
    Peer LDP Ident<span class="token operator">:</span> <span class="token number">2.2</span><span class="token number">.2</span><span class="token number">.2</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">;</span> Local LDP Ident <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">0</span>
        TCP connection<span class="token operator">:</span> <span class="token number">2.2</span><span class="token number">.2</span><span class="token number">.2</span><span class="token number">.52561</span> <span class="token operator">-</span> <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span><span class="token number">.646</span>
        State<span class="token operator">:</span> Oper<span class="token punctuation">;</span> Msgs sent<span class="token operator">/</span>rcvd<span class="token operator">:</span> <span class="token number">15</span><span class="token operator">/</span><span class="token number">15</span><span class="token punctuation">;</span> Downstream
        Up time<span class="token operator">:</span> <span class="token number">00</span><span class="token operator">:</span><span class="token number">06</span><span class="token operator">:</span><span class="token number">36</span>
        LDP discovery sources<span class="token operator">:</span>
            FastEthernet0<span class="token operator">/</span><span class="token number">0</span><span class="token punctuation">,</span> Src IP addr<span class="token operator">:</span> <span class="token number">192.168</span><span class="token number">.12</span><span class="token number">.2</span>
            FastEthernet0<span class="token operator">/</span><span class="token number">1</span><span class="token punctuation">,</span> Src IP addr<span class="token operator">:</span> <span class="token number">192.168</span><span class="token number">.21</span><span class="token number">.2</span>
        Addresses bound to peer LDP Ident<span class="token operator">:</span>
            <span class="token number">2.2</span><span class="token number">.2</span><span class="token number">.2</span>         <span class="token number">192.168</span><span class="token number">.12</span><span class="token number">.2</span>    <span class="token number">192.168</span><span class="token number">.21</span><span class="token number">.2</span> 
<span class="token comment">//可以看到，R1在F0/0和F0/1发现了LDP邻居；</span></code></pre>

<p>禁用R2上F0&#x2F;0的MPLS，让R1和R2的LDP邻居关系断开，确保LDP会话晚于OSPF邻接关系建立；</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token function">R2</span><span class="token punctuation">(</span>config<span class="token operator">-</span><span class="token keyword">if</span><span class="token punctuation">)</span>#<span class="token keyword">int</span> f0<span class="token operator">/</span><span class="token number">0</span>  
<span class="token function">R2</span><span class="token punctuation">(</span>config<span class="token operator">-</span><span class="token keyword">if</span><span class="token punctuation">)</span>#no mpls ip</code></pre>

<p>此时，在经过将R2的F0&#x2F;0禁用MPLS之后，R1和R2的LDP邻居已经关系。接下来，重置OSPF进程：</p>
<pre class="language-c" data-language="c"><code class="language-c">R1#clear mpls ldp neighbor <span class="token operator">*</span>
R1# 
<span class="token operator">*</span>Mar <span class="token number">16</span> <span class="token number">13</span><span class="token operator">:</span><span class="token number">53</span><span class="token operator">:</span><span class="token number">14.798</span><span class="token operator">:</span> <span class="token operator">%</span>LDP<span class="token operator">-</span><span class="token number">5</span><span class="token operator">-</span>CLEAR_NBRS<span class="token operator">:</span> Clear LDP <span class="token function">neighbors</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> by console
<span class="token operator">*</span>Mar <span class="token number">16</span> <span class="token number">13</span><span class="token operator">:</span><span class="token number">53</span><span class="token operator">:</span><span class="token number">14.810</span><span class="token operator">:</span> <span class="token operator">%</span>LDP<span class="token operator">-</span><span class="token number">5</span><span class="token operator">-</span>NBRCHG<span class="token operator">:</span> LDP Neighbor <span class="token number">2.2</span><span class="token number">.2</span><span class="token number">.2</span><span class="token operator">:</span><span class="token number">0</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> is <span class="token function">DOWN</span> <span class="token punctuation">(</span>User cleared session manually<span class="token punctuation">)</span>
<span class="token operator">*</span>Mar <span class="token number">16</span> <span class="token number">13</span><span class="token operator">:</span><span class="token number">53</span><span class="token operator">:</span><span class="token number">19.914</span><span class="token operator">:</span> <span class="token operator">%</span>LDP<span class="token operator">-</span><span class="token number">5</span><span class="token operator">-</span>NBRCHG<span class="token operator">:</span> LDP Neighbor <span class="token number">2.2</span><span class="token number">.2</span><span class="token number">.2</span><span class="token operator">:</span><span class="token number">0</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> is UP
R1#clear ip ospf process
Reset ALL OSPF processes<span class="token operator">?</span> <span class="token punctuation">[</span>no<span class="token punctuation">]</span><span class="token operator">:</span> yes
<span class="token operator">*</span>Mar <span class="token number">16</span> <span class="token number">13</span><span class="token operator">:</span><span class="token number">53</span><span class="token operator">:</span><span class="token number">27.098</span><span class="token operator">:</span> <span class="token operator">%</span>OSPF<span class="token operator">-</span><span class="token number">5</span><span class="token operator">-</span>ADJCHG<span class="token operator">:</span> Process <span class="token number">1</span><span class="token punctuation">,</span> Nbr <span class="token number">2.2</span><span class="token number">.2</span><span class="token number">.2</span> on FastEthernet0<span class="token operator">/</span><span class="token number">1</span> from FULL to DOWN<span class="token punctuation">,</span> Neighbor Down<span class="token operator">:</span> Interface down or detached
<span class="token operator">*</span>Mar <span class="token number">16</span> <span class="token number">13</span><span class="token operator">:</span><span class="token number">53</span><span class="token operator">:</span><span class="token number">27.102</span><span class="token operator">:</span> <span class="token operator">%</span>OSPF<span class="token operator">-</span><span class="token number">5</span><span class="token operator">-</span>ADJCHG<span class="token operator">:</span> Process <span class="token number">1</span><span class="token punctuation">,</span> Nbr <span class="token number">2.2</span><span class="token number">.2</span><span class="token number">.2</span> on FastEthernet0<span class="token operator">/</span><span class="token number">0</span> from FULL to DOWN<span class="token punctuation">,</span> Neighbor Down<span class="token operator">:</span> Interface down or detached
<span class="token operator">*</span>Mar <span class="token number">16</span> <span class="token number">13</span><span class="token operator">:</span><span class="token number">53</span><span class="token operator">:</span><span class="token number">27.442</span><span class="token operator">:</span> <span class="token operator">%</span>OSPF<span class="token operator">-</span><span class="token number">5</span><span class="token operator">-</span>ADJCHG<span class="token operator">:</span> Process <span class="token number">1</span><span class="token punctuation">,</span> Nbr <span class="token number">2.2</span><span class="token number">.2</span><span class="token number">.2</span> on FastEthernet0<span class="token operator">/</span><span class="token number">1</span> from LOADING to FULL<span class="token punctuation">,</span> Loading Done
<span class="token comment">//备注：快速输入命令查看R1接口F0/0的LDP与OSPF的同步信息；</span>
R1#sh ip ospf mpls ldp interface f0<span class="token operator">/</span><span class="token number">0</span>
FastEthernet0<span class="token operator">/</span><span class="token number">0</span>
    Process ID <span class="token number">1</span><span class="token punctuation">,</span> Area <span class="token number">0</span>
    LDP is not configured through LDP autoconfig
    LDP<span class="token operator">-</span>IGP Synchronization <span class="token operator">:</span> Required
    Holddown timer is configured <span class="token operator">:</span> <span class="token number">5000</span> msecs<span class="token comment">//LDP-IGP同步保持计时器被配置为5000毫秒；</span>
    Holddown timer is running and is expiring in <span class="token number">952</span> msecs<span class="token comment">//LDP-IGP保持计时器正在运行，并且将在952毫秒后到期超时；</span>
    Interface is down and pending LDP
<span class="token comment">//备注：快速输入命令查看R1接口F0/0的LDP与OSPF的同步信息；</span>
R1#sh ip ospf mpls ldp interface f0<span class="token operator">/</span><span class="token number">0</span>
FastEthernet0<span class="token operator">/</span><span class="token number">0</span>
    Process ID <span class="token number">1</span><span class="token punctuation">,</span> Area <span class="token number">0</span>
    LDP is not configured through LDP autoconfig
    LDP<span class="token operator">-</span>IGP Synchronization <span class="token operator">:</span> Required
    Holddown timer is configured <span class="token operator">:</span> <span class="token number">5000</span> msecs
    Holddown timer is not running<span class="token comment">//LDP-IGP保持计时器未在运行，说明保持计时器已经超时；</span>
    Interface is up and sending maximum metric<span class="token comment">//OSPF已经让接口UP，但却在发送最大度量值；</span>
<span class="token comment">//可以看到虽然OSPF邻接关系已经建立，但是由于LDP会话还没有建立，</span>
<span class="token comment">//所以OSPF向邻居通告的度量值为最大值65535，在具有多条链路同时能够达到目的地的情况下，</span>
<span class="token comment">//这一OSPF的这一动作确保此链路不会被用来转发数据；</span>
<span class="token comment">//从而防止了到达该此链路的数据包不会因不能被打上标签，而导致数据包被丢弃；</span></code></pre>

<p>查看R1的OSPF邻居表：</p>
<pre class="language-c" data-language="c"><code class="language-c">R1#show ip ospf neighbor
Neighbor ID     Pri   State           Dead Time   Address         Interface
<span class="token number">2.2</span><span class="token number">.2</span><span class="token number">.2</span>           <span class="token number">1</span>   FULL<span class="token operator">/</span>DR         <span class="token number">00</span><span class="token operator">:</span><span class="token number">00</span><span class="token operator">:</span><span class="token number">31</span>    <span class="token number">192.168</span><span class="token number">.21</span><span class="token number">.2</span>    FastEthernet0<span class="token operator">/</span><span class="token number">1</span>
<span class="token number">2.2</span><span class="token number">.2</span><span class="token number">.2</span>           <span class="token number">1</span>   FULL<span class="token operator">/</span>DR         <span class="token number">00</span><span class="token operator">:</span><span class="token number">00</span><span class="token operator">:</span><span class="token number">32</span>    <span class="token number">192.168</span><span class="token number">.12</span><span class="token number">.2</span>    FastEthernet0<span class="token operator">/</span><span class="token number">0</span>
<span class="token comment">//可以看到R1仍然从两个接口发现了OSPF邻居R2；</span></code></pre>

<p>查看R1的MPLS LDP邻居表；</p>
<pre class="language-c" data-language="c"><code class="language-c">R1#show mpls ldp neighbor
    Peer LDP Ident<span class="token operator">:</span> <span class="token number">2.2</span><span class="token number">.2</span><span class="token number">.2</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">;</span> Local LDP Ident <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">0</span>
        TCP connection<span class="token operator">:</span> <span class="token number">2.2</span><span class="token number">.2</span><span class="token number">.2</span><span class="token number">.64074</span> <span class="token operator">-</span> <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span><span class="token number">.646</span>
        State<span class="token operator">:</span> Oper<span class="token punctuation">;</span> Msgs sent<span class="token operator">/</span>rcvd<span class="token operator">:</span> <span class="token number">19</span><span class="token operator">/</span><span class="token number">19</span><span class="token punctuation">;</span> Downstream
        Up time<span class="token operator">:</span> <span class="token number">00</span><span class="token operator">:</span><span class="token number">11</span><span class="token operator">:</span><span class="token number">03</span>
        LDP discovery sources<span class="token operator">:</span>
            FastEthernet0<span class="token operator">/</span><span class="token number">1</span><span class="token punctuation">,</span> Src IP addr<span class="token operator">:</span> <span class="token number">192.168</span><span class="token number">.21</span><span class="token number">.2</span>
        Addresses bound to peer LDP Ident<span class="token operator">:</span>
            <span class="token number">2.2</span><span class="token number">.2</span><span class="token number">.2</span>         <span class="token number">192.168</span><span class="token number">.12</span><span class="token number">.2</span>    <span class="token number">192.168</span><span class="token number">.21</span><span class="token number">.2</span> 
<span class="token comment">//可以看到R1仅仅从F0/1发现了LDP邻居R2；</span></code></pre>

<p>查看R1的LFIB表；</p>
<pre class="language-c" data-language="c"><code class="language-c">R1#show mpls forwarding<span class="token operator">-</span>table
Local      Outgoing   Prefix           Bytes Label   Outgoing   Next Hop    
Label      Label      or Tunnel Id     Switched      interface              
<span class="token number">16</span>         Pop Label  <span class="token number">2.2</span><span class="token number">.2</span><span class="token number">.2</span><span class="token operator">/</span><span class="token number">32</span>       <span class="token number">0</span>             Fa0<span class="token operator">/</span><span class="token number">1</span>      <span class="token number">192.168</span><span class="token number">.21</span><span class="token number">.2</span>
<span class="token comment">//可以看到仅有从F0/1学到标签；</span></code></pre>

<p>查看R1的IP路由表；</p>
<pre class="language-c" data-language="c"><code class="language-c">R1#show ip route
Codes<span class="token operator">:</span> L <span class="token operator">-</span> local<span class="token punctuation">,</span> C <span class="token operator">-</span> connected<span class="token punctuation">,</span> S <span class="token operator">-</span> <span class="token keyword">static</span><span class="token punctuation">,</span> R <span class="token operator">-</span> RIP<span class="token punctuation">,</span> M <span class="token operator">-</span> mobile<span class="token punctuation">,</span> B <span class="token operator">-</span> BGP
        D <span class="token operator">-</span> EIGRP<span class="token punctuation">,</span> EX <span class="token operator">-</span> EIGRP external<span class="token punctuation">,</span> O <span class="token operator">-</span> OSPF<span class="token punctuation">,</span> IA <span class="token operator">-</span> OSPF inter area 
        N1 <span class="token operator">-</span> OSPF NSSA external type <span class="token number">1</span><span class="token punctuation">,</span> N2 <span class="token operator">-</span> OSPF NSSA external type <span class="token number">2</span>
        E1 <span class="token operator">-</span> OSPF external type <span class="token number">1</span><span class="token punctuation">,</span> E2 <span class="token operator">-</span> OSPF external type <span class="token number">2</span>
        i <span class="token operator">-</span> IS<span class="token operator">-</span>IS<span class="token punctuation">,</span> su <span class="token operator">-</span> IS<span class="token operator">-</span>IS summary<span class="token punctuation">,</span> L1 <span class="token operator">-</span> IS<span class="token operator">-</span>IS level<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> L2 <span class="token operator">-</span> IS<span class="token operator">-</span>IS level<span class="token operator">-</span><span class="token number">2</span>
        ia <span class="token operator">-</span> IS<span class="token operator">-</span>IS inter area<span class="token punctuation">,</span> <span class="token operator">*</span> <span class="token operator">-</span> candidate <span class="token keyword">default</span><span class="token punctuation">,</span> U <span class="token operator">-</span> per<span class="token operator">-</span>user <span class="token keyword">static</span> route
        o <span class="token operator">-</span> ODR<span class="token punctuation">,</span> P <span class="token operator">-</span> periodic downloaded <span class="token keyword">static</span> route<span class="token punctuation">,</span> H <span class="token operator">-</span> NHRP<span class="token punctuation">,</span> l <span class="token operator">-</span> LISP
        <span class="token operator">+</span> <span class="token operator">-</span> replicated route<span class="token punctuation">,</span> <span class="token operator">%</span> <span class="token operator">-</span> next hop override
                                                            
Gateway of last resort is not set
                                                            
        <span class="token number">1.0</span><span class="token number">.0</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">32</span> is subnetted<span class="token punctuation">,</span> <span class="token number">1</span> subnets
C        <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span> is directly connected<span class="token punctuation">,</span> Loopback0
        <span class="token number">2.0</span><span class="token number">.0</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">32</span> is subnetted<span class="token punctuation">,</span> <span class="token number">1</span> subnets
O        <span class="token number">2.2</span><span class="token number">.2</span><span class="token number">.2</span> <span class="token punctuation">[</span><span class="token number">110</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">]</span> via <span class="token number">192.168</span><span class="token number">.21</span><span class="token number">.2</span><span class="token punctuation">,</span> <span class="token number">00</span><span class="token operator">:</span><span class="token number">24</span><span class="token operator">:</span><span class="token number">13</span><span class="token punctuation">,</span> FastEthernet0<span class="token operator">/</span><span class="token number">1</span><span class="token comment">//虽然从两条链路学到路由，但是OSPF与LDP保持了一致，只使用其中走F0/1的路径；</span>
        <span class="token number">192.168</span><span class="token number">.12</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span> is variably subnetted<span class="token punctuation">,</span> <span class="token number">2</span> subnets<span class="token punctuation">,</span> <span class="token number">2</span> masks
C        <span class="token number">192.168</span><span class="token number">.12</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span> is directly connected<span class="token punctuation">,</span> FastEthernet0<span class="token operator">/</span><span class="token number">0</span>
L        <span class="token number">192.168</span><span class="token number">.12</span><span class="token number">.1</span><span class="token operator">/</span><span class="token number">32</span> is directly connected<span class="token punctuation">,</span> FastEthernet0<span class="token operator">/</span><span class="token number">0</span>
        <span class="token number">192.168</span><span class="token number">.21</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span> is variably subnetted<span class="token punctuation">,</span> <span class="token number">2</span> subnets<span class="token punctuation">,</span> <span class="token number">2</span> masks
C        <span class="token number">192.168</span><span class="token number">.21</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span> is directly connected<span class="token punctuation">,</span> FastEthernet0<span class="token operator">/</span><span class="token number">1</span>
L        <span class="token number">192.168</span><span class="token number">.21</span><span class="token number">.1</span><span class="token operator">/</span><span class="token number">32</span> is directly connected<span class="token punctuation">,</span> FastEthernet0<span class="token operator">/</span><span class="token number">1</span>
<span class="token comment">//注意：本来我以为虽然LFIB中只有走F0/1的一条出站路径，而路由表中会有两条OSPF路由，分别是从F0/0和F0/1学到的，但事实并非如此；</span>
<span class="token comment">//正是因为开启了LDP-IGP同步，所以造成了这样的结果；</span></code></pre>

<p>启用R2 f0&#x2F;0的MPLS；</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token function">R2</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>#<span class="token keyword">int</span> f0<span class="token operator">/</span><span class="token number">0</span>
<span class="token function">R2</span><span class="token punctuation">(</span>config<span class="token operator">-</span><span class="token keyword">if</span><span class="token punctuation">)</span>#mpls ip</code></pre>

<p>查看R1上接口F0&#x2F;0的LDP-OSPF同步信息；</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span>#<span class="token keyword">do</span> sh ip ospf mpls ldp interface f0<span class="token operator">/</span><span class="token number">0</span>
FastEthernet0<span class="token operator">/</span><span class="token number">0</span>
    Process ID <span class="token number">1</span><span class="token punctuation">,</span> Area <span class="token number">0</span>
    LDP is not configured through LDP autoconfig
    LDP<span class="token operator">-</span>IGP Synchronization <span class="token operator">:</span> Required
    Holddown timer is configured <span class="token operator">:</span> <span class="token number">5000</span> msecs
    Holddown timer is not running
    Interface is up
<span class="token comment">//注意：当R2的F0/0启用了MPLS后，R1的OSPF将接口F0/0度量值还原为了正常值；</span></code></pre>

<p>查看R1的LFIB表；</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span>#<span class="token keyword">do</span> sh mpls forwarding<span class="token operator">-</span>table
Local      Outgoing   Prefix           Bytes Label   Outgoing   Next Hop    
Label      Label      or Tunnel Id     Switched      interface              
<span class="token number">16</span>         Pop Label  <span class="token number">2.2</span><span class="token number">.2</span><span class="token number">.2</span><span class="token operator">/</span><span class="token number">32</span>       <span class="token number">0</span>             Fa0<span class="token operator">/</span><span class="token number">0</span>      <span class="token number">192.168</span><span class="token number">.12</span><span class="token number">.2</span>
            Pop Label  <span class="token number">2.2</span><span class="token number">.2</span><span class="token number">.2</span><span class="token operator">/</span><span class="token number">32</span>       <span class="token number">0</span>             Fa0<span class="token operator">/</span><span class="token number">1</span>      <span class="token number">192.168</span><span class="token number">.21</span><span class="token number">.2</span>
<span class="token comment">//当R2的F0/0启用了MPLS后，R1具有了两条等价的去往2.2.2.2的路径；</span></code></pre>

<p>查看R1的IP路由表；</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span>#<span class="token keyword">do</span> sh ip route
Codes<span class="token operator">:</span> L <span class="token operator">-</span> local<span class="token punctuation">,</span> C <span class="token operator">-</span> connected<span class="token punctuation">,</span> S <span class="token operator">-</span> <span class="token keyword">static</span><span class="token punctuation">,</span> R <span class="token operator">-</span> RIP<span class="token punctuation">,</span> M <span class="token operator">-</span> mobile<span class="token punctuation">,</span> B <span class="token operator">-</span> BGP
        D <span class="token operator">-</span> EIGRP<span class="token punctuation">,</span> EX <span class="token operator">-</span> EIGRP external<span class="token punctuation">,</span> O <span class="token operator">-</span> OSPF<span class="token punctuation">,</span> IA <span class="token operator">-</span> OSPF inter area 
        N1 <span class="token operator">-</span> OSPF NSSA external type <span class="token number">1</span><span class="token punctuation">,</span> N2 <span class="token operator">-</span> OSPF NSSA external type <span class="token number">2</span>
        E1 <span class="token operator">-</span> OSPF external type <span class="token number">1</span><span class="token punctuation">,</span> E2 <span class="token operator">-</span> OSPF external type <span class="token number">2</span>
        i <span class="token operator">-</span> IS<span class="token operator">-</span>IS<span class="token punctuation">,</span> su <span class="token operator">-</span> IS<span class="token operator">-</span>IS summary<span class="token punctuation">,</span> L1 <span class="token operator">-</span> IS<span class="token operator">-</span>IS level<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> L2 <span class="token operator">-</span> IS<span class="token operator">-</span>IS level<span class="token operator">-</span><span class="token number">2</span>
        ia <span class="token operator">-</span> IS<span class="token operator">-</span>IS inter area<span class="token punctuation">,</span> <span class="token operator">*</span> <span class="token operator">-</span> candidate <span class="token keyword">default</span><span class="token punctuation">,</span> U <span class="token operator">-</span> per<span class="token operator">-</span>user <span class="token keyword">static</span> route
        o <span class="token operator">-</span> ODR<span class="token punctuation">,</span> P <span class="token operator">-</span> periodic downloaded <span class="token keyword">static</span> route<span class="token punctuation">,</span> H <span class="token operator">-</span> NHRP<span class="token punctuation">,</span> l <span class="token operator">-</span> LISP
        <span class="token operator">+</span> <span class="token operator">-</span> replicated route<span class="token punctuation">,</span> <span class="token operator">%</span> <span class="token operator">-</span> next hop override

Gateway of last resort is not set

        <span class="token number">1.0</span><span class="token number">.0</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">32</span> is subnetted<span class="token punctuation">,</span> <span class="token number">1</span> subnets
C        <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span> is directly connected<span class="token punctuation">,</span> Loopback0
        <span class="token number">2.0</span><span class="token number">.0</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">32</span> is subnetted<span class="token punctuation">,</span> <span class="token number">1</span> subnets
O        <span class="token number">2.2</span><span class="token number">.2</span><span class="token number">.2</span> <span class="token punctuation">[</span><span class="token number">110</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">]</span> via <span class="token number">192.168</span><span class="token number">.21</span><span class="token number">.2</span><span class="token punctuation">,</span> <span class="token number">00</span><span class="token operator">:</span><span class="token number">47</span><span class="token operator">:</span><span class="token number">46</span><span class="token punctuation">,</span> FastEthernet0<span class="token operator">/</span><span class="token number">1</span><span class="token comment">//当LDP从F0/0和F0/1收到两条标签绑定信息后，路由表中同样有了两条路径；</span>
                        <span class="token punctuation">[</span><span class="token number">110</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">]</span> via <span class="token number">192.168</span><span class="token number">.12</span><span class="token number">.2</span><span class="token punctuation">,</span> <span class="token number">00</span><span class="token operator">:</span><span class="token number">20</span><span class="token operator">:</span><span class="token number">20</span><span class="token punctuation">,</span> FastEthernet0<span class="token operator">/</span><span class="token number">0</span>
        <span class="token number">192.168</span><span class="token number">.12</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span> is variably subnetted<span class="token punctuation">,</span> <span class="token number">2</span> subnets<span class="token punctuation">,</span> <span class="token number">2</span> masks
C        <span class="token number">192.168</span><span class="token number">.12</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span> is directly connected<span class="token punctuation">,</span> FastEthernet0<span class="token operator">/</span><span class="token number">0</span>
L        <span class="token number">192.168</span><span class="token number">.12</span><span class="token number">.1</span><span class="token operator">/</span><span class="token number">32</span> is directly connected<span class="token punctuation">,</span> FastEthernet0<span class="token operator">/</span><span class="token number">0</span>
        <span class="token number">192.168</span><span class="token number">.21</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span> is variably subnetted<span class="token punctuation">,</span> <span class="token number">2</span> subnets<span class="token punctuation">,</span> <span class="token number">2</span> masks
C        <span class="token number">192.168</span><span class="token number">.21</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span> is directly connected<span class="token punctuation">,</span> FastEthernet0<span class="token operator">/</span><span class="token number">1</span>
L        <span class="token number">192.168</span><span class="token number">.21</span><span class="token number">.1</span><span class="token operator">/</span><span class="token number">32</span> is directly connected<span class="token punctuation">,</span> FastEthernet0<span class="token operator">/</span><span class="token number">1</span>
```  
            
验证关闭LDP<span class="token operator">-</span>IGP同步后LFIB和IP路由表情况；
```c
<span class="token comment">//关闭LDP-IGP同步；</span>
<span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>#router os <span class="token number">1</span>
<span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span>#no mpls ldp sync

<span class="token function">R2</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>#router os <span class="token number">1</span>
<span class="token function">R2</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span>#no mpls ldp sync

<span class="token comment">//禁用R2上F0/0的MPLS；</span>
<span class="token function">R2</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span>#<span class="token keyword">int</span> f0<span class="token operator">/</span><span class="token number">0</span>
<span class="token function">R2</span><span class="token punctuation">(</span>config<span class="token operator">-</span><span class="token keyword">if</span><span class="token punctuation">)</span>#no mpls ip</code></pre>

<p>查看R1的LIB表：</p>
<pre class="language-c" data-language="c"><code class="language-c">R1#show mpls ip binding
    <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span><span class="token operator">/</span><span class="token number">32</span> 
        in label<span class="token operator">:</span>     imp<span class="token operator">-</span>null  
        out label<span class="token operator">:</span>    <span class="token number">16</span>        lsr<span class="token operator">:</span> <span class="token number">2.2</span><span class="token number">.2</span><span class="token number">.2</span><span class="token operator">:</span><span class="token number">0</span>       
    <span class="token number">2.2</span><span class="token number">.2</span><span class="token number">.2</span><span class="token operator">/</span><span class="token number">32</span> 
        in label<span class="token operator">:</span>     <span class="token number">16</span>        
        out label<span class="token operator">:</span>    imp<span class="token operator">-</span>null  lsr<span class="token operator">:</span> <span class="token number">2.2</span><span class="token number">.2</span><span class="token number">.2</span><span class="token operator">:</span><span class="token number">0</span>        inuse
    <span class="token number">192.168</span><span class="token number">.12</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span> 
        in label<span class="token operator">:</span>     imp<span class="token operator">-</span>null  
        out label<span class="token operator">:</span>    imp<span class="token operator">-</span>null  lsr<span class="token operator">:</span> <span class="token number">2.2</span><span class="token number">.2</span><span class="token number">.2</span><span class="token operator">:</span><span class="token number">0</span>       
    <span class="token number">192.168</span><span class="token number">.21</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span> 
        in label<span class="token operator">:</span>     imp<span class="token operator">-</span>null  
        out label<span class="token operator">:</span>    imp<span class="token operator">-</span>null  lsr<span class="token operator">:</span> <span class="token number">2.2</span><span class="token number">.2</span><span class="token number">.2</span><span class="token operator">:</span><span class="token number">0</span></code></pre>
<p>查看R1的LFIB表：</p>
<pre class="language-c" data-language="c"><code class="language-c">R1#sh mpls forwarding<span class="token operator">-</span>table
Local      Outgoing   Prefix           Bytes Label   Outgoing   Next Hop    
Label      Label      or Tunnel Id     Switched      interface              
<span class="token number">16</span>         Pop Label  <span class="token number">2.2</span><span class="token number">.2</span><span class="token number">.2</span><span class="token operator">/</span><span class="token number">32</span>       <span class="token number">0</span>             Fa0<span class="token operator">/</span><span class="token number">1</span>      <span class="token number">192.168</span><span class="token number">.21</span><span class="token number">.2</span>
                No Label   <span class="token number">2.2</span><span class="token number">.2</span><span class="token number">.2</span><span class="token operator">/</span><span class="token number">32</span>       <span class="token number">0</span>             Fa0<span class="token operator">/</span><span class="token number">0</span>      <span class="token number">192.168</span><span class="token number">.12</span><span class="token number">.2</span></code></pre>

<p>查看R1的IP路由表；</p>
<pre class="language-c" data-language="c"><code class="language-c">R1#sh ip route
Codes<span class="token operator">:</span> L <span class="token operator">-</span> local<span class="token punctuation">,</span> C <span class="token operator">-</span> connected<span class="token punctuation">,</span> S <span class="token operator">-</span> <span class="token keyword">static</span><span class="token punctuation">,</span> R <span class="token operator">-</span> RIP<span class="token punctuation">,</span> M <span class="token operator">-</span> mobile<span class="token punctuation">,</span> B <span class="token operator">-</span> BGP
        D <span class="token operator">-</span> EIGRP<span class="token punctuation">,</span> EX <span class="token operator">-</span> EIGRP external<span class="token punctuation">,</span> O <span class="token operator">-</span> OSPF<span class="token punctuation">,</span> IA <span class="token operator">-</span> OSPF inter area 
        N1 <span class="token operator">-</span> OSPF NSSA external type <span class="token number">1</span><span class="token punctuation">,</span> N2 <span class="token operator">-</span> OSPF NSSA external type <span class="token number">2</span>
        E1 <span class="token operator">-</span> OSPF external type <span class="token number">1</span><span class="token punctuation">,</span> E2 <span class="token operator">-</span> OSPF external type <span class="token number">2</span>
        i <span class="token operator">-</span> IS<span class="token operator">-</span>IS<span class="token punctuation">,</span> su <span class="token operator">-</span> IS<span class="token operator">-</span>IS summary<span class="token punctuation">,</span> L1 <span class="token operator">-</span> IS<span class="token operator">-</span>IS level<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> L2 <span class="token operator">-</span> IS<span class="token operator">-</span>IS level<span class="token operator">-</span><span class="token number">2</span>
        ia <span class="token operator">-</span> IS<span class="token operator">-</span>IS inter area<span class="token punctuation">,</span> <span class="token operator">*</span> <span class="token operator">-</span> candidate <span class="token keyword">default</span><span class="token punctuation">,</span> U <span class="token operator">-</span> per<span class="token operator">-</span>user <span class="token keyword">static</span> route
        o <span class="token operator">-</span> ODR<span class="token punctuation">,</span> P <span class="token operator">-</span> periodic downloaded <span class="token keyword">static</span> route<span class="token punctuation">,</span> H <span class="token operator">-</span> NHRP<span class="token punctuation">,</span> l <span class="token operator">-</span> LISP
        <span class="token operator">+</span> <span class="token operator">-</span> replicated route<span class="token punctuation">,</span> <span class="token operator">%</span> <span class="token operator">-</span> next hop override

Gateway of last resort is not set

        <span class="token number">1.0</span><span class="token number">.0</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">32</span> is subnetted<span class="token punctuation">,</span> <span class="token number">1</span> subnets
C        <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span> is directly connected<span class="token punctuation">,</span> Loopback0
        <span class="token number">2.0</span><span class="token number">.0</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">32</span> is subnetted<span class="token punctuation">,</span> <span class="token number">1</span> subnets
O        <span class="token number">2.2</span><span class="token number">.2</span><span class="token number">.2</span> <span class="token punctuation">[</span><span class="token number">110</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">]</span> via <span class="token number">192.168</span><span class="token number">.21</span><span class="token number">.2</span><span class="token punctuation">,</span> <span class="token number">00</span><span class="token operator">:</span><span class="token number">54</span><span class="token operator">:</span><span class="token number">25</span><span class="token punctuation">,</span> FastEthernet0<span class="token operator">/</span><span class="token number">1</span>
                        <span class="token punctuation">[</span><span class="token number">110</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">]</span> via <span class="token number">192.168</span><span class="token number">.12</span><span class="token number">.2</span><span class="token punctuation">,</span> <span class="token number">00</span><span class="token operator">:</span><span class="token number">26</span><span class="token operator">:</span><span class="token number">59</span><span class="token punctuation">,</span> FastEthernet0<span class="token operator">/</span><span class="token number">0</span>
        <span class="token number">192.168</span><span class="token number">.12</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span> is variably subnetted<span class="token punctuation">,</span> <span class="token number">2</span> subnets<span class="token punctuation">,</span> <span class="token number">2</span> masks
C        <span class="token number">192.168</span><span class="token number">.12</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span> is directly connected<span class="token punctuation">,</span> FastEthernet0<span class="token operator">/</span><span class="token number">0</span>
L        <span class="token number">192.168</span><span class="token number">.12</span><span class="token number">.1</span><span class="token operator">/</span><span class="token number">32</span> is directly connected<span class="token punctuation">,</span> FastEthernet0<span class="token operator">/</span><span class="token number">0</span>
        <span class="token number">192.168</span><span class="token number">.21</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span> is variably subnetted<span class="token punctuation">,</span> <span class="token number">2</span> subnets<span class="token punctuation">,</span> <span class="token number">2</span> masks
C        <span class="token number">192.168</span><span class="token number">.21</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span> is directly connected<span class="token punctuation">,</span> FastEthernet0<span class="token operator">/</span><span class="token number">1</span>
L        <span class="token number">192.168</span><span class="token number">.21</span><span class="token number">.1</span><span class="token operator">/</span><span class="token number">32</span> is directly connected<span class="token punctuation">,</span> FastEthernet0<span class="token operator">/</span><span class="token number">1</span>
<span class="token comment">//注意：关闭LDP-IGP同步后，即使没有从F0/0口收到R2通告的标签，R1的路由表中还是出现两条去往2.2.2.2/32的等价路径；</span>
<span class="token comment">//如果这种情况出现是在MPLS VPN，AToM 或 VPLS环境中P路由器上，可以能会出现丢包现象；</span></code></pre>]]></content>
      <categories>
        <category>Network</category>
      </categories>
      <tags>
        <tag>MPLS</tag>
        <tag>Network</tag>
      </tags>
  </entry>
  <entry>
    <title>MPLS 实验4：MPLS vs BGP同步</title>
    <url>/2014/MPLS_Lab_4/</url>
    <content><![CDATA[<h1 id="实验环境："><a href="#实验环境：" class="headerlink" title="实验环境："></a>实验环境：</h1><ul>
<li>模拟器：GNS3 0.8.6</li>
<li>Cisco IOS：c7200-adventerprisek9-mz.151-4.M2.image</li>
</ul>
<p>GNS3实验拓扑文件：<br><a href="topology.net">拓扑文件</a></p>
<h1 id="实验拓扑："><a href="#实验拓扑：" class="headerlink" title="实验拓扑："></a>实验拓扑：</h1><p><img src="/2014/MPLS_Lab_4/topo.png"></p>
<span id="more"></span>


<h1 id="基本预配置："><a href="#基本预配置：" class="headerlink" title="基本预配置："></a>基本预配置：</h1><h2 id="R1："><a href="#R1：" class="headerlink" title="R1："></a>R1：</h2><pre class="language-none"><code class="language-none">hostname R1
!
ip cef
!
mpls label protocol ldp
!
interface Loopback0
    ip address 1.1.1.1 255.255.255.255
    ip ospf 1 area 0
!
interface FastEthernet0&#x2F;0
    ip address 192.168.12.1 255.255.255.0
    ip ospf 1 area 0
    no shut
mpls ip
!
interface FastEthernet0&#x2F;1
    ip address 192.168.15.1 255.255.255.0
    no shut
!
router ospf 1
    router-id 1.1.1.1
!
router bgp 1
    bgp router-id 1.1.1.1
    bgp log-neighbor-changes
    network 1.1.1.1 mask 255.255.255.255
    neighbor 4.4.4.4 remote-as 1
    neighbor 4.4.4.4 update-source Loopback0
    neighbor 4.4.4.4 next-hop-self
    neighbor 192.168.15.5 remote-as 2
!
mpls ldp router-id Loopback0 force
!
line con 0
    exec-timeout 0 0
    logging synchronous
!
end</code></pre>

<h2 id="R2"><a href="#R2" class="headerlink" title="R2:"></a>R2:</h2><pre class="language-none"><code class="language-none">hostname R2
!
ip cef
!
mpls label protocol ldp
!
interface Loopback0
    ip address 2.2.2.2 255.255.255.255
    ip ospf 1 area 0
!
interface FastEthernet0&#x2F;0
    ip address 192.168.12.2 255.255.255.0
    ip ospf 1 area 0
    no shutdown
mpls ip
!
interface FastEthernet0&#x2F;1
    ip address 192.168.23.2 255.255.255.0
    ip ospf 1 area 0
    no shutdown
mpls ip
!
router ospf 1
    router-id 2.2.2.2
!
mpls ldp router-id Loopback0 force
!
line con 0
    exec-timeout 0 0
    logging synchronous
!
end</code></pre>

<h2 id="R3"><a href="#R3" class="headerlink" title="R3:"></a>R3:</h2><pre class="language-none"><code class="language-none">hostname R3
!
ip cef
!
mpls label protocol ldp
!
interface Loopback0
    ip address 3.3.3.3 255.255.255.255
    ip ospf 1 area 0
!
interface FastEthernet0&#x2F;0
    ip address 192.168.34.3 255.255.255.0
    ip ospf 1 area 0
    no shutdown
mpls ip
!
interface FastEthernet0&#x2F;1
    ip address 192.168.23.3 255.255.255.0
    ip ospf 1 area 0
    no shutdown
mpls ip
!
router ospf 1
    router-id 3.3.3.3
!
mpls ldp router-id Loopback0 force
!
line con 0
    exec-timeout 0 0
    logging synchronous
!
end</code></pre>

<h2 id="R4"><a href="#R4" class="headerlink" title="R4:"></a>R4:</h2><pre class="language-none"><code class="language-none">hostname R4
!
ip cef
!
mpls label protocol ldp
!
interface Loopback0
    ip address 4.4.4.4 255.255.255.255
    ip ospf 1 area 0
!
interface FastEthernet0&#x2F;0
    ip address 192.168.34.4 255.255.255.0
    ip ospf 1 area 0
    no shutdown
mpls ip
!
interface FastEthernet0&#x2F;1
    ip address 192.168.47.4 255.255.255.0
    no shutdown
!
router ospf 1
    router-id 4.4.4.4
!
router bgp 1
    bgp router-id 4.4.4.4
    bgp log-neighbor-changes
    network 4.4.4.4 mask 255.255.255.255
    neighbor 1.1.1.1 remote-as 1
    neighbor 1.1.1.1 update-source Loopback0
    neighbor 1.1.1.1 next-hop-self
    neighbor 192.168.47.7 remote-as 3
!
mpls ldp router-id Loopback0 force
!
line con 0
    exec-timeout 0 0
    logging synchronous
!
end</code></pre>

<h3 id="R5"><a href="#R5" class="headerlink" title="R5:"></a>R5:</h3><pre class="language-none"><code class="language-none">hostname R5
!
ip cef
!
interface Loopback0
    ip address 5.5.5.5 255.255.255.255
    ip ospf 1 area 0
!
interface FastEthernet0&#x2F;0
    ip address 192.168.56.5 255.255.255.0
    ip ospf 1 area 0
    no shutdown
!
interface FastEthernet0&#x2F;1
    ip address 192.168.15.5 255.255.255.0
    no shutdown
!
router ospf 1
    router-id 5.5.5.5
!
router bgp 2
    bgp router-id 5.5.5.5
    bgp log-neighbor-changes
    network 5.5.5.5 mask 255.255.255.255
    neighbor 192.168.15.1 remote-as 1
!
line con 0
    exec-timeout 0 0
    logging synchronous
!
end</code></pre>

<h2 id="R6"><a href="#R6" class="headerlink" title="R6:"></a>R6:</h2><pre class="language-none"><code class="language-none">hostname R6
!
ip cef
!
interface Loopback0
    ip address 6.6.6.6 255.255.255.255
    ip ospf 1 area 0
!
interface FastEthernet0&#x2F;0
    ip address 192.168.56.6 255.255.255.0
    ip ospf 1 area 0
    no shutdown
!
router ospf 1
    router-id 6.6.6.6
!
line con 0
    exec-timeout 0 0
    logging synchronous
!
end</code></pre>

<h2 id="R7"><a href="#R7" class="headerlink" title="R7:"></a>R7:</h2><pre class="language-none"><code class="language-none">hostname R7
!
ip cef
!
interface Loopback0
    ip address 7.7.7.7 255.255.255.255
    ip ospf 1 area 0
!
interface FastEthernet0&#x2F;0
    ip address 192.168.78.7 255.255.255.0
    ip ospf 1 area 0
    no shutdown
!
interface FastEthernet0&#x2F;1
    ip address 192.168.47.7 255.255.255.0
    no shutdown
!
router ospf 1
    router-id 7.7.7.7
!
router bgp 3
    bgp router-id 7.7.7.7
    bgp log-neighbor-changes
    network 7.7.7.7 mask 255.255.255.255
    neighbor 192.168.47.4 remote-as 1
!
line con 0
    exec-timeout 0 0
    logging synchronous
!
end</code></pre>

<h2 id="R8"><a href="#R8" class="headerlink" title="R8:"></a>R8:</h2><pre class="language-none"><code class="language-none">hostname R8
!
ip cef
!
interface Loopback0
    ip address 8.8.8.8 255.255.255.255
    ip ospf 1 area 0
!
interface FastEthernet0&#x2F;0
    ip address 192.168.78.8 255.255.255.0
    ip ospf 1 area 0
    no shutdown
!
router ospf 1
    router-id 8.8.8.8
!         
line con 0
    exec-timeout 0 0
    logging synchronous
!
end</code></pre>

<h1 id="实验目的："><a href="#实验目的：" class="headerlink" title="实验目的："></a>实验目的：</h1><ol>
<li>使用MPLS解决BGP关闭同步后IBGP非全互联造成的路由黑洞问题；</li>
<li>研究以递归方式为前缀分配标签是如何运作的；</li>
</ol>
<h1 id="实验与调试："><a href="#实验与调试：" class="headerlink" title="实验与调试："></a>实验与调试：</h1><h2 id="实验1："><a href="#实验1：" class="headerlink" title="实验1："></a>实验1：</h2><p>验证：从R5上，以R5的Loopback做源ping R7的Loopback0；</p>
<pre class="language-c" data-language="c"><code class="language-c">R5#ping <span class="token number">7.7</span><span class="token number">.7</span><span class="token number">.7</span> source l0
Type escape sequence to abort<span class="token punctuation">.</span>
Sending <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token operator">-</span>byte ICMP Echos to <span class="token number">7.7</span><span class="token number">.7</span><span class="token number">.7</span><span class="token punctuation">,</span> timeout is <span class="token number">2</span> seconds<span class="token operator">:</span>
Packet sent with a source address of <span class="token number">5.5</span><span class="token number">.5</span><span class="token number">.5</span> 
<span class="token operator">!</span><span class="token operator">!</span><span class="token operator">!</span><span class="token operator">!</span><span class="token operator">!</span>
Success rate is <span class="token number">100</span> <span class="token function">percent</span> <span class="token punctuation">(</span><span class="token number">5</span><span class="token operator">/</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> round<span class="token operator">-</span>trip min<span class="token operator">/</span>avg<span class="token operator">/</span>max <span class="token operator">=</span> <span class="token number">112</span><span class="token operator">/</span><span class="token number">124</span><span class="token operator">/</span><span class="token number">140</span> ms
<span class="token comment">//成功了！</span></code></pre>

<p><strong>问题：</strong></p>
<ul>
<li>在该实验中，R2和R3作为P路由器，并没有运行BGP，为什么以R5的Loopback0做源可以ping通R7的Loopback0？</li>
<li>为什么数据包R2和R3在没有5.5.5.5&#x2F;32和7.7.7.7&#x2F;32的路由的情况下没有丢弃包？</li>
</ul>
<p>模拟ping包的交换过程，假设此时R1收到了来自R5的ping包：</p>
<blockquote>
<p>注意：当数据包进入R1时，数据包并未携带标签，此时R1作为LSP中的第一台LSR，也是入站LSR，R1需要查找CEF来为这个标准的IP数据包打上标签；</p>
</blockquote>
<p>查看R1的路由表：</p>
<pre class="language-c" data-language="c"><code class="language-c">R1#sh ip route
Codes<span class="token operator">:</span> L <span class="token operator">-</span> local<span class="token punctuation">,</span> C <span class="token operator">-</span> connected<span class="token punctuation">,</span> S <span class="token operator">-</span> <span class="token keyword">static</span><span class="token punctuation">,</span> R <span class="token operator">-</span> RIP<span class="token punctuation">,</span> M <span class="token operator">-</span> mobile<span class="token punctuation">,</span> B <span class="token operator">-</span> BGP
        D <span class="token operator">-</span> EIGRP<span class="token punctuation">,</span> EX <span class="token operator">-</span> EIGRP external<span class="token punctuation">,</span> O <span class="token operator">-</span> OSPF<span class="token punctuation">,</span> IA <span class="token operator">-</span> OSPF inter area 
        N1 <span class="token operator">-</span> OSPF NSSA external type <span class="token number">1</span><span class="token punctuation">,</span> N2 <span class="token operator">-</span> OSPF NSSA external type <span class="token number">2</span>
        E1 <span class="token operator">-</span> OSPF external type <span class="token number">1</span><span class="token punctuation">,</span> E2 <span class="token operator">-</span> OSPF external type <span class="token number">2</span>
        i <span class="token operator">-</span> IS<span class="token operator">-</span>IS<span class="token punctuation">,</span> su <span class="token operator">-</span> IS<span class="token operator">-</span>IS summary<span class="token punctuation">,</span> L1 <span class="token operator">-</span> IS<span class="token operator">-</span>IS level<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> L2 <span class="token operator">-</span> IS<span class="token operator">-</span>IS level<span class="token operator">-</span><span class="token number">2</span>
        ia <span class="token operator">-</span> IS<span class="token operator">-</span>IS inter area<span class="token punctuation">,</span> <span class="token operator">*</span> <span class="token operator">-</span> candidate <span class="token keyword">default</span><span class="token punctuation">,</span> U <span class="token operator">-</span> per<span class="token operator">-</span>user <span class="token keyword">static</span> route
        o <span class="token operator">-</span> ODR<span class="token punctuation">,</span> P <span class="token operator">-</span> periodic downloaded <span class="token keyword">static</span> route<span class="token punctuation">,</span> H <span class="token operator">-</span> NHRP<span class="token punctuation">,</span> l <span class="token operator">-</span> LISP
        <span class="token operator">+</span> <span class="token operator">-</span> replicated route<span class="token punctuation">,</span> <span class="token operator">%</span> <span class="token operator">-</span> next hop override

Gateway of last resort is not set

        <span class="token number">1.0</span><span class="token number">.0</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">32</span> is subnetted<span class="token punctuation">,</span> <span class="token number">1</span> subnets
C        <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span> is directly connected<span class="token punctuation">,</span> Loopback0
        <span class="token number">2.0</span><span class="token number">.0</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">32</span> is subnetted<span class="token punctuation">,</span> <span class="token number">1</span> subnets
O        <span class="token number">2.2</span><span class="token number">.2</span><span class="token number">.2</span> <span class="token punctuation">[</span><span class="token number">110</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">]</span> via <span class="token number">192.168</span><span class="token number">.12</span><span class="token number">.2</span><span class="token punctuation">,</span> <span class="token number">01</span><span class="token operator">:</span><span class="token number">20</span><span class="token operator">:</span><span class="token number">09</span><span class="token punctuation">,</span> FastEthernet0<span class="token operator">/</span><span class="token number">0</span>
        <span class="token number">3.0</span><span class="token number">.0</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">32</span> is subnetted<span class="token punctuation">,</span> <span class="token number">1</span> subnets
O        <span class="token number">3.3</span><span class="token number">.3</span><span class="token number">.3</span> <span class="token punctuation">[</span><span class="token number">110</span><span class="token operator">/</span><span class="token number">3</span><span class="token punctuation">]</span> via <span class="token number">192.168</span><span class="token number">.12</span><span class="token number">.2</span><span class="token punctuation">,</span> <span class="token number">01</span><span class="token operator">:</span><span class="token number">20</span><span class="token operator">:</span><span class="token number">09</span><span class="token punctuation">,</span> FastEthernet0<span class="token operator">/</span><span class="token number">0</span>
        <span class="token number">4.0</span><span class="token number">.0</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">32</span> is subnetted<span class="token punctuation">,</span> <span class="token number">1</span> subnets
O        <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span> <span class="token punctuation">[</span><span class="token number">110</span><span class="token operator">/</span><span class="token number">4</span><span class="token punctuation">]</span> via <span class="token number">192.168</span><span class="token number">.12</span><span class="token number">.2</span><span class="token punctuation">,</span> <span class="token number">01</span><span class="token operator">:</span><span class="token number">20</span><span class="token operator">:</span><span class="token number">09</span><span class="token punctuation">,</span> FastEthernet0<span class="token operator">/</span><span class="token number">0</span>
        <span class="token number">5.0</span><span class="token number">.0</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">32</span> is subnetted<span class="token punctuation">,</span> <span class="token number">1</span> subnets
B        <span class="token number">5.5</span><span class="token number">.5</span><span class="token number">.5</span> <span class="token punctuation">[</span><span class="token number">20</span><span class="token operator">/</span><span class="token number">0</span><span class="token punctuation">]</span> via <span class="token number">192.168</span><span class="token number">.15</span><span class="token number">.5</span><span class="token punctuation">,</span> <span class="token number">00</span><span class="token operator">:</span><span class="token number">17</span><span class="token operator">:</span><span class="token number">45</span>
        <span class="token number">7.0</span><span class="token number">.0</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">32</span> is subnetted<span class="token punctuation">,</span> <span class="token number">1</span> subnets
B        <span class="token number">7.7</span><span class="token number">.7</span><span class="token number">.7</span> <span class="token punctuation">[</span><span class="token number">200</span><span class="token operator">/</span><span class="token number">0</span><span class="token punctuation">]</span> via <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span><span class="token punctuation">,</span> <span class="token number">00</span><span class="token operator">:</span><span class="token number">16</span><span class="token operator">:</span><span class="token number">46</span>
        <span class="token number">192.168</span><span class="token number">.12</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span> is variably subnetted<span class="token punctuation">,</span> <span class="token number">2</span> subnets<span class="token punctuation">,</span> <span class="token number">2</span> masks
C        <span class="token number">192.168</span><span class="token number">.12</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span> is directly connected<span class="token punctuation">,</span> FastEthernet0<span class="token operator">/</span><span class="token number">0</span>
L        <span class="token number">192.168</span><span class="token number">.12</span><span class="token number">.1</span><span class="token operator">/</span><span class="token number">32</span> is directly connected<span class="token punctuation">,</span> FastEthernet0<span class="token operator">/</span><span class="token number">0</span>
        <span class="token number">192.168</span><span class="token number">.15</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span> is variably subnetted<span class="token punctuation">,</span> <span class="token number">2</span> subnets<span class="token punctuation">,</span> <span class="token number">2</span> masks
C        <span class="token number">192.168</span><span class="token number">.15</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span> is directly connected<span class="token punctuation">,</span> FastEthernet0<span class="token operator">/</span><span class="token number">1</span>
L        <span class="token number">192.168</span><span class="token number">.15</span><span class="token number">.1</span><span class="token operator">/</span><span class="token number">32</span> is directly connected<span class="token punctuation">,</span> FastEthernet0<span class="token operator">/</span><span class="token number">1</span>
O     <span class="token number">192.168</span><span class="token number">.23</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span> <span class="token punctuation">[</span><span class="token number">110</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">]</span> via <span class="token number">192.168</span><span class="token number">.12</span><span class="token number">.2</span><span class="token punctuation">,</span> <span class="token number">01</span><span class="token operator">:</span><span class="token number">20</span><span class="token operator">:</span><span class="token number">09</span><span class="token punctuation">,</span> FastEthernet0<span class="token operator">/</span><span class="token number">0</span>
O     <span class="token number">192.168</span><span class="token number">.34</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span> <span class="token punctuation">[</span><span class="token number">110</span><span class="token operator">/</span><span class="token number">3</span><span class="token punctuation">]</span> via <span class="token number">192.168</span><span class="token number">.12</span><span class="token number">.2</span><span class="token punctuation">,</span> <span class="token number">01</span><span class="token operator">:</span><span class="token number">20</span><span class="token operator">:</span><span class="token number">09</span><span class="token punctuation">,</span> FastEthernet0<span class="token operator">/</span><span class="token number">0</span>
<span class="token comment">//在R1上，路由表递归查找下一跳可以发现：要去往7.7.7.7/32必须先到达4.4.4.4；</span>
<span class="token comment">//要到达4.4.4.4/32必须先到达192.168.12.2；</span></code></pre>

<p>查看R1的LFIB表：</p>
<pre class="language-c" data-language="c"><code class="language-c">R1#show mpls forwarding<span class="token operator">-</span>table
Local      Outgoing   Prefix           Bytes Label   Outgoing   Next Hop    
Label      Label      or Tunnel Id     Switched      interface              
<span class="token number">16</span>         <span class="token number">16</span>         <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span><span class="token operator">/</span><span class="token number">32</span>       <span class="token number">0</span>             Fa0<span class="token operator">/</span><span class="token number">0</span>      <span class="token number">192.168</span><span class="token number">.12</span><span class="token number">.2</span>
<span class="token number">17</span>         <span class="token number">17</span>         <span class="token number">3.3</span><span class="token number">.3</span><span class="token number">.3</span><span class="token operator">/</span><span class="token number">32</span>       <span class="token number">0</span>             Fa0<span class="token operator">/</span><span class="token number">0</span>      <span class="token number">192.168</span><span class="token number">.12</span><span class="token number">.2</span>
<span class="token number">18</span>         Pop Label  <span class="token number">2.2</span><span class="token number">.2</span><span class="token number">.2</span><span class="token operator">/</span><span class="token number">32</span>       <span class="token number">0</span>             Fa0<span class="token operator">/</span><span class="token number">0</span>      <span class="token number">192.168</span><span class="token number">.12</span><span class="token number">.2</span>
<span class="token number">19</span>         <span class="token number">18</span>         <span class="token number">192.168</span><span class="token number">.34</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span>  <span class="token number">0</span>             Fa0<span class="token operator">/</span><span class="token number">0</span>      <span class="token number">192.168</span><span class="token number">.12</span><span class="token number">.2</span>
<span class="token number">20</span>         Pop Label  <span class="token number">192.168</span><span class="token number">.23</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span>  <span class="token number">0</span>             Fa0<span class="token operator">/</span><span class="token number">0</span>      <span class="token number">192.168</span><span class="token number">.12</span><span class="token number">.2</span>
<span class="token comment">//由LFIB表可以得出，去往前缀4.4.4.4/32的出标签为16；</span></code></pre>

<p>沿路由递归查看CEF表：</p>
<pre class="language-c" data-language="c"><code class="language-c">R1#sh ip cef <span class="token number">7.7</span><span class="token number">.7</span><span class="token number">.7</span> detail
<span class="token number">7.7</span><span class="token number">.7</span><span class="token number">.7</span><span class="token operator">/</span><span class="token number">32</span><span class="token punctuation">,</span> epoch <span class="token number">0</span><span class="token punctuation">,</span> flags rib only nolabel<span class="token punctuation">,</span> rib defined all labels
    recursive via <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span>
    nexthop <span class="token number">192.168</span><span class="token number">.12</span><span class="token number">.2</span> FastEthernet0<span class="token operator">/</span><span class="token number">0</span> label <span class="token number">16</span>

R1#sh ip cef <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span> detail
<span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span><span class="token operator">/</span><span class="token number">32</span><span class="token punctuation">,</span> epoch <span class="token number">0</span>
    local label info<span class="token operator">:</span> global<span class="token operator">/</span><span class="token number">16</span>
    <span class="token number">1</span> RR source <span class="token punctuation">[</span>no flags<span class="token punctuation">]</span>
    nexthop <span class="token number">192.168</span><span class="token number">.12</span><span class="token number">.2</span> FastEthernet0<span class="token operator">/</span><span class="token number">0</span> label <span class="token number">16</span>
<span class="token comment">//由于路由递归查找的关系，去往前缀7.7.7.7/32的数据包在出站时被打上了和去往前缀4.4.4.4/32的数据包相同的出标签16（R1的出标签，R2的入标签）；</span></code></pre>

<pre class="language-none"><code class="language-none">R1#sh ip cef 192.168.12.2 detail
192.168.12.2&#x2F;32, epoch 0, flags attached
    Adj source: IP adj out of FastEthernet0&#x2F;0, addr 192.168.12.2 6819DAE0
    Dependent covered prefix type adjfib cover 192.168.12.0&#x2F;24
    attached to FastEthernet0&#x2F;0
&#x2F;&#x2F;由于R1与192.168.12.0&#x2F;24直连，所以不再需要在进行标签转发，所以R1没有关于192.168.12.0&#x2F;24的出标签；</code></pre>

<p><strong>此时数据达到了R2：</strong></p>
<p>查看R2的IP路由表：</p>
<pre class="language-c" data-language="c"><code class="language-c">R2#show ip route
Codes<span class="token operator">:</span> L <span class="token operator">-</span> local<span class="token punctuation">,</span> C <span class="token operator">-</span> connected<span class="token punctuation">,</span> S <span class="token operator">-</span> <span class="token keyword">static</span><span class="token punctuation">,</span> R <span class="token operator">-</span> RIP<span class="token punctuation">,</span> M <span class="token operator">-</span> mobile<span class="token punctuation">,</span> B <span class="token operator">-</span> BGP
        D <span class="token operator">-</span> EIGRP<span class="token punctuation">,</span> EX <span class="token operator">-</span> EIGRP external<span class="token punctuation">,</span> O <span class="token operator">-</span> OSPF<span class="token punctuation">,</span> IA <span class="token operator">-</span> OSPF inter area 
        N1 <span class="token operator">-</span> OSPF NSSA external type <span class="token number">1</span><span class="token punctuation">,</span> N2 <span class="token operator">-</span> OSPF NSSA external type <span class="token number">2</span>
        E1 <span class="token operator">-</span> OSPF external type <span class="token number">1</span><span class="token punctuation">,</span> E2 <span class="token operator">-</span> OSPF external type <span class="token number">2</span>
        i <span class="token operator">-</span> IS<span class="token operator">-</span>IS<span class="token punctuation">,</span> su <span class="token operator">-</span> IS<span class="token operator">-</span>IS summary<span class="token punctuation">,</span> L1 <span class="token operator">-</span> IS<span class="token operator">-</span>IS level<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> L2 <span class="token operator">-</span> IS<span class="token operator">-</span>IS level<span class="token operator">-</span><span class="token number">2</span>
        ia <span class="token operator">-</span> IS<span class="token operator">-</span>IS inter area<span class="token punctuation">,</span> <span class="token operator">*</span> <span class="token operator">-</span> candidate <span class="token keyword">default</span><span class="token punctuation">,</span> U <span class="token operator">-</span> per<span class="token operator">-</span>user <span class="token keyword">static</span> route
        o <span class="token operator">-</span> ODR<span class="token punctuation">,</span> P <span class="token operator">-</span> periodic downloaded <span class="token keyword">static</span> route<span class="token punctuation">,</span> H <span class="token operator">-</span> NHRP<span class="token punctuation">,</span> l <span class="token operator">-</span> LISP
        <span class="token operator">+</span> <span class="token operator">-</span> replicated route<span class="token punctuation">,</span> <span class="token operator">%</span> <span class="token operator">-</span> next hop override

Gateway of last resort is not set

        <span class="token number">1.0</span><span class="token number">.0</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">32</span> is subnetted<span class="token punctuation">,</span> <span class="token number">1</span> subnets
O        <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span> <span class="token punctuation">[</span><span class="token number">110</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">]</span> via <span class="token number">192.168</span><span class="token number">.12</span><span class="token number">.1</span><span class="token punctuation">,</span> <span class="token number">03</span><span class="token operator">:</span><span class="token number">42</span><span class="token operator">:</span><span class="token number">35</span><span class="token punctuation">,</span> FastEthernet0<span class="token operator">/</span><span class="token number">0</span>
        <span class="token number">2.0</span><span class="token number">.0</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">32</span> is subnetted<span class="token punctuation">,</span> <span class="token number">1</span> subnets
C        <span class="token number">2.2</span><span class="token number">.2</span><span class="token number">.2</span> is directly connected<span class="token punctuation">,</span> Loopback0
        <span class="token number">3.0</span><span class="token number">.0</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">32</span> is subnetted<span class="token punctuation">,</span> <span class="token number">1</span> subnets
O        <span class="token number">3.3</span><span class="token number">.3</span><span class="token number">.3</span> <span class="token punctuation">[</span><span class="token number">110</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">]</span> via <span class="token number">192.168</span><span class="token number">.23</span><span class="token number">.3</span><span class="token punctuation">,</span> <span class="token number">03</span><span class="token operator">:</span><span class="token number">42</span><span class="token operator">:</span><span class="token number">45</span><span class="token punctuation">,</span> FastEthernet0<span class="token operator">/</span><span class="token number">1</span>
        <span class="token number">4.0</span><span class="token number">.0</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">32</span> is subnetted<span class="token punctuation">,</span> <span class="token number">1</span> subnets
O        <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span> <span class="token punctuation">[</span><span class="token number">110</span><span class="token operator">/</span><span class="token number">3</span><span class="token punctuation">]</span> via <span class="token number">192.168</span><span class="token number">.23</span><span class="token number">.3</span><span class="token punctuation">,</span> <span class="token number">03</span><span class="token operator">:</span><span class="token number">42</span><span class="token operator">:</span><span class="token number">45</span><span class="token punctuation">,</span> FastEthernet0<span class="token operator">/</span><span class="token number">1</span>
        <span class="token number">192.168</span><span class="token number">.12</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span> is variably subnetted<span class="token punctuation">,</span> <span class="token number">2</span> subnets<span class="token punctuation">,</span> <span class="token number">2</span> masks
C        <span class="token number">192.168</span><span class="token number">.12</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span> is directly connected<span class="token punctuation">,</span> FastEthernet0<span class="token operator">/</span><span class="token number">0</span>
L        <span class="token number">192.168</span><span class="token number">.12</span><span class="token number">.2</span><span class="token operator">/</span><span class="token number">32</span> is directly connected<span class="token punctuation">,</span> FastEthernet0<span class="token operator">/</span><span class="token number">0</span>
        <span class="token number">192.168</span><span class="token number">.23</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span> is variably subnetted<span class="token punctuation">,</span> <span class="token number">2</span> subnets<span class="token punctuation">,</span> <span class="token number">2</span> masks
C        <span class="token number">192.168</span><span class="token number">.23</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span> is directly connected<span class="token punctuation">,</span> FastEthernet0<span class="token operator">/</span><span class="token number">1</span>
L        <span class="token number">192.168</span><span class="token number">.23</span><span class="token number">.2</span><span class="token operator">/</span><span class="token number">32</span> is directly connected<span class="token punctuation">,</span> FastEthernet0<span class="token operator">/</span><span class="token number">1</span>
O     <span class="token number">192.168</span><span class="token number">.34</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span> <span class="token punctuation">[</span><span class="token number">110</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">]</span> via <span class="token number">192.168</span><span class="token number">.23</span><span class="token number">.3</span><span class="token punctuation">,</span> <span class="token number">03</span><span class="token operator">:</span><span class="token number">42</span><span class="token operator">:</span><span class="token number">45</span><span class="token punctuation">,</span> FastEthernet0<span class="token operator">/</span><span class="token number">1</span>
<span class="token comment">//可以看到，由于R2没有运行BGP，所以R2的路由表中没有关于前缀7.7.7.7/32的路由条目；</span>
<span class="token comment">//注意：递归查找路由表只会发生在运行BGP并与其他PE路由器建立IBGP关系的PE路由器，</span>
<span class="token comment">//而在P路由器上，由于没有运行BGP，不可能有相关路由信息，所以只按照标签转发。</span></code></pre>

<p>查看R2的LFIB：</p>
<pre class="language-c" data-language="c"><code class="language-c">R2#show mpls forwarding<span class="token operator">-</span>table
Local      Outgoing   Prefix           Bytes Label   Outgoing   Next Hop    
Label      Label      or Tunnel Id     Switched      interface              
<span class="token number">16</span>         <span class="token number">16</span>         <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span><span class="token operator">/</span><span class="token number">32</span>       <span class="token number">38689</span>         Fa0<span class="token operator">/</span><span class="token number">1</span>      <span class="token number">192.168</span><span class="token number">.23</span><span class="token number">.3</span>
<span class="token number">17</span>         Pop Label  <span class="token number">3.3</span><span class="token number">.3</span><span class="token number">.3</span><span class="token operator">/</span><span class="token number">32</span>       <span class="token number">0</span>             Fa0<span class="token operator">/</span><span class="token number">1</span>      <span class="token number">192.168</span><span class="token number">.23</span><span class="token number">.3</span>
<span class="token number">18</span>         Pop Label  <span class="token number">192.168</span><span class="token number">.34</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span>  <span class="token number">686</span>           Fa0<span class="token operator">/</span><span class="token number">1</span>      <span class="token number">192.168</span><span class="token number">.23</span><span class="token number">.3</span>
<span class="token number">19</span>         Pop Label  <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span><span class="token operator">/</span><span class="token number">32</span>       <span class="token number">41711</span>         Fa0<span class="token operator">/</span><span class="token number">0</span>      <span class="token number">192.168</span><span class="token number">.12</span><span class="token number">.1</span>
<span class="token comment">//尽管R2没有关于前缀7.7.7.7/32的路由条目，但由于AS1是MPLS域，路由器都使用标签转发数据，</span>
<span class="token comment">//加之因为路由的递归查找，使得前缀7.7.7.7/32“继承了”前缀4.4.4.4/32的标签；</span>
<span class="token comment">//所以，当R2收到去往7.7.7.7/32的数据包时，此数据包携带了前缀4.4.4.4/32的入标签16（R2的入标签，R1的出标签）；</span>
<span class="token comment">//于是，R2作出转发决定，并给数据包打上出标签16（R2的出标签，R3的入标签），然后转发给R3；</span></code></pre>

<p><strong>此时数据到达了R3：</strong></p>
<p>查看R3的IP路由表：</p>
<pre class="language-c" data-language="c"><code class="language-c">R3#show ip route
Codes<span class="token operator">:</span> L <span class="token operator">-</span> local<span class="token punctuation">,</span> C <span class="token operator">-</span> connected<span class="token punctuation">,</span> S <span class="token operator">-</span> <span class="token keyword">static</span><span class="token punctuation">,</span> R <span class="token operator">-</span> RIP<span class="token punctuation">,</span> M <span class="token operator">-</span> mobile<span class="token punctuation">,</span> B <span class="token operator">-</span> BGP
        D <span class="token operator">-</span> EIGRP<span class="token punctuation">,</span> EX <span class="token operator">-</span> EIGRP external<span class="token punctuation">,</span> O <span class="token operator">-</span> OSPF<span class="token punctuation">,</span> IA <span class="token operator">-</span> OSPF inter area 
        N1 <span class="token operator">-</span> OSPF NSSA external type <span class="token number">1</span><span class="token punctuation">,</span> N2 <span class="token operator">-</span> OSPF NSSA external type <span class="token number">2</span>
        E1 <span class="token operator">-</span> OSPF external type <span class="token number">1</span><span class="token punctuation">,</span> E2 <span class="token operator">-</span> OSPF external type <span class="token number">2</span>
        i <span class="token operator">-</span> IS<span class="token operator">-</span>IS<span class="token punctuation">,</span> su <span class="token operator">-</span> IS<span class="token operator">-</span>IS summary<span class="token punctuation">,</span> L1 <span class="token operator">-</span> IS<span class="token operator">-</span>IS level<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> L2 <span class="token operator">-</span> IS<span class="token operator">-</span>IS level<span class="token operator">-</span><span class="token number">2</span>
        ia <span class="token operator">-</span> IS<span class="token operator">-</span>IS inter area<span class="token punctuation">,</span> <span class="token operator">*</span> <span class="token operator">-</span> candidate <span class="token keyword">default</span><span class="token punctuation">,</span> U <span class="token operator">-</span> per<span class="token operator">-</span>user <span class="token keyword">static</span> route
        o <span class="token operator">-</span> ODR<span class="token punctuation">,</span> P <span class="token operator">-</span> periodic downloaded <span class="token keyword">static</span> route<span class="token punctuation">,</span> H <span class="token operator">-</span> NHRP<span class="token punctuation">,</span> l <span class="token operator">-</span> LISP
        <span class="token operator">+</span> <span class="token operator">-</span> replicated route<span class="token punctuation">,</span> <span class="token operator">%</span> <span class="token operator">-</span> next hop override

Gateway of last resort is not set

        <span class="token number">1.0</span><span class="token number">.0</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">32</span> is subnetted<span class="token punctuation">,</span> <span class="token number">1</span> subnets
O        <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span> <span class="token punctuation">[</span><span class="token number">110</span><span class="token operator">/</span><span class="token number">3</span><span class="token punctuation">]</span> via <span class="token number">192.168</span><span class="token number">.23</span><span class="token number">.2</span><span class="token punctuation">,</span> <span class="token number">03</span><span class="token operator">:</span><span class="token number">55</span><span class="token operator">:</span><span class="token number">45</span><span class="token punctuation">,</span> FastEthernet0<span class="token operator">/</span><span class="token number">1</span>
        <span class="token number">2.0</span><span class="token number">.0</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">32</span> is subnetted<span class="token punctuation">,</span> <span class="token number">1</span> subnets
O        <span class="token number">2.2</span><span class="token number">.2</span><span class="token number">.2</span> <span class="token punctuation">[</span><span class="token number">110</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">]</span> via <span class="token number">192.168</span><span class="token number">.23</span><span class="token number">.2</span><span class="token punctuation">,</span> <span class="token number">03</span><span class="token operator">:</span><span class="token number">55</span><span class="token operator">:</span><span class="token number">55</span><span class="token punctuation">,</span> FastEthernet0<span class="token operator">/</span><span class="token number">1</span>
        <span class="token number">3.0</span><span class="token number">.0</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">32</span> is subnetted<span class="token punctuation">,</span> <span class="token number">1</span> subnets
C        <span class="token number">3.3</span><span class="token number">.3</span><span class="token number">.3</span> is directly connected<span class="token punctuation">,</span> Loopback0
        <span class="token number">4.0</span><span class="token number">.0</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">32</span> is subnetted<span class="token punctuation">,</span> <span class="token number">1</span> subnets
O        <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span> <span class="token punctuation">[</span><span class="token number">110</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">]</span> via <span class="token number">192.168</span><span class="token number">.34</span><span class="token number">.4</span><span class="token punctuation">,</span> <span class="token number">03</span><span class="token operator">:</span><span class="token number">56</span><span class="token operator">:</span><span class="token number">35</span><span class="token punctuation">,</span> FastEthernet0<span class="token operator">/</span><span class="token number">0</span>
O     <span class="token number">192.168</span><span class="token number">.12</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span> <span class="token punctuation">[</span><span class="token number">110</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">]</span> via <span class="token number">192.168</span><span class="token number">.23</span><span class="token number">.2</span><span class="token punctuation">,</span> <span class="token number">03</span><span class="token operator">:</span><span class="token number">55</span><span class="token operator">:</span><span class="token number">55</span><span class="token punctuation">,</span> FastEthernet0<span class="token operator">/</span><span class="token number">1</span>
        <span class="token number">192.168</span><span class="token number">.23</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span> is variably subnetted<span class="token punctuation">,</span> <span class="token number">2</span> subnets<span class="token punctuation">,</span> <span class="token number">2</span> masks
C        <span class="token number">192.168</span><span class="token number">.23</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span> is directly connected<span class="token punctuation">,</span> FastEthernet0<span class="token operator">/</span><span class="token number">1</span>
L        <span class="token number">192.168</span><span class="token number">.23</span><span class="token number">.3</span><span class="token operator">/</span><span class="token number">32</span> is directly connected<span class="token punctuation">,</span> FastEthernet0<span class="token operator">/</span><span class="token number">1</span>
        <span class="token number">192.168</span><span class="token number">.34</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span> is variably subnetted<span class="token punctuation">,</span> <span class="token number">2</span> subnets<span class="token punctuation">,</span> <span class="token number">2</span> masks
C        <span class="token number">192.168</span><span class="token number">.34</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span> is directly connected<span class="token punctuation">,</span> FastEthernet0<span class="token operator">/</span><span class="token number">0</span>
L        <span class="token number">192.168</span><span class="token number">.34</span><span class="token number">.3</span><span class="token operator">/</span><span class="token number">32</span> is directly connected<span class="token punctuation">,</span> FastEthernet0<span class="token operator">/</span><span class="token number">0</span>
<span class="token comment">//同样的，由于R2没有运行BGP，所以R3的路由表中没有关于前缀7.7.7.7/32的路由条目；</span></code></pre>

<p>查看R3的LFIB表：</p>
<pre class="language-c" data-language="c"><code class="language-c">R3#sh mpls forwarding<span class="token operator">-</span>table
Local      Outgoing   Prefix           Bytes Label   Outgoing   Next Hop    
Label      Label      or Tunnel Id     Switched      interface              
<span class="token number">16</span>         Pop Label  <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span><span class="token operator">/</span><span class="token number">32</span>       <span class="token number">35742</span>         Fa0<span class="token operator">/</span><span class="token number">0</span>      <span class="token number">192.168</span><span class="token number">.34</span><span class="token number">.4</span>
<span class="token number">17</span>         Pop Label  <span class="token number">2.2</span><span class="token number">.2</span><span class="token number">.2</span><span class="token operator">/</span><span class="token number">32</span>       <span class="token number">0</span>             Fa0<span class="token operator">/</span><span class="token number">1</span>      <span class="token number">192.168</span><span class="token number">.23</span><span class="token number">.2</span>
<span class="token number">18</span>         Pop Label  <span class="token number">192.168</span><span class="token number">.12</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span>  <span class="token number">1064</span>          Fa0<span class="token operator">/</span><span class="token number">1</span>      <span class="token number">192.168</span><span class="token number">.23</span><span class="token number">.2</span>
<span class="token number">19</span>         <span class="token number">19</span>         <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span><span class="token operator">/</span><span class="token number">32</span>       <span class="token number">43006</span>         Fa0<span class="token operator">/</span><span class="token number">1</span>      <span class="token number">192.168</span><span class="token number">.23</span><span class="token number">.2</span>
<span class="token comment">//尽管R2没有关于前缀7.7.7.7/32的路由条目，但由于AS1是MPLS域，路由器都使用标签转发数据，</span>
<span class="token comment">//加之因为路由的递归查找，使得前缀7.7.7.7/32“继承了”前缀4.4.4.4/32的标签；</span>
<span class="token comment">//所以，当R3收到去往7.7.7.7/32的数据包时，此数据包携带了前缀4.4.4.4/32的入标签16（R3的入标签，R2的出标签）；</span>
<span class="token comment">//于是，R3作出转发决定，并将数据包的标签弹出（R3的出标签为隐式空标签，R4的通告给R3的入标签为隐式空标签），然后转发给R4；</span></code></pre>

<p><strong>此时数据到达了R4:</strong></p>
<p>由于R4是LSP中的最后一台LSR，即出站LSR，所以R4负责移除标签，然后查找CEF，按照IP数据包的标准流程进行处理；</p>
<p>查看R4的LFIB表：</p>
<pre class="language-c" data-language="c"><code class="language-c">R4#sh mpls forwarding<span class="token operator">-</span>table
Local      Outgoing   Prefix           Bytes Label   Outgoing   Next Hop    
Label      Label      or Tunnel Id     Switched      interface              
<span class="token number">16</span>         Pop Label  <span class="token number">3.3</span><span class="token number">.3</span><span class="token number">.3</span><span class="token operator">/</span><span class="token number">32</span>       <span class="token number">0</span>             Fa0<span class="token operator">/</span><span class="token number">0</span>      <span class="token number">192.168</span><span class="token number">.34</span><span class="token number">.3</span>
<span class="token number">17</span>         Pop Label  <span class="token number">192.168</span><span class="token number">.23</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span>  <span class="token number">0</span>             Fa0<span class="token operator">/</span><span class="token number">0</span>      <span class="token number">192.168</span><span class="token number">.34</span><span class="token number">.3</span>
<span class="token number">18</span>         <span class="token number">17</span>         <span class="token number">2.2</span><span class="token number">.2</span><span class="token number">.2</span><span class="token operator">/</span><span class="token number">32</span>       <span class="token number">0</span>             Fa0<span class="token operator">/</span><span class="token number">0</span>      <span class="token number">192.168</span><span class="token number">.34</span><span class="token number">.3</span>
<span class="token number">19</span>         <span class="token number">19</span>         <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span><span class="token operator">/</span><span class="token number">32</span>       <span class="token number">0</span>             Fa0<span class="token operator">/</span><span class="token number">0</span>      <span class="token number">192.168</span><span class="token number">.34</span><span class="token number">.3</span>
<span class="token number">20</span>         <span class="token number">18</span>         <span class="token number">192.168</span><span class="token number">.12</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span>  <span class="token number">0</span>             Fa0<span class="token operator">/</span><span class="token number">0</span>      <span class="token number">192.168</span><span class="token number">.34</span><span class="token number">.3</span>
```           
                
查看R4的IP路由表：
```c
R4#show ip route
Codes<span class="token operator">:</span> L <span class="token operator">-</span> local<span class="token punctuation">,</span> C <span class="token operator">-</span> connected<span class="token punctuation">,</span> S <span class="token operator">-</span> <span class="token keyword">static</span><span class="token punctuation">,</span> R <span class="token operator">-</span> RIP<span class="token punctuation">,</span> M <span class="token operator">-</span> mobile<span class="token punctuation">,</span> B <span class="token operator">-</span> BGP
        D <span class="token operator">-</span> EIGRP<span class="token punctuation">,</span> EX <span class="token operator">-</span> EIGRP external<span class="token punctuation">,</span> O <span class="token operator">-</span> OSPF<span class="token punctuation">,</span> IA <span class="token operator">-</span> OSPF inter area 
        N1 <span class="token operator">-</span> OSPF NSSA external type <span class="token number">1</span><span class="token punctuation">,</span> N2 <span class="token operator">-</span> OSPF NSSA external type <span class="token number">2</span>
        E1 <span class="token operator">-</span> OSPF external type <span class="token number">1</span><span class="token punctuation">,</span> E2 <span class="token operator">-</span> OSPF external type <span class="token number">2</span>
        i <span class="token operator">-</span> IS<span class="token operator">-</span>IS<span class="token punctuation">,</span> su <span class="token operator">-</span> IS<span class="token operator">-</span>IS summary<span class="token punctuation">,</span> L1 <span class="token operator">-</span> IS<span class="token operator">-</span>IS level<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> L2 <span class="token operator">-</span> IS<span class="token operator">-</span>IS level<span class="token operator">-</span><span class="token number">2</span>
        ia <span class="token operator">-</span> IS<span class="token operator">-</span>IS inter area<span class="token punctuation">,</span> <span class="token operator">*</span> <span class="token operator">-</span> candidate <span class="token keyword">default</span><span class="token punctuation">,</span> U <span class="token operator">-</span> per<span class="token operator">-</span>user <span class="token keyword">static</span> route
        o <span class="token operator">-</span> ODR<span class="token punctuation">,</span> P <span class="token operator">-</span> periodic downloaded <span class="token keyword">static</span> route<span class="token punctuation">,</span> H <span class="token operator">-</span> NHRP<span class="token punctuation">,</span> l <span class="token operator">-</span> LISP
        <span class="token operator">+</span> <span class="token operator">-</span> replicated route<span class="token punctuation">,</span> <span class="token operator">%</span> <span class="token operator">-</span> next hop override

Gateway of last resort is not set

        <span class="token number">1.0</span><span class="token number">.0</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">32</span> is subnetted<span class="token punctuation">,</span> <span class="token number">1</span> subnets
O        <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span> <span class="token punctuation">[</span><span class="token number">110</span><span class="token operator">/</span><span class="token number">4</span><span class="token punctuation">]</span> via <span class="token number">192.168</span><span class="token number">.34</span><span class="token number">.3</span><span class="token punctuation">,</span> <span class="token number">04</span><span class="token operator">:</span><span class="token number">16</span><span class="token operator">:</span><span class="token number">48</span><span class="token punctuation">,</span> FastEthernet0<span class="token operator">/</span><span class="token number">0</span>
        <span class="token number">2.0</span><span class="token number">.0</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">32</span> is subnetted<span class="token punctuation">,</span> <span class="token number">1</span> subnets
O        <span class="token number">2.2</span><span class="token number">.2</span><span class="token number">.2</span> <span class="token punctuation">[</span><span class="token number">110</span><span class="token operator">/</span><span class="token number">3</span><span class="token punctuation">]</span> via <span class="token number">192.168</span><span class="token number">.34</span><span class="token number">.3</span><span class="token punctuation">,</span> <span class="token number">04</span><span class="token operator">:</span><span class="token number">16</span><span class="token operator">:</span><span class="token number">48</span><span class="token punctuation">,</span> FastEthernet0<span class="token operator">/</span><span class="token number">0</span>
        <span class="token number">3.0</span><span class="token number">.0</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">32</span> is subnetted<span class="token punctuation">,</span> <span class="token number">1</span> subnets
O        <span class="token number">3.3</span><span class="token number">.3</span><span class="token number">.3</span> <span class="token punctuation">[</span><span class="token number">110</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">]</span> via <span class="token number">192.168</span><span class="token number">.34</span><span class="token number">.3</span><span class="token punctuation">,</span> <span class="token number">04</span><span class="token operator">:</span><span class="token number">17</span><span class="token operator">:</span><span class="token number">36</span><span class="token punctuation">,</span> FastEthernet0<span class="token operator">/</span><span class="token number">0</span>
        <span class="token number">4.0</span><span class="token number">.0</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">32</span> is subnetted<span class="token punctuation">,</span> <span class="token number">1</span> subnets
C        <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span> is directly connected<span class="token punctuation">,</span> Loopback0
        <span class="token number">5.0</span><span class="token number">.0</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">32</span> is subnetted<span class="token punctuation">,</span> <span class="token number">1</span> subnets
B        <span class="token number">5.5</span><span class="token number">.5</span><span class="token number">.5</span> <span class="token punctuation">[</span><span class="token number">200</span><span class="token operator">/</span><span class="token number">0</span><span class="token punctuation">]</span> via <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span><span class="token punctuation">,</span> <span class="token number">03</span><span class="token operator">:</span><span class="token number">14</span><span class="token operator">:</span><span class="token number">32</span>
        <span class="token number">7.0</span><span class="token number">.0</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">32</span> is subnetted<span class="token punctuation">,</span> <span class="token number">1</span> subnets
B        <span class="token number">7.7</span><span class="token number">.7</span><span class="token number">.7</span> <span class="token punctuation">[</span><span class="token number">20</span><span class="token operator">/</span><span class="token number">0</span><span class="token punctuation">]</span> via <span class="token number">192.168</span><span class="token number">.47</span><span class="token number">.7</span><span class="token punctuation">,</span> <span class="token number">03</span><span class="token operator">:</span><span class="token number">13</span><span class="token operator">:</span><span class="token number">34</span>
O     <span class="token number">192.168</span><span class="token number">.12</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span> <span class="token punctuation">[</span><span class="token number">110</span><span class="token operator">/</span><span class="token number">3</span><span class="token punctuation">]</span> via <span class="token number">192.168</span><span class="token number">.34</span><span class="token number">.3</span><span class="token punctuation">,</span> <span class="token number">04</span><span class="token operator">:</span><span class="token number">16</span><span class="token operator">:</span><span class="token number">48</span><span class="token punctuation">,</span> FastEthernet0<span class="token operator">/</span><span class="token number">0</span>
O     <span class="token number">192.168</span><span class="token number">.23</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span> <span class="token punctuation">[</span><span class="token number">110</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">]</span> via <span class="token number">192.168</span><span class="token number">.34</span><span class="token number">.3</span><span class="token punctuation">,</span> <span class="token number">04</span><span class="token operator">:</span><span class="token number">17</span><span class="token operator">:</span><span class="token number">36</span><span class="token punctuation">,</span> FastEthernet0<span class="token operator">/</span><span class="token number">0</span>
        <span class="token number">192.168</span><span class="token number">.34</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span> is variably subnetted<span class="token punctuation">,</span> <span class="token number">2</span> subnets<span class="token punctuation">,</span> <span class="token number">2</span> masks
C        <span class="token number">192.168</span><span class="token number">.34</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span> is directly connected<span class="token punctuation">,</span> FastEthernet0<span class="token operator">/</span><span class="token number">0</span>
L        <span class="token number">192.168</span><span class="token number">.34</span><span class="token number">.4</span><span class="token operator">/</span><span class="token number">32</span> is directly connected<span class="token punctuation">,</span> FastEthernet0<span class="token operator">/</span><span class="token number">0</span>
        <span class="token number">192.168</span><span class="token number">.47</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span> is variably subnetted<span class="token punctuation">,</span> <span class="token number">2</span> subnets<span class="token punctuation">,</span> <span class="token number">2</span> masks
C        <span class="token number">192.168</span><span class="token number">.47</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span> is directly connected<span class="token punctuation">,</span> FastEthernet0<span class="token operator">/</span><span class="token number">1</span>
L        <span class="token number">192.168</span><span class="token number">.47</span><span class="token number">.4</span><span class="token operator">/</span><span class="token number">32</span> is directly connected<span class="token punctuation">,</span> FastEthernet0<span class="token operator">/</span><span class="token number">1</span></code></pre>

<p>查看R4的CEF表：</p>
<pre class="language-c" data-language="c"><code class="language-c">R4#show ip cef <span class="token number">7.7</span><span class="token number">.7</span><span class="token number">.7</span> detail
<span class="token number">7.7</span><span class="token number">.7</span><span class="token number">.7</span><span class="token operator">/</span><span class="token number">32</span><span class="token punctuation">,</span> epoch <span class="token number">0</span><span class="token punctuation">,</span> flags rib only nolabel<span class="token punctuation">,</span> rib defined all labels
    recursive via <span class="token number">192.168</span><span class="token number">.47</span><span class="token number">.7</span>
    attached to FastEthernet0<span class="token operator">/</span><span class="token number">1</span>

<span class="token comment">//至此，ping包被按照普通IP数据包转发给了R7，echo reply包的转发交换方向相反，但过程相同；</span></code></pre>


<h1 id="实验结论："><a href="#实验结论：" class="headerlink" title="实验结论："></a>实验结论：</h1><ol>
<li>在分配标签时，标签可以以路由递归的方式被继承；</li>
<li>MPLS 不但可以解决BGP关闭同步后需要IBGP全互联的问题，更高效的是，MPLS可以让MPLS域内的P路由器不必运行BGP；</li>
</ol>
]]></content>
      <categories>
        <category>Network</category>
      </categories>
      <tags>
        <tag>MPLS</tag>
        <tag>Network</tag>
      </tags>
  </entry>
  <entry>
    <title>MPLS 实验5：MPLS VPN using Static Routing on the PE-CE link</title>
    <url>/2014/MPLS_Lab_5/</url>
    <content><![CDATA[<h1 id="实验环境："><a href="#实验环境：" class="headerlink" title="实验环境："></a>实验环境：</h1><ul>
<li>模拟器：GNS3 0.8.6</li>
<li>Cisco IOS：c7200-adventerprisek9-mz.151-4.M2.image</li>
</ul>
<h1 id="GNS3实验拓扑文件："><a href="#GNS3实验拓扑文件：" class="headerlink" title="GNS3实验拓扑文件："></a>GNS3实验拓扑文件：</h1><p><a href="topology.net">拓扑文件</a></p>
<h1 id="实验拓扑："><a href="#实验拓扑：" class="headerlink" title="实验拓扑："></a>实验拓扑：</h1><p><img src="/2014/MPLS_Lab_5/topo.png"></p>
<span id="more"></span>

<h1 id="基本预配置："><a href="#基本预配置：" class="headerlink" title="基本预配置："></a>基本预配置：</h1><h2 id="R1："><a href="#R1：" class="headerlink" title="R1："></a>R1：</h2><pre class="language-none"><code class="language-none">hostname R1
!
ip cef
!
mpls label protocol ldp
!
interface Loopback0
    ip address 1.1.1.1 255.255.255.255
    ip ospf 1 area 0
!
interface FastEthernet0&#x2F;0
    ip address 192.168.12.1 255.255.255.0
    ip ospf 1 area 0
    no shut
mpls ip
!
interface FastEthernet0&#x2F;1
    ip address 192.168.15.1 255.255.255.0
    no shut
!
router ospf 1
    router-id 1.1.1.1
!         
mpls ldp router-id Loopback0 force
!
line con 0
    exec-timeout 0 0
    logging synchronous
!
end</code></pre>

<h2 id="R2"><a href="#R2" class="headerlink" title="R2:"></a>R2:</h2><pre class="language-none"><code class="language-none">hostname R2
!
ip cef
!
mpls label protocol ldp
!
interface Loopback0
    ip address 2.2.2.2 255.255.255.255
    ip ospf 1 area 0
!
interface FastEthernet0&#x2F;0
    ip address 192.168.12.2 255.255.255.0
    ip ospf 1 area 0
    no shutdown
mpls ip
!
interface FastEthernet0&#x2F;1
    ip address 192.168.23.2 255.255.255.0
    ip ospf 1 area 0
    no shutdown
mpls ip
!
router ospf 1
    router-id 2.2.2.2
!
mpls ldp router-id Loopback0 force
!
line con 0
    exec-timeout 0 0
    logging synchronous
!
end</code></pre>

<h2 id="R3"><a href="#R3" class="headerlink" title="R3:"></a>R3:</h2><pre class="language-none"><code class="language-none">hostname R3
!
ip cef
!
mpls label protocol ldp
!
interface Loopback0
    ip address 3.3.3.3 255.255.255.255
    ip ospf 1 area 0
!
interface FastEthernet0&#x2F;0
    ip address 192.168.34.3 255.255.255.0
    ip ospf 1 area 0
    no shutdown
mpls ip
!
interface FastEthernet0&#x2F;1
    ip address 192.168.23.3 255.255.255.0
    ip ospf 1 area 0
    no shutdown
mpls ip
!
router ospf 1
    router-id 3.3.3.3
!
mpls ldp router-id Loopback0 force
!
line con 0
    exec-timeout 0 0
    logging synchronous
!
end</code></pre>

<h2 id="R4"><a href="#R4" class="headerlink" title="R4:"></a>R4:</h2><pre class="language-none"><code class="language-none">hostname R4
!
ip cef
!
mpls label protocol ldp
!
interface Loopback0
    ip address 4.4.4.4 255.255.255.255
    ip ospf 1 area 0
!
interface FastEthernet0&#x2F;0
    ip address 192.168.34.4 255.255.255.0
    ip ospf 1 area 0
    no shutdown
mpls ip
!
interface FastEthernet0&#x2F;1
    ip address 192.168.47.4 255.255.255.0
    no shutdown
!
router ospf 1
    router-id 4.4.4.4
!
mpls ldp router-id Loopback0 force
!
line con 0
    exec-timeout 0 0
    logging synchronous
!
end</code></pre>

<h2 id="R5"><a href="#R5" class="headerlink" title="R5:"></a>R5:</h2><pre class="language-none"><code class="language-none">hostname R5
!
ip cef
!
interface Loopback0
    ip address 5.5.5.5 255.255.255.255
!
interface FastEthernet0&#x2F;0
    ip address 192.168.56.5 255.255.255.0
    no shutdown
!
interface FastEthernet0&#x2F;1
    ip address 192.168.15.5 255.255.255.0
    no shutdown
!
ip route 6.6.6.6 255.255.255.255 192.168.56.6
ip route 0.0.0.0 0.0.0.0 192.168.15.1
!
line con 0
    exec-timeout 0 0
    logging synchronous
!
end</code></pre>

<h2 id="R6"><a href="#R6" class="headerlink" title="R6:"></a>R6:</h2><pre class="language-none"><code class="language-none">hostname R6
!
ip cef
!
interface Loopback0
    ip address 6.6.6.6 255.255.255.255
!
interface FastEthernet0&#x2F;0
    ip address 192.168.56.6 255.255.255.0
    no shutdown
!
ip route 0.0.0.0 0.0.0.0 192.168.56.5
!
line con 0
    exec-timeout 0 0
    logging synchronous
!
end</code></pre>

<h2 id="R7"><a href="#R7" class="headerlink" title="R7:"></a>R7:</h2><pre class="language-none"><code class="language-none">hostname R7
!
ip cef
!
interface Loopback0
    ip address 7.7.7.7 255.255.255.255
!
interface FastEthernet0&#x2F;0
    ip address 192.168.78.7 255.255.255.0
    no shutdown
!
interface FastEthernet0&#x2F;1
    ip address 192.168.47.7 255.255.255.0
    no shutdown
!
ip route 0.0.0.0 0.0.0.0 192.168.47.4
ip route 8.8.8.8 255.255.255.255 192.168.78.8
!
line con 0
    exec-timeout 0 0
    logging synchronous
!
end</code></pre>

<h2 id="R8"><a href="#R8" class="headerlink" title="R8:"></a>R8:</h2><pre class="language-none"><code class="language-none">hostname R8
!
ip cef
!
interface Loopback0
    ip address 8.8.8.8 255.255.255.255
!
interface FastEthernet0&#x2F;0
    ip address 192.168.78.8 255.255.255.0
    no shutdown
!
ip route 0.0.0.0 0.0.0.0 192.168.78.7
!         
line con 0
    exec-timeout 0 0
    logging synchronous
!
end</code></pre>
<h1 id="MPLS-VPN配置步骤："><a href="#MPLS-VPN配置步骤：" class="headerlink" title="MPLS VPN配置步骤："></a>MPLS VPN配置步骤：</h1><ol>
<li>创建VRF（VRF名本地有效）：<ul>
<li>指定RD（提供全局唯一的私网单播地址）；</li>
<li>指定RT的导出（导出：把重分发进MP-BGP的VPNv4路由打上MP-BGP扩展团体属性RT）和导入（导入：把MP-BGP里的VPNv4路由进行RT的匹配，匹配成功的VPNv4路由将放进相应的VRF）；</li>
<li>将与CE相连的PE接口关联特定VRF；</li>
</ul>
</li>
<li>配置MP-BGP：<ul>
<li>配置建立PE之间的IBGP邻居关系；</li>
<li>启用VPNv4地址族（AF），并激活与其他PE设备的邻居关系；</li>
</ul>
</li>
<li>配置PE-CE路由；<ul>
<li>配置IGP，并启用IGP的地址族（AF）；</li>
<li>配置启用MP-BGP IPv4 VRF地址族，然后激活与其他PE路由器的MP-BGP IPv4 VRF邻居关系；</li>
</ul>
</li>
</ol>
<h1 id="实验与调试："><a href="#实验与调试：" class="headerlink" title="实验与调试："></a>实验与调试：</h1><h2 id="实验1：配置MPLS-VPN"><a href="#实验1：配置MPLS-VPN" class="headerlink" title="实验1：配置MPLS VPN"></a>实验1：配置MPLS VPN</h2><h3 id="在PE上创建VRF"><a href="#在PE上创建VRF" class="headerlink" title="在PE上创建VRF"></a><strong>在PE上创建VRF</strong></h3><p>在PE1（R1）上创建VRF，并命名为A-Site1，表示该VRF为VPN A的站点1服务；</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>#ip vrf A<span class="token operator">-</span>Site1   
```            

指定RD，为<span class="token number">1</span><span class="token operator">:</span><span class="token number">1</span>，如果按照AS：num命名法，以下RD表示AS1中的第<span class="token number">2</span>个VRF；
```c
<span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token operator">-</span>vrf<span class="token punctuation">)</span>#rd <span class="token number">1</span><span class="token operator">:</span><span class="token number">1</span></code></pre>

<p>指定RT的导入和导出，这里我将RT指定为导入和导出1：1；</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token operator">-</span>vrf<span class="token punctuation">)</span>#route<span class="token operator">-</span>target <span class="token operator">?</span>        
    ASN<span class="token operator">:</span>nn or IP<span class="token operator">-</span>address<span class="token operator">:</span>nn  Target VPN Extended Community
    both                     Both import and export Target<span class="token operator">-</span>VPN community
    export                   Export Target<span class="token operator">-</span>VPN community
    import                   Import Target<span class="token operator">-</span>VPN community
<span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token operator">-</span>vrf<span class="token punctuation">)</span>#route<span class="token operator">-</span>target both <span class="token number">1</span><span class="token operator">:</span><span class="token number">1</span></code></pre>

<p>将PE1（R1）上与CE相连的PE接口F0&#x2F;1关联到VRF A-Site1；</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>#<span class="token keyword">int</span> f0<span class="token operator">/</span><span class="token number">1</span>
<span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token operator">-</span><span class="token keyword">if</span><span class="token punctuation">)</span>#ip vrf forwarding A<span class="token operator">-</span>Site1
<span class="token operator">%</span> Interface FastEthernet0<span class="token operator">/</span><span class="token number">1</span> IPv4 disabled and <span class="token function">address</span><span class="token punctuation">(</span>es<span class="token punctuation">)</span> removed due to enabling VRF A<span class="token operator">-</span>Site1
<span class="token comment">//切记先将接口关联VRF，然后再配置IP地址；</span>
<span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token operator">-</span><span class="token keyword">if</span><span class="token punctuation">)</span>#ip add <span class="token number">192.168</span><span class="token number">.15</span><span class="token number">.1</span> <span class="token number">255.255</span><span class="token number">.255</span><span class="token number">.0</span></code></pre>
<p>在PE2（R4）上创建VRF，并命名为A-Site2，表示该VRF为VPN A的站点2服务；</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>#ip vrf A<span class="token operator">-</span>Site2</code></pre>

<p>指定RD，为1:2，如果按照AS：num命名法，以下RD表示AS1中的第2个VRF；</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token operator">-</span>vrf<span class="token punctuation">)</span>#rd <span class="token number">1</span><span class="token operator">:</span><span class="token number">2</span></code></pre>

<p>指定RT的导入和导出，这里我将RT指定为导入和导出1：1；</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token operator">-</span>vrf<span class="token punctuation">)</span>#route<span class="token operator">-</span>target both <span class="token number">1</span><span class="token operator">:</span><span class="token number">1</span>
<span class="token comment">//这里因为PE1（R1）的RT导出和PE2（R4）的RT导入能够匹配成功，所以R4能够学到R1导入到MP-BGP中的VPNv4路由；</span>
<span class="token comment">//又因为PE2（R4）的RT导出和PE1（1）的RT导入能够匹配成对，所以R1能够学到R4导入到MP-BGP中的VPNv4路由；</span></code></pre>

<p>将PE2（R4）上与CE相连的PE接口F0&#x2F;1关联到VRF A-Site2；</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>#<span class="token keyword">int</span> f0<span class="token operator">/</span><span class="token number">1</span>
<span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token operator">-</span><span class="token keyword">if</span><span class="token punctuation">)</span>#ip vrf forwarding A<span class="token operator">-</span>Site2
<span class="token operator">%</span> Interface FastEthernet0<span class="token operator">/</span><span class="token number">1</span> IPv4 disabled and <span class="token function">address</span><span class="token punctuation">(</span>es<span class="token punctuation">)</span> removed due to enabling VRF A<span class="token operator">-</span>Site2
    <span class="token comment">//切记先将接口关联VRF，然后再配置IP地址；</span>
<span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token operator">-</span><span class="token keyword">if</span><span class="token punctuation">)</span>#ip add <span class="token number">192.168</span><span class="token number">.47</span><span class="token number">.4</span> <span class="token number">255.255</span><span class="token number">.255</span><span class="token number">.0</span></code></pre>
<h3 id="配置MP-BGP"><a href="#配置MP-BGP" class="headerlink" title="配置MP-BGP"></a><strong>配置MP-BGP</strong></h3><p>在PE1（R1）上配置MP-BGP，使之与其他PE建立IBGP关系，在此实验中只有PE1和PE2两台PE设备；</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>#router bgp <span class="token number">1</span>
<span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span>#neighbor <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span> remote<span class="token operator">-</span>as <span class="token number">1</span>
<span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span>#neighbor <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span> update<span class="token operator">-</span>source l0
<span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span>#neighbor <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span> next<span class="token operator">-</span>hop<span class="token operator">-</span>self
```  

启用PE1（R1）的VPNv4地址族，并激活与IBGP邻居PE2（R4）的MP<span class="token operator">-</span>BGP VPNv4邻居关系；
```c
<span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span>#address<span class="token operator">-</span>family vpnv4
<span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token operator">-</span>af<span class="token punctuation">)</span>#neighbor <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span> activate
<span class="token comment">//激活与IBGP邻居R4的VPNv4关系；</span>
<span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token operator">-</span>af<span class="token punctuation">)</span>#neighbor <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span> send<span class="token operator">-</span>community <span class="token operator">?</span>
    both      Send Standard and Extended Community attributes
    extended  Send Extended Community attribute
    standard  Send Standard Community attribute
    <span class="token operator">&lt;</span>cr<span class="token operator">></span>

<span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token operator">-</span>af<span class="token punctuation">)</span>#neighbor <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span> send<span class="token operator">-</span>community both
<span class="token comment">//由于BGP团体属性为可选传递属性，所以必须手动指定R1向IBGP邻居R4发送拓展团体属性和标准团体属性；</span>

<span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token operator">-</span>af<span class="token punctuation">)</span>#exit<span class="token operator">-</span>address<span class="token operator">-</span>family
<span class="token comment">//退出AF配置模式；</span></code></pre>
<p>在PE2（R4）上配置MP-BGP，使之与其他PE建立IBGP关系，</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token operator">-</span><span class="token keyword">if</span><span class="token punctuation">)</span>#router bgp <span class="token number">1</span>
<span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span>#nei <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span> remote<span class="token operator">-</span>as <span class="token number">1</span>
<span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span>#neighbor <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span> update<span class="token operator">-</span>source l0
<span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span>#neighbor <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span> next<span class="token operator">-</span>hop<span class="token operator">-</span>self</code></pre>

<p>启用PE2（R4）的VPNv4地址族，并激活与IBGP邻居PE1（R1）的MP-BGP VPNv4邻居关系；</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span>#address<span class="token operator">-</span>family vpnv4
<span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token operator">-</span>af<span class="token punctuation">)</span>#neighbor <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span> activate
<span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token operator">-</span>af<span class="token punctuation">)</span>#neighbor <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span> send<span class="token operator">-</span>community both</code></pre>
<h3 id="配置PE-CE路由"><a href="#配置PE-CE路由" class="headerlink" title="配置PE-CE路由"></a><strong>配置PE-CE路由</strong></h3><p>配置PE1（R1）的静态路由；</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>#ip route vrf A<span class="token operator">-</span>Site1 <span class="token number">6.6</span><span class="token number">.6</span><span class="token number">.6</span> <span class="token number">255.255</span><span class="token number">.255</span><span class="token number">.255</span> <span class="token number">192.168</span><span class="token number">.15</span><span class="token number">.5</span></code></pre>

<p>配置PE1（R1）的MP-BGP IPv4 VRF地址族（AF）；</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>#router bgp <span class="token number">1</span>
<span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span>#address<span class="token operator">-</span>family ipv4 vrf A<span class="token operator">-</span>Site1
<span class="token comment">//进入MP-BGP的IPv4 VRF地址族（AF）；</span>

<span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token operator">-</span>af<span class="token punctuation">)</span>#redistribute <span class="token keyword">static</span> 
<span class="token comment">//将静态路由中VRF名字与MP-BGP中IPv4 VRF名字相同的静态路由重分布进MP-BGP的IPv4 VRF AF；</span>

<span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token operator">-</span>af<span class="token punctuation">)</span>#redistribute connected 
<span class="token comment">//如果用户在CE路由器上ping远程网络的另一个VPN站点中的CE或C路由器，</span>
<span class="token comment">//为了使其在没有指定其源地址情况下（即默认使用CE路由器出站接口IP地址），Echo Reply包能够有路由并正常返回,</span>
<span class="token comment">//将PE路由器的直连路由重分布进MP-BGP的IPv4 VRF AF中；</span>

<span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token operator">-</span>af<span class="token punctuation">)</span>#exit<span class="token operator">-</span>address<span class="token operator">-</span>family 
<span class="token comment">//退出MP-BGP的IPv4 VRF地址族（AF）模式；</span></code></pre>
<p>配置PE2（R4）的静态路由；</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>#ip route vrf A<span class="token operator">-</span>Site1 <span class="token number">6.6</span><span class="token number">.6</span><span class="token number">.6</span> <span class="token number">255.255</span><span class="token number">.255</span><span class="token number">.255</span> <span class="token number">192.168</span><span class="token number">.15</span><span class="token number">.5</span></code></pre>

<p>配置PE2（R4）的MP-BGP IPv4 VRF地址族（AF）；</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>#router bgp <span class="token number">1</span>
<span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span>#address<span class="token operator">-</span>family ipv4 vrf A<span class="token operator">-</span>Site2
<span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token operator">-</span>af<span class="token punctuation">)</span>#redistribute connected
<span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token operator">-</span>af<span class="token punctuation">)</span>#redistribute <span class="token keyword">static</span>
<span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token operator">-</span>af<span class="token punctuation">)</span>#exit<span class="token operator">-</span>address<span class="token operator">-</span>family</code></pre>

<h1 id="实验与调试"><a href="#实验与调试" class="headerlink" title="实验与调试"></a>实验与调试</h1><p>在VPN A站点1的C路由器R6上ping远程VPN A站点2的C路由器R8，并且指定源为R6的接口Loopback0；</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token function">R6</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>#<span class="token keyword">do</span> p <span class="token number">8.8</span><span class="token number">.8</span><span class="token number">.8</span> source <span class="token number">6.6</span><span class="token number">.6</span><span class="token number">.6</span>
Type escape sequence to abort<span class="token punctuation">.</span>
Sending <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token operator">-</span>byte ICMP Echos to <span class="token number">8.8</span><span class="token number">.8</span><span class="token number">.8</span><span class="token punctuation">,</span> timeout is <span class="token number">2</span> seconds<span class="token operator">:</span>
Packet sent with a source address of <span class="token number">6.6</span><span class="token number">.6</span><span class="token number">.6</span> 
<span class="token operator">!</span><span class="token operator">!</span><span class="token operator">!</span><span class="token operator">!</span><span class="token operator">!</span>
Success rate is <span class="token number">100</span> <span class="token function">percent</span> <span class="token punctuation">(</span><span class="token number">5</span><span class="token operator">/</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> round<span class="token operator">-</span>trip min<span class="token operator">/</span>avg<span class="token operator">/</span>max <span class="token operator">=</span> <span class="token number">128</span><span class="token operator">/</span><span class="token number">159</span><span class="token operator">/</span><span class="token number">200</span> ms</code></pre>
<p>成功！</p>
]]></content>
      <categories>
        <category>Network</category>
      </categories>
      <tags>
        <tag>MPLS</tag>
        <tag>Network</tag>
      </tags>
  </entry>
  <entry>
    <title>MPLS 实验6：MPLS VPN running RIPv2 on the PE-CE link</title>
    <url>/2014/MPLS_Lab_6/</url>
    <content><![CDATA[<h1 id="实验环境："><a href="#实验环境：" class="headerlink" title="实验环境："></a>实验环境：</h1><ul>
<li>模拟器：GNS3 0.8.6</li>
<li>Cisco IOS：c7200-adventerprisek9-mz.151-4.M2.image</li>
</ul>
<h1 id="GNS3实验拓扑文件："><a href="#GNS3实验拓扑文件：" class="headerlink" title="GNS3实验拓扑文件："></a>GNS3实验拓扑文件：</h1><p><a href="topology.net">拓扑文件</a></p>
<h1 id="实验拓扑："><a href="#实验拓扑：" class="headerlink" title="实验拓扑："></a>实验拓扑：</h1><p><img src="/2014/MPLS_Lab_6/topo.png"></p>
<span id="more"></span>

<h1 id="基本预配置："><a href="#基本预配置：" class="headerlink" title="基本预配置："></a>基本预配置：</h1><h2 id="R1："><a href="#R1：" class="headerlink" title="R1："></a>R1：</h2><pre class="language-none"><code class="language-none">hostname R1
!
ip cef
!
mpls label protocol ldp
!
interface Loopback0
    ip address 1.1.1.1 255.255.255.255
    ip ospf 1 area 0
!
interface FastEthernet0&#x2F;0
    ip address 192.168.12.1 255.255.255.0
    ip ospf 1 area 0
    no shut
mpls ip
!
interface FastEthernet0&#x2F;1
    ip address 192.168.15.1 255.255.255.0
    no shut
!
router ospf 1
    router-id 1.1.1.1
!         
mpls ldp router-id Loopback0 force
!
line con 0
    exec-timeout 0 0
    logging synchronous
!
end</code></pre>

<h2 id="R2"><a href="#R2" class="headerlink" title="R2:"></a>R2:</h2><pre class="language-none"><code class="language-none">hostname R2
!
ip cef
!
mpls label protocol ldp
!
interface Loopback0
    ip address 2.2.2.2 255.255.255.255
    ip ospf 1 area 0
!
interface FastEthernet0&#x2F;0
    ip address 192.168.12.2 255.255.255.0
    ip ospf 1 area 0
    no shutdown
mpls ip
!
interface FastEthernet0&#x2F;1
    ip address 192.168.23.2 255.255.255.0
    ip ospf 1 area 0
    no shutdown
mpls ip
!
router ospf 1
    router-id 2.2.2.2
!
mpls ldp router-id Loopback0 force
!
line con 0
    exec-timeout 0 0
    logging synchronous
!
end</code></pre>

<h2 id="R3"><a href="#R3" class="headerlink" title="R3:"></a>R3:</h2><pre class="language-none"><code class="language-none">hostname R3
!
ip cef
!
mpls label protocol ldp
!
interface Loopback0
    ip address 3.3.3.3 255.255.255.255
    ip ospf 1 area 0
!
interface FastEthernet0&#x2F;0
    ip address 192.168.34.3 255.255.255.0
    ip ospf 1 area 0
    no shutdown
mpls ip
!
interface FastEthernet0&#x2F;1
    ip address 192.168.23.3 255.255.255.0
    ip ospf 1 area 0
    no shutdown
mpls ip
!
router ospf 1
    router-id 3.3.3.3
!
mpls ldp router-id Loopback0 force
!
line con 0
    exec-timeout 0 0
    logging synchronous
!
end</code></pre>

<h2 id="R4"><a href="#R4" class="headerlink" title="R4:"></a>R4:</h2><pre class="language-none"><code class="language-none">hostname R4
!
ip cef
!
mpls label protocol ldp
!
interface Loopback0
    ip address 4.4.4.4 255.255.255.255
    ip ospf 1 area 0
!
interface FastEthernet0&#x2F;0
    ip address 192.168.34.4 255.255.255.0
    ip ospf 1 area 0
    no shutdown
mpls ip
!
interface FastEthernet0&#x2F;1
    ip address 192.168.47.4 255.255.255.0
    no shutdown
!
router ospf 1
    router-id 4.4.4.4
!
mpls ldp router-id Loopback0 force
!
line con 0
    exec-timeout 0 0
    logging synchronous
!
end</code></pre>

<h2 id="R5"><a href="#R5" class="headerlink" title="R5:"></a>R5:</h2><pre class="language-none"><code class="language-none">hostname R5
!
ip cef
!
interface Loopback0
    ip address 5.5.5.5 255.255.255.255
!
interface FastEthernet0&#x2F;0
    ip address 192.168.56.5 255.255.255.0
    no shutdown
!
interface FastEthernet0&#x2F;1
    ip address 192.168.15.5 255.255.255.0
    no shutdown
!
router rip
    version 2
    network 5.0.0.0
    network 192.168.15.0
    network 192.168.56.0
    no auto-summary
!
line con 0
    exec-timeout 0 0
    logging synchronous
!
end</code></pre>

<h2 id="R6"><a href="#R6" class="headerlink" title="R6:"></a>R6:</h2><pre class="language-none"><code class="language-none">hostname R6
!
ip cef
!
interface Loopback0
    ip address 6.6.6.6 255.255.255.255
!
interface FastEthernet0&#x2F;0
    ip address 192.168.56.6 255.255.255.0
    no shutdown
!
router rip
    version 2
    network 6.0.0.0
    network 192.168.56.0
    no auto-summary
!
line con 0
    exec-timeout 0 0
    logging synchronous
!
end</code></pre>

<h2 id="R7"><a href="#R7" class="headerlink" title="R7:"></a>R7:</h2><pre class="language-none"><code class="language-none">hostname R7
!
ip cef
!
interface Loopback0
    ip address 7.7.7.7 255.255.255.255
!
interface FastEthernet0&#x2F;0
    ip address 192.168.78.7 255.255.255.0
    no shutdown
!
interface FastEthernet0&#x2F;1
    ip address 192.168.47.7 255.255.255.0
    no shutdown
!
router rip
    version 2
    network 7.0.0.0
    network 192.168.47.0
    network 192.168.78.0
    no auto-summary
!
line con 0
    exec-timeout 0 0
    logging synchronous
!
end</code></pre>

<h2 id="R8"><a href="#R8" class="headerlink" title="R8:"></a>R8:</h2><pre class="language-none"><code class="language-none">hostname R8
!
ip cef
!
interface Loopback0
    ip address 8.8.8.8 255.255.255.255
!
interface FastEthernet0&#x2F;0
    ip address 192.168.78.8 255.255.255.0
    no shutdown
!
router rip
    version 2
    network 8.0.0.0
    network 192.168.78.0
    no auto-summary
!         
line con 0
    exec-timeout 0 0
    logging synchronous
!
end</code></pre>
<h1 id="MPLS-VPN配置步骤："><a href="#MPLS-VPN配置步骤：" class="headerlink" title="MPLS VPN配置步骤："></a>MPLS VPN配置步骤：</h1><ol>
<li>创建VRF（VRF名本地有效）：<ul>
<li>指定RD（提供全局唯一的私网单播地址）；</li>
<li>指定RT的导出（导出：把重分发进MP-BGP的VPNv4路由打上MP-BGP扩展团体属性RT）和导入（导入：把MP-BGP里的VPNv4路由进行RT的匹配，匹配成功的VPNv4路由将放进相应的VRF）；</li>
<li>将与CE相连的PE接口关联特定VRF；</li>
</ul>
</li>
<li>配置MP-BGP：<ul>
<li>配置建立PE之间的IBGP邻居关系；</li>
<li>启用VPNv4地址族（AF），并激活与其他PE设备的邻居关系；</li>
</ul>
</li>
<li>配置PE-CE路由；<ul>
<li>配置IGP，并启用IGP的地址族（AF）；</li>
<li>配置启用MP-BGP IPv4 VRF地址族，然后激活与其他PE路由器的MP-BGP IPv4 VRF邻居关系；</li>
</ul>
</li>
</ol>
<h1 id="实验与调试："><a href="#实验与调试：" class="headerlink" title="实验与调试："></a>实验与调试：</h1><h2 id="实验1：配置MPLS-VPN"><a href="#实验1：配置MPLS-VPN" class="headerlink" title="实验1：配置MPLS VPN"></a>实验1：配置MPLS VPN</h2><h3 id="在PE上创建VRF"><a href="#在PE上创建VRF" class="headerlink" title="在PE上创建VRF"></a><strong>在PE上创建VRF</strong></h3><p>在PE1（R1）上创建VRF，并命名为A-Site1，表示该VRF为VPN A的站点1服务；</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>#ip vrf A<span class="token operator">-</span>Site1   </code></pre>

<p>指定RD，为1:1，如果按照AS：num命名法，以下RD表示AS1中的第2个VRF；</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token operator">-</span>vrf<span class="token punctuation">)</span>#rd <span class="token number">1</span><span class="token operator">:</span><span class="token number">1</span></code></pre>

<p>指定RT的导入和导出，这里我将RT指定为导入和导出1：1；</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token operator">-</span>vrf<span class="token punctuation">)</span>#route<span class="token operator">-</span>target <span class="token operator">?</span>        
    ASN<span class="token operator">:</span>nn or IP<span class="token operator">-</span>address<span class="token operator">:</span>nn  Target VPN Extended Community
    both                     Both import and export Target<span class="token operator">-</span>VPN community
    export                   Export Target<span class="token operator">-</span>VPN community
    import                   Import Target<span class="token operator">-</span>VPN community
<span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token operator">-</span>vrf<span class="token punctuation">)</span>#route<span class="token operator">-</span>target both <span class="token number">1</span><span class="token operator">:</span><span class="token number">1</span></code></pre>

<p>将PE1（R1）上与CE相连的PE接口F0&#x2F;1关联到VRF A-Site1；</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>#<span class="token keyword">int</span> f0<span class="token operator">/</span><span class="token number">1</span>
<span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token operator">-</span><span class="token keyword">if</span><span class="token punctuation">)</span>#ip vrf forwarding A<span class="token operator">-</span>Site1
<span class="token operator">%</span> Interface FastEthernet0<span class="token operator">/</span><span class="token number">1</span> IPv4 disabled and <span class="token function">address</span><span class="token punctuation">(</span>es<span class="token punctuation">)</span> removed due to enabling VRF A<span class="token operator">-</span>Site1
<span class="token comment">//切记先将接口关联VRF，然后再配置IP地址；</span>
<span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token operator">-</span><span class="token keyword">if</span><span class="token punctuation">)</span>#ip add <span class="token number">192.168</span><span class="token number">.15</span><span class="token number">.1</span> <span class="token number">255.255</span><span class="token number">.255</span><span class="token number">.0</span></code></pre>
<p>在PE2（R4）上创建VRF，并命名为A-Site2，表示该VRF为VPN A的站点2服务：</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>#ip vrf A<span class="token operator">-</span>Site2</code></pre>

<p>指定RD，为1:2，如果按照AS：num命名法，以下RD表示AS1中的第2个VRF；</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token operator">-</span>vrf<span class="token punctuation">)</span>#rd <span class="token number">1</span><span class="token operator">:</span><span class="token number">2</span></code></pre>

<p>指定RT的导入和导出，这里我将RT指定为导入和导出1：1；</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token operator">-</span>vrf<span class="token punctuation">)</span>#route<span class="token operator">-</span>target both <span class="token number">1</span><span class="token operator">:</span><span class="token number">1</span></code></pre>
<p>因为PE1导出的RT为1:1，PE2导入的RT正是PE1的导出RT1:1， 所以PE1（R1）的RT导出和PE2（R4）的RT导入能够匹配成功，R4能够学到R1导入到MP-BGP中的VPNv4路由；又因为PE2导出的RT为1:1，PE1导入的RT也正好是PE2的导出RT1:1；所以PE2（R4）的RT导出和PE1（R1）的RT导入能够匹配成对，R1能够学到R4导入到MP-BGP中的VPNv4路由。</p>
<p>将PE2（R4）上与CE相连的PE接口F0&#x2F;1关联到VRF A-Site2；</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>#<span class="token keyword">int</span> f0<span class="token operator">/</span><span class="token number">1</span>
<span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token operator">-</span><span class="token keyword">if</span><span class="token punctuation">)</span>#ip vrf forwarding A<span class="token operator">-</span>Site2
<span class="token operator">%</span> Interface FastEthernet0<span class="token operator">/</span><span class="token number">1</span> IPv4 disabled and <span class="token function">address</span><span class="token punctuation">(</span>es<span class="token punctuation">)</span> removed due to enabling VRF A<span class="token operator">-</span>Site2
<span class="token comment">//切记先将接口关联VRF，然后再配置IP地址；</span>
<span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token operator">-</span><span class="token keyword">if</span><span class="token punctuation">)</span>#ip add <span class="token number">192.168</span><span class="token number">.47</span><span class="token number">.4</span> <span class="token number">255.255</span><span class="token number">.255</span><span class="token number">.0</span></code></pre>
<h3 id="配置MP-BGP；"><a href="#配置MP-BGP；" class="headerlink" title="配置MP-BGP；"></a><strong>配置MP-BGP；</strong></h3><p>在PE1（R1）上配置MP-BGP，使之与其他PE建立IBGP关系，在此实验中只有PE1和PE2两台PE设备；</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>#router bgp <span class="token number">1</span>
<span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span>#no <span class="token keyword">auto</span><span class="token operator">-</span>summary
<span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span>#no syn
<span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span>#bgp router<span class="token operator">-</span>id <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span>
<span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span>#neighbor <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span> remote<span class="token operator">-</span>as <span class="token number">1</span>
<span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span>#neighbor <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span> update<span class="token operator">-</span>source l0
<span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span>#neighbor <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span> next<span class="token operator">-</span>hop<span class="token operator">-</span>self</code></pre>

<p>启用PE1（R1）的VPNv4地址族，并激活与IBGP邻居PE2（R4）的MP-BGP VPNv4邻居关系；</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span>#address<span class="token operator">-</span>family vpnv4
<span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token operator">-</span>af<span class="token punctuation">)</span>#neighbor <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span> activate
<span class="token comment">//激活与IBGP邻居R4的VPNv4关系；</span>
<span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token operator">-</span>af<span class="token punctuation">)</span>#neighbor <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span> send<span class="token operator">-</span>community <span class="token operator">?</span>
    both      Send Standard and Extended Community attributes
    extended  Send Extended Community attribute
    standard  Send Standard Community attribute
    <span class="token operator">&lt;</span>cr<span class="token operator">></span>

<span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token operator">-</span>af<span class="token punctuation">)</span>#neighbor <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span> send<span class="token operator">-</span>community both
<span class="token comment">//由于BGP团体属性为可选传递属性，所以必须手动指定R1向IBGP邻居R4发送拓展团体属性和标准团体属性；</span>

<span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token operator">-</span>af<span class="token punctuation">)</span>#exit<span class="token operator">-</span>address<span class="token operator">-</span>family
<span class="token comment">//退出AF配置模式；</span></code></pre>
<p>在PE2（R4）上配置MP-BGP，使之与其他PE建立IBGP关系，</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token operator">-</span><span class="token keyword">if</span><span class="token punctuation">)</span>#router bgp <span class="token number">1</span>
<span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span>#no <span class="token keyword">auto</span><span class="token operator">-</span>summary
<span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span>#no syn
<span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span>#bgp router<span class="token operator">-</span>id <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span>
<span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span>#neighbor <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span> remote<span class="token operator">-</span>as <span class="token number">1</span>
<span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span>#neighbor <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span> update<span class="token operator">-</span>source l0
<span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span>#neighbor <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span> next<span class="token operator">-</span>hop<span class="token operator">-</span>self</code></pre>

<p>启用PE2（R4）的VPNv4地址族，并激活与IBGP邻居PE1（R1）的MP-BGP VPNv4邻居关系；</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span>#address<span class="token operator">-</span>family vpnv4
<span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token operator">-</span>af<span class="token punctuation">)</span>#neighbor <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span> activate
<span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token operator">-</span>af<span class="token punctuation">)</span>#neighbor <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span> send<span class="token operator">-</span>community both</code></pre>
<h3 id="配置PE-CE路由；"><a href="#配置PE-CE路由；" class="headerlink" title="配置PE-CE路由；"></a><strong>配置PE-CE路由；</strong></h3><p>配置PE1（R1）的IGP；</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>#router rip   
<span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span>#version <span class="token number">2</span>
<span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span>#no <span class="token keyword">auto</span><span class="token operator">-</span>summary </code></pre>
<p>配置PE1（R1）的IGP地址族（AF）；</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token comment">//进入IGP RIP的AF模式；</span>
<span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span>#address<span class="token operator">-</span>family ipv4 <span class="token operator">?</span>
    unicast  Address Family Modifier
    vrf      Specify parameters <span class="token keyword">for</span> a VPN Routing<span class="token operator">/</span>Forwarding instance
    <span class="token operator">&lt;</span>cr<span class="token operator">></span>
<span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span>#address<span class="token operator">-</span>family ipv4 vrf A<span class="token operator">-</span>Site1
<span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token operator">-</span>af<span class="token punctuation">)</span>#version <span class="token number">2</span>
<span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token operator">-</span>af<span class="token punctuation">)</span>#no <span class="token keyword">auto</span><span class="token operator">-</span>summary
<span class="token comment">//将IGP RIP的IPv4 VRF地址族（AF）配置为RIPv2,并关闭自动汇总；</span>

<span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token operator">-</span>af<span class="token punctuation">)</span>#redistribute bgp <span class="token number">1</span> metric <span class="token operator">?</span>
    <span class="token operator">&lt;</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">16</span><span class="token operator">></span>       Default metric
    transparent  Transparently redistribute metric
<span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token operator">-</span>af<span class="token punctuation">)</span>#redistribute bgp <span class="token number">1</span> metric transparent 
<span class="token comment">// 关键字transparent表示透传，RIP将不会察觉到MPLS VPN的存在；</span>
<span class="token comment">//必须指定Metric否则没有BGP能被重分布进RIP;</span>
<span class="token comment">//将MP-BGP中IPv4 VRF名字与IGP中IPv4 VRF名字相同的地址族（AF）重分布进IGP的IPv4 VRF AF；</span>
<span class="token comment">//IGP和MP-BGP中IPv4 VRF地址族（AF）实际上是执行相互重分发的操作；</span>

<span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token operator">-</span>af<span class="token punctuation">)</span>#network <span class="token number">192.168</span><span class="token number">.15</span><span class="token number">.0</span> 
<span class="token comment">//将PE连接到CE的VRF接口宣告进IGP进程的IPv4 VRF地址族中；</span>

<span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token operator">-</span>af<span class="token punctuation">)</span>#exit<span class="token operator">-</span>address<span class="token operator">-</span>family
<span class="token comment">//退出IGP RIP的AF模式；</span></code></pre>
<p>配置PE1（R1）的MP-BGP IPv4 VRF地址族（AF）；</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>#router bgp <span class="token number">1</span>
<span class="token comment">//进入MP-BGP的IPv4 VRF地址族（AF）；</span>
<span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span>#address<span class="token operator">-</span>family ipv4 vrf A<span class="token operator">-</span>Site1

<span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token operator">-</span>af<span class="token punctuation">)</span>#redistribute rip 
<span class="token comment">//将IGP中IPv4 VRF名字与MP-BGP中IPv4 VRF名字相同的地址族（AF）重分布进MP-BGP的IPv4 VRF AF；</span>
<span class="token comment">//IGP和MP-BGP中IPv4 VRF地址族（AF）实际上是执行相互重分发的操作；</span>

<span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token operator">-</span>af<span class="token punctuation">)</span>#redistribute connected 
<span class="token comment">//如果用户在CE路由器上ping远程网络的另一个VPN站点中的CE或C路由器，</span>
<span class="token comment">//为了使其在没有指定其源地址情况下（即默认使用CE路由器出站接口IP地址），Echo Reply包能够有路由并正常返回,</span>
<span class="token comment">//将PE路由器的直连路由重分布进MP-BGP的IPv4 VRF AF中；</span>

<span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token operator">-</span>af<span class="token punctuation">)</span>#exit<span class="token operator">-</span>address<span class="token operator">-</span>family 
<span class="token comment">//退出MP-BGP的IPv4 VRF地址族（AF）模式；</span></code></pre>
<p>配置PE2（R4）的IGP；</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>#router rip
<span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span>#version <span class="token number">2</span>
<span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span>#no <span class="token keyword">auto</span><span class="token operator">-</span>summary</code></pre>

<p>配置PE2（R4）的IGP地址族（AF）；</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span>#address<span class="token operator">-</span>family ipv4 vrf A<span class="token operator">-</span>Site2
<span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token operator">-</span>af<span class="token punctuation">)</span>#version <span class="token number">2</span>
<span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token operator">-</span>af<span class="token punctuation">)</span>#no <span class="token keyword">auto</span><span class="token operator">-</span>summary
<span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token operator">-</span>af<span class="token punctuation">)</span>#redistribute bgp <span class="token number">1</span> metric transparent
<span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token operator">-</span>af<span class="token punctuation">)</span>#network <span class="token number">192.168</span><span class="token number">.47</span><span class="token number">.0</span>
<span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token operator">-</span>af<span class="token punctuation">)</span>#exit<span class="token operator">-</span>address<span class="token operator">-</span>family</code></pre>
<p>配置PE2（R4）的MP-BGP IPv4 VRF地址族（AF）；</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>#router bgp <span class="token number">1</span>
<span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span>#address<span class="token operator">-</span>family ipv4 vrf A<span class="token operator">-</span>Site2
<span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token operator">-</span>af<span class="token punctuation">)</span>#redistribute connected
<span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token operator">-</span>af<span class="token punctuation">)</span>#redistribute rip
<span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token operator">-</span>af<span class="token punctuation">)</span>#exit<span class="token operator">-</span>address<span class="token operator">-</span>family</code></pre>
<h3 id="验证与调试："><a href="#验证与调试：" class="headerlink" title="验证与调试："></a>验证与调试：</h3><p>以ping 8.8.8.8的ICMP包转发交换过程为例，验证并解释MPLS VPN中数据包交换过程；</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token comment">//在VPN A站点1的C路由器R6上ping远程VPN A站点2的C路由器R8；</span>
R6#ping <span class="token number">8.8</span><span class="token number">.8</span><span class="token number">.8</span>
Type escape sequence to abort<span class="token punctuation">.</span>
Sending <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token operator">-</span>byte ICMP Echos to <span class="token number">8.8</span><span class="token number">.8</span><span class="token number">.8</span><span class="token punctuation">,</span> timeout is <span class="token number">2</span> seconds<span class="token operator">:</span>
<span class="token operator">!</span><span class="token operator">!</span><span class="token operator">!</span><span class="token operator">!</span><span class="token operator">!</span>
Success rate is <span class="token number">100</span> <span class="token function">percent</span> <span class="token punctuation">(</span><span class="token number">5</span><span class="token operator">/</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> round<span class="token operator">-</span>trip min<span class="token operator">/</span>avg<span class="token operator">/</span>max <span class="token operator">=</span> <span class="token number">132</span><span class="token operator">/</span><span class="token number">160</span><span class="token operator">/</span><span class="token number">196</span> ms
<span class="token comment">//成功！</span></code></pre>


<p>VPN A站点1的C路由器R6在发送ICMP echo Request数据包之前查看IP路由表，准确的说不是查看路由表，而是CEF表；</p>
<pre class="language-c" data-language="c"><code class="language-c">R6#sh ip route
Codes<span class="token operator">:</span> L <span class="token operator">-</span> local<span class="token punctuation">,</span> C <span class="token operator">-</span> connected<span class="token punctuation">,</span> S <span class="token operator">-</span> <span class="token keyword">static</span><span class="token punctuation">,</span> R <span class="token operator">-</span> RIP<span class="token punctuation">,</span> M <span class="token operator">-</span> mobile<span class="token punctuation">,</span> B <span class="token operator">-</span> BGP
        D <span class="token operator">-</span> EIGRP<span class="token punctuation">,</span> EX <span class="token operator">-</span> EIGRP external<span class="token punctuation">,</span> O <span class="token operator">-</span> OSPF<span class="token punctuation">,</span> IA <span class="token operator">-</span> OSPF inter area 
        N1 <span class="token operator">-</span> OSPF NSSA external type <span class="token number">1</span><span class="token punctuation">,</span> N2 <span class="token operator">-</span> OSPF NSSA external type <span class="token number">2</span>
        E1 <span class="token operator">-</span> OSPF external type <span class="token number">1</span><span class="token punctuation">,</span> E2 <span class="token operator">-</span> OSPF external type <span class="token number">2</span>
        i <span class="token operator">-</span> IS<span class="token operator">-</span>IS<span class="token punctuation">,</span> su <span class="token operator">-</span> IS<span class="token operator">-</span>IS summary<span class="token punctuation">,</span> L1 <span class="token operator">-</span> IS<span class="token operator">-</span>IS level<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> L2 <span class="token operator">-</span> IS<span class="token operator">-</span>IS level<span class="token operator">-</span><span class="token number">2</span>
        ia <span class="token operator">-</span> IS<span class="token operator">-</span>IS inter area<span class="token punctuation">,</span> <span class="token operator">*</span> <span class="token operator">-</span> candidate <span class="token keyword">default</span><span class="token punctuation">,</span> U <span class="token operator">-</span> per<span class="token operator">-</span>user <span class="token keyword">static</span> route
        o <span class="token operator">-</span> ODR<span class="token punctuation">,</span> P <span class="token operator">-</span> periodic downloaded <span class="token keyword">static</span> route<span class="token punctuation">,</span> H <span class="token operator">-</span> NHRP<span class="token punctuation">,</span> l <span class="token operator">-</span> LISP
        <span class="token operator">+</span> <span class="token operator">-</span> replicated route<span class="token punctuation">,</span> <span class="token operator">%</span> <span class="token operator">-</span> next hop override
                                                            
Gateway of last resort is not set
                                                            
        <span class="token number">5.0</span><span class="token number">.0</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">32</span> is subnetted<span class="token punctuation">,</span> <span class="token number">1</span> subnets
R        <span class="token number">5.5</span><span class="token number">.5</span><span class="token number">.5</span> <span class="token punctuation">[</span><span class="token number">120</span><span class="token operator">/</span><span class="token number">1</span><span class="token punctuation">]</span> via <span class="token number">192.168</span><span class="token number">.56</span><span class="token number">.5</span><span class="token punctuation">,</span> <span class="token number">00</span><span class="token operator">:</span><span class="token number">00</span><span class="token operator">:</span><span class="token number">08</span><span class="token punctuation">,</span> FastEthernet0<span class="token operator">/</span><span class="token number">0</span>
        <span class="token number">6.0</span><span class="token number">.0</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">32</span> is subnetted<span class="token punctuation">,</span> <span class="token number">1</span> subnets
C        <span class="token number">6.6</span><span class="token number">.6</span><span class="token number">.6</span> is directly connected<span class="token punctuation">,</span> Loopback0
        <span class="token number">7.0</span><span class="token number">.0</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">32</span> is subnetted<span class="token punctuation">,</span> <span class="token number">1</span> subnets
R        <span class="token number">7.7</span><span class="token number">.7</span><span class="token number">.7</span> <span class="token punctuation">[</span><span class="token number">120</span><span class="token operator">/</span><span class="token number">3</span><span class="token punctuation">]</span> via <span class="token number">192.168</span><span class="token number">.56</span><span class="token number">.5</span><span class="token punctuation">,</span> <span class="token number">00</span><span class="token operator">:</span><span class="token number">00</span><span class="token operator">:</span><span class="token number">08</span><span class="token punctuation">,</span> FastEthernet0<span class="token operator">/</span><span class="token number">0</span>
        <span class="token number">8.0</span><span class="token number">.0</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">32</span> is subnetted<span class="token punctuation">,</span> <span class="token number">1</span> subnets
R        <span class="token number">8.8</span><span class="token number">.8</span><span class="token number">.8</span> <span class="token punctuation">[</span><span class="token number">120</span><span class="token operator">/</span><span class="token number">4</span><span class="token punctuation">]</span> via <span class="token number">192.168</span><span class="token number">.56</span><span class="token number">.5</span><span class="token punctuation">,</span> <span class="token number">00</span><span class="token operator">:</span><span class="token number">00</span><span class="token operator">:</span><span class="token number">08</span><span class="token punctuation">,</span> FastEthernet0<span class="token operator">/</span><span class="token number">0</span>
R     <span class="token number">192.168</span><span class="token number">.15</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span> <span class="token punctuation">[</span><span class="token number">120</span><span class="token operator">/</span><span class="token number">1</span><span class="token punctuation">]</span> via <span class="token number">192.168</span><span class="token number">.56</span><span class="token number">.5</span><span class="token punctuation">,</span> <span class="token number">00</span><span class="token operator">:</span><span class="token number">00</span><span class="token operator">:</span><span class="token number">08</span><span class="token punctuation">,</span> FastEthernet0<span class="token operator">/</span><span class="token number">0</span>
R     <span class="token number">192.168</span><span class="token number">.47</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span> <span class="token punctuation">[</span><span class="token number">120</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">]</span> via <span class="token number">192.168</span><span class="token number">.56</span><span class="token number">.5</span><span class="token punctuation">,</span> <span class="token number">00</span><span class="token operator">:</span><span class="token number">00</span><span class="token operator">:</span><span class="token number">08</span><span class="token punctuation">,</span> FastEthernet0<span class="token operator">/</span><span class="token number">0</span>
        <span class="token number">192.168</span><span class="token number">.56</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span> is variably subnetted<span class="token punctuation">,</span> <span class="token number">2</span> subnets<span class="token punctuation">,</span> <span class="token number">2</span> masks
C        <span class="token number">192.168</span><span class="token number">.56</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span> is directly connected<span class="token punctuation">,</span> FastEthernet0<span class="token operator">/</span><span class="token number">0</span>
L        <span class="token number">192.168</span><span class="token number">.56</span><span class="token number">.6</span><span class="token operator">/</span><span class="token number">32</span> is directly connected<span class="token punctuation">,</span> FastEthernet0<span class="token operator">/</span><span class="token number">0</span>
R     <span class="token number">192.168</span><span class="token number">.78</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span> <span class="token punctuation">[</span><span class="token number">120</span><span class="token operator">/</span><span class="token number">3</span><span class="token punctuation">]</span> via <span class="token number">192.168</span><span class="token number">.56</span><span class="token number">.5</span><span class="token punctuation">,</span> <span class="token number">00</span><span class="token operator">:</span><span class="token number">00</span><span class="token operator">:</span><span class="token number">08</span><span class="token punctuation">,</span> FastEthernet0<span class="token operator">/</span><span class="token number">0</span>
<span class="token comment">//R6有关于8.8.8.8/32的路由条目，并且是通过RIP从R5学到的；</span>
<span class="token comment">//R6将数据包转发给R5；</span></code></pre>

<p>此时Echo Request包达到R5，查看R5的IP路由表；</p>
<pre class="language-c" data-language="c"><code class="language-c">R5#sh ip route
Codes<span class="token operator">:</span> L <span class="token operator">-</span> local<span class="token punctuation">,</span> C <span class="token operator">-</span> connected<span class="token punctuation">,</span> S <span class="token operator">-</span> <span class="token keyword">static</span><span class="token punctuation">,</span> R <span class="token operator">-</span> RIP<span class="token punctuation">,</span> M <span class="token operator">-</span> mobile<span class="token punctuation">,</span> B <span class="token operator">-</span> BGP
        D <span class="token operator">-</span> EIGRP<span class="token punctuation">,</span> EX <span class="token operator">-</span> EIGRP external<span class="token punctuation">,</span> O <span class="token operator">-</span> OSPF<span class="token punctuation">,</span> IA <span class="token operator">-</span> OSPF inter area 
        N1 <span class="token operator">-</span> OSPF NSSA external type <span class="token number">1</span><span class="token punctuation">,</span> N2 <span class="token operator">-</span> OSPF NSSA external type <span class="token number">2</span>
        E1 <span class="token operator">-</span> OSPF external type <span class="token number">1</span><span class="token punctuation">,</span> E2 <span class="token operator">-</span> OSPF external type <span class="token number">2</span>
        i <span class="token operator">-</span> IS<span class="token operator">-</span>IS<span class="token punctuation">,</span> su <span class="token operator">-</span> IS<span class="token operator">-</span>IS summary<span class="token punctuation">,</span> L1 <span class="token operator">-</span> IS<span class="token operator">-</span>IS level<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> L2 <span class="token operator">-</span> IS<span class="token operator">-</span>IS level<span class="token operator">-</span><span class="token number">2</span>
        ia <span class="token operator">-</span> IS<span class="token operator">-</span>IS inter area<span class="token punctuation">,</span> <span class="token operator">*</span> <span class="token operator">-</span> candidate <span class="token keyword">default</span><span class="token punctuation">,</span> U <span class="token operator">-</span> per<span class="token operator">-</span>user <span class="token keyword">static</span> route
        o <span class="token operator">-</span> ODR<span class="token punctuation">,</span> P <span class="token operator">-</span> periodic downloaded <span class="token keyword">static</span> route<span class="token punctuation">,</span> H <span class="token operator">-</span> NHRP<span class="token punctuation">,</span> l <span class="token operator">-</span> LISP
        <span class="token operator">+</span> <span class="token operator">-</span> replicated route<span class="token punctuation">,</span> <span class="token operator">%</span> <span class="token operator">-</span> next hop override
                                                            
Gateway of last resort is not set
                                                            
        <span class="token number">5.0</span><span class="token number">.0</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">32</span> is subnetted<span class="token punctuation">,</span> <span class="token number">1</span> subnets
C        <span class="token number">5.5</span><span class="token number">.5</span><span class="token number">.5</span> is directly connected<span class="token punctuation">,</span> Loopback0
        <span class="token number">6.0</span><span class="token number">.0</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">32</span> is subnetted<span class="token punctuation">,</span> <span class="token number">1</span> subnets
R        <span class="token number">6.6</span><span class="token number">.6</span><span class="token number">.6</span> <span class="token punctuation">[</span><span class="token number">120</span><span class="token operator">/</span><span class="token number">1</span><span class="token punctuation">]</span> via <span class="token number">192.168</span><span class="token number">.56</span><span class="token number">.6</span><span class="token punctuation">,</span> <span class="token number">00</span><span class="token operator">:</span><span class="token number">00</span><span class="token operator">:</span><span class="token number">05</span><span class="token punctuation">,</span> FastEthernet0<span class="token operator">/</span><span class="token number">0</span>
        <span class="token number">7.0</span><span class="token number">.0</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">32</span> is subnetted<span class="token punctuation">,</span> <span class="token number">1</span> subnets
R        <span class="token number">7.7</span><span class="token number">.7</span><span class="token number">.7</span> <span class="token punctuation">[</span><span class="token number">120</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">]</span> via <span class="token number">192.168</span><span class="token number">.15</span><span class="token number">.1</span><span class="token punctuation">,</span> <span class="token number">00</span><span class="token operator">:</span><span class="token number">00</span><span class="token operator">:</span><span class="token number">23</span><span class="token punctuation">,</span> FastEthernet0<span class="token operator">/</span><span class="token number">1</span>
        <span class="token number">8.0</span><span class="token number">.0</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">32</span> is subnetted<span class="token punctuation">,</span> <span class="token number">1</span> subnets
R        <span class="token number">8.8</span><span class="token number">.8</span><span class="token number">.8</span> <span class="token punctuation">[</span><span class="token number">120</span><span class="token operator">/</span><span class="token number">3</span><span class="token punctuation">]</span> via <span class="token number">192.168</span><span class="token number">.15</span><span class="token number">.1</span><span class="token punctuation">,</span> <span class="token number">00</span><span class="token operator">:</span><span class="token number">00</span><span class="token operator">:</span><span class="token number">23</span><span class="token punctuation">,</span> FastEthernet0<span class="token operator">/</span><span class="token number">1</span>
        <span class="token number">192.168</span><span class="token number">.15</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span> is variably subnetted<span class="token punctuation">,</span> <span class="token number">2</span> subnets<span class="token punctuation">,</span> <span class="token number">2</span> masks
C        <span class="token number">192.168</span><span class="token number">.15</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span> is directly connected<span class="token punctuation">,</span> FastEthernet0<span class="token operator">/</span><span class="token number">1</span>
L        <span class="token number">192.168</span><span class="token number">.15</span><span class="token number">.5</span><span class="token operator">/</span><span class="token number">32</span> is directly connected<span class="token punctuation">,</span> FastEthernet0<span class="token operator">/</span><span class="token number">1</span>
R     <span class="token number">192.168</span><span class="token number">.47</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span> <span class="token punctuation">[</span><span class="token number">120</span><span class="token operator">/</span><span class="token number">1</span><span class="token punctuation">]</span> via <span class="token number">192.168</span><span class="token number">.15</span><span class="token number">.1</span><span class="token punctuation">,</span> <span class="token number">00</span><span class="token operator">:</span><span class="token number">00</span><span class="token operator">:</span><span class="token number">23</span><span class="token punctuation">,</span> FastEthernet0<span class="token operator">/</span><span class="token number">1</span>
        <span class="token number">192.168</span><span class="token number">.56</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span> is variably subnetted<span class="token punctuation">,</span> <span class="token number">2</span> subnets<span class="token punctuation">,</span> <span class="token number">2</span> masks
C        <span class="token number">192.168</span><span class="token number">.56</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span> is directly connected<span class="token punctuation">,</span> FastEthernet0<span class="token operator">/</span><span class="token number">0</span>
L        <span class="token number">192.168</span><span class="token number">.56</span><span class="token number">.5</span><span class="token operator">/</span><span class="token number">32</span> is directly connected<span class="token punctuation">,</span> FastEthernet0<span class="token operator">/</span><span class="token number">0</span>
R     <span class="token number">192.168</span><span class="token number">.78</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span> <span class="token punctuation">[</span><span class="token number">120</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">]</span> via <span class="token number">192.168</span><span class="token number">.15</span><span class="token number">.1</span><span class="token punctuation">,</span> <span class="token number">00</span><span class="token operator">:</span><span class="token number">00</span><span class="token operator">:</span><span class="token number">23</span><span class="token punctuation">,</span> FastEthernet0<span class="token operator">/</span><span class="token number">1</span>
<span class="token comment">//R5发现自己拥有关于8.8.8.8/32的路由条目，并且此路由条目是通过RIP从PE1（R1）学到的；</span>
<span class="token comment">//R5将数据包转发给PE1（R1）；</span></code></pre>

<p><strong>此时Echo Request包抵达PE1（R1）；</strong></p>
<p>由于从R5转发来的ping包是在接口F0&#x2F;1上收到的，而此接口又与VRF A-Site1相关联，所以PE1需要查看IP vrf A-Site1路由表；准确的说也不是查看IP vrf A-Site1路由表，而是查看IP CEF vrf A-Site1表，但毕竟CEF表来自于路由表，这里只是为了说明选路的依据；</p>
<pre class="language-c" data-language="c"><code class="language-c">R1#show ip route vrf A<span class="token operator">-</span>Site1

Routing Table<span class="token operator">:</span> A<span class="token operator">-</span>Site1
Codes<span class="token operator">:</span> L <span class="token operator">-</span> local<span class="token punctuation">,</span> C <span class="token operator">-</span> connected<span class="token punctuation">,</span> S <span class="token operator">-</span> <span class="token keyword">static</span><span class="token punctuation">,</span> R <span class="token operator">-</span> RIP<span class="token punctuation">,</span> M <span class="token operator">-</span> mobile<span class="token punctuation">,</span> B <span class="token operator">-</span> BGP
        D <span class="token operator">-</span> EIGRP<span class="token punctuation">,</span> EX <span class="token operator">-</span> EIGRP external<span class="token punctuation">,</span> O <span class="token operator">-</span> OSPF<span class="token punctuation">,</span> IA <span class="token operator">-</span> OSPF inter area 
        N1 <span class="token operator">-</span> OSPF NSSA external type <span class="token number">1</span><span class="token punctuation">,</span> N2 <span class="token operator">-</span> OSPF NSSA external type <span class="token number">2</span>
        E1 <span class="token operator">-</span> OSPF external type <span class="token number">1</span><span class="token punctuation">,</span> E2 <span class="token operator">-</span> OSPF external type <span class="token number">2</span>
        i <span class="token operator">-</span> IS<span class="token operator">-</span>IS<span class="token punctuation">,</span> su <span class="token operator">-</span> IS<span class="token operator">-</span>IS summary<span class="token punctuation">,</span> L1 <span class="token operator">-</span> IS<span class="token operator">-</span>IS level<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> L2 <span class="token operator">-</span> IS<span class="token operator">-</span>IS level<span class="token operator">-</span><span class="token number">2</span>
        ia <span class="token operator">-</span> IS<span class="token operator">-</span>IS inter area<span class="token punctuation">,</span> <span class="token operator">*</span> <span class="token operator">-</span> candidate <span class="token keyword">default</span><span class="token punctuation">,</span> U <span class="token operator">-</span> per<span class="token operator">-</span>user <span class="token keyword">static</span> route
        o <span class="token operator">-</span> ODR<span class="token punctuation">,</span> P <span class="token operator">-</span> periodic downloaded <span class="token keyword">static</span> route<span class="token punctuation">,</span> H <span class="token operator">-</span> NHRP<span class="token punctuation">,</span> l <span class="token operator">-</span> LISP
        <span class="token operator">+</span> <span class="token operator">-</span> replicated route<span class="token punctuation">,</span> <span class="token operator">%</span> <span class="token operator">-</span> next hop override

Gateway of last resort is not set

        <span class="token number">5.0</span><span class="token number">.0</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">32</span> is subnetted<span class="token punctuation">,</span> <span class="token number">1</span> subnets
R        <span class="token number">5.5</span><span class="token number">.5</span><span class="token number">.5</span> <span class="token punctuation">[</span><span class="token number">120</span><span class="token operator">/</span><span class="token number">1</span><span class="token punctuation">]</span> via <span class="token number">192.168</span><span class="token number">.15</span><span class="token number">.5</span><span class="token punctuation">,</span> <span class="token number">00</span><span class="token operator">:</span><span class="token number">00</span><span class="token operator">:</span><span class="token number">04</span><span class="token punctuation">,</span> FastEthernet0<span class="token operator">/</span><span class="token number">1</span>
        <span class="token number">6.0</span><span class="token number">.0</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">32</span> is subnetted<span class="token punctuation">,</span> <span class="token number">1</span> subnets
R        <span class="token number">6.6</span><span class="token number">.6</span><span class="token number">.6</span> <span class="token punctuation">[</span><span class="token number">120</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">]</span> via <span class="token number">192.168</span><span class="token number">.15</span><span class="token number">.5</span><span class="token punctuation">,</span> <span class="token number">00</span><span class="token operator">:</span><span class="token number">00</span><span class="token operator">:</span><span class="token number">04</span><span class="token punctuation">,</span> FastEthernet0<span class="token operator">/</span><span class="token number">1</span>
        <span class="token number">7.0</span><span class="token number">.0</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">32</span> is subnetted<span class="token punctuation">,</span> <span class="token number">1</span> subnets
B        <span class="token number">7.7</span><span class="token number">.7</span><span class="token number">.7</span> <span class="token punctuation">[</span><span class="token number">200</span><span class="token operator">/</span><span class="token number">1</span><span class="token punctuation">]</span> via <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span><span class="token punctuation">,</span> <span class="token number">01</span><span class="token operator">:</span><span class="token number">40</span><span class="token operator">:</span><span class="token number">04</span>
        <span class="token number">8.0</span><span class="token number">.0</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">32</span> is subnetted<span class="token punctuation">,</span> <span class="token number">1</span> subnets
B        <span class="token number">8.8</span><span class="token number">.8</span><span class="token number">.8</span> <span class="token punctuation">[</span><span class="token number">200</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">]</span> via <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span><span class="token punctuation">,</span> <span class="token number">01</span><span class="token operator">:</span><span class="token number">40</span><span class="token operator">:</span><span class="token number">04</span>
        <span class="token number">192.168</span><span class="token number">.15</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span> is variably subnetted<span class="token punctuation">,</span> <span class="token number">2</span> subnets<span class="token punctuation">,</span> <span class="token number">2</span> masks
C        <span class="token number">192.168</span><span class="token number">.15</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span> is directly connected<span class="token punctuation">,</span> FastEthernet0<span class="token operator">/</span><span class="token number">1</span>
L        <span class="token number">192.168</span><span class="token number">.15</span><span class="token number">.1</span><span class="token operator">/</span><span class="token number">32</span> is directly connected<span class="token punctuation">,</span> FastEthernet0<span class="token operator">/</span><span class="token number">1</span>
B     <span class="token number">192.168</span><span class="token number">.47</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span> <span class="token punctuation">[</span><span class="token number">200</span><span class="token operator">/</span><span class="token number">0</span><span class="token punctuation">]</span> via <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span><span class="token punctuation">,</span> <span class="token number">01</span><span class="token operator">:</span><span class="token number">40</span><span class="token operator">:</span><span class="token number">04</span>
R     <span class="token number">192.168</span><span class="token number">.56</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span> <span class="token punctuation">[</span><span class="token number">120</span><span class="token operator">/</span><span class="token number">1</span><span class="token punctuation">]</span> via <span class="token number">192.168</span><span class="token number">.15</span><span class="token number">.5</span><span class="token punctuation">,</span> <span class="token number">00</span><span class="token operator">:</span><span class="token number">00</span><span class="token operator">:</span><span class="token number">04</span><span class="token punctuation">,</span> FastEthernet0<span class="token operator">/</span><span class="token number">1</span>
B     <span class="token number">192.168</span><span class="token number">.78</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span> <span class="token punctuation">[</span><span class="token number">200</span><span class="token operator">/</span><span class="token number">1</span><span class="token punctuation">]</span> via <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span><span class="token punctuation">,</span> <span class="token number">01</span><span class="token operator">:</span><span class="token number">40</span><span class="token operator">:</span><span class="token number">04</span></code></pre>

<p>PE1（R1）发现自己拥有关于8.8.8.8&#x2F;32的路由条目，并且此路由条目是通过IBGP从R4（PE2）学到的；与纯MPLS网络中一样，去往8.8.8.8&#x2F;32的路由需要递归查找明确的下一跳；要达到8.8.8.8&#x2F;32必须先到达4.4.4.4&#x2F;32，因为4.4.4.4&#x2F;32不是VPNv4路由，所以4.4.4.4&#x2F;32的路由存在于普通IP路由表中；</p>
<p>因而要达到4.4.4.4&#x2F;32就必须查看普通IP路由表：</p>
<pre class="language-c" data-language="c"><code class="language-c">R1#show ip route
Codes<span class="token operator">:</span> L <span class="token operator">-</span> local<span class="token punctuation">,</span> C <span class="token operator">-</span> connected<span class="token punctuation">,</span> S <span class="token operator">-</span> <span class="token keyword">static</span><span class="token punctuation">,</span> R <span class="token operator">-</span> RIP<span class="token punctuation">,</span> M <span class="token operator">-</span> mobile<span class="token punctuation">,</span> B <span class="token operator">-</span> BGP
        D <span class="token operator">-</span> EIGRP<span class="token punctuation">,</span> EX <span class="token operator">-</span> EIGRP external<span class="token punctuation">,</span> O <span class="token operator">-</span> OSPF<span class="token punctuation">,</span> IA <span class="token operator">-</span> OSPF inter area 
        N1 <span class="token operator">-</span> OSPF NSSA external type <span class="token number">1</span><span class="token punctuation">,</span> N2 <span class="token operator">-</span> OSPF NSSA external type <span class="token number">2</span>
        E1 <span class="token operator">-</span> OSPF external type <span class="token number">1</span><span class="token punctuation">,</span> E2 <span class="token operator">-</span> OSPF external type <span class="token number">2</span>
        i <span class="token operator">-</span> IS<span class="token operator">-</span>IS<span class="token punctuation">,</span> su <span class="token operator">-</span> IS<span class="token operator">-</span>IS summary<span class="token punctuation">,</span> L1 <span class="token operator">-</span> IS<span class="token operator">-</span>IS level<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> L2 <span class="token operator">-</span> IS<span class="token operator">-</span>IS level<span class="token operator">-</span><span class="token number">2</span>
        ia <span class="token operator">-</span> IS<span class="token operator">-</span>IS inter area<span class="token punctuation">,</span> <span class="token operator">*</span> <span class="token operator">-</span> candidate <span class="token keyword">default</span><span class="token punctuation">,</span> U <span class="token operator">-</span> per<span class="token operator">-</span>user <span class="token keyword">static</span> route
        o <span class="token operator">-</span> ODR<span class="token punctuation">,</span> P <span class="token operator">-</span> periodic downloaded <span class="token keyword">static</span> route<span class="token punctuation">,</span> H <span class="token operator">-</span> NHRP<span class="token punctuation">,</span> l <span class="token operator">-</span> LISP
        <span class="token operator">+</span> <span class="token operator">-</span> replicated route<span class="token punctuation">,</span> <span class="token operator">%</span> <span class="token operator">-</span> next hop override
                                                            
Gateway of last resort is not set
                                                            
        <span class="token number">1.0</span><span class="token number">.0</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">32</span> is subnetted<span class="token punctuation">,</span> <span class="token number">1</span> subnets
C        <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span> is directly connected<span class="token punctuation">,</span> Loopback0
        <span class="token number">2.0</span><span class="token number">.0</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">32</span> is subnetted<span class="token punctuation">,</span> <span class="token number">1</span> subnets
O        <span class="token number">2.2</span><span class="token number">.2</span><span class="token number">.2</span> <span class="token punctuation">[</span><span class="token number">110</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">]</span> via <span class="token number">192.168</span><span class="token number">.12</span><span class="token number">.2</span><span class="token punctuation">,</span> <span class="token number">02</span><span class="token operator">:</span><span class="token number">08</span><span class="token operator">:</span><span class="token number">31</span><span class="token punctuation">,</span> FastEthernet0<span class="token operator">/</span><span class="token number">0</span>
        <span class="token number">3.0</span><span class="token number">.0</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">32</span> is subnetted<span class="token punctuation">,</span> <span class="token number">1</span> subnets
O        <span class="token number">3.3</span><span class="token number">.3</span><span class="token number">.3</span> <span class="token punctuation">[</span><span class="token number">110</span><span class="token operator">/</span><span class="token number">3</span><span class="token punctuation">]</span> via <span class="token number">192.168</span><span class="token number">.12</span><span class="token number">.2</span><span class="token punctuation">,</span> <span class="token number">02</span><span class="token operator">:</span><span class="token number">08</span><span class="token operator">:</span><span class="token number">21</span><span class="token punctuation">,</span> FastEthernet0<span class="token operator">/</span><span class="token number">0</span>
        <span class="token number">4.0</span><span class="token number">.0</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">32</span> is subnetted<span class="token punctuation">,</span> <span class="token number">1</span> subnets
O        <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span> <span class="token punctuation">[</span><span class="token number">110</span><span class="token operator">/</span><span class="token number">4</span><span class="token punctuation">]</span> via <span class="token number">192.168</span><span class="token number">.12</span><span class="token number">.2</span><span class="token punctuation">,</span> <span class="token number">02</span><span class="token operator">:</span><span class="token number">08</span><span class="token operator">:</span><span class="token number">21</span><span class="token punctuation">,</span> FastEthernet0<span class="token operator">/</span><span class="token number">0</span>
        <span class="token number">192.168</span><span class="token number">.12</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span> is variably subnetted<span class="token punctuation">,</span> <span class="token number">2</span> subnets<span class="token punctuation">,</span> <span class="token number">2</span> masks
C        <span class="token number">192.168</span><span class="token number">.12</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span> is directly connected<span class="token punctuation">,</span> FastEthernet0<span class="token operator">/</span><span class="token number">0</span>
L        <span class="token number">192.168</span><span class="token number">.12</span><span class="token number">.1</span><span class="token operator">/</span><span class="token number">32</span> is directly connected<span class="token punctuation">,</span> FastEthernet0<span class="token operator">/</span><span class="token number">0</span>
O     <span class="token number">192.168</span><span class="token number">.23</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span> <span class="token punctuation">[</span><span class="token number">110</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">]</span> via <span class="token number">192.168</span><span class="token number">.12</span><span class="token number">.2</span><span class="token punctuation">,</span> <span class="token number">02</span><span class="token operator">:</span><span class="token number">08</span><span class="token operator">:</span><span class="token number">21</span><span class="token punctuation">,</span> FastEthernet0<span class="token operator">/</span><span class="token number">0</span>
O     <span class="token number">192.168</span><span class="token number">.34</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span> <span class="token punctuation">[</span><span class="token number">110</span><span class="token operator">/</span><span class="token number">3</span><span class="token punctuation">]</span> via <span class="token number">192.168</span><span class="token number">.12</span><span class="token number">.2</span><span class="token punctuation">,</span> <span class="token number">02</span><span class="token operator">:</span><span class="token number">08</span><span class="token operator">:</span><span class="token number">21</span><span class="token punctuation">,</span> FastEthernet0<span class="token operator">/</span><span class="token number">0</span></code></pre>
<p>要去往4.4.4.4&#x2F;32就必须到达192.168.12.2，至此PE1发现了关于8.8.8.8&#x2F;32明确的下一跳；</p>
<p>由于关于8.8.8.8&#x2F;32的BGP路由器条目是一条VPNv4路由，所以查看PE1的IP BGP VPNv4表；</p>
<pre class="language-c" data-language="c"><code class="language-c">R1#show ip bgp vpnv4 all
BGP table version is <span class="token number">13</span><span class="token punctuation">,</span> local router ID is <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span>
Status codes<span class="token operator">:</span> s suppressed<span class="token punctuation">,</span> d damped<span class="token punctuation">,</span> h history<span class="token punctuation">,</span> <span class="token operator">*</span> valid<span class="token punctuation">,</span> <span class="token operator">></span> best<span class="token punctuation">,</span> i <span class="token operator">-</span> internal<span class="token punctuation">,</span>
                r RIB<span class="token operator">-</span>failure<span class="token punctuation">,</span> S Stale<span class="token punctuation">,</span> m multipath<span class="token punctuation">,</span> b backup<span class="token operator">-</span>path<span class="token punctuation">,</span> x best<span class="token operator">-</span>external<span class="token punctuation">,</span> f RT<span class="token operator">-</span>Filter
Origin codes<span class="token operator">:</span> i <span class="token operator">-</span> IGP<span class="token punctuation">,</span> e <span class="token operator">-</span> EGP<span class="token punctuation">,</span> <span class="token operator">?</span> <span class="token operator">-</span> incomplete

    Network          Next Hop            Metric LocPrf Weight Path
Route Distinguisher<span class="token operator">:</span> <span class="token number">1</span><span class="token operator">:</span><span class="token number">1</span> <span class="token punctuation">(</span><span class="token keyword">default</span> <span class="token keyword">for</span> vrf A<span class="token operator">-</span>Site1<span class="token punctuation">)</span>
<span class="token operator">*</span><span class="token operator">></span> <span class="token number">5.5</span><span class="token number">.5</span><span class="token number">.5</span><span class="token operator">/</span><span class="token number">32</span>       <span class="token number">192.168</span><span class="token number">.15</span><span class="token number">.5</span>             <span class="token number">1</span>         <span class="token number">32768</span> <span class="token operator">?</span>
<span class="token operator">*</span><span class="token operator">></span> <span class="token number">6.6</span><span class="token number">.6</span><span class="token number">.6</span><span class="token operator">/</span><span class="token number">32</span>       <span class="token number">192.168</span><span class="token number">.15</span><span class="token number">.5</span>             <span class="token number">2</span>         <span class="token number">32768</span> <span class="token operator">?</span>
<span class="token operator">*</span><span class="token operator">></span>i7<span class="token punctuation">.</span><span class="token number">7.7</span><span class="token number">.7</span><span class="token operator">/</span><span class="token number">32</span>       <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span>                  <span class="token number">1</span>    <span class="token number">100</span>      <span class="token number">0</span> <span class="token operator">?</span>
<span class="token operator">*</span><span class="token operator">></span>i8<span class="token punctuation">.</span><span class="token number">8.8</span><span class="token number">.8</span><span class="token operator">/</span><span class="token number">32</span>       <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span>                  <span class="token number">2</span>    <span class="token number">100</span>      <span class="token number">0</span> <span class="token operator">?</span>
<span class="token operator">*</span><span class="token operator">></span> <span class="token number">192.168</span><span class="token number">.15</span><span class="token number">.0</span>     <span class="token number">0.0</span><span class="token number">.0</span><span class="token number">.0</span>                  <span class="token number">0</span>         <span class="token number">32768</span> <span class="token operator">?</span>
<span class="token operator">*</span><span class="token operator">></span>i192<span class="token punctuation">.</span><span class="token number">168.47</span><span class="token number">.0</span>     <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span>                  <span class="token number">0</span>    <span class="token number">100</span>      <span class="token number">0</span> <span class="token operator">?</span>
<span class="token operator">*</span><span class="token operator">></span> <span class="token number">192.168</span><span class="token number">.56</span><span class="token number">.0</span>     <span class="token number">192.168</span><span class="token number">.15</span><span class="token number">.5</span>             <span class="token number">1</span>         <span class="token number">32768</span> <span class="token operator">?</span>
<span class="token operator">*</span><span class="token operator">></span>i192<span class="token punctuation">.</span><span class="token number">168.78</span><span class="token number">.0</span>     <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span>                  <span class="token number">1</span>    <span class="token number">100</span>      <span class="token number">0</span> <span class="token operator">?</span>
Route Distinguisher<span class="token operator">:</span> <span class="token number">1</span><span class="token operator">:</span><span class="token number">2</span>
<span class="token operator">*</span><span class="token operator">></span>i7<span class="token punctuation">.</span><span class="token number">7.7</span><span class="token number">.7</span><span class="token operator">/</span><span class="token number">32</span>       <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span>                  <span class="token number">1</span>    <span class="token number">100</span>      <span class="token number">0</span> <span class="token operator">?</span>
<span class="token operator">*</span><span class="token operator">></span>i8<span class="token punctuation">.</span><span class="token number">8.8</span><span class="token number">.8</span><span class="token operator">/</span><span class="token number">32</span>       <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span>                  <span class="token number">2</span>    <span class="token number">100</span>      <span class="token number">0</span> <span class="token operator">?</span>
<span class="token operator">*</span><span class="token operator">></span>i192<span class="token punctuation">.</span><span class="token number">168.47</span><span class="token number">.0</span>     <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span>                  <span class="token number">0</span>    <span class="token number">100</span>      <span class="token number">0</span> <span class="token operator">?</span>
<span class="token operator">*</span><span class="token operator">></span>i192<span class="token punctuation">.</span><span class="token number">168.78</span><span class="token number">.0</span>     <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span>                  <span class="token number">1</span>    <span class="token number">100</span>      <span class="token number">0</span> <span class="token operator">?</span></code></pre>

<p>查看PE1的IP BGP VPNv4表明细路由；</p>
<pre class="language-c" data-language="c"><code class="language-c">R1#show ip bgp vpnv4 rd <span class="token number">1</span><span class="token operator">:</span><span class="token number">1</span> <span class="token number">8.8</span><span class="token number">.8</span><span class="token number">.8</span>
BGP routing table entry <span class="token keyword">for</span> <span class="token number">1</span><span class="token operator">:</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">8.8</span><span class="token number">.8</span><span class="token number">.8</span><span class="token operator">/</span><span class="token number">32</span><span class="token punctuation">,</span> version <span class="token number">11</span>
Paths<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token number">1</span> available<span class="token punctuation">,</span> best #<span class="token number">1</span><span class="token punctuation">,</span> table A<span class="token operator">-</span>Site1<span class="token punctuation">)</span>
    Not advertised to any peer
    Local<span class="token punctuation">,</span> imported path from <span class="token number">1</span><span class="token operator">:</span><span class="token number">2</span><span class="token operator">:</span><span class="token number">8.8</span><span class="token number">.8</span><span class="token number">.8</span><span class="token operator">/</span><span class="token number">32</span>
    <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span> <span class="token punctuation">(</span>metric <span class="token number">4</span><span class="token punctuation">)</span> from <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span> <span class="token punctuation">(</span><span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span><span class="token punctuation">)</span>
        Origin incomplete<span class="token punctuation">,</span> metric <span class="token number">2</span><span class="token punctuation">,</span> localpref <span class="token number">100</span><span class="token punctuation">,</span> valid<span class="token punctuation">,</span> internal<span class="token punctuation">,</span> best
        Extended Community<span class="token operator">:</span> RT<span class="token operator">:</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">1</span>
        mpls labels in<span class="token operator">/</span>out nolabel<span class="token operator">/</span><span class="token number">22</span><span class="token comment">//标签22是远程PE2（R4）MP-BGP通告的VPNv4路由中包含的VPNv4标签，此标签被用作MPLS VPN的栈底标签；</span>

R1#show ip bgp vpnv4 rd <span class="token number">1</span><span class="token operator">:</span><span class="token number">2</span> <span class="token number">8.8</span><span class="token number">.8</span><span class="token number">.8</span>
BGP routing table entry <span class="token keyword">for</span> <span class="token number">1</span><span class="token operator">:</span><span class="token number">2</span><span class="token operator">:</span><span class="token number">8.8</span><span class="token number">.8</span><span class="token number">.8</span><span class="token operator">/</span><span class="token number">32</span><span class="token punctuation">,</span> version <span class="token number">7</span>
Paths<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token number">1</span> available<span class="token punctuation">,</span> best #<span class="token number">1</span><span class="token punctuation">,</span> no table<span class="token punctuation">)</span>
    Not advertised to any peer
    Local
    <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span> <span class="token punctuation">(</span>metric <span class="token number">4</span><span class="token punctuation">)</span> from <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span> <span class="token punctuation">(</span><span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span><span class="token punctuation">)</span>
        Origin incomplete<span class="token punctuation">,</span> metric <span class="token number">2</span><span class="token punctuation">,</span> localpref <span class="token number">100</span><span class="token punctuation">,</span> valid<span class="token punctuation">,</span> internal<span class="token punctuation">,</span> best
        Extended Community<span class="token operator">:</span> RT<span class="token operator">:</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">1</span>
        mpls labels in<span class="token operator">/</span>out nolabel<span class="token operator">/</span><span class="token number">22</span><span class="token comment">//标签22是远程PE2（R4）MP-BGP通告的VPNv4路由中包含的VPNv4标签，此标签被用作MPLS VPN的栈底标签；</span></code></pre>

<p>查看LFIB表中关于8.8.8.8&#x2F;32的详细信息；</p>
<pre class="language-c" data-language="c"><code class="language-c">R1#show mpls forwarding<span class="token operator">-</span>table vrf A<span class="token operator">-</span>Site1 <span class="token number">8.8</span><span class="token number">.8</span><span class="token number">.8</span> detail
Local      Outgoing   Prefix           Bytes Label   Outgoing   Next Hop    
Label      Label      or Tunnel Id     Switched      interface              
None       <span class="token number">22</span>         <span class="token number">8.8</span><span class="token number">.8</span><span class="token number">.8</span><span class="token operator">/</span><span class="token number">32</span><span class="token punctuation">[</span>V<span class="token punctuation">]</span>    <span class="token number">0</span>             Fa0<span class="token operator">/</span><span class="token number">0</span>      <span class="token number">192.168</span><span class="token number">.12</span><span class="token number">.2</span>
        MAC<span class="token operator">/</span>Encaps<span class="token operator">=</span><span class="token number">14</span><span class="token operator">/</span><span class="token number">22</span><span class="token punctuation">,</span> MRU<span class="token operator">=</span><span class="token number">1496</span><span class="token punctuation">,</span> Label Stack<span class="token punctuation">&#123;</span><span class="token number">17</span> <span class="token number">22</span><span class="token punctuation">&#125;</span> <span class="token comment">//标签栈中有两个标签，标签17用于在AS1中转发数据，栈底标签22为VPNv4标签；</span>
        CA0518300008CA04183000088847 <span class="token number">0001100000016000</span>
        VPN route<span class="token operator">:</span> A<span class="token operator">-</span>Site1
        No output feature configured</code></pre>

<p>知道了前缀8.8.8.8&#x2F;32的递归下一跳之后，沿递归路径查看每一跳的标签信息；查看PE1的IP CEF VRF A-Site1表中8.8.8.8的详细信息；</p>
<pre class="language-c" data-language="c"><code class="language-c">R1#sh ip cef vrf A<span class="token operator">-</span>Site1 <span class="token number">8.8</span><span class="token number">.8</span><span class="token number">.8</span> detail
<span class="token number">8.8</span><span class="token number">.8</span><span class="token number">.8</span><span class="token operator">/</span><span class="token number">32</span><span class="token punctuation">,</span> epoch <span class="token number">0</span><span class="token punctuation">,</span> flags rib defined all labels
    recursive via <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span> label <span class="token number">22</span><span class="token comment">//标签22为栈底的VPNv4标签；</span>
    nexthop <span class="token number">192.168</span><span class="token number">.12</span><span class="token number">.2</span> FastEthernet0<span class="token operator">/</span><span class="token number">0</span> label <span class="token number">17</span><span class="token comment">//8.8.8.8/32递归"继承了"4.4.4.4的标签17；</span></code></pre>

<p>查看PE1（R1）的IP CEF表中4.4.4.4的详细信息；</p>
<pre class="language-c" data-language="c"><code class="language-c">R1#sh ip cef <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span> detail
<span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span><span class="token operator">/</span><span class="token number">32</span><span class="token punctuation">,</span> epoch <span class="token number">0</span>
    local label info<span class="token operator">:</span> global<span class="token operator">/</span><span class="token number">18</span>
    <span class="token number">1</span> RR source <span class="token punctuation">[</span>no flags<span class="token punctuation">]</span>
    nexthop <span class="token number">192.168</span><span class="token number">.12</span><span class="token number">.2</span> FastEthernet0<span class="token operator">/</span><span class="token number">0</span> label <span class="token number">17</span>
<span class="token comment">//标签17为PE1（R1）关于前缀4.4.4.4/32的出站标签，也就是R2通告给R1的入站标签；</span></code></pre>

<p>查看PE1（R1）的IP CEF表中192.168.12.2的详细信息；</p>
<pre class="language-c" data-language="c"><code class="language-c">R1#show ip cef <span class="token number">192.168</span><span class="token number">.12</span><span class="token number">.2</span> detail
<span class="token number">192.168</span><span class="token number">.12</span><span class="token number">.2</span><span class="token operator">/</span><span class="token number">32</span><span class="token punctuation">,</span> epoch <span class="token number">0</span><span class="token punctuation">,</span> flags attached
    Adj source<span class="token operator">:</span> IP adj out of FastEthernet0<span class="token operator">/</span><span class="token number">0</span><span class="token punctuation">,</span> addr <span class="token number">192.168</span><span class="token number">.12</span><span class="token number">.2</span> <span class="token number">6819</span>D980
    Dependent covered prefix type adjfib cover <span class="token number">192.168</span><span class="token number">.12</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span>
    attached to FastEthernet0<span class="token operator">/</span><span class="token number">0</span>
<span class="token comment">//由于R1与192.168.12.0/24直连，所以不再需要在进行标签转发，所以R1没有关于192.168.12.0/24的出标签；</span></code></pre>

<p>至此，PE1（R1）为数据包打上出标签17，并将数据转发给R2；</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token comment">//此时ping包抵达R2；</span>
<span class="token comment">//查看R2的LFIB表；</span>
R2#show mpls forwarding<span class="token operator">-</span>table
Local      Outgoing   Prefix           Bytes Label   Outgoing   Next Hop    
Label      Label      or Tunnel Id     Switched      interface              
<span class="token number">16</span>         Pop Label  <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span><span class="token operator">/</span><span class="token number">32</span>       <span class="token number">20757</span>         Fa0<span class="token operator">/</span><span class="token number">0</span>      <span class="token number">192.168</span><span class="token number">.12</span><span class="token number">.1</span>
<span class="token number">17</span>         <span class="token number">16</span>         <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span><span class="token operator">/</span><span class="token number">32</span>       <span class="token number">22341</span>         Fa0<span class="token operator">/</span><span class="token number">1</span>      <span class="token number">192.168</span><span class="token number">.23</span><span class="token number">.3</span>
<span class="token number">18</span>         Pop Label  <span class="token number">3.3</span><span class="token number">.3</span><span class="token number">.3</span><span class="token operator">/</span><span class="token number">32</span>       <span class="token number">0</span>             Fa0<span class="token operator">/</span><span class="token number">1</span>      <span class="token number">192.168</span><span class="token number">.23</span><span class="token number">.3</span>
<span class="token number">19</span>         Pop Label  <span class="token number">192.168</span><span class="token number">.34</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span>  <span class="token number">0</span>             Fa0<span class="token operator">/</span><span class="token number">1</span>      <span class="token number">192.168</span><span class="token number">.23</span><span class="token number">.3</span></code></pre>
<p>在收到R1转发来的带有R2本地标签17的数据包后，R2使用为数据包打上出标签16，并将其转发给R3；</p>
<p><strong>注意：递归查找路由表只会发生在运行BGP并与其他PE路由器建立IBGP关系的PE路由器，而在P路由器上，由于没有运行BGP，不可能有相关路由信息，所以只按照标签转发。</strong></p>
<p>此时ping包抵达R3；</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token comment">//查看R3的LFIB表；</span>
R3#show mpls forwarding<span class="token operator">-</span>table
Local      Outgoing   Prefix           Bytes Label   Outgoing   Next Hop    
Label      Label      or Tunnel Id     Switched      interface              
<span class="token number">16</span>         Pop Label  <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span><span class="token operator">/</span><span class="token number">32</span>       <span class="token number">27288</span>         Fa0<span class="token operator">/</span><span class="token number">0</span>      <span class="token number">192.168</span><span class="token number">.34</span><span class="token number">.4</span>
<span class="token number">17</span>         Pop Label  <span class="token number">2.2</span><span class="token number">.2</span><span class="token number">.2</span><span class="token operator">/</span><span class="token number">32</span>       <span class="token number">0</span>             Fa0<span class="token operator">/</span><span class="token number">1</span>      <span class="token number">192.168</span><span class="token number">.23</span><span class="token number">.2</span>
<span class="token number">18</span>         <span class="token number">16</span>         <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span><span class="token operator">/</span><span class="token number">32</span>       <span class="token number">29345</span>         Fa0<span class="token operator">/</span><span class="token number">1</span>      <span class="token number">192.168</span><span class="token number">.23</span><span class="token number">.2</span>
<span class="token number">19</span>         Pop Label  <span class="token number">192.168</span><span class="token number">.12</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span>  <span class="token number">0</span>             Fa0<span class="token operator">/</span><span class="token number">1</span>      <span class="token number">192.168</span><span class="token number">.23</span><span class="token number">.2</span>
<span class="token comment">//R3弹出栈顶标签，并将数据转发给PE2（R4）；</span></code></pre>

<p>此时ping包抵达PE2（R4），由于数据中栈顶的标签被弹出，所以原本栈底的VPNv4标签就变成了栈顶标签；</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token comment">//查看PE2（R4）的LFIB表；</span>
R4#show mpls forwarding<span class="token operator">-</span>table
Local      Outgoing   Prefix           Bytes Label   Outgoing   Next Hop    
Label      Label      or Tunnel Id     Switched      interface              
<span class="token number">16</span>         Pop Label  <span class="token number">3.3</span><span class="token number">.3</span><span class="token number">.3</span><span class="token operator">/</span><span class="token number">32</span>       <span class="token number">0</span>             Fa0<span class="token operator">/</span><span class="token number">0</span>      <span class="token number">192.168</span><span class="token number">.34</span><span class="token number">.3</span>
<span class="token number">17</span>         Pop Label  <span class="token number">192.168</span><span class="token number">.23</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span>  <span class="token number">0</span>             Fa0<span class="token operator">/</span><span class="token number">0</span>      <span class="token number">192.168</span><span class="token number">.34</span><span class="token number">.3</span>
<span class="token number">18</span>         <span class="token number">17</span>         <span class="token number">2.2</span><span class="token number">.2</span><span class="token number">.2</span><span class="token operator">/</span><span class="token number">32</span>       <span class="token number">0</span>             Fa0<span class="token operator">/</span><span class="token number">0</span>      <span class="token number">192.168</span><span class="token number">.34</span><span class="token number">.3</span>
<span class="token number">19</span>         <span class="token number">18</span>         <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span><span class="token operator">/</span><span class="token number">32</span>       <span class="token number">0</span>             Fa0<span class="token operator">/</span><span class="token number">0</span>      <span class="token number">192.168</span><span class="token number">.34</span><span class="token number">.3</span>
<span class="token number">20</span>         <span class="token number">19</span>         <span class="token number">192.168</span><span class="token number">.12</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span>  <span class="token number">0</span>             Fa0<span class="token operator">/</span><span class="token number">0</span>      <span class="token number">192.168</span><span class="token number">.34</span><span class="token number">.3</span>
<span class="token number">21</span>         No Label   <span class="token number">7.7</span><span class="token number">.7</span><span class="token number">.7</span><span class="token operator">/</span><span class="token number">32</span><span class="token punctuation">[</span>V<span class="token punctuation">]</span>    <span class="token number">0</span>             Fa0<span class="token operator">/</span><span class="token number">1</span>      <span class="token number">192.168</span><span class="token number">.47</span><span class="token number">.7</span>
<span class="token number">22</span>         No Label   <span class="token number">8.8</span><span class="token number">.8</span><span class="token number">.8</span><span class="token operator">/</span><span class="token number">32</span><span class="token punctuation">[</span>V<span class="token punctuation">]</span>    <span class="token number">570</span>           Fa0<span class="token operator">/</span><span class="token number">1</span>      <span class="token number">192.168</span><span class="token number">.47</span><span class="token number">.7</span>
<span class="token number">23</span>         No Label   <span class="token number">192.168</span><span class="token number">.47</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span><span class="token punctuation">[</span>V<span class="token punctuation">]</span>   \
                                        <span class="token number">0</span>             aggregate<span class="token operator">/</span>A<span class="token operator">-</span>Site2 
<span class="token number">24</span>         No Label   <span class="token number">192.168</span><span class="token number">.78</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span><span class="token punctuation">[</span>V<span class="token punctuation">]</span>   \
                                        <span class="token number">0</span>             Fa0<span class="token operator">/</span><span class="token number">1</span>      <span class="token number">192.168</span><span class="token number">.47</span><span class="token number">.7</span></code></pre>
<p>R4收到携带VPNv4标签22的Echo Request数据后，移除Echo Request数据的标签栈，将其转发给R7。</p>
<p>数据到达R7后，按照正常的转发方式被转发到R8。</p>
<pre class="language-c" data-language="c"><code class="language-c">R7#show ip route <span class="token number">8.8</span><span class="token number">.8</span><span class="token number">.8</span>
Routing entry <span class="token keyword">for</span> <span class="token number">8.8</span><span class="token number">.8</span><span class="token number">.8</span><span class="token operator">/</span><span class="token number">32</span>
    Known via <span class="token string">"rip"</span><span class="token punctuation">,</span> distance <span class="token number">120</span><span class="token punctuation">,</span> metric <span class="token number">1</span>
    Redistributing via rip
    Last update from <span class="token number">192.168</span><span class="token number">.78</span><span class="token number">.8</span> on FastEthernet0<span class="token operator">/</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">00</span><span class="token operator">:</span><span class="token number">00</span><span class="token operator">:</span><span class="token number">07</span> ago
    Routing Descriptor Blocks<span class="token operator">:</span>
    <span class="token operator">*</span> <span class="token number">192.168</span><span class="token number">.78</span><span class="token number">.8</span><span class="token punctuation">,</span> from <span class="token number">192.168</span><span class="token number">.78</span><span class="token number">.8</span><span class="token punctuation">,</span> <span class="token number">00</span><span class="token operator">:</span><span class="token number">00</span><span class="token operator">:</span><span class="token number">07</span> ago<span class="token punctuation">,</span> via FastEthernet0<span class="token operator">/</span><span class="token number">0</span>
        Route metric is <span class="token number">1</span><span class="token punctuation">,</span> traffic share count is <span class="token number">1</span>
R7#show ip cef <span class="token number">8.8</span><span class="token number">.8</span><span class="token number">.8</span> detail 
<span class="token number">8.8</span><span class="token number">.8</span><span class="token number">.8</span><span class="token operator">/</span><span class="token number">32</span><span class="token punctuation">,</span> epoch <span class="token number">0</span>
    nexthop <span class="token number">192.168</span><span class="token number">.78</span><span class="token number">.8</span> FastEthernet0<span class="token operator">/</span><span class="token number">0</span></code></pre>

<p>最终，ICMP Echo Request达到了R8，返回R6的ICMP Echo Reply的方向相反，但是过程和操作是一样的。</p>
]]></content>
      <categories>
        <category>Network</category>
      </categories>
      <tags>
        <tag>MPLS</tag>
        <tag>Network</tag>
      </tags>
  </entry>
  <entry>
    <title>MPLS 实验7：MPLS VPN running EIGRP on the PE-CE link</title>
    <url>/2014/MPLS_Lab_7/</url>
    <content><![CDATA[<h1 id="实验环境："><a href="#实验环境：" class="headerlink" title="实验环境："></a>实验环境：</h1><ul>
<li>模拟器：GNS3 0.8.6</li>
<li>Cisco IOS：c7200-adventerprisek9-mz.151-4.M2.image</li>
</ul>
<h1 id="GNS3实验拓扑文件："><a href="#GNS3实验拓扑文件：" class="headerlink" title="GNS3实验拓扑文件："></a>GNS3实验拓扑文件：</h1><p><a href="topology.net">拓扑文件</a></p>
<span id="more"></span>

<h1 id="基本预配置："><a href="#基本预配置：" class="headerlink" title="基本预配置："></a>基本预配置：</h1><h2 id="R1："><a href="#R1：" class="headerlink" title="R1："></a>R1：</h2><pre class="language-none"><code class="language-none">hostname R1
!
ip cef
!
mpls label protocol ldp
!
interface Loopback0
    ip address 1.1.1.1 255.255.255.255
    ip ospf 1 area 0
!
interface FastEthernet0&#x2F;0
    ip address 192.168.12.1 255.255.255.0
    ip ospf 1 area 0
    no shut
    mpls ip
!
interface FastEthernet0&#x2F;1
    ip address 192.168.15.1 255.255.255.0
    no shut
!
router ospf 1
    router-id 1.1.1.1
!         
mpls ldp router-id Loopback0 force
!
line con 0
    exec-timeout 0 0
    logging synchronous
!
end</code></pre>

<h2 id="R2"><a href="#R2" class="headerlink" title="R2:"></a>R2:</h2><pre class="language-none"><code class="language-none">hostname R2
!
ip cef
!
mpls label protocol ldp
!
interface Loopback0
    ip address 2.2.2.2 255.255.255.255
    ip ospf 1 area 0
!
interface FastEthernet0&#x2F;0
    ip address 192.168.12.2 255.255.255.0
    ip ospf 1 area 0
    no shutdown
    mpls ip
!
interface FastEthernet0&#x2F;1
    ip address 192.168.23.2 255.255.255.0
    ip ospf 1 area 0
    no shutdown
    mpls ip
!
router ospf 1
    router-id 2.2.2.2
!
mpls ldp router-id Loopback0 force
!
line con 0
    exec-timeout 0 0
    logging synchronous
!
end</code></pre>

<h2 id="R3"><a href="#R3" class="headerlink" title="R3:"></a>R3:</h2><pre class="language-none"><code class="language-none">hostname R3
!
ip cef
!
mpls label protocol ldp
!
interface Loopback0
    ip address 3.3.3.3 255.255.255.255
    ip ospf 1 area 0
!
interface FastEthernet0&#x2F;0
    ip address 192.168.34.3 255.255.255.0
    ip ospf 1 area 0
    no shutdown
    mpls ip
!
interface FastEthernet0&#x2F;1
    ip address 192.168.23.3 255.255.255.0
    ip ospf 1 area 0
    no shutdown
    mpls ip
!
router ospf 1
    router-id 3.3.3.3
!
mpls ldp router-id Loopback0 force
!
line con 0
    exec-timeout 0 0
    logging synchronous
!
end</code></pre>

<h2 id="R4"><a href="#R4" class="headerlink" title="R4:"></a>R4:</h2><pre class="language-none"><code class="language-none">hostname R4
!
ip cef
!
mpls label protocol ldp
!
interface Loopback0
    ip address 4.4.4.4 255.255.255.255
    ip ospf 1 area 0
!
interface FastEthernet0&#x2F;0
    ip address 192.168.34.4 255.255.255.0
    ip ospf 1 area 0
    no shutdown
mpls ip
!
interface FastEthernet0&#x2F;1
    ip address 192.168.47.4 255.255.255.0
    no shutdown
!
router ospf 1
    router-id 4.4.4.4
!
mpls ldp router-id Loopback0 force
!
line con 0
    exec-timeout 0 0
    logging synchronous
!
end</code></pre>

<h2 id="R5"><a href="#R5" class="headerlink" title="R5:"></a>R5:</h2><pre class="language-none"><code class="language-none">hostname R5
!
ip cef
!
interface Loopback0
    ip address 5.5.5.5 255.255.255.255
!
interface FastEthernet0&#x2F;0
    ip address 192.168.56.5 255.255.255.0
    no shutdown
!
interface FastEthernet0&#x2F;1
    ip address 192.168.15.5 255.255.255.0
    no shutdown
!
router eigrp 1
    network 5.5.5.5 0.0.0.0
    network 192.168.15.5 0.0.0.0
    network 192.168.56.0
    eigrp router-id 5.5.5.5
    no auto-summary
!
line con 0
    exec-timeout 0 0
    logging synchronous
!
end</code></pre>

<h2 id="R6"><a href="#R6" class="headerlink" title="R6:"></a>R6:</h2><pre class="language-none"><code class="language-none">hostname R6
!
ip cef
!
interface Loopback0
    ip address 6.6.6.6 255.255.255.255
!
interface FastEthernet0&#x2F;0
    ip address 192.168.56.6 255.255.255.0
    no shutdown
!
router eigrp 1
    network 6.6.6.6 0.0.0.0
    network 192.168.56.0
    eigrp router-id 6.6.6.6
    no auto-summary
!
line con 0
    exec-timeout 0 0
    logging synchronous
!
end</code></pre>

<h2 id="R7"><a href="#R7" class="headerlink" title="R7:"></a>R7:</h2><pre class="language-none"><code class="language-none">hostname R7
!
ip cef
!
interface Loopback0
    ip address 7.7.7.7 255.255.255.255
!
interface FastEthernet0&#x2F;0
    ip address 192.168.78.7 255.255.255.0
    no shutdown
!
interface FastEthernet0&#x2F;1
    ip address 192.168.47.7 255.255.255.0
    no shutdown
!
router eigrp 1
    network 7.7.7.7 0.0.0.0
    network 192.168.47.0
    network 192.168.78.0
    eigrp router-id 7.7.7.7
    no auto-summary
!
line con 0
    exec-timeout 0 0
    logging synchronous
!
end</code></pre>

<h2 id="R8"><a href="#R8" class="headerlink" title="R8:"></a>R8:</h2><pre class="language-none"><code class="language-none">hostname R8
!
ip cef
!
interface Loopback0
    ip address 8.8.8.8 255.255.255.255
!
interface FastEthernet0&#x2F;0
    ip address 192.168.78.8 255.255.255.0
    no shutdown
!
router eigrp 1
    network 8.8.8.8 0.0.0.0
    network 192.168.78.0
    eigrp router-id 8.8.8.8
    no auto-summary
!         
line con 0
    exec-timeout 0 0
    logging synchronous
!
end</code></pre>

<h1 id="MPLS-VPN配置步骤："><a href="#MPLS-VPN配置步骤：" class="headerlink" title="MPLS VPN配置步骤："></a>MPLS VPN配置步骤：</h1><ol>
<li>创建VRF（VRF名本地有效）：<ul>
<li>指定RD（提供全局唯一的私网单播地址）；</li>
<li>指定RT的导出（导出：把重分发进MP-BGP的VPNv4路由打上MP-BGP扩展团体属性RT）和导入（导入：把MP-BGP里的VPNv4路由进行RT的匹配，匹配成功的VPNv4路由将放进相应的VRF）；</li>
<li>将与CE相连的PE接口关联特定VRF；</li>
</ul>
</li>
<li>配置MP-BGP：<ul>
<li>配置建立PE之间的IBGP邻居关系；</li>
<li>启用VPNv4地址族（AF），并激活与其他PE设备的邻居关系；</li>
</ul>
</li>
<li>配置PE-CE路由；<ul>
<li>配置IGP，并启用IGP的地址族（AF）；</li>
<li>配置启用MP-BGP IPv4 VRF地址族，然后激活与其他PE路由器的MP-BGP IPv4 VRF邻居关系；</li>
</ul>
</li>
</ol>
<h1 id="实验与调试："><a href="#实验与调试：" class="headerlink" title="实验与调试："></a>实验与调试：</h1><h2 id="实验1：不同的VPN站点之间使用的EIGRP-AS号相同；"><a href="#实验1：不同的VPN站点之间使用的EIGRP-AS号相同；" class="headerlink" title="实验1：不同的VPN站点之间使用的EIGRP AS号相同；"></a>实验1：不同的VPN站点之间使用的EIGRP AS号相同；</h2><h3 id="实验1拓扑"><a href="#实验1拓扑" class="headerlink" title="实验1拓扑:"></a>实验1拓扑:</h3><p><img src="/2014/MPLS_Lab_7/topo1.png"></p>
<h3 id="在PE上创建VRF"><a href="#在PE上创建VRF" class="headerlink" title="在PE上创建VRF"></a><strong>在PE上创建VRF</strong></h3><p>在PE1（R1）上创建VRF，并命名为A-Site1，表示该VRF为VPN A的站点1服务；</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>#ip vrf A<span class="token operator">-</span>Site1   </code></pre>

<p>指定RD，为1:1，如果按照AS：num命名法，以下RD表示AS1中的第2个VRF；</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token operator">-</span>vrf<span class="token punctuation">)</span>#rd <span class="token number">1</span><span class="token operator">:</span><span class="token number">1</span></code></pre>

<p>指定RT的导入和导出，这里我将RT指定为导入和导出1：1；</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token operator">-</span>vrf<span class="token punctuation">)</span>#route<span class="token operator">-</span>target <span class="token operator">?</span>        
    ASN<span class="token operator">:</span>nn or IP<span class="token operator">-</span>address<span class="token operator">:</span>nn  Target VPN Extended Community
    both                     Both import and export Target<span class="token operator">-</span>VPN community
    export                   Export Target<span class="token operator">-</span>VPN community
    import                   Import Target<span class="token operator">-</span>VPN community
<span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token operator">-</span>vrf<span class="token punctuation">)</span>#route<span class="token operator">-</span>target export <span class="token number">1</span><span class="token operator">:</span><span class="token number">1</span>
<span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token operator">-</span>vrf<span class="token punctuation">)</span>#route<span class="token operator">-</span>target import <span class="token number">1</span><span class="token operator">:</span><span class="token number">2</span></code></pre>

<p>将PE1（R1）上与CE相连的PE接口F0&#x2F;1关联到VRF A-Site1；</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>#<span class="token keyword">int</span> f0<span class="token operator">/</span><span class="token number">1</span>
<span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token operator">-</span><span class="token keyword">if</span><span class="token punctuation">)</span>#ip vrf forwarding A<span class="token operator">-</span>Site1
<span class="token operator">%</span> Interface FastEthernet0<span class="token operator">/</span><span class="token number">1</span> IPv4 disabled and <span class="token function">address</span><span class="token punctuation">(</span>es<span class="token punctuation">)</span> removed due to enabling VRF A<span class="token operator">-</span>Site1
    <span class="token comment">//切记先将接口关联VRF，然后再配置IP地址；</span>
<span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token operator">-</span><span class="token keyword">if</span><span class="token punctuation">)</span>#ip add <span class="token number">192.168</span><span class="token number">.15</span><span class="token number">.1</span> <span class="token number">255.255</span><span class="token number">.255</span><span class="token number">.0</span></code></pre>
<p>在PE2（R4）上创建VRF，并命名为A-Site2，表示该VRF为VPN A的站点2服务；</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>#ip vrf A<span class="token operator">-</span>Site2

<span class="token comment">//指定RD，为1:2，如果按照AS：num命名法，以下RD表示AS1中的第2个VRF；</span>
<span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token operator">-</span>vrf<span class="token punctuation">)</span>#rd <span class="token number">1</span><span class="token operator">:</span><span class="token number">2</span>

<span class="token comment">//指定RT的导入和导出，这里我将RT指定为导入和导出1：1；</span>
<span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token operator">-</span>vrf<span class="token punctuation">)</span>#route<span class="token operator">-</span>target export <span class="token number">1</span><span class="token operator">:</span><span class="token number">2</span>
<span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token operator">-</span>vrf<span class="token punctuation">)</span>#route<span class="token operator">-</span>target import <span class="token number">1</span><span class="token operator">:</span><span class="token number">1</span></code></pre>
<p>因为PE1导出的RT为1:1，PE2导入的RT正是PE1的导出RT1:1；所以PE1（R1）的RT导出和PE2（R4）的RT导入能够匹配成功，R4能够学到R1导入到MP-BGP中的VPNv4路由；又因为PE2导出的RT为1:2，PE1导入的RT正是PE2的导出RT1:2；所以PE2（R4）的RT导出和PE1（R1）的RT导入能够匹配成对，R1能够学到R4导入到MP-BGP中的VPNv4路由；</p>
<p>将PE2（R4）上与CE相连的PE接口F0&#x2F;1关联到VRF A-Site2；</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>#<span class="token keyword">int</span> f0<span class="token operator">/</span><span class="token number">1</span>
<span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token operator">-</span><span class="token keyword">if</span><span class="token punctuation">)</span>#ip vrf forwarding A<span class="token operator">-</span>Site2
<span class="token operator">%</span> Interface FastEthernet0<span class="token operator">/</span><span class="token number">1</span> IPv4 disabled and <span class="token function">address</span><span class="token punctuation">(</span>es<span class="token punctuation">)</span> removed due to enabling VRF A<span class="token operator">-</span>Site2
    <span class="token comment">//切记先将接口关联VRF，然后再配置IP地址；</span>
<span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token operator">-</span><span class="token keyword">if</span><span class="token punctuation">)</span>#ip add <span class="token number">192.168</span><span class="token number">.47</span><span class="token number">.4</span> <span class="token number">255.255</span><span class="token number">.255</span><span class="token number">.0</span></code></pre>
<h3 id="配置MP-BGP"><a href="#配置MP-BGP" class="headerlink" title="配置MP-BGP"></a><strong>配置MP-BGP</strong></h3><p>在PE1（R1）上配置MP-BGP，使之与其他PE建立IBGP关系，在此实验中只有PE1和PE2两台PE设备；</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>#router bgp <span class="token number">1</span>
<span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span>#no <span class="token keyword">auto</span><span class="token operator">-</span>summary
<span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span>#no syn
<span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span>#bgp router<span class="token operator">-</span>id <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span>
<span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span>#neighbor <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span> remote<span class="token operator">-</span>as <span class="token number">1</span>
<span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span>#neighbor <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span> update<span class="token operator">-</span>source l0
<span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span>#neighbor <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span> next<span class="token operator">-</span>hop<span class="token operator">-</span>self</code></pre>

<p>启用PE1（R1）的VPNv4地址族，并激活与IBGP邻居PE2（R4）的MP-BGP VPNv4邻居关系；</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span>#address<span class="token operator">-</span>family vpnv4
<span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token operator">-</span>af<span class="token punctuation">)</span>#neighbor <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span> activate
<span class="token comment">//激活与IBGP邻居R4的VPNv4关系；</span>
<span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token operator">-</span>af<span class="token punctuation">)</span>#neighbor <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span> send<span class="token operator">-</span>community <span class="token operator">?</span>
    both      Send Standard and Extended Community attributes
    extended  Send Extended Community attribute
    standard  Send Standard Community attribute
    <span class="token operator">&lt;</span>cr<span class="token operator">></span>

<span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token operator">-</span>af<span class="token punctuation">)</span>#neighbor <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span> send<span class="token operator">-</span>community both
<span class="token comment">//由于BGP团体属性为可选传递属性，所以必须手动指定R1向IBGP邻居R4发送拓展团体属性和标准团体属性；</span>

<span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token operator">-</span>af<span class="token punctuation">)</span>#exit<span class="token operator">-</span>address<span class="token operator">-</span>family
<span class="token comment">//退出AF配置模式；</span></code></pre>
<p>在PE2（R4）上配置MP-BGP，使之与其他PE建立IBGP关系，</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token operator">-</span><span class="token keyword">if</span><span class="token punctuation">)</span>#router bgp <span class="token number">1</span>
<span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span>#no <span class="token keyword">auto</span><span class="token operator">-</span>summary
<span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span>#no syn
<span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span>#bgp router<span class="token operator">-</span>id <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span>
<span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span>#neighbor <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span> remote<span class="token operator">-</span>as <span class="token number">1</span>
<span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span>#neighbor <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span> update<span class="token operator">-</span>source l0
<span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span>#neighbor <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span> next<span class="token operator">-</span>hop<span class="token operator">-</span>self</code></pre>

<p>启用PE2（R4）的VPNv4地址族，并激活与IBGP邻居PE1（R1）的MP-BGP VPNv4邻居关系；</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span>#address<span class="token operator">-</span>family vpnv4
<span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token operator">-</span>af<span class="token punctuation">)</span>#neighbor <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span> activate
<span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token operator">-</span>af<span class="token punctuation">)</span>#neighbor <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span> send<span class="token operator">-</span>community both</code></pre>
<h3 id="配置PE-CE路由"><a href="#配置PE-CE路由" class="headerlink" title="配置PE-CE路由"></a><strong>配置PE-CE路由</strong></h3><p>配置PE1（R1）的IGP；</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>#router eigrp <span class="token number">1</span>
<span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span>#no <span class="token keyword">auto</span><span class="token operator">-</span>summary</code></pre>

<p>配置PE1（R1）的IGP地址族（AF）；</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span>#address<span class="token operator">-</span>family ipv4 vrf A<span class="token operator">-</span>Site1 <span class="token operator">?</span>                   
    autonomous<span class="token operator">-</span>system  Specify Address<span class="token operator">-</span>Family Autonomous System Number
    <span class="token operator">&lt;</span>cr<span class="token operator">></span>

<span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span>#address<span class="token operator">-</span>family ipv4 vrf A<span class="token operator">-</span>Site1 autonomous<span class="token operator">-</span>system <span class="token number">1</span>
<span class="token comment">//进入IGP EIGRP的AF模式，切记为EIGRP ipv4 vrf地址族（AF）指定一个EIGRP自治系统号；</span>
<span class="token comment">//由于在实施MPLS VPN，ISP和VPN客服站点本地可能就已经部署了EIGRP，并为EIGRP指定了不同的AS号,</span>
<span class="token comment">//而在实施MPLS VPN将PE和站点的CE连接起来的时候，由于PE和CE部署EIGRP时没有使用相同的AS号，</span>
<span class="token comment">//所以PE和CE无法建立EIGRP邻居关系；</span>
<span class="token comment">//为避免修改原始EIGRP的AS号，因此，在EIGRP的ipv4 vrf地址族（AF）里为PE和CE指定相同的EIGRP AS号；</span>

<span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token operator">-</span>af<span class="token punctuation">)</span>#no <span class="token keyword">auto</span><span class="token operator">-</span>summary
<span class="token comment">//将IGP EIGRP的IPv4 VRF地址族（AF）关闭自动汇总；</span>

<span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token operator">-</span>af<span class="token punctuation">)</span>#redistribute bgp <span class="token number">1</span> metric <span class="token number">10000</span> <span class="token number">100</span> <span class="token number">255</span> <span class="token number">1</span> <span class="token number">1500</span>
<span class="token comment">//必须指定Metric;</span>
<span class="token comment">//将MP-BGP中IPv4 VRF名字与IGP中IPv4 VRF名字相同的地址族（AF）重分布进IGP的IPv4 VRF AF；</span>
<span class="token comment">//IGP和MP-BGP中IPv4 VRF地址族（AF）实际上是执行相互重分发的操作；</span>

<span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token operator">-</span>af<span class="token punctuation">)</span>#network <span class="token number">192.168</span><span class="token number">.15</span><span class="token number">.0</span> <span class="token number">0.0</span><span class="token number">.0</span><span class="token number">.255</span> 
<span class="token comment">//将PE连接到CE的VRF接口宣告进IGP EIGRP进程的IPv4 VRF地址族中；</span>

<span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token operator">-</span>af<span class="token punctuation">)</span>#exit<span class="token operator">-</span>address<span class="token operator">-</span>family
<span class="token comment">//退出IGP EIGRP的AF模式；</span></code></pre>
<p>配置PE1（R1）的MP-BGP IPv4 VRF地址族（AF）；</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>#router bgp <span class="token number">1</span>
<span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span>#address<span class="token operator">-</span>family ipv4 vrf A<span class="token operator">-</span>Site1
<span class="token comment">//进入MP-BGP的IPv4 VRF地址族（AF）；</span>

<span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token operator">-</span>af<span class="token punctuation">)</span>#redistribute eigrp <span class="token number">1</span> 
<span class="token comment">//将IGP中IPv4 VRF名字与MP-BGP中IPv4 VRF名字相同的地址族（AF）重分布进MP-BGP的IPv4 VRF AF；</span>
<span class="token comment">//IGP和MP-BGP中IPv4 VRF地址族（AF）实际上是执行相互重分发的操作；</span>

<span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token operator">-</span>af<span class="token punctuation">)</span>#redistribute connected 
<span class="token comment">//如果用户在CE路由器上ping远程网络的另一个VPN站点中的CE或C路由器，</span>
<span class="token comment">//为了使其在没有指定其源地址情况下（即默认使用CE路由器出站接口IP地址），Echo Reply包能够有路由并正常返回,</span>
<span class="token comment">//将PE路由器的直连路由重分布进MP-BGP的IPv4 VRF AF中；</span>

<span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token operator">-</span>af<span class="token punctuation">)</span>#exit<span class="token operator">-</span>address<span class="token operator">-</span>family 
<span class="token comment">//退出MP-BGP的IPv4 VRF地址族（AF）模式；</span></code></pre>
<p>配置PE2（R4）的IGP；</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>#router eigrp <span class="token number">1</span>
<span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span>#no <span class="token keyword">auto</span><span class="token operator">-</span>summary

<span class="token comment">//配置PE2（R4）的IGP地址族（AF）；</span>
<span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span>#address<span class="token operator">-</span>family ipv4 vrf A<span class="token operator">-</span>Site2 autonomous<span class="token operator">-</span>system <span class="token number">1</span>
<span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token operator">-</span>af<span class="token punctuation">)</span>#no <span class="token keyword">auto</span><span class="token operator">-</span>summary
<span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token operator">-</span>af<span class="token punctuation">)</span>#redistribute bgp <span class="token number">1</span> metric <span class="token number">10000</span> <span class="token number">100</span> <span class="token number">255</span> <span class="token number">1</span> <span class="token number">1500</span>
<span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token operator">-</span>af<span class="token punctuation">)</span>#network <span class="token number">192.168</span><span class="token number">.47</span><span class="token number">.0</span> <span class="token number">0.0</span><span class="token number">.0</span><span class="token number">.255</span>
<span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token operator">-</span>af<span class="token punctuation">)</span>#exit<span class="token operator">-</span>address<span class="token operator">-</span>family


<span class="token comment">//配置PE2（R4）的MP-BGP IPv4 VRF地址族（AF）；</span>
<span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>#router bgp <span class="token number">1</span>
<span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span>#address<span class="token operator">-</span>family ipv4 vrf A<span class="token operator">-</span>Site2
<span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token operator">-</span>af<span class="token punctuation">)</span>#redistribute connected
<span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token operator">-</span>af<span class="token punctuation">)</span>#redistribute eigrp <span class="token number">1</span>
<span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token operator">-</span>af<span class="token punctuation">)</span>#exit<span class="token operator">-</span>address<span class="token operator">-</span>family</code></pre>
<h3 id="验证与调试："><a href="#验证与调试：" class="headerlink" title="验证与调试："></a>验证与调试：</h3><p>在VPN A站点1的C路由器R6上ping远程VPN A站点2的C路由器R8；</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token function">R6</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span>#<span class="token keyword">do</span> p <span class="token number">8.8</span><span class="token number">.8</span><span class="token number">.8</span>
Type escape sequence to abort<span class="token punctuation">.</span>
Sending <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token operator">-</span>byte ICMP Echos to <span class="token number">8.8</span><span class="token number">.8</span><span class="token number">.8</span><span class="token punctuation">,</span> timeout is <span class="token number">2</span> seconds<span class="token operator">:</span>
<span class="token operator">!</span><span class="token operator">!</span><span class="token operator">!</span><span class="token operator">!</span><span class="token operator">!</span>
Success rate is <span class="token number">100</span> <span class="token function">percent</span> <span class="token punctuation">(</span><span class="token number">5</span><span class="token operator">/</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> round<span class="token operator">-</span>trip min<span class="token operator">/</span>avg<span class="token operator">/</span>max <span class="token operator">=</span> <span class="token number">132</span><span class="token operator">/</span><span class="token number">162</span><span class="token operator">/</span><span class="token number">232</span> ms
<span class="token comment">//成功！</span></code></pre>

<p>查看R1的IP BGP VPNv4路由表；</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token operator">-</span>vrf<span class="token punctuation">)</span>#<span class="token keyword">do</span> sh ip bgp vpnv4 all
BGP table version is <span class="token number">86</span><span class="token punctuation">,</span> local router ID is <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span>
Status codes<span class="token operator">:</span> s suppressed<span class="token punctuation">,</span> d damped<span class="token punctuation">,</span> h history<span class="token punctuation">,</span> <span class="token operator">*</span> valid<span class="token punctuation">,</span> <span class="token operator">></span> best<span class="token punctuation">,</span> i <span class="token operator">-</span> internal<span class="token punctuation">,</span>
                r RIB<span class="token operator">-</span>failure<span class="token punctuation">,</span> S Stale<span class="token punctuation">,</span> m multipath<span class="token punctuation">,</span> b backup<span class="token operator">-</span>path<span class="token punctuation">,</span> x best<span class="token operator">-</span>external<span class="token punctuation">,</span> f RT<span class="token operator">-</span>Filter
Origin codes<span class="token operator">:</span> i <span class="token operator">-</span> IGP<span class="token punctuation">,</span> e <span class="token operator">-</span> EGP<span class="token punctuation">,</span> <span class="token operator">?</span> <span class="token operator">-</span> incomplete
                                                                                
    Network          Next Hop            Metric LocPrf Weight Path
Route Distinguisher<span class="token operator">:</span> <span class="token number">1</span><span class="token operator">:</span><span class="token number">1</span> <span class="token punctuation">(</span><span class="token keyword">default</span> <span class="token keyword">for</span> vrf A<span class="token operator">-</span>Site1<span class="token punctuation">)</span>
<span class="token operator">*</span><span class="token operator">></span> <span class="token number">5.5</span><span class="token number">.5</span><span class="token number">.5</span><span class="token operator">/</span><span class="token number">32</span>       <span class="token number">192.168</span><span class="token number">.15</span><span class="token number">.5</span>        <span class="token number">156160</span>         <span class="token number">32768</span> <span class="token operator">?</span>
<span class="token operator">*</span><span class="token operator">></span> <span class="token number">6.6</span><span class="token number">.6</span><span class="token number">.6</span><span class="token operator">/</span><span class="token number">32</span>       <span class="token number">192.168</span><span class="token number">.15</span><span class="token number">.5</span>        <span class="token number">158720</span>         <span class="token number">32768</span> <span class="token operator">?</span>
<span class="token operator">*</span><span class="token operator">></span>i7<span class="token punctuation">.</span><span class="token number">7.7</span><span class="token number">.7</span><span class="token operator">/</span><span class="token number">32</span>       <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span>             <span class="token number">156160</span>    <span class="token number">100</span>      <span class="token number">0</span> <span class="token operator">?</span>
<span class="token operator">*</span><span class="token operator">></span>i8<span class="token punctuation">.</span><span class="token number">8.8</span><span class="token number">.8</span><span class="token operator">/</span><span class="token number">32</span>       <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span>             <span class="token number">158720</span>    <span class="token number">100</span>      <span class="token number">0</span> <span class="token operator">?</span>
<span class="token operator">*</span><span class="token operator">></span> <span class="token number">192.168</span><span class="token number">.15</span><span class="token number">.0</span>     <span class="token number">0.0</span><span class="token number">.0</span><span class="token number">.0</span>                  <span class="token number">0</span>         <span class="token number">32768</span> <span class="token operator">?</span>
<span class="token operator">*</span><span class="token operator">></span>i192<span class="token punctuation">.</span><span class="token number">168.47</span><span class="token number">.0</span>     <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span>                  <span class="token number">0</span>    <span class="token number">100</span>      <span class="token number">0</span> <span class="token operator">?</span>
<span class="token operator">*</span><span class="token operator">></span> <span class="token number">192.168</span><span class="token number">.56</span><span class="token number">.0</span>     <span class="token number">192.168</span><span class="token number">.15</span><span class="token number">.5</span>         <span class="token number">30720</span>         <span class="token number">32768</span> <span class="token operator">?</span>
<span class="token operator">*</span><span class="token operator">></span>i192<span class="token punctuation">.</span><span class="token number">168.78</span><span class="token number">.0</span>     <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span>         <span class="token number">4278221055</span>    <span class="token number">100</span>      <span class="token number">0</span> <span class="token operator">?</span>
Route Distinguisher<span class="token operator">:</span> <span class="token number">1</span><span class="token operator">:</span><span class="token number">2</span>
<span class="token operator">*</span><span class="token operator">></span>i7<span class="token punctuation">.</span><span class="token number">7.7</span><span class="token number">.7</span><span class="token operator">/</span><span class="token number">32</span>       <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span>             <span class="token number">156160</span>    <span class="token number">100</span>      <span class="token number">0</span> <span class="token operator">?</span>
<span class="token operator">*</span><span class="token operator">></span>i8<span class="token punctuation">.</span><span class="token number">8.8</span><span class="token number">.8</span><span class="token operator">/</span><span class="token number">32</span>       <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span>             <span class="token number">158720</span>    <span class="token number">100</span>      <span class="token number">0</span> <span class="token operator">?</span>
<span class="token operator">*</span><span class="token operator">></span>i192<span class="token punctuation">.</span><span class="token number">168.47</span><span class="token number">.0</span>     <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span>                  <span class="token number">0</span>    <span class="token number">100</span>      <span class="token number">0</span> <span class="token operator">?</span>
<span class="token operator">*</span><span class="token operator">></span>i192<span class="token punctuation">.</span><span class="token number">168.78</span><span class="token number">.0</span>     <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span>         <span class="token number">4278221055</span>    <span class="token number">100</span>      <span class="token number">0</span> <span class="token operator">?</span></code></pre>

<p>删除R1上ip vrf A-Site1的RT导入1：2；</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>#ip vrf A<span class="token operator">-</span>Site1
<span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token operator">-</span>vrf<span class="token punctuation">)</span>#no route<span class="token operator">-</span>target import <span class="token number">1</span><span class="token operator">:</span><span class="token number">2</span></code></pre>

<p>查看R1的IP BGP VPNv4路由表；</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token operator">-</span>vrf<span class="token punctuation">)</span>#<span class="token keyword">do</span> sh ip bgp vpnv4 all
BGP table version is <span class="token number">78</span><span class="token punctuation">,</span> local router ID is <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span>
Status codes<span class="token operator">:</span> s suppressed<span class="token punctuation">,</span> d damped<span class="token punctuation">,</span> h history<span class="token punctuation">,</span> <span class="token operator">*</span> valid<span class="token punctuation">,</span> <span class="token operator">></span> best<span class="token punctuation">,</span> i <span class="token operator">-</span> internal<span class="token punctuation">,</span>
                r RIB<span class="token operator">-</span>failure<span class="token punctuation">,</span> S Stale<span class="token punctuation">,</span> m multipath<span class="token punctuation">,</span> b backup<span class="token operator">-</span>path<span class="token punctuation">,</span> x best<span class="token operator">-</span>external<span class="token punctuation">,</span> f RT<span class="token operator">-</span>Filter
Origin codes<span class="token operator">:</span> i <span class="token operator">-</span> IGP<span class="token punctuation">,</span> e <span class="token operator">-</span> EGP<span class="token punctuation">,</span> <span class="token operator">?</span> <span class="token operator">-</span> incomplete
                                                                                
    Network          Next Hop            Metric LocPrf Weight Path
Route Distinguisher<span class="token operator">:</span> <span class="token number">1</span><span class="token operator">:</span><span class="token number">1</span> <span class="token punctuation">(</span><span class="token keyword">default</span> <span class="token keyword">for</span> vrf A<span class="token operator">-</span>Site1<span class="token punctuation">)</span>
<span class="token operator">*</span><span class="token operator">></span> <span class="token number">5.5</span><span class="token number">.5</span><span class="token number">.5</span><span class="token operator">/</span><span class="token number">32</span>       <span class="token number">192.168</span><span class="token number">.15</span><span class="token number">.5</span>        <span class="token number">156160</span>         <span class="token number">32768</span> <span class="token operator">?</span>
<span class="token operator">*</span><span class="token operator">></span> <span class="token number">6.6</span><span class="token number">.6</span><span class="token number">.6</span><span class="token operator">/</span><span class="token number">32</span>       <span class="token number">192.168</span><span class="token number">.15</span><span class="token number">.5</span>        <span class="token number">158720</span>         <span class="token number">32768</span> <span class="token operator">?</span>
<span class="token operator">*</span><span class="token operator">></span> <span class="token number">192.168</span><span class="token number">.15</span><span class="token number">.0</span>     <span class="token number">0.0</span><span class="token number">.0</span><span class="token number">.0</span>                  <span class="token number">0</span>         <span class="token number">32768</span> <span class="token operator">?</span>
<span class="token operator">*</span><span class="token operator">></span> <span class="token number">192.168</span><span class="token number">.56</span><span class="token number">.0</span>     <span class="token number">192.168</span><span class="token number">.15</span><span class="token number">.5</span>         <span class="token number">30720</span>         <span class="token number">32768</span> <span class="token operator">?</span>
<span class="token comment">//关于RT1:2的VPNv4路由消失了！</span></code></pre>

<p>让R1再度导入RT1:2的VPNv4路由；</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token operator">-</span>vrf<span class="token punctuation">)</span>#route<span class="token operator">-</span>target import <span class="token number">1</span><span class="token operator">:</span><span class="token number">2</span></code></pre>

<p>查看R1的IP BGP VPNv4路由表；</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token operator">-</span>vrf<span class="token punctuation">)</span>#<span class="token keyword">do</span> sh ip bgp vpnv4 all
BGP table version is <span class="token number">86</span><span class="token punctuation">,</span> local router ID is <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span>
Status codes<span class="token operator">:</span> s suppressed<span class="token punctuation">,</span> d damped<span class="token punctuation">,</span> h history<span class="token punctuation">,</span> <span class="token operator">*</span> valid<span class="token punctuation">,</span> <span class="token operator">></span> best<span class="token punctuation">,</span> i <span class="token operator">-</span> internal<span class="token punctuation">,</span>
                r RIB<span class="token operator">-</span>failure<span class="token punctuation">,</span> S Stale<span class="token punctuation">,</span> m multipath<span class="token punctuation">,</span> b backup<span class="token operator">-</span>path<span class="token punctuation">,</span> x best<span class="token operator">-</span>external<span class="token punctuation">,</span> f RT<span class="token operator">-</span>Filter
Origin codes<span class="token operator">:</span> i <span class="token operator">-</span> IGP<span class="token punctuation">,</span> e <span class="token operator">-</span> EGP<span class="token punctuation">,</span> <span class="token operator">?</span> <span class="token operator">-</span> incomplete
                                                                                
    Network          Next Hop            Metric LocPrf Weight Path
Route Distinguisher<span class="token operator">:</span> <span class="token number">1</span><span class="token operator">:</span><span class="token number">1</span> <span class="token punctuation">(</span><span class="token keyword">default</span> <span class="token keyword">for</span> vrf A<span class="token operator">-</span>Site1<span class="token punctuation">)</span>
<span class="token operator">*</span><span class="token operator">></span> <span class="token number">5.5</span><span class="token number">.5</span><span class="token number">.5</span><span class="token operator">/</span><span class="token number">32</span>       <span class="token number">192.168</span><span class="token number">.15</span><span class="token number">.5</span>        <span class="token number">156160</span>         <span class="token number">32768</span> <span class="token operator">?</span>
<span class="token operator">*</span><span class="token operator">></span> <span class="token number">6.6</span><span class="token number">.6</span><span class="token number">.6</span><span class="token operator">/</span><span class="token number">32</span>       <span class="token number">192.168</span><span class="token number">.15</span><span class="token number">.5</span>        <span class="token number">158720</span>         <span class="token number">32768</span> <span class="token operator">?</span>
<span class="token operator">*</span><span class="token operator">></span>i7<span class="token punctuation">.</span><span class="token number">7.7</span><span class="token number">.7</span><span class="token operator">/</span><span class="token number">32</span>       <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span>             <span class="token number">156160</span>    <span class="token number">100</span>      <span class="token number">0</span> <span class="token operator">?</span>
<span class="token operator">*</span><span class="token operator">></span>i8<span class="token punctuation">.</span><span class="token number">8.8</span><span class="token number">.8</span><span class="token operator">/</span><span class="token number">32</span>       <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span>             <span class="token number">158720</span>    <span class="token number">100</span>      <span class="token number">0</span> <span class="token operator">?</span>
<span class="token operator">*</span><span class="token operator">></span> <span class="token number">192.168</span><span class="token number">.15</span><span class="token number">.0</span>     <span class="token number">0.0</span><span class="token number">.0</span><span class="token number">.0</span>                  <span class="token number">0</span>         <span class="token number">32768</span> <span class="token operator">?</span>
<span class="token operator">*</span><span class="token operator">></span>i192<span class="token punctuation">.</span><span class="token number">168.47</span><span class="token number">.0</span>     <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span>                  <span class="token number">0</span>    <span class="token number">100</span>      <span class="token number">0</span> <span class="token operator">?</span>
<span class="token operator">*</span><span class="token operator">></span> <span class="token number">192.168</span><span class="token number">.56</span><span class="token number">.0</span>     <span class="token number">192.168</span><span class="token number">.15</span><span class="token number">.5</span>         <span class="token number">30720</span>         <span class="token number">32768</span> <span class="token operator">?</span>
<span class="token operator">*</span><span class="token operator">></span>i192<span class="token punctuation">.</span><span class="token number">168.78</span><span class="token number">.0</span>     <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span>         <span class="token number">4278221055</span>    <span class="token number">100</span>      <span class="token number">0</span> <span class="token operator">?</span>
Route Distinguisher<span class="token operator">:</span> <span class="token number">1</span><span class="token operator">:</span><span class="token number">2</span>
<span class="token operator">*</span><span class="token operator">></span>i7<span class="token punctuation">.</span><span class="token number">7.7</span><span class="token number">.7</span><span class="token operator">/</span><span class="token number">32</span>       <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span>             <span class="token number">156160</span>    <span class="token number">100</span>      <span class="token number">0</span> <span class="token operator">?</span>
<span class="token operator">*</span><span class="token operator">></span>i8<span class="token punctuation">.</span><span class="token number">8.8</span><span class="token number">.8</span><span class="token operator">/</span><span class="token number">32</span>       <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span>             <span class="token number">158720</span>    <span class="token number">100</span>      <span class="token number">0</span> <span class="token operator">?</span>
<span class="token operator">*</span><span class="token operator">></span>i192<span class="token punctuation">.</span><span class="token number">168.47</span><span class="token number">.0</span>     <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span>                  <span class="token number">0</span>    <span class="token number">100</span>      <span class="token number">0</span> <span class="token operator">?</span>
<span class="token operator">*</span><span class="token operator">></span>i192<span class="token punctuation">.</span><span class="token number">168.78</span><span class="token number">.0</span>     <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span>         <span class="token number">4278221055</span>    <span class="token number">100</span>      <span class="token number">0</span> <span class="token operator">?</span>
<span class="token comment">//关于RT1:2的VPNv4路由又回来了！</span></code></pre>
<p>将R1的EIGRP ip vrf A-Site1的AS号1改为2；</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span>#no address<span class="token operator">-</span>family ipv4 vrf A<span class="token operator">-</span>Site1 autonomous<span class="token operator">-</span>system <span class="token number">1</span>
<span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span>#address<span class="token operator">-</span>family ipv4 vrf A<span class="token operator">-</span>Site1 autonomous<span class="token operator">-</span>system <span class="token number">2</span>
<span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token operator">-</span>af<span class="token punctuation">)</span>#  redistribute bgp <span class="token number">1</span> metric <span class="token number">10000</span> <span class="token number">100</span> <span class="token number">255</span> <span class="token number">1</span> <span class="token number">1500</span>
<span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token operator">-</span>af<span class="token punctuation">)</span>#  network <span class="token number">192.168</span><span class="token number">.15</span><span class="token number">.0</span>
<span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token operator">-</span>af<span class="token punctuation">)</span># exit<span class="token operator">-</span>address<span class="token operator">-</span>family
<span class="token comment">//仅仅修改AS号，其他配置都不变；</span></code></pre>


<p>查看EIGRP vrf A-Site1的邻居表；</p>
<pre class="language-c" data-language="c"><code class="language-c">R1#sh ip eigrp vrf A<span class="token operator">-</span>Site1 neighbors 
EIGRP<span class="token operator">-</span>IPv4 Neighbors <span class="token keyword">for</span> <span class="token function">AS</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token function">VRF</span><span class="token punctuation">(</span>A<span class="token operator">-</span>Site1<span class="token punctuation">)</span>
<span class="token comment">//由于现在PE1的EIGRP ip vrf A-Site1的AS号为2，而CE1的EIGRP AS号为1，所以PE1和CE1无法建立EIGRP邻居；</span></code></pre>

<p>将配置修改回来；</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>#router eigrp <span class="token number">1</span>
<span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span>#no <span class="token keyword">auto</span><span class="token operator">-</span>summary
<span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span>#no address<span class="token operator">-</span>family ipv4 vrf A<span class="token operator">-</span>Site1 <span class="token keyword">auto</span> <span class="token number">2</span>
<span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span>#address<span class="token operator">-</span>family ipv4 vrf A<span class="token operator">-</span>Site1 <span class="token keyword">auto</span> <span class="token number">1</span>
<span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token operator">-</span>af<span class="token punctuation">)</span>#no <span class="token keyword">auto</span><span class="token operator">-</span>summary
<span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token operator">-</span>af<span class="token punctuation">)</span>#redistribute bgp <span class="token number">1</span> metric <span class="token number">10000</span> <span class="token number">100</span> <span class="token number">255</span> <span class="token number">1</span> <span class="token number">1500</span>
<span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token operator">-</span>af<span class="token punctuation">)</span>#network <span class="token number">192.168</span><span class="token number">.15</span><span class="token number">.0</span> <span class="token number">0.0</span><span class="token number">.0</span><span class="token number">.255</span>
<span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token operator">-</span>af<span class="token punctuation">)</span>#exit
<span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span>#exit
<span class="token operator">*</span>Mar <span class="token number">18</span> <span class="token number">11</span><span class="token operator">:</span><span class="token number">30</span><span class="token operator">:</span><span class="token number">00.263</span><span class="token operator">:</span> <span class="token operator">%</span>DUAL<span class="token operator">-</span><span class="token number">5</span><span class="token operator">-</span>NBRCHANGE<span class="token operator">:</span> EIGRP<span class="token operator">-</span>IPv4 <span class="token number">1</span><span class="token operator">:</span> Neighbor <span class="token number">192.168</span><span class="token number">.15</span><span class="token number">.5</span> <span class="token punctuation">(</span>FastEthernet0<span class="token operator">/</span><span class="token number">1</span><span class="token punctuation">)</span> is up<span class="token operator">:</span> new adjacency
<span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>#router bgp <span class="token number">1</span>
<span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span># address<span class="token operator">-</span>family ipv4 vrf A<span class="token operator">-</span>Site1
<span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token operator">-</span>af<span class="token punctuation">)</span>#redistribute connected
<span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token operator">-</span>af<span class="token punctuation">)</span># redistribute eigrp <span class="token number">1</span>
<span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token operator">-</span>af<span class="token punctuation">)</span>#exit<span class="token operator">-</span>address<span class="token operator">-</span>family
<span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span>#exit</code></pre>
<p>可以看到，PE1和CE1的EIGRP邻居关系又建立了！</p>
<h2 id="实验2：将R8配置为"><a href="#实验2：将R8配置为" class="headerlink" title="实验2：将R8配置为"></a>实验2：将R8配置为</h2><p>查看R1的IP BGP VPNv4路由表中关于前缀8.8.8.8&#x2F;32的详细信息；</p>
<pre class="language-c" data-language="c"><code class="language-c">R1#sh ip bgp vpnv4 vrf A<span class="token operator">-</span>Site1 <span class="token number">8.8</span><span class="token number">.8</span><span class="token number">.8</span>
BGP routing table entry <span class="token keyword">for</span> <span class="token number">1</span><span class="token operator">:</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">8.8</span><span class="token number">.8</span><span class="token number">.8</span><span class="token operator">/</span><span class="token number">32</span><span class="token punctuation">,</span> version <span class="token number">114</span>
Paths<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token number">1</span> available<span class="token punctuation">,</span> best #<span class="token number">1</span><span class="token punctuation">,</span> table A<span class="token operator">-</span>Site1<span class="token punctuation">)</span>
    Not advertised to any peer
    Local<span class="token punctuation">,</span> imported path from <span class="token number">1</span><span class="token operator">:</span><span class="token number">2</span><span class="token operator">:</span><span class="token number">8.8</span><span class="token number">.8</span><span class="token number">.8</span><span class="token operator">/</span><span class="token number">32</span>
    <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span> <span class="token punctuation">(</span>metric <span class="token number">4</span><span class="token punctuation">)</span> from <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span> <span class="token punctuation">(</span><span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span><span class="token punctuation">)</span>
        Origin incomplete<span class="token punctuation">,</span> metric <span class="token number">158720</span><span class="token punctuation">,</span> localpref <span class="token number">100</span><span class="token punctuation">,</span> valid<span class="token punctuation">,</span> internal<span class="token punctuation">,</span> best
        Extended Community<span class="token operator">:</span> RT<span class="token operator">:</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">2</span> Cost<span class="token operator">:</span>pre<span class="token operator">-</span>bestpath<span class="token operator">:</span><span class="token number">128</span><span class="token operator">:</span><span class="token number">158720</span> <span class="token number">0x8800</span><span class="token operator">:</span><span class="token number">32768</span><span class="token operator">:</span><span class="token number">0</span> 
        <span class="token number">0x8801</span><span class="token operator">:</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">133120</span> <span class="token number">0x8802</span><span class="token operator">:</span><span class="token number">65282</span><span class="token operator">:</span><span class="token number">25600</span> <span class="token number">0x8803</span><span class="token operator">:</span><span class="token number">65281</span><span class="token operator">:</span><span class="token number">1500</span> 
        <span class="token number">0x8806</span><span class="token operator">:</span><span class="token number">0</span><span class="token operator">:</span><span class="token number">134744072</span>
        mpls labels in<span class="token operator">/</span>out nolabel<span class="token operator">/</span><span class="token number">21</span></code></pre>

<p>为了在VPN A站点2 C2路由器R8上创造一条EIGRP外部路由，不使用network命令宣告Loopback0口，而通过将直连接口Loopback0重分发进EIGRP中；</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token function">R8</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>#route<span class="token operator">-</span>map LOOPBACK permit <span class="token number">10</span>
<span class="token function">R8</span><span class="token punctuation">(</span>config<span class="token operator">-</span>route<span class="token operator">-</span>map<span class="token punctuation">)</span>#match interface loopback <span class="token number">0</span>

<span class="token function">R8</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>#router eigrp <span class="token number">1</span>
<span class="token function">R8</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span>#no network <span class="token number">8.8</span><span class="token number">.8</span><span class="token number">.8</span> <span class="token number">0.0</span><span class="token number">.0</span><span class="token number">.0</span>
<span class="token function">R8</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span>#redistribute connected route<span class="token operator">-</span>map LOOPBACK</code></pre>
<p>查看CE2（R7）的IP路由表；</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token function">R7</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span>#<span class="token keyword">do</span> sh ip route
Codes<span class="token operator">:</span> L <span class="token operator">-</span> local<span class="token punctuation">,</span> C <span class="token operator">-</span> connected<span class="token punctuation">,</span> S <span class="token operator">-</span> <span class="token keyword">static</span><span class="token punctuation">,</span> R <span class="token operator">-</span> RIP<span class="token punctuation">,</span> M <span class="token operator">-</span> mobile<span class="token punctuation">,</span> B <span class="token operator">-</span> BGP
        D <span class="token operator">-</span> EIGRP<span class="token punctuation">,</span> EX <span class="token operator">-</span> EIGRP external<span class="token punctuation">,</span> O <span class="token operator">-</span> OSPF<span class="token punctuation">,</span> IA <span class="token operator">-</span> OSPF inter area 
        N1 <span class="token operator">-</span> OSPF NSSA external type <span class="token number">1</span><span class="token punctuation">,</span> N2 <span class="token operator">-</span> OSPF NSSA external type <span class="token number">2</span>
        E1 <span class="token operator">-</span> OSPF external type <span class="token number">1</span><span class="token punctuation">,</span> E2 <span class="token operator">-</span> OSPF external type <span class="token number">2</span>
        i <span class="token operator">-</span> IS<span class="token operator">-</span>IS<span class="token punctuation">,</span> su <span class="token operator">-</span> IS<span class="token operator">-</span>IS summary<span class="token punctuation">,</span> L1 <span class="token operator">-</span> IS<span class="token operator">-</span>IS level<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> L2 <span class="token operator">-</span> IS<span class="token operator">-</span>IS level<span class="token operator">-</span><span class="token number">2</span>
        ia <span class="token operator">-</span> IS<span class="token operator">-</span>IS inter area<span class="token punctuation">,</span> <span class="token operator">*</span> <span class="token operator">-</span> candidate <span class="token keyword">default</span><span class="token punctuation">,</span> U <span class="token operator">-</span> per<span class="token operator">-</span>user <span class="token keyword">static</span> route
        o <span class="token operator">-</span> ODR<span class="token punctuation">,</span> P <span class="token operator">-</span> periodic downloaded <span class="token keyword">static</span> route<span class="token punctuation">,</span> H <span class="token operator">-</span> NHRP<span class="token punctuation">,</span> l <span class="token operator">-</span> LISP
        <span class="token operator">+</span> <span class="token operator">-</span> replicated route<span class="token punctuation">,</span> <span class="token operator">%</span> <span class="token operator">-</span> next hop override
                                                            
Gateway of last resort is not set
                                                            
        <span class="token number">5.0</span><span class="token number">.0</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">32</span> is subnetted<span class="token punctuation">,</span> <span class="token number">1</span> subnets
D        <span class="token number">5.5</span><span class="token number">.5</span><span class="token number">.5</span> <span class="token punctuation">[</span><span class="token number">90</span><span class="token operator">/</span><span class="token number">158720</span><span class="token punctuation">]</span> via <span class="token number">192.168</span><span class="token number">.47</span><span class="token number">.4</span><span class="token punctuation">,</span> <span class="token number">00</span><span class="token operator">:</span><span class="token number">11</span><span class="token operator">:</span><span class="token number">01</span><span class="token punctuation">,</span> FastEthernet0<span class="token operator">/</span><span class="token number">1</span>
        <span class="token number">6.0</span><span class="token number">.0</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">32</span> is subnetted<span class="token punctuation">,</span> <span class="token number">1</span> subnets
D        <span class="token number">6.6</span><span class="token number">.6</span><span class="token number">.6</span> <span class="token punctuation">[</span><span class="token number">90</span><span class="token operator">/</span><span class="token number">161280</span><span class="token punctuation">]</span> via <span class="token number">192.168</span><span class="token number">.47</span><span class="token number">.4</span><span class="token punctuation">,</span> <span class="token number">00</span><span class="token operator">:</span><span class="token number">11</span><span class="token operator">:</span><span class="token number">01</span><span class="token punctuation">,</span> FastEthernet0<span class="token operator">/</span><span class="token number">1</span>
        <span class="token number">7.0</span><span class="token number">.0</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">32</span> is subnetted<span class="token punctuation">,</span> <span class="token number">1</span> subnets
C        <span class="token number">7.7</span><span class="token number">.7</span><span class="token number">.7</span> is directly connected<span class="token punctuation">,</span> Loopback0
        <span class="token number">8.0</span><span class="token number">.0</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">32</span> is subnetted<span class="token punctuation">,</span> <span class="token number">1</span> subnets
D EX     <span class="token number">8.8</span><span class="token number">.8</span><span class="token number">.8</span> <span class="token punctuation">[</span><span class="token number">170</span><span class="token operator">/</span><span class="token number">156160</span><span class="token punctuation">]</span> via <span class="token number">192.168</span><span class="token number">.78</span><span class="token number">.8</span><span class="token punctuation">,</span> <span class="token number">00</span><span class="token operator">:</span><span class="token number">01</span><span class="token operator">:</span><span class="token number">46</span><span class="token punctuation">,</span> FastEthernet0<span class="token operator">/</span><span class="token number">0</span>
D     <span class="token number">192.168</span><span class="token number">.15</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span> <span class="token punctuation">[</span><span class="token number">90</span><span class="token operator">/</span><span class="token number">30720</span><span class="token punctuation">]</span> via <span class="token number">192.168</span><span class="token number">.47</span><span class="token number">.4</span><span class="token punctuation">,</span> <span class="token number">00</span><span class="token operator">:</span><span class="token number">11</span><span class="token operator">:</span><span class="token number">01</span><span class="token punctuation">,</span> FastEthernet0<span class="token operator">/</span><span class="token number">1</span>
        <span class="token number">192.168</span><span class="token number">.47</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span> is variably subnetted<span class="token punctuation">,</span> <span class="token number">2</span> subnets<span class="token punctuation">,</span> <span class="token number">2</span> masks
C        <span class="token number">192.168</span><span class="token number">.47</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span> is directly connected<span class="token punctuation">,</span> FastEthernet0<span class="token operator">/</span><span class="token number">1</span>
L        <span class="token number">192.168</span><span class="token number">.47</span><span class="token number">.7</span><span class="token operator">/</span><span class="token number">32</span> is directly connected<span class="token punctuation">,</span> FastEthernet0<span class="token operator">/</span><span class="token number">1</span>
D     <span class="token number">192.168</span><span class="token number">.56</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span> <span class="token punctuation">[</span><span class="token number">90</span><span class="token operator">/</span><span class="token number">33280</span><span class="token punctuation">]</span> via <span class="token number">192.168</span><span class="token number">.47</span><span class="token number">.4</span><span class="token punctuation">,</span> <span class="token number">00</span><span class="token operator">:</span><span class="token number">11</span><span class="token operator">:</span><span class="token number">01</span><span class="token punctuation">,</span> FastEthernet0<span class="token operator">/</span><span class="token number">1</span>
        <span class="token number">192.168</span><span class="token number">.78</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span> is variably subnetted<span class="token punctuation">,</span> <span class="token number">2</span> subnets<span class="token punctuation">,</span> <span class="token number">2</span> masks
C        <span class="token number">192.168</span><span class="token number">.78</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span> is directly connected<span class="token punctuation">,</span> FastEthernet0<span class="token operator">/</span><span class="token number">0</span>
L        <span class="token number">192.168</span><span class="token number">.78</span><span class="token number">.7</span><span class="token operator">/</span><span class="token number">32</span> is directly connected<span class="token punctuation">,</span> FastEthernet0<span class="token operator">/</span><span class="token number">0</span>
<span class="token comment">//可以看到前缀8.8.8.8/32现在以EIGRP外部路由出现在了R7的路由表中；</span></code></pre>
<p>此时再来查看R1的IP BGP VPNv4路由表中关于前缀8.8.8.8&#x2F;32的详细信息；</p>
<pre class="language-c" data-language="c"><code class="language-c">R1#sh ip bgp vpnv4 vrf A<span class="token operator">-</span>Site1 <span class="token number">8.8</span><span class="token number">.8</span><span class="token number">.8</span>
BGP routing table entry <span class="token keyword">for</span> <span class="token number">1</span><span class="token operator">:</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">8.8</span><span class="token number">.8</span><span class="token number">.8</span><span class="token operator">/</span><span class="token number">32</span><span class="token punctuation">,</span> version <span class="token number">150</span>
Paths<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token number">1</span> available<span class="token punctuation">,</span> best #<span class="token number">1</span><span class="token punctuation">,</span> table A<span class="token operator">-</span>Site1<span class="token punctuation">)</span>
    Not advertised to any peer
    Local<span class="token punctuation">,</span> imported path from <span class="token number">1</span><span class="token operator">:</span><span class="token number">2</span><span class="token operator">:</span><span class="token number">8.8</span><span class="token number">.8</span><span class="token number">.8</span><span class="token operator">/</span><span class="token number">32</span>
    <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span> <span class="token punctuation">(</span>metric <span class="token number">4</span><span class="token punctuation">)</span> from <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span> <span class="token punctuation">(</span><span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span><span class="token punctuation">)</span>
        Origin incomplete<span class="token punctuation">,</span> metric <span class="token number">158720</span><span class="token punctuation">,</span> localpref <span class="token number">100</span><span class="token punctuation">,</span> valid<span class="token punctuation">,</span> internal<span class="token punctuation">,</span> best
        Extended Community<span class="token operator">:</span> RT<span class="token operator">:</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">2</span> Cost<span class="token operator">:</span>pre<span class="token operator">-</span>bestpath<span class="token operator">:</span><span class="token number">129</span><span class="token operator">:</span><span class="token number">158720</span> <span class="token number">0x8800</span><span class="token operator">:</span><span class="token number">0</span><span class="token operator">:</span><span class="token number">0</span> 
        <span class="token number">0x8801</span><span class="token operator">:</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">133120</span> <span class="token number">0x8802</span><span class="token operator">:</span><span class="token number">65282</span><span class="token operator">:</span><span class="token number">25600</span> <span class="token number">0x8803</span><span class="token operator">:</span><span class="token number">65281</span><span class="token operator">:</span><span class="token number">1500</span> 
        <span class="token number">0x8804</span><span class="token operator">:</span><span class="token number">0</span><span class="token operator">:</span><span class="token number">134744072</span> <span class="token number">0x8805</span><span class="token operator">:</span><span class="token number">11</span><span class="token operator">:</span><span class="token number">0</span> <span class="token number">0x8806</span><span class="token operator">:</span><span class="token number">0</span><span class="token operator">:</span><span class="token number">134744072</span>
        mpls labels in<span class="token operator">/</span>out nolabel<span class="token operator">/</span><span class="token number">26</span>
</code></pre>
<ul>
<li>此时R1的IP BGP VPNv4路由表中关于前缀8.8.8.8&#x2F;32的详细信息中拓展团体属性中多了消息类型0x8804和0x8805；</li>
<li>拓展团体属性中类型0x8804和0x8805的字段是VPNv4路由用来描述远程VPN站点EIGRP外部路由的；</li>
<li>仅当在远程站点的网络中该路由条目就已经是EIGRP外部路由时，</li>
<li>才会在VPNv4的扩展团体属性中携带类型0x8804和0x8805字段，来为此EIGRP外部路由进- 下面实验3中的场景则不会出现类型0x8804和0x8805字段；</li>
</ul>
<h2 id="实验3："><a href="#实验3：" class="headerlink" title="实验3："></a>实验3：</h2><h3 id="实验3拓扑："><a href="#实验3拓扑：" class="headerlink" title="实验3拓扑："></a>实验3拓扑：</h3><p><img src="/2014/MPLS_Lab_7/topo2.png"></p>
<p>修改VPN A站点2的EIGRP配置，将EIGRP的AS号从1改为2；</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token function">R7</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>#no router ei <span class="token number">1</span>
<span class="token function">R7</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>#router eigrp <span class="token number">2</span>
<span class="token function">R7</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span>#network <span class="token number">7.7</span><span class="token number">.7</span><span class="token number">.7</span> <span class="token number">0.0</span><span class="token number">.0</span><span class="token number">.0</span>
<span class="token function">R7</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span>#network <span class="token number">192.168</span><span class="token number">.47</span><span class="token number">.0</span>
<span class="token function">R7</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span>#network <span class="token number">192.168</span><span class="token number">.78</span><span class="token number">.0</span>
<span class="token function">R7</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span>#eigrp router<span class="token operator">-</span>id <span class="token number">7.7</span><span class="token number">.7</span><span class="token number">.7</span>
<span class="token function">R7</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span>#no au

<span class="token function">R8</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>#no router ei <span class="token number">1</span>
<span class="token function">R8</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>#router eigrp <span class="token number">2</span>
<span class="token function">R8</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span>#no redistribute connected route<span class="token operator">-</span>map LOOPBACK
<span class="token function">R8</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span>#network <span class="token number">8.8</span><span class="token number">.8</span><span class="token number">.8</span> <span class="token number">0.0</span><span class="token number">.0</span><span class="token number">.0</span>
<span class="token function">R8</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span>#network <span class="token number">192.168</span><span class="token number">.78</span><span class="token number">.0</span>
<span class="token function">R8</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span>#eigrp router<span class="token operator">-</span>id <span class="token number">8.8</span><span class="token number">.8</span><span class="token number">.8</span>
<span class="token function">R8</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span>#no <span class="token keyword">auto</span></code></pre>
<p>修改PE2（R4）上EIGRP 1中的ipv4 vrf A-Site1地址族的AS号2；</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>#router eigrp <span class="token number">1</span>
<span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span>#no address<span class="token operator">-</span>family ip vrf A<span class="token operator">-</span>Site2 autonomous<span class="token operator">-</span>system <span class="token number">1</span>
<span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span>#address<span class="token operator">-</span>family ip vrf A<span class="token operator">-</span>Site2 autonomous<span class="token operator">-</span>system <span class="token number">2</span>
<span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token operator">-</span>af<span class="token punctuation">)</span>#no <span class="token keyword">auto</span><span class="token operator">-</span>summary
<span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token operator">-</span>af<span class="token punctuation">)</span>#redistribute bgp <span class="token number">1</span> metric <span class="token number">10000</span> <span class="token number">100</span> <span class="token number">255</span> <span class="token number">1</span> <span class="token number">1500</span>
<span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token operator">-</span>af<span class="token punctuation">)</span>#network <span class="token number">192.168</span><span class="token number">.47</span><span class="token number">.0</span> <span class="token number">0.0</span><span class="token number">.0</span><span class="token number">.255</span>
<span class="token operator">*</span>Mar <span class="token number">18</span> <span class="token number">11</span><span class="token operator">:</span><span class="token number">47</span><span class="token operator">:</span><span class="token number">58.047</span><span class="token operator">:</span> <span class="token operator">%</span>DUAL<span class="token operator">-</span><span class="token number">5</span><span class="token operator">-</span>NBRCHANGE<span class="token operator">:</span> EIGRP<span class="token operator">-</span>IPv4 <span class="token number">2</span><span class="token operator">:</span> Neighbor <span class="token number">192.168</span><span class="token number">.47</span><span class="token number">.7</span> <span class="token punctuation">(</span>FastEthernet0<span class="token operator">/</span><span class="token number">1</span><span class="token punctuation">)</span> is up<span class="token operator">:</span> new adjacency
<span class="token comment">//可以看到PE2和CE2的EIGRP邻居关系马上就恢复了；</span></code></pre>

<p>并将EIGRP 1 的<code>ipv4 vrf A-Site2 autonomous-system 2</code>地址族重分发进MP-BGP的ipv4 vrf A-Site2地址族中；</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>#router bgp <span class="token number">1</span>
<span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span>#address<span class="token operator">-</span>family ipv4 vrf A<span class="token operator">-</span>Site2
<span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token operator">-</span>af<span class="token punctuation">)</span>#redistribute eigrp <span class="token number">2</span></code></pre>

<h3 id="验证与调试：-1"><a href="#验证与调试：-1" class="headerlink" title="验证与调试："></a>验证与调试：</h3><p>在VPN A站点1的C路由器R6上ping远程VPN A站点2的C路由器R8；</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token function">R6</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span>#<span class="token keyword">do</span> p <span class="token number">8.8</span><span class="token number">.8</span><span class="token number">.8</span>
Type escape sequence to abort<span class="token punctuation">.</span>
Sending <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token operator">-</span>byte ICMP Echos to <span class="token number">8.8</span><span class="token number">.8</span><span class="token number">.8</span><span class="token punctuation">,</span> timeout is <span class="token number">2</span> seconds<span class="token operator">:</span>
<span class="token operator">!</span><span class="token operator">!</span><span class="token operator">!</span><span class="token operator">!</span><span class="token operator">!</span>
Success rate is <span class="token number">100</span> <span class="token function">percent</span> <span class="token punctuation">(</span><span class="token number">5</span><span class="token operator">/</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> round<span class="token operator">-</span>trip min<span class="token operator">/</span>avg<span class="token operator">/</span>max <span class="token operator">=</span> <span class="token number">132</span><span class="token operator">/</span><span class="token number">162</span><span class="token operator">/</span><span class="token number">232</span> ms
<span class="token comment">//成功！</span></code></pre>

<p>查看C路由器R8的IP路由表；</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token function">R8</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span>#<span class="token keyword">do</span> sh ip route
Codes<span class="token operator">:</span> L <span class="token operator">-</span> local<span class="token punctuation">,</span> C <span class="token operator">-</span> connected<span class="token punctuation">,</span> S <span class="token operator">-</span> <span class="token keyword">static</span><span class="token punctuation">,</span> R <span class="token operator">-</span> RIP<span class="token punctuation">,</span> M <span class="token operator">-</span> mobile<span class="token punctuation">,</span> B <span class="token operator">-</span> BGP
        D <span class="token operator">-</span> EIGRP<span class="token punctuation">,</span> EX <span class="token operator">-</span> EIGRP external<span class="token punctuation">,</span> O <span class="token operator">-</span> OSPF<span class="token punctuation">,</span> IA <span class="token operator">-</span> OSPF inter area 
        N1 <span class="token operator">-</span> OSPF NSSA external type <span class="token number">1</span><span class="token punctuation">,</span> N2 <span class="token operator">-</span> OSPF NSSA external type <span class="token number">2</span>
        E1 <span class="token operator">-</span> OSPF external type <span class="token number">1</span><span class="token punctuation">,</span> E2 <span class="token operator">-</span> OSPF external type <span class="token number">2</span>
        i <span class="token operator">-</span> IS<span class="token operator">-</span>IS<span class="token punctuation">,</span> su <span class="token operator">-</span> IS<span class="token operator">-</span>IS summary<span class="token punctuation">,</span> L1 <span class="token operator">-</span> IS<span class="token operator">-</span>IS level<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> L2 <span class="token operator">-</span> IS<span class="token operator">-</span>IS level<span class="token operator">-</span><span class="token number">2</span>
        ia <span class="token operator">-</span> IS<span class="token operator">-</span>IS inter area<span class="token punctuation">,</span> <span class="token operator">*</span> <span class="token operator">-</span> candidate <span class="token keyword">default</span><span class="token punctuation">,</span> U <span class="token operator">-</span> per<span class="token operator">-</span>user <span class="token keyword">static</span> route
        o <span class="token operator">-</span> ODR<span class="token punctuation">,</span> P <span class="token operator">-</span> periodic downloaded <span class="token keyword">static</span> route<span class="token punctuation">,</span> H <span class="token operator">-</span> NHRP<span class="token punctuation">,</span> l <span class="token operator">-</span> LISP
        <span class="token operator">+</span> <span class="token operator">-</span> replicated route<span class="token punctuation">,</span> <span class="token operator">%</span> <span class="token operator">-</span> next hop override

Gateway of last resort is not set

        <span class="token number">5.0</span><span class="token number">.0</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">32</span> is subnetted<span class="token punctuation">,</span> <span class="token number">1</span> subnets
D EX     <span class="token number">5.5</span><span class="token number">.5</span><span class="token number">.5</span> <span class="token punctuation">[</span><span class="token number">170</span><span class="token operator">/</span><span class="token number">286720</span><span class="token punctuation">]</span> via <span class="token number">192.168</span><span class="token number">.78</span><span class="token number">.7</span><span class="token punctuation">,</span> <span class="token number">00</span><span class="token operator">:</span><span class="token number">10</span><span class="token operator">:</span><span class="token number">06</span><span class="token punctuation">,</span> FastEthernet0<span class="token operator">/</span><span class="token number">0</span>
        <span class="token number">6.0</span><span class="token number">.0</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">32</span> is subnetted<span class="token punctuation">,</span> <span class="token number">1</span> subnets
D EX     <span class="token number">6.6</span><span class="token number">.6</span><span class="token number">.6</span> <span class="token punctuation">[</span><span class="token number">170</span><span class="token operator">/</span><span class="token number">286720</span><span class="token punctuation">]</span> via <span class="token number">192.168</span><span class="token number">.78</span><span class="token number">.7</span><span class="token punctuation">,</span> <span class="token number">00</span><span class="token operator">:</span><span class="token number">10</span><span class="token operator">:</span><span class="token number">06</span><span class="token punctuation">,</span> FastEthernet0<span class="token operator">/</span><span class="token number">0</span>
        <span class="token number">7.0</span><span class="token number">.0</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">32</span> is subnetted<span class="token punctuation">,</span> <span class="token number">1</span> subnets
D        <span class="token number">7.7</span><span class="token number">.7</span><span class="token number">.7</span> <span class="token punctuation">[</span><span class="token number">90</span><span class="token operator">/</span><span class="token number">156160</span><span class="token punctuation">]</span> via <span class="token number">192.168</span><span class="token number">.78</span><span class="token number">.7</span><span class="token punctuation">,</span> <span class="token number">00</span><span class="token operator">:</span><span class="token number">14</span><span class="token operator">:</span><span class="token number">15</span><span class="token punctuation">,</span> FastEthernet0<span class="token operator">/</span><span class="token number">0</span>
        <span class="token number">8.0</span><span class="token number">.0</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">32</span> is subnetted<span class="token punctuation">,</span> <span class="token number">1</span> subnets
C        <span class="token number">8.8</span><span class="token number">.8</span><span class="token number">.8</span> is directly connected<span class="token punctuation">,</span> Loopback0
D EX  <span class="token number">192.168</span><span class="token number">.15</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span> <span class="token punctuation">[</span><span class="token number">170</span><span class="token operator">/</span><span class="token number">286720</span><span class="token punctuation">]</span> via <span class="token number">192.168</span><span class="token number">.78</span><span class="token number">.7</span><span class="token punctuation">,</span> <span class="token number">00</span><span class="token operator">:</span><span class="token number">10</span><span class="token operator">:</span><span class="token number">06</span><span class="token punctuation">,</span> FastEthernet0<span class="token operator">/</span><span class="token number">0</span>
D     <span class="token number">192.168</span><span class="token number">.47</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span> <span class="token punctuation">[</span><span class="token number">90</span><span class="token operator">/</span><span class="token number">30720</span><span class="token punctuation">]</span> via <span class="token number">192.168</span><span class="token number">.78</span><span class="token number">.7</span><span class="token punctuation">,</span> <span class="token number">00</span><span class="token operator">:</span><span class="token number">14</span><span class="token operator">:</span><span class="token number">15</span><span class="token punctuation">,</span> FastEthernet0<span class="token operator">/</span><span class="token number">0</span>
D EX  <span class="token number">192.168</span><span class="token number">.56</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span> <span class="token punctuation">[</span><span class="token number">170</span><span class="token operator">/</span><span class="token number">286720</span><span class="token punctuation">]</span> via <span class="token number">192.168</span><span class="token number">.78</span><span class="token number">.7</span><span class="token punctuation">,</span> <span class="token number">00</span><span class="token operator">:</span><span class="token number">10</span><span class="token operator">:</span><span class="token number">06</span><span class="token punctuation">,</span> FastEthernet0<span class="token operator">/</span><span class="token number">0</span>
        <span class="token number">192.168</span><span class="token number">.78</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span> is variably subnetted<span class="token punctuation">,</span> <span class="token number">2</span> subnets<span class="token punctuation">,</span> <span class="token number">2</span> masks
C        <span class="token number">192.168</span><span class="token number">.78</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span> is directly connected<span class="token punctuation">,</span> FastEthernet0<span class="token operator">/</span><span class="token number">0</span>
L        <span class="token number">192.168</span><span class="token number">.78</span><span class="token number">.8</span><span class="token operator">/</span><span class="token number">32</span> is directly connected<span class="token punctuation">,</span> FastEthernet0<span class="token operator">/</span><span class="token number">0</span>
<span class="token comment">//来自VPN A站点1的EIGRP路由变为EIGRP外部路由；</span></code></pre>

<p>此时再来查看R1的IP BGP VPNv4路由表中关于前缀8.8.8.8&#x2F;32的详细信息；</p>
<pre class="language-c" data-language="c"><code class="language-c">R1#sh ip bgp vpnv4 vrf A<span class="token operator">-</span>Site1 <span class="token number">8.8</span><span class="token number">.8</span><span class="token number">.8</span>
BGP routing table entry <span class="token keyword">for</span> <span class="token number">1</span><span class="token operator">:</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">8.8</span><span class="token number">.8</span><span class="token number">.8</span><span class="token operator">/</span><span class="token number">32</span><span class="token punctuation">,</span> version <span class="token number">164</span>
Paths<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token number">1</span> available<span class="token punctuation">,</span> best #<span class="token number">1</span><span class="token punctuation">,</span> table A<span class="token operator">-</span>Site1<span class="token punctuation">)</span>
    Not advertised to any peer
    Local<span class="token punctuation">,</span> imported path from <span class="token number">1</span><span class="token operator">:</span><span class="token number">2</span><span class="token operator">:</span><span class="token number">8.8</span><span class="token number">.8</span><span class="token number">.8</span><span class="token operator">/</span><span class="token number">32</span>
    <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span> <span class="token punctuation">(</span>metric <span class="token number">4</span><span class="token punctuation">)</span> from <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span> <span class="token punctuation">(</span><span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span><span class="token punctuation">)</span>
        Origin incomplete<span class="token punctuation">,</span> metric <span class="token number">158720</span><span class="token punctuation">,</span> localpref <span class="token number">100</span><span class="token punctuation">,</span> valid<span class="token punctuation">,</span> internal<span class="token punctuation">,</span> best
        Extended Community<span class="token operator">:</span> RT<span class="token operator">:</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">2</span> Cost<span class="token operator">:</span>pre<span class="token operator">-</span>bestpath<span class="token operator">:</span><span class="token number">128</span><span class="token operator">:</span><span class="token number">158720</span> <span class="token number">0x8800</span><span class="token operator">:</span><span class="token number">32768</span><span class="token operator">:</span><span class="token number">0</span> 
        <span class="token number">0x8801</span><span class="token operator">:</span><span class="token number">2</span><span class="token operator">:</span><span class="token number">133120</span> <span class="token number">0x8802</span><span class="token operator">:</span><span class="token number">65282</span><span class="token operator">:</span><span class="token number">25600</span> <span class="token number">0x8803</span><span class="token operator">:</span><span class="token number">65281</span><span class="token operator">:</span><span class="token number">1500</span>
        <span class="token number">0x8806</span><span class="token operator">:</span><span class="token number">0</span><span class="token operator">:</span><span class="token number">134744072</span>
        mpls labels in<span class="token operator">/</span>out nolabel<span class="token operator">/</span><span class="token number">27</span></code></pre>
<p>即便现在R6上所有来自VPN A站点2的EIGRP路由都变为了EIGRP外部路由，但PE1（R1）收到的VPNv4路由则不会携带拓展团体属性类型0x8804和0x8805字段；因为R6上的这些EIGRP外部路由是由于EIGRP AS号不同而造成的，而这些路由在远程VPN A站点2中并不是EIGRP外部路由。</p>
]]></content>
      <categories>
        <category>Network</category>
      </categories>
      <tags>
        <tag>MPLS</tag>
        <tag>Network</tag>
      </tags>
  </entry>
  <entry>
    <title>MPLS 实验8：MPLS VPN running OSPF on the PE-CE link</title>
    <url>/2014/MPLS_Lab_8/</url>
    <content><![CDATA[<h1 id="实验环境："><a href="#实验环境：" class="headerlink" title="实验环境："></a>实验环境：</h1><ul>
<li>模拟器：GNS3 0.8.6</li>
<li>Cisco IOS：c7200-adventerprisek9-mz.151-4.M2.image</li>
</ul>
<h1 id="GNS3实验拓扑文件："><a href="#GNS3实验拓扑文件：" class="headerlink" title="GNS3实验拓扑文件："></a>GNS3实验拓扑文件：</h1><p><a href="topology.net">拓扑文件</a></p>
<h1 id="实验拓扑："><a href="#实验拓扑：" class="headerlink" title="实验拓扑："></a>实验拓扑：</h1><p><img src="/2014/MPLS_Lab_8/topo.png"></p>
<span id="more"></span>

<h1 id="基本预配置："><a href="#基本预配置：" class="headerlink" title="基本预配置："></a>基本预配置：</h1><h2 id="R1："><a href="#R1：" class="headerlink" title="R1："></a>R1：</h2><pre class="language-c" data-language="c"><code class="language-c">hostname R1
<span class="token operator">!</span>
ip cef
<span class="token operator">!</span>
mpls label protocol ldp
<span class="token operator">!</span>
interface Loopback0
    ip address <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span> <span class="token number">255.255</span><span class="token number">.255</span><span class="token number">.255</span>
    ip ospf <span class="token number">1</span> area <span class="token number">0</span>
<span class="token operator">!</span>
interface FastEthernet0<span class="token operator">/</span><span class="token number">0</span>
    ip address <span class="token number">192.168</span><span class="token number">.12</span><span class="token number">.1</span> <span class="token number">255.255</span><span class="token number">.255</span><span class="token number">.0</span>
    ip ospf <span class="token number">1</span> area <span class="token number">0</span>
    no shut
mpls ip
<span class="token operator">!</span>
interface FastEthernet0<span class="token operator">/</span><span class="token number">1</span>
    ip address <span class="token number">192.168</span><span class="token number">.15</span><span class="token number">.1</span> <span class="token number">255.255</span><span class="token number">.255</span><span class="token number">.0</span>
    no shut
<span class="token operator">!</span>
router ospf <span class="token number">1</span>
    router<span class="token operator">-</span>id <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span>
<span class="token operator">!</span>         
mpls ldp router<span class="token operator">-</span>id Loopback0 force
<span class="token operator">!</span>
line con <span class="token number">0</span>
    exec<span class="token operator">-</span>timeout <span class="token number">0</span> <span class="token number">0</span>
    logging synchronous
<span class="token operator">!</span>
end</code></pre>

<h2 id="R2"><a href="#R2" class="headerlink" title="R2:"></a>R2:</h2><pre class="language-c" data-language="c"><code class="language-c">hostname R2
<span class="token operator">!</span>
ip cef
<span class="token operator">!</span>
mpls label protocol ldp
<span class="token operator">!</span>
interface Loopback0
    ip address <span class="token number">2.2</span><span class="token number">.2</span><span class="token number">.2</span> <span class="token number">255.255</span><span class="token number">.255</span><span class="token number">.255</span>
    ip ospf <span class="token number">1</span> area <span class="token number">0</span>
<span class="token operator">!</span>
interface FastEthernet0<span class="token operator">/</span><span class="token number">0</span>
    ip address <span class="token number">192.168</span><span class="token number">.12</span><span class="token number">.2</span> <span class="token number">255.255</span><span class="token number">.255</span><span class="token number">.0</span>
    ip ospf <span class="token number">1</span> area <span class="token number">0</span>
    no shutdown
mpls ip
<span class="token operator">!</span>
interface FastEthernet0<span class="token operator">/</span><span class="token number">1</span>
    ip address <span class="token number">192.168</span><span class="token number">.23</span><span class="token number">.2</span> <span class="token number">255.255</span><span class="token number">.255</span><span class="token number">.0</span>
    ip ospf <span class="token number">1</span> area <span class="token number">0</span>
    no shutdown
mpls ip
<span class="token operator">!</span>
router ospf <span class="token number">1</span>
    router<span class="token operator">-</span>id <span class="token number">2.2</span><span class="token number">.2</span><span class="token number">.2</span>
<span class="token operator">!</span>
mpls ldp router<span class="token operator">-</span>id Loopback0 force
<span class="token operator">!</span>
line con <span class="token number">0</span>
    exec<span class="token operator">-</span>timeout <span class="token number">0</span> <span class="token number">0</span>
    logging synchronous
<span class="token operator">!</span>
end</code></pre>

<h2 id="R3"><a href="#R3" class="headerlink" title="R3:"></a>R3:</h2><pre class="language-c" data-language="c"><code class="language-c">hostname R3
<span class="token operator">!</span>
ip cef
<span class="token operator">!</span>
mpls label protocol ldp
<span class="token operator">!</span>
interface Loopback0
    ip address <span class="token number">3.3</span><span class="token number">.3</span><span class="token number">.3</span> <span class="token number">255.255</span><span class="token number">.255</span><span class="token number">.255</span>
    ip ospf <span class="token number">1</span> area <span class="token number">0</span>
<span class="token operator">!</span>
interface FastEthernet0<span class="token operator">/</span><span class="token number">0</span>
    ip address <span class="token number">192.168</span><span class="token number">.34</span><span class="token number">.3</span> <span class="token number">255.255</span><span class="token number">.255</span><span class="token number">.0</span>
    ip ospf <span class="token number">1</span> area <span class="token number">0</span>
    no shutdown
mpls ip
<span class="token operator">!</span>
interface FastEthernet0<span class="token operator">/</span><span class="token number">1</span>
    ip address <span class="token number">192.168</span><span class="token number">.23</span><span class="token number">.3</span> <span class="token number">255.255</span><span class="token number">.255</span><span class="token number">.0</span>
    ip ospf <span class="token number">1</span> area <span class="token number">0</span>
    no shutdown
mpls ip
<span class="token operator">!</span>
router ospf <span class="token number">1</span>
    router<span class="token operator">-</span>id <span class="token number">3.3</span><span class="token number">.3</span><span class="token number">.3</span>
<span class="token operator">!</span>
mpls ldp router<span class="token operator">-</span>id Loopback0 force
<span class="token operator">!</span>
line con <span class="token number">0</span>
    exec<span class="token operator">-</span>timeout <span class="token number">0</span> <span class="token number">0</span>
    logging synchronous
<span class="token operator">!</span>
end</code></pre>

<h2 id="R4"><a href="#R4" class="headerlink" title="R4:"></a>R4:</h2><pre class="language-c" data-language="c"><code class="language-c">hostname R4
<span class="token operator">!</span>
ip cef
<span class="token operator">!</span>
mpls label protocol ldp
<span class="token operator">!</span>
interface Loopback0
    ip address <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span> <span class="token number">255.255</span><span class="token number">.255</span><span class="token number">.255</span>
    ip ospf <span class="token number">1</span> area <span class="token number">0</span>
<span class="token operator">!</span>
interface FastEthernet0<span class="token operator">/</span><span class="token number">0</span>
    ip address <span class="token number">192.168</span><span class="token number">.34</span><span class="token number">.4</span> <span class="token number">255.255</span><span class="token number">.255</span><span class="token number">.0</span>
    ip ospf <span class="token number">1</span> area <span class="token number">0</span>
    no shutdown
mpls ip
<span class="token operator">!</span>
interface FastEthernet0<span class="token operator">/</span><span class="token number">1</span>
    ip address <span class="token number">192.168</span><span class="token number">.47</span><span class="token number">.4</span> <span class="token number">255.255</span><span class="token number">.255</span><span class="token number">.0</span>
    no shutdown
<span class="token operator">!</span>
router ospf <span class="token number">1</span>
    router<span class="token operator">-</span>id <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span>
<span class="token operator">!</span>
mpls ldp router<span class="token operator">-</span>id Loopback0 force
<span class="token operator">!</span>
line con <span class="token number">0</span>
    exec<span class="token operator">-</span>timeout <span class="token number">0</span> <span class="token number">0</span>
    logging synchronous
<span class="token operator">!</span>
end</code></pre>

<h2 id="R5"><a href="#R5" class="headerlink" title="R5:"></a>R5:</h2><pre class="language-none"><code class="language-none">hostname R5
!
ip cef
!
interface Loopback0
    ip address 5.5.5.5 255.255.255.255
    ip ospf 1 area 0
!
interface FastEthernet0&#x2F;0
    ip address 192.168.56.5 255.255.255.0
    ip ospf 1 area 0
    no shutdown
!
interface FastEthernet0&#x2F;1
    ip address 192.168.15.5 255.255.255.0
    no shutdown
!
router ospf 1
    router-id 5.5.5.5
!
line con 0
    exec-timeout 0 0
    logging synchronous
!
end</code></pre>

<h2 id="R6"><a href="#R6" class="headerlink" title="R6:"></a>R6:</h2><pre class="language-c" data-language="c"><code class="language-c">hostname R6
<span class="token operator">!</span>
ip cef
<span class="token operator">!</span>
interface Loopback0
    ip address <span class="token number">6.6</span><span class="token number">.6</span><span class="token number">.6</span> <span class="token number">255.255</span><span class="token number">.255</span><span class="token number">.255</span>
    ip ospf <span class="token number">1</span> area <span class="token number">0</span>
<span class="token operator">!</span>
interface FastEthernet0<span class="token operator">/</span><span class="token number">0</span>
    ip address <span class="token number">192.168</span><span class="token number">.56</span><span class="token number">.6</span> <span class="token number">255.255</span><span class="token number">.255</span><span class="token number">.0</span>
    ip ospf <span class="token number">1</span> area <span class="token number">0</span>
    no shutdown
<span class="token operator">!</span>
router ospf <span class="token number">1</span>
    router<span class="token operator">-</span>id <span class="token number">6.6</span><span class="token number">.6</span><span class="token number">.6</span>
<span class="token operator">!</span>
line con <span class="token number">0</span>
    exec<span class="token operator">-</span>timeout <span class="token number">0</span> <span class="token number">0</span>
    logging synchronous
<span class="token operator">!</span>
end</code></pre>

<h2 id="R7"><a href="#R7" class="headerlink" title="R7:"></a>R7:</h2><pre class="language-c" data-language="c"><code class="language-c">hostname R7
<span class="token operator">!</span>
ip cef
<span class="token operator">!</span>
interface Loopback0
    ip address <span class="token number">7.7</span><span class="token number">.7</span><span class="token number">.7</span> <span class="token number">255.255</span><span class="token number">.255</span><span class="token number">.255</span>
    ip ospf <span class="token number">1</span> area <span class="token number">0</span>
<span class="token operator">!</span>
interface FastEthernet0<span class="token operator">/</span><span class="token number">0</span>
    ip address <span class="token number">192.168</span><span class="token number">.78</span><span class="token number">.7</span> <span class="token number">255.255</span><span class="token number">.255</span><span class="token number">.0</span>
    ip ospf <span class="token number">1</span> area <span class="token number">0</span>
    no shutdown
<span class="token operator">!</span>
interface FastEthernet0<span class="token operator">/</span><span class="token number">1</span>
    ip address <span class="token number">192.168</span><span class="token number">.47</span><span class="token number">.7</span> <span class="token number">255.255</span><span class="token number">.255</span><span class="token number">.0</span>
    no shutdown
<span class="token operator">!</span>
router ospf <span class="token number">1</span>
    router<span class="token operator">-</span>id <span class="token number">7.7</span><span class="token number">.7</span><span class="token number">.7</span>
<span class="token operator">!</span>
line con <span class="token number">0</span>
    exec<span class="token operator">-</span>timeout <span class="token number">0</span> <span class="token number">0</span>
    logging synchronous
<span class="token operator">!</span>
end</code></pre>

<h2 id="R8"><a href="#R8" class="headerlink" title="R8:"></a>R8:</h2><pre class="language-c" data-language="c"><code class="language-c">hostname R8
<span class="token operator">!</span>
ip cef
<span class="token operator">!</span>
interface Loopback0
    ip address <span class="token number">8.8</span><span class="token number">.8</span><span class="token number">.8</span> <span class="token number">255.255</span><span class="token number">.255</span><span class="token number">.255</span>
    ip ospf <span class="token number">1</span> area <span class="token number">0</span>
<span class="token operator">!</span>
interface FastEthernet0<span class="token operator">/</span><span class="token number">0</span>
    ip address <span class="token number">192.168</span><span class="token number">.78</span><span class="token number">.8</span> <span class="token number">255.255</span><span class="token number">.255</span><span class="token number">.0</span>
    ip ospf <span class="token number">1</span> area <span class="token number">0</span>
    no shutdown
<span class="token operator">!</span>
router ospf <span class="token number">1</span>
    router<span class="token operator">-</span>id <span class="token number">8.8</span><span class="token number">.8</span><span class="token number">.8</span>
<span class="token operator">!</span>         
line con <span class="token number">0</span>
    exec<span class="token operator">-</span>timeout <span class="token number">0</span> <span class="token number">0</span>
    logging synchronous
<span class="token operator">!</span>
end</code></pre>


<h1 id="MPLS-VPN配置步骤："><a href="#MPLS-VPN配置步骤：" class="headerlink" title="MPLS VPN配置步骤："></a>MPLS VPN配置步骤：</h1><ol>
<li>创建VRF（VRF名本地有效）：<ul>
<li>指定RD（提供全局唯一的私网单播地址）；</li>
<li>指定RT的导出（导出：把重分发进MP-BGP的VPNv4路由打上MP-BGP扩展团体属性RT）和导入（导入：把MP-BGP里的VPNv4路由进行RT的匹配，匹配成功的VPNv4路由将放进相应的VRF）；</li>
<li>将与CE相连的PE接口关联特定VRF；</li>
</ul>
</li>
<li>配置MP-BGP：<ul>
<li>配置建立PE之间的IBGP邻居关系；</li>
<li>启用VPNv4地址族（AF），并激活与其他PE设备的邻居关系；</li>
</ul>
</li>
<li>配置PE-CE路由；<ul>
<li>配置IGP，并启用IGP的地址族（AF）；</li>
<li>配置启用MP-BGP IPv4 VRF地址族，然后激活与其他PE路由器的MP-BGP IPv4 VRF邻居关系；</li>
</ul>
</li>
</ol>
<h1 id="实验与调试："><a href="#实验与调试：" class="headerlink" title="实验与调试："></a>实验与调试：</h1><h2 id="实验1：配置MPLS-VPN"><a href="#实验1：配置MPLS-VPN" class="headerlink" title="实验1：配置MPLS VPN"></a>实验1：配置MPLS VPN</h2><h3 id="在PE上创建VRF；"><a href="#在PE上创建VRF；" class="headerlink" title="在PE上创建VRF；"></a>在PE上创建VRF；</h3><p>在PE1（R1）上创建VRF，并命名为A-Site1，表示该VRF为VPN A的站点1服务；</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>#ip vrf A<span class="token operator">-</span>Site1   </code></pre>

<p>指定RD，为1:1，如果按照AS：num命名法，以下RD表示AS1中的第2个VRF；</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token operator">-</span>vrf<span class="token punctuation">)</span>#rd <span class="token number">1</span><span class="token operator">:</span><span class="token number">1</span></code></pre>

<p>指定RT的导入和导出，这里我将RT指定为导入和导出1：1；</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token operator">-</span>vrf<span class="token punctuation">)</span>#route<span class="token operator">-</span>target <span class="token operator">?</span>        
    ASN<span class="token operator">:</span>nn or IP<span class="token operator">-</span>address<span class="token operator">:</span>nn  Target VPN Extended Community
    both                     Both import and export Target<span class="token operator">-</span>VPN community
    export                   Export Target<span class="token operator">-</span>VPN community
    import                   Import Target<span class="token operator">-</span>VPN community
<span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token operator">-</span>vrf<span class="token punctuation">)</span>#route<span class="token operator">-</span>target both <span class="token number">1</span><span class="token operator">:</span><span class="token number">1</span></code></pre>

<p>将PE1（R1）上与CE相连的PE接口F0&#x2F;1关联到VRF A-Site1；</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>#<span class="token keyword">int</span> f0<span class="token operator">/</span><span class="token number">1</span>
<span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token operator">-</span><span class="token keyword">if</span><span class="token punctuation">)</span>#ip vrf forwarding A<span class="token operator">-</span>Site1
<span class="token operator">%</span> Interface FastEthernet0<span class="token operator">/</span><span class="token number">1</span> IPv4 disabled and <span class="token function">address</span><span class="token punctuation">(</span>es<span class="token punctuation">)</span> removed due to enabling VRF A<span class="token operator">-</span>Site1
    <span class="token comment">//切记先将接口关联VRF，然后再配置IP地址；</span>
<span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token operator">-</span><span class="token keyword">if</span><span class="token punctuation">)</span>#ip add <span class="token number">192.168</span><span class="token number">.15</span><span class="token number">.1</span> <span class="token number">255.255</span><span class="token number">.255</span><span class="token number">.0</span></code></pre>
<p>在PE2（R4）上创建VRF，并命名为A-Site2，表示该VRF为VPN A的站点2服务；</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>#ip vrf A<span class="token operator">-</span>Site2</code></pre>

<p>指定RD，为1:2，如果按照AS：num命名法，以下RD表示AS1中的第2个VRF；</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token operator">-</span>vrf<span class="token punctuation">)</span>#rd <span class="token number">1</span><span class="token operator">:</span><span class="token number">2</span></code></pre>

<p>指定RT的导入和导出，这里我将RT指定为导入和导出1：1；</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token operator">-</span>vrf<span class="token punctuation">)</span>#route<span class="token operator">-</span>target both <span class="token number">1</span><span class="token operator">:</span><span class="token number">1</span></code></pre>
<p>因为PE1导出的RT为1:1，PE2导入的RT正是PE1的导出RT1:1，所以PE1（R1）的RT导出和PE2（R4）的RT导入能够匹配成功，R4能够学到R1导入到MP-BGP中的VPNv4路由；又因为PE2导出的RT为1:1，PE1导入的RT也正好是PE2的导出RT1:1；所以PE2（R4）的RT导出和PE1（R1）的RT导入能够匹配成对，R1能够学到R4导入到MP-BGP中的VPNv4路由</p>
<p>将PE2（R4）上与CE相连的PE接口F0&#x2F;1关联到VRF A-Site2；</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>#<span class="token keyword">int</span> f0<span class="token operator">/</span><span class="token number">1</span>
<span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token operator">-</span><span class="token keyword">if</span><span class="token punctuation">)</span>#ip vrf forwarding A<span class="token operator">-</span>Site2
<span class="token operator">%</span> Interface FastEthernet0<span class="token operator">/</span><span class="token number">1</span> IPv4 disabled and <span class="token function">address</span><span class="token punctuation">(</span>es<span class="token punctuation">)</span> removed due to enabling VRF A<span class="token operator">-</span>Site2
    <span class="token comment">//切记先将接口关联VRF，然后再配置IP地址；</span>
<span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token operator">-</span><span class="token keyword">if</span><span class="token punctuation">)</span>#ip add <span class="token number">192.168</span><span class="token number">.47</span><span class="token number">.4</span> <span class="token number">255.255</span><span class="token number">.255</span><span class="token number">.0</span></code></pre>
<h3 id="配置MP-BGP；"><a href="#配置MP-BGP；" class="headerlink" title="配置MP-BGP；"></a>配置MP-BGP；</h3><p>在PE1（R1）上配置MP-BGP，使之与其他PE建立IBGP关系，在此实验中只有PE1和PE2两台PE设备；</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>#router bgp <span class="token number">1</span>
<span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span>#no <span class="token keyword">auto</span><span class="token operator">-</span>summary
<span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span>#no syn
<span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span>#bgp router<span class="token operator">-</span>id <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span>
<span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span>#neighbor <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span> remote<span class="token operator">-</span>as <span class="token number">1</span>
<span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span>#neighbor <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span> update<span class="token operator">-</span>source l0
<span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span>#neighbor <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span> next<span class="token operator">-</span>hop<span class="token operator">-</span>self</code></pre>

<p>启用PE1（R1）的VPNv4地址族，并激活与IBGP邻居PE2（R4）的MP-BGP VPNv4邻居关系；</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span>#address<span class="token operator">-</span>family vpnv4
<span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token operator">-</span>af<span class="token punctuation">)</span>#neighbor <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span> activate
<span class="token comment">//激活与IBGP邻居R4的VPNv4关系；</span>
<span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token operator">-</span>af<span class="token punctuation">)</span>#neighbor <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span> send<span class="token operator">-</span>community <span class="token operator">?</span>
    both      Send Standard and Extended Community attributes
    extended  Send Extended Community attribute
    standard  Send Standard Community attribute
    <span class="token operator">&lt;</span>cr<span class="token operator">></span>

<span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token operator">-</span>af<span class="token punctuation">)</span>#neighbor <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span> send<span class="token operator">-</span>community both
<span class="token comment">//由于BGP团体属性为可选传递属性，所以必须手动指定R1向IBGP邻居R4发送拓展团体属性和标准团体属性；</span>

<span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token operator">-</span>af<span class="token punctuation">)</span>#exit<span class="token operator">-</span>address<span class="token operator">-</span>family
<span class="token comment">//退出AF配置模式；</span></code></pre>
<p>在PE2（R4）上配置MP-BGP，使之与其他PE建立IBGP关系，</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token operator">-</span><span class="token keyword">if</span><span class="token punctuation">)</span>#router bgp <span class="token number">1</span>
<span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span>#no <span class="token keyword">auto</span><span class="token operator">-</span>summary
<span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span>#no syn
<span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span>#bgp router<span class="token operator">-</span>id <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span>
<span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span>#neighbor <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span> remote<span class="token operator">-</span>as <span class="token number">1</span>
<span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span>#neighbor <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span> update<span class="token operator">-</span>source l0
<span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span>#neighbor <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span> next<span class="token operator">-</span>hop<span class="token operator">-</span>self</code></pre>

<p>启用PE2（R4）的VPNv4地址族，并激活与IBGP邻居PE1（R1）的MP-BGP VPNv4邻居关系；</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span>#address<span class="token operator">-</span>family vpnv4
<span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token operator">-</span>af<span class="token punctuation">)</span>#neighbor <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span> activate
<span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token operator">-</span>af<span class="token punctuation">)</span>#neighbor <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span> send<span class="token operator">-</span>community both</code></pre>
<h3 id="配置PE-CE路由；"><a href="#配置PE-CE路由；" class="headerlink" title="配置PE-CE路由；"></a>配置PE-CE路由；</h3><p>配置PE1（R1）的IGP OSPF VRF进程；</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>#interface loopback1
<span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token operator">-</span><span class="token keyword">if</span><span class="token punctuation">)</span>#ip vrf forwarding A<span class="token operator">-</span>Site1
<span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token operator">-</span><span class="token keyword">if</span><span class="token punctuation">)</span>#ip add <span class="token number">11.11</span><span class="token number">.11</span><span class="token number">.11</span> <span class="token number">255.255</span><span class="token number">.255</span><span class="token number">.255</span>
<span class="token comment">//创建接口Loopback1，以使用此环回口作为OSPF 2 VRF A-Site1进程的Router-id；</span>

<span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>#router ospf <span class="token number">2</span> vrf A<span class="token operator">-</span>Site1
<span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span>#router<span class="token operator">-</span>id <span class="token number">11.11</span><span class="token number">.11</span><span class="token number">.11</span>
<span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span>#network <span class="token number">11.11</span><span class="token number">.11</span><span class="token number">.11</span> <span class="token number">0.0</span><span class="token number">.0</span><span class="token number">.0</span> area <span class="token number">0</span>
<span class="token comment">//OSPF VRF进程中的命令和常规OSPF进程中的相同，使用network命令将接口Loopback1宣告进OSPF VRF进程；</span>

<span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span>#redistribute bgp <span class="token number">1</span> subnets 
<span class="token comment">//将MP-BGP中IPv4 VRF地址族的命名与OSPF VRF进程的VRF命名相同的MP-BGP路由重分布进此OSPF VRF进程；</span>
<span class="token comment">//OSPF VRF进程和MP-BGP中IPv4 VRF地址族（AF）实际上是执行相互重分发的操作；</span>

<span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>#<span class="token keyword">int</span> f0<span class="token operator">/</span><span class="token number">1</span>
<span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token operator">-</span><span class="token keyword">if</span><span class="token punctuation">)</span>#ip ospf <span class="token number">2</span> area <span class="token number">0</span>
<span class="token comment">//同时，与常规OSPF进程相同，也可以在接口下将接口宣告进OSPF VRF进程；</span></code></pre>

<p>配置PE1（R1）的MP-BGP IPv4 VRF地址族（AF）；</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>#router bgp <span class="token number">1</span>
<span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span>#address<span class="token operator">-</span>family ipv4 vrf A<span class="token operator">-</span>Site1
<span class="token comment">//进入MP-BGP的IPv4 VRF地址族（AF）；</span>

<span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token operator">-</span>af<span class="token punctuation">)</span>#redistribute ospf <span class="token number">2</span> vrf A<span class="token operator">-</span>Site1 match internal external 
<span class="token comment">//默认情况下，把OSPF重分发进BGP，只会将OSPF内部路由重分发进BGP，</span>
<span class="token comment">//如果需要将所有OSPF路由（内部和外部路由）重分发进去BGP，需要使用选项match；</span>

<span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token operator">-</span>af<span class="token punctuation">)</span>#redistribute connected 
<span class="token comment">//如果用户在CE路由器上ping远程网络的另一个VPN站点中的CE或C路由器，</span>
<span class="token comment">//为了使其在没有指定其源地址情况下（即默认使用CE路由器出站接口IP地址），Echo Reply包能够有路由并正常返回,</span>
<span class="token comment">//将PE路由器的直连路由重分布进MP-BGP的IPv4 VRF AF中；</span>

<span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token operator">-</span>af<span class="token punctuation">)</span>#exit<span class="token operator">-</span>address<span class="token operator">-</span>family 
<span class="token comment">//退出MP-BGP的IPv4 VRF地址族（AF）模式；</span></code></pre>
<p>配置PE2（R4）的IGP OSPF VRF进程；</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>#interface loopback1
<span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token operator">-</span><span class="token keyword">if</span><span class="token punctuation">)</span>#ip vrf forwarding A<span class="token operator">-</span>Site2
<span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token operator">-</span><span class="token keyword">if</span><span class="token punctuation">)</span>#ip add <span class="token number">11.11</span><span class="token number">.11</span><span class="token number">.11</span> <span class="token number">255.255</span><span class="token number">.255</span><span class="token number">.255</span>

<span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>#router ospf <span class="token number">2</span> vrf A<span class="token operator">-</span>Site2
<span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span>#router<span class="token operator">-</span>id <span class="token number">11.11</span><span class="token number">.11</span><span class="token number">.11</span>
<span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span>#network <span class="token number">11.11</span><span class="token number">.11</span><span class="token number">.11</span> <span class="token number">0.0</span><span class="token number">.0</span><span class="token number">.0</span> area <span class="token number">0</span>

<span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span>#redistribute bgp <span class="token number">1</span> subnets 

<span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>#<span class="token keyword">int</span> f0<span class="token operator">/</span><span class="token number">1</span>
<span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token operator">-</span><span class="token keyword">if</span><span class="token punctuation">)</span>#ip ospf <span class="token number">2</span> area <span class="token number">0</span></code></pre>

<p>配置PE2（R4）的MP-BGP IPv4 VRF地址族（AF）；</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>#router bgp <span class="token number">1</span>
<span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span>#address<span class="token operator">-</span>family ipv4 vrf A<span class="token operator">-</span>Site2
<span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token operator">-</span>af<span class="token punctuation">)</span>#redistribute ospf <span class="token number">2</span> vrf A<span class="token operator">-</span>Site2 match internal external 
<span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token operator">-</span>af<span class="token punctuation">)</span>#redistribute connected 
<span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token operator">-</span>af<span class="token punctuation">)</span>#exit<span class="token operator">-</span>address<span class="token operator">-</span>family </code></pre>
<h3 id="验证与调试；"><a href="#验证与调试；" class="headerlink" title="验证与调试；"></a>验证与调试；</h3><p>在VPN A站点1的C路由器R6上ping远程VPN A站点2的C路由器R8；</p>
<pre class="language-c" data-language="c"><code class="language-c">R6#ping <span class="token number">8.8</span><span class="token number">.8</span><span class="token number">.8</span>
Type escape sequence to abort<span class="token punctuation">.</span>
Sending <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token operator">-</span>byte ICMP Echos to <span class="token number">8.8</span><span class="token number">.8</span><span class="token number">.8</span><span class="token punctuation">,</span> timeout is <span class="token number">2</span> seconds<span class="token operator">:</span>
<span class="token operator">!</span><span class="token operator">!</span><span class="token operator">!</span><span class="token operator">!</span><span class="token operator">!</span>
Success rate is <span class="token number">100</span> <span class="token function">percent</span> <span class="token punctuation">(</span><span class="token number">5</span><span class="token operator">/</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> round<span class="token operator">-</span>trip min<span class="token operator">/</span>avg<span class="token operator">/</span>max <span class="token operator">=</span> <span class="token number">140</span><span class="token operator">/</span><span class="token number">173</span><span class="token operator">/</span><span class="token number">212</span> ms
<span class="token comment">//成功！</span></code></pre>

<p>查看PE2（R4）的OSPF链路状态数据库；</p>
<pre class="language-c" data-language="c"><code class="language-c">R4#show ip ospf database
            OSPF Router with <span class="token function">ID</span> <span class="token punctuation">(</span><span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>Process ID <span class="token number">1</span><span class="token punctuation">)</span>
                Router Link <span class="token function">States</span> <span class="token punctuation">(</span>Area <span class="token number">0</span><span class="token punctuation">)</span>
Link ID         ADV Router      Age         Seq#       Checksum Link count
<span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span>         <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span>         <span class="token number">1920</span>        <span class="token number">0x80000005</span> <span class="token number">0x0048DB</span> <span class="token number">2</span>
<span class="token number">2.2</span><span class="token number">.2</span><span class="token number">.2</span>         <span class="token number">2.2</span><span class="token number">.2</span><span class="token number">.2</span>         <span class="token number">1933</span>        <span class="token number">0x80000006</span> <span class="token number">0x0039C6</span> <span class="token number">3</span>
<span class="token number">3.3</span><span class="token number">.3</span><span class="token number">.3</span>         <span class="token number">3.3</span><span class="token number">.3</span><span class="token number">.3</span>         <span class="token number">1978</span>        <span class="token number">0x80000006</span> <span class="token number">0x009D26</span> <span class="token number">3</span>
<span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span>         <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span>         <span class="token number">45</span>          <span class="token number">0x80000006</span> <span class="token number">0x003A93</span> <span class="token number">2</span>
                Net Link <span class="token function">States</span> <span class="token punctuation">(</span>Area <span class="token number">0</span><span class="token punctuation">)</span>
Link ID         ADV Router      Age         Seq#       Checksum
<span class="token number">192.168</span><span class="token number">.12</span><span class="token number">.2</span>    <span class="token number">2.2</span><span class="token number">.2</span><span class="token number">.2</span>         <span class="token number">1933</span>        <span class="token number">0x80000004</span> <span class="token number">0x008922</span>
<span class="token number">192.168</span><span class="token number">.23</span><span class="token number">.3</span>    <span class="token number">3.3</span><span class="token number">.3</span><span class="token number">.3</span>         <span class="token number">1978</span>        <span class="token number">0x80000004</span> <span class="token number">0x003C57</span>
<span class="token number">192.168</span><span class="token number">.34</span><span class="token number">.4</span>    <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span>         <span class="token number">45</span>          <span class="token number">0x80000005</span> <span class="token number">0x00EC8D</span>
            OSPF Router with <span class="token function">ID</span> <span class="token punctuation">(</span><span class="token number">44.44</span><span class="token number">.44</span><span class="token number">.44</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>Process ID <span class="token number">2</span><span class="token punctuation">)</span>
                Router Link <span class="token function">States</span> <span class="token punctuation">(</span>Area <span class="token number">0</span><span class="token punctuation">)</span>
Link ID         ADV Router      Age         Seq#       Checksum Link count
<span class="token number">7.7</span><span class="token number">.7</span><span class="token number">.7</span>         <span class="token number">7.7</span><span class="token number">.7</span><span class="token number">.7</span>         <span class="token number">1944</span>        <span class="token number">0x80000007</span> <span class="token number">0x0030CA</span> <span class="token number">3</span>
<span class="token number">8.8</span><span class="token number">.8</span><span class="token number">.8</span>         <span class="token number">8.8</span><span class="token number">.8</span><span class="token number">.8</span>         <span class="token number">1146</span>        <span class="token number">0x80000005</span> <span class="token number">0x002E11</span> <span class="token number">2</span>
<span class="token number">44.44</span><span class="token number">.44</span><span class="token number">.44</span>     <span class="token number">44.44</span><span class="token number">.44</span><span class="token number">.44</span>     <span class="token number">1858</span>        <span class="token number">0x80000003</span> <span class="token number">0x004D81</span> <span class="token number">2</span>
                Net Link <span class="token function">States</span> <span class="token punctuation">(</span>Area <span class="token number">0</span><span class="token punctuation">)</span>
Link ID         ADV Router      Age         Seq#       Checksum
<span class="token number">192.168</span><span class="token number">.47</span><span class="token number">.7</span>    <span class="token number">7.7</span><span class="token number">.7</span><span class="token number">.7</span>         <span class="token number">1944</span>        <span class="token number">0x80000002</span> <span class="token number">0x005B55</span>
<span class="token number">192.168</span><span class="token number">.78</span><span class="token number">.7</span>    <span class="token number">7.7</span><span class="token number">.7</span><span class="token number">.7</span>         <span class="token number">1167</span>        <span class="token number">0x80000004</span> <span class="token number">0x00F12E</span>
                Summary Net Link <span class="token function">States</span> <span class="token punctuation">(</span>Area <span class="token number">0</span><span class="token punctuation">)</span>
Link ID         ADV Router      Age         Seq#       Checksum
<span class="token number">5.5</span><span class="token number">.5</span><span class="token number">.5</span>         <span class="token number">44.44</span><span class="token number">.44</span><span class="token number">.44</span>     <span class="token number">1858</span>        <span class="token number">0x80000002</span> <span class="token number">0x00FFF4</span>
<span class="token number">6.6</span><span class="token number">.6</span><span class="token number">.6</span>         <span class="token number">44.44</span><span class="token number">.44</span><span class="token number">.44</span>     <span class="token number">1858</span>        <span class="token number">0x80000002</span> <span class="token number">0x00DB14</span>
<span class="token number">11.11</span><span class="token number">.11</span><span class="token number">.11</span>     <span class="token number">44.44</span><span class="token number">.44</span><span class="token number">.44</span>     <span class="token number">1858</span>        <span class="token number">0x80000002</span> <span class="token number">0x00E0FC</span>
<span class="token number">192.168</span><span class="token number">.15</span><span class="token number">.0</span>    <span class="token number">44.44</span><span class="token number">.44</span><span class="token number">.44</span>     <span class="token number">1858</span>        <span class="token number">0x80000002</span> <span class="token number">0x00850C</span>
<span class="token number">192.168</span><span class="token number">.56</span><span class="token number">.0</span>    <span class="token number">44.44</span><span class="token number">.44</span><span class="token number">.44</span>     <span class="token number">1858</span>        <span class="token number">0x80000002</span> <span class="token number">0x00CA9C</span>
<span class="token comment">//可以看到，当关于VPN A站点2的前缀在PE2（R4）上的时候，它们都还是类型1或者类型2的LSA；</span>
<span class="token comment">//而关于这些前缀的LSA在PE1（R1）的时候，它们</span></code></pre>

<p>查看PE1（R1）的OSPF链路状态数据库；</p>
<pre class="language-c" data-language="c"><code class="language-c">R1#show ip ospf database
            OSPF Router with <span class="token function">ID</span> <span class="token punctuation">(</span><span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>Process ID <span class="token number">1</span><span class="token punctuation">)</span>
                Router Link <span class="token function">States</span> <span class="token punctuation">(</span>Area <span class="token number">0</span><span class="token punctuation">)</span>
Link ID         ADV Router      Age         Seq#       Checksum Link count
<span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span>         <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span>         <span class="token number">1406</span>        <span class="token number">0x80000005</span> <span class="token number">0x0048DB</span> <span class="token number">2</span>
<span class="token number">2.2</span><span class="token number">.2</span><span class="token number">.2</span>         <span class="token number">2.2</span><span class="token number">.2</span><span class="token number">.2</span>         <span class="token number">1422</span>        <span class="token number">0x80000006</span> <span class="token number">0x0039C6</span> <span class="token number">3</span>
<span class="token number">3.3</span><span class="token number">.3</span><span class="token number">.3</span>         <span class="token number">3.3</span><span class="token number">.3</span><span class="token number">.3</span>         <span class="token number">1468</span>        <span class="token number">0x80000006</span> <span class="token number">0x009D26</span> <span class="token number">3</span>
<span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span>         <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span>         <span class="token number">1559</span>        <span class="token number">0x80000005</span> <span class="token number">0x003C92</span> <span class="token number">2</span>
                Net Link <span class="token function">States</span> <span class="token punctuation">(</span>Area <span class="token number">0</span><span class="token punctuation">)</span>
Link ID         ADV Router      Age         Seq#       Checksum
<span class="token number">192.168</span><span class="token number">.12</span><span class="token number">.2</span>    <span class="token number">2.2</span><span class="token number">.2</span><span class="token number">.2</span>         <span class="token number">1422</span>        <span class="token number">0x80000004</span> <span class="token number">0x008922</span>
<span class="token number">192.168</span><span class="token number">.23</span><span class="token number">.3</span>    <span class="token number">3.3</span><span class="token number">.3</span><span class="token number">.3</span>         <span class="token number">1468</span>        <span class="token number">0x80000004</span> <span class="token number">0x003C57</span>
<span class="token number">192.168</span><span class="token number">.34</span><span class="token number">.4</span>    <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span>         <span class="token number">1559</span>        <span class="token number">0x80000004</span> <span class="token number">0x00EE8C</span>
            OSPF Router with <span class="token function">ID</span> <span class="token punctuation">(</span><span class="token number">11.11</span><span class="token number">.11</span><span class="token number">.11</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>Process ID <span class="token number">2</span><span class="token punctuation">)</span>
                Router Link <span class="token function">States</span> <span class="token punctuation">(</span>Area <span class="token number">0</span><span class="token punctuation">)</span>
Link ID         ADV Router      Age         Seq#       Checksum Link count
<span class="token number">5.5</span><span class="token number">.5</span><span class="token number">.5</span>         <span class="token number">5.5</span><span class="token number">.5</span><span class="token number">.5</span>         <span class="token number">1495</span>        <span class="token number">0x80000008</span> <span class="token number">0x00ACD9</span> <span class="token number">3</span>
<span class="token number">6.6</span><span class="token number">.6</span><span class="token number">.6</span>         <span class="token number">6.6</span><span class="token number">.6</span><span class="token number">.6</span>         <span class="token number">812</span>         <span class="token number">0x80000006</span> <span class="token number">0x00285E</span> <span class="token number">2</span>
<span class="token number">11.11</span><span class="token number">.11</span><span class="token number">.11</span>     <span class="token number">11.11</span><span class="token number">.11</span><span class="token number">.11</span>     <span class="token number">593</span>         <span class="token number">0x80000006</span> <span class="token number">0x007628</span> <span class="token number">2</span>
                Net Link <span class="token function">States</span> <span class="token punctuation">(</span>Area <span class="token number">0</span><span class="token punctuation">)</span>
Link ID         ADV Router      Age         Seq#       Checksum
<span class="token number">192.168</span><span class="token number">.15</span><span class="token number">.5</span>    <span class="token number">5.5</span><span class="token number">.5</span><span class="token number">.5</span>         <span class="token number">1495</span>        <span class="token number">0x80000003</span> <span class="token number">0x004E18</span>
<span class="token number">192.168</span><span class="token number">.56</span><span class="token number">.5</span>    <span class="token number">5.5</span><span class="token number">.5</span><span class="token number">.5</span>         <span class="token number">732</span>         <span class="token number">0x80000004</span> <span class="token number">0x008CC3</span>
                Summary Net Link <span class="token function">States</span> <span class="token punctuation">(</span>Area <span class="token number">0</span><span class="token punctuation">)</span>
Link ID         ADV Router      Age         Seq#       Checksum
<span class="token number">7.7</span><span class="token number">.7</span><span class="token number">.7</span>         <span class="token number">11.11</span><span class="token number">.11</span><span class="token number">.11</span>     <span class="token number">1362</span>        <span class="token number">0x80000002</span> <span class="token number">0x0085EB</span>
<span class="token number">8.8</span><span class="token number">.8</span><span class="token number">.8</span>         <span class="token number">11.11</span><span class="token number">.11</span><span class="token number">.11</span>     <span class="token number">1362</span>        <span class="token number">0x80000002</span> <span class="token number">0x00610B</span>
<span class="token number">44.44</span><span class="token number">.44</span><span class="token number">.44</span>     <span class="token number">11.11</span><span class="token number">.11</span><span class="token number">.11</span>     <span class="token number">1362</span>        <span class="token number">0x80000002</span> <span class="token number">0x00CE0F</span>
<span class="token number">192.168</span><span class="token number">.47</span><span class="token number">.0</span>    <span class="token number">11.11</span><span class="token number">.11</span><span class="token number">.11</span>     <span class="token number">1362</span>        <span class="token number">0x80000002</span> <span class="token number">0x0006EF</span>
<span class="token number">192.168</span><span class="token number">.78</span><span class="token number">.0</span>    <span class="token number">11.11</span><span class="token number">.11</span><span class="token number">.11</span>     <span class="token number">1362</span>        <span class="token number">0x80000002</span> <span class="token number">0x00B91C</span>
<span class="token comment">//可以看到，当关于VPN A站点2的前缀在PE2（R4）上的时候，它们都还是类型1或者类型2的LSA；</span>
<span class="token comment">//而关于这些前缀的LSA在PE1（R1）的时候，它们都已经变为了类型3的LSA；</span>
<span class="token comment">//这说明，PE2（R4）将类型为1和2的LSA转换为类型3的LSA；</span>
<span class="token comment">//PE1（R1）收到了远程PE2（R4）发来的类型3的LSA，将其装换为OSPF区域间路由（O IA）；</span></code></pre>

<p>查看R6的IP路由表；</p>
<pre class="language-c" data-language="c"><code class="language-c">R6#show ip route
Codes<span class="token operator">:</span> L <span class="token operator">-</span> local<span class="token punctuation">,</span> C <span class="token operator">-</span> connected<span class="token punctuation">,</span> S <span class="token operator">-</span> <span class="token keyword">static</span><span class="token punctuation">,</span> R <span class="token operator">-</span> RIP<span class="token punctuation">,</span> M <span class="token operator">-</span> mobile<span class="token punctuation">,</span> B <span class="token operator">-</span> BGP
        D <span class="token operator">-</span> EIGRP<span class="token punctuation">,</span> EX <span class="token operator">-</span> EIGRP external<span class="token punctuation">,</span> O <span class="token operator">-</span> OSPF<span class="token punctuation">,</span> IA <span class="token operator">-</span> OSPF inter area 
        N1 <span class="token operator">-</span> OSPF NSSA external type <span class="token number">1</span><span class="token punctuation">,</span> N2 <span class="token operator">-</span> OSPF NSSA external type <span class="token number">2</span>
        E1 <span class="token operator">-</span> OSPF external type <span class="token number">1</span><span class="token punctuation">,</span> E2 <span class="token operator">-</span> OSPF external type <span class="token number">2</span>
        i <span class="token operator">-</span> IS<span class="token operator">-</span>IS<span class="token punctuation">,</span> su <span class="token operator">-</span> IS<span class="token operator">-</span>IS summary<span class="token punctuation">,</span> L1 <span class="token operator">-</span> IS<span class="token operator">-</span>IS level<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> L2 <span class="token operator">-</span> IS<span class="token operator">-</span>IS level<span class="token operator">-</span><span class="token number">2</span>
        ia <span class="token operator">-</span> IS<span class="token operator">-</span>IS inter area<span class="token punctuation">,</span> <span class="token operator">*</span> <span class="token operator">-</span> candidate <span class="token keyword">default</span><span class="token punctuation">,</span> U <span class="token operator">-</span> per<span class="token operator">-</span>user <span class="token keyword">static</span> route
        o <span class="token operator">-</span> ODR<span class="token punctuation">,</span> P <span class="token operator">-</span> periodic downloaded <span class="token keyword">static</span> route<span class="token punctuation">,</span> H <span class="token operator">-</span> NHRP<span class="token punctuation">,</span> l <span class="token operator">-</span> LISP
        <span class="token operator">+</span> <span class="token operator">-</span> replicated route<span class="token punctuation">,</span> <span class="token operator">%</span> <span class="token operator">-</span> next hop override
                                                            
Gateway of last resort is not set
                                                            
        <span class="token number">5.0</span><span class="token number">.0</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">32</span> is subnetted<span class="token punctuation">,</span> <span class="token number">1</span> subnets
O        <span class="token number">5.5</span><span class="token number">.5</span><span class="token number">.5</span> <span class="token punctuation">[</span><span class="token number">110</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">]</span> via <span class="token number">192.168</span><span class="token number">.56</span><span class="token number">.5</span><span class="token punctuation">,</span> <span class="token number">01</span><span class="token operator">:</span><span class="token number">25</span><span class="token operator">:</span><span class="token number">07</span><span class="token punctuation">,</span> FastEthernet0<span class="token operator">/</span><span class="token number">0</span>
        <span class="token number">6.0</span><span class="token number">.0</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">32</span> is subnetted<span class="token punctuation">,</span> <span class="token number">1</span> subnets
C        <span class="token number">6.6</span><span class="token number">.6</span><span class="token number">.6</span> is directly connected<span class="token punctuation">,</span> Loopback0
        <span class="token number">7.0</span><span class="token number">.0</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">32</span> is subnetted<span class="token punctuation">,</span> <span class="token number">1</span> subnets
O IA     <span class="token number">7.7</span><span class="token number">.7</span><span class="token number">.7</span> <span class="token punctuation">[</span><span class="token number">110</span><span class="token operator">/</span><span class="token number">4</span><span class="token punctuation">]</span> via <span class="token number">192.168</span><span class="token number">.56</span><span class="token number">.5</span><span class="token punctuation">,</span> <span class="token number">00</span><span class="token operator">:</span><span class="token number">27</span><span class="token operator">:</span><span class="token number">55</span><span class="token punctuation">,</span> FastEthernet0<span class="token operator">/</span><span class="token number">0</span>
        <span class="token number">8.0</span><span class="token number">.0</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">32</span> is subnetted<span class="token punctuation">,</span> <span class="token number">1</span> subnets
O IA     <span class="token number">8.8</span><span class="token number">.8</span><span class="token number">.8</span> <span class="token punctuation">[</span><span class="token number">110</span><span class="token operator">/</span><span class="token number">5</span><span class="token punctuation">]</span> via <span class="token number">192.168</span><span class="token number">.56</span><span class="token number">.5</span><span class="token punctuation">,</span> <span class="token number">00</span><span class="token operator">:</span><span class="token number">27</span><span class="token operator">:</span><span class="token number">55</span><span class="token punctuation">,</span> FastEthernet0<span class="token operator">/</span><span class="token number">0</span>
        <span class="token number">11.0</span><span class="token number">.0</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">32</span> is subnetted<span class="token punctuation">,</span> <span class="token number">1</span> subnets
O        <span class="token number">11.11</span><span class="token number">.11</span><span class="token number">.11</span> <span class="token punctuation">[</span><span class="token number">110</span><span class="token operator">/</span><span class="token number">3</span><span class="token punctuation">]</span> via <span class="token number">192.168</span><span class="token number">.56</span><span class="token number">.5</span><span class="token punctuation">,</span> <span class="token number">00</span><span class="token operator">:</span><span class="token number">45</span><span class="token operator">:</span><span class="token number">36</span><span class="token punctuation">,</span> FastEthernet0<span class="token operator">/</span><span class="token number">0</span>
        <span class="token number">44.0</span><span class="token number">.0</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">32</span> is subnetted<span class="token punctuation">,</span> <span class="token number">1</span> subnets
O IA     <span class="token number">44.44</span><span class="token number">.44</span><span class="token number">.44</span> <span class="token punctuation">[</span><span class="token number">110</span><span class="token operator">/</span><span class="token number">3</span><span class="token punctuation">]</span> via <span class="token number">192.168</span><span class="token number">.56</span><span class="token number">.5</span><span class="token punctuation">,</span> <span class="token number">00</span><span class="token operator">:</span><span class="token number">27</span><span class="token operator">:</span><span class="token number">55</span><span class="token punctuation">,</span> FastEthernet0<span class="token operator">/</span><span class="token number">0</span>
O     <span class="token number">192.168</span><span class="token number">.15</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span> <span class="token punctuation">[</span><span class="token number">110</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">]</span> via <span class="token number">192.168</span><span class="token number">.56</span><span class="token number">.5</span><span class="token punctuation">,</span> <span class="token number">01</span><span class="token operator">:</span><span class="token number">25</span><span class="token operator">:</span><span class="token number">07</span><span class="token punctuation">,</span> FastEthernet0<span class="token operator">/</span><span class="token number">0</span>
O IA  <span class="token number">192.168</span><span class="token number">.47</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span> <span class="token punctuation">[</span><span class="token number">110</span><span class="token operator">/</span><span class="token number">3</span><span class="token punctuation">]</span> via <span class="token number">192.168</span><span class="token number">.56</span><span class="token number">.5</span><span class="token punctuation">,</span> <span class="token number">00</span><span class="token operator">:</span><span class="token number">27</span><span class="token operator">:</span><span class="token number">55</span><span class="token punctuation">,</span> FastEthernet0<span class="token operator">/</span><span class="token number">0</span>
        <span class="token number">192.168</span><span class="token number">.56</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span> is variably subnetted<span class="token punctuation">,</span> <span class="token number">2</span> subnets<span class="token punctuation">,</span> <span class="token number">2</span> masks
C        <span class="token number">192.168</span><span class="token number">.56</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span> is directly connected<span class="token punctuation">,</span> FastEthernet0<span class="token operator">/</span><span class="token number">0</span>
L        <span class="token number">192.168</span><span class="token number">.56</span><span class="token number">.6</span><span class="token operator">/</span><span class="token number">32</span> is directly connected<span class="token punctuation">,</span> FastEthernet0<span class="token operator">/</span><span class="token number">0</span>
O IA  <span class="token number">192.168</span><span class="token number">.78</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span> <span class="token punctuation">[</span><span class="token number">110</span><span class="token operator">/</span><span class="token number">4</span><span class="token punctuation">]</span> via <span class="token number">192.168</span><span class="token number">.56</span><span class="token number">.5</span><span class="token punctuation">,</span> <span class="token number">00</span><span class="token operator">:</span><span class="token number">27</span><span class="token operator">:</span><span class="token number">55</span><span class="token punctuation">,</span> FastEthernet0<span class="token operator">/</span><span class="token number">0</span>
<span class="token comment">//注意：在OSPF看来，MPLS VPN超骨干网络超越了OSPF骨干区域Area0，MPLS VPN超骨干网络神似OSPF骨干区域Area0，</span>
<span class="token comment">//但它又和OSPF骨干区域Area0不同，所以PE路由器会执行ABR的功能，会将类型为1和2的LSA转换为类型3的LSA；</span>
<span class="token comment">//所以当PE在收到来自对端远程PE发来的OSPF区域内路由（O）时，会将OSPF区域内路由转换为OSPF区域间路由（O IA）；</span></code></pre>

<p>调试OSPF 2的LSA生成；</p>
<pre class="language-c" data-language="c"><code class="language-c">R1#debug ip ospf <span class="token number">2</span> lsa<span class="token operator">-</span>generation
OSPF LSA generation debugging is on <span class="token keyword">for</span> process <span class="token number">2</span>
R1#clear ip ospf <span class="token number">2</span> process
Reset OSPF process <span class="token number">2</span><span class="token operator">?</span> <span class="token punctuation">[</span>no<span class="token punctuation">]</span><span class="token operator">:</span> yes
<span class="token operator">*</span>Mar <span class="token number">18</span> <span class="token number">18</span><span class="token operator">:</span><span class="token number">00</span><span class="token operator">:</span><span class="token number">26.607</span><span class="token operator">:</span> OSPF<span class="token operator">-</span><span class="token number">2</span> LSGEN<span class="token operator">:</span> Scheduling rtr LSA <span class="token keyword">for</span> area <span class="token number">0</span>
<span class="token operator">*</span>Mar <span class="token number">18</span> <span class="token number">18</span><span class="token operator">:</span><span class="token number">00</span><span class="token operator">:</span><span class="token number">26.611</span><span class="token operator">:</span> <span class="token operator">%</span>OSPF<span class="token operator">-</span><span class="token number">5</span><span class="token operator">-</span>ADJCHG<span class="token operator">:</span> Process <span class="token number">2</span><span class="token punctuation">,</span> Nbr <span class="token number">5.5</span><span class="token number">.5</span><span class="token number">.5</span> on FastEthernet0<span class="token operator">/</span><span class="token number">1</span> from FULL to DOWN<span class="token punctuation">,</span> Neighbor Down<span class="token operator">:</span> Interface down or detached
<span class="token operator">*</span>Mar <span class="token number">18</span> <span class="token number">18</span><span class="token operator">:</span><span class="token number">00</span><span class="token operator">:</span><span class="token number">26.619</span><span class="token operator">:</span> OSPF<span class="token operator">-</span><span class="token number">2</span> LSGEN<span class="token operator">:</span> Scheduling rtr LSA <span class="token keyword">for</span> area <span class="token number">0</span>
<span class="token operator">*</span>Mar <span class="token number">18</span> <span class="token number">18</span><span class="token operator">:</span><span class="token number">00</span><span class="token operator">:</span><span class="token number">26.619</span><span class="token operator">:</span> OSPF<span class="token operator">-</span><span class="token number">2</span> LSGEN<span class="token operator">:</span> Scheduling network LSA on FastEthernet0<span class="token operator">/</span><span class="token number">1</span>
<span class="token operator">*</span>Mar <span class="token number">18</span> <span class="token number">18</span><span class="token operator">:</span><span class="token number">00</span><span class="token operator">:</span><span class="token number">26.623</span><span class="token operator">:</span> OSPF<span class="token operator">-</span><span class="token number">2</span> LSGEN<span class="token operator">:</span> Scheduling rtr LSA <span class="token keyword">for</span> area <span class="token number">0</span>
<span class="token operator">*</span>Mar <span class="token number">18</span> <span class="token number">18</span><span class="token operator">:</span><span class="token number">00</span><span class="token operator">:</span><span class="token number">26.627</span><span class="token operator">:</span> OSPF<span class="token operator">-</span><span class="token number">2</span> LSGEN<span class="token operator">:</span> Scheduling rtr LSA <span class="token keyword">for</span> area <span class="token number">0</span>
<span class="token operator">*</span>Mar <span class="token number">18</span> <span class="token number">18</span><span class="token operator">:</span><span class="token number">00</span><span class="token operator">:</span><span class="token number">26.631</span><span class="token operator">:</span> OSPF<span class="token operator">-</span><span class="token number">2</span> LSGEN<span class="token operator">:</span> Scheduling rtr LSA <span class="token keyword">for</span> area <span class="token number">0</span>
<span class="token operator">*</span>Mar <span class="token number">18</span> <span class="token number">18</span><span class="token operator">:</span><span class="token number">00</span><span class="token operator">:</span><span class="token number">26.647</span><span class="token operator">:</span> OSPF<span class="token operator">-</span><span class="token number">2</span> LSGEN<span class="token operator">:</span> Scheduling rtr LSA <span class="token keyword">for</span> area <span class="token number">0</span>
<span class="token operator">*</span>Mar <span class="token number">18</span> <span class="token number">18</span><span class="token operator">:</span><span class="token number">00</span><span class="token operator">:</span><span class="token number">26.651</span><span class="token operator">:</span> OSPF<span class="token operator">-</span><span class="token number">2</span> LSGEN<span class="token operator">:</span> Scheduling rtr LSA <span class="token keyword">for</span> area <span class="token number">0</span>
<span class="token operator">*</span>Mar <span class="token number">18</span> <span class="token number">18</span><span class="token operator">:</span><span class="token number">00</span><span class="token operator">:</span><span class="token number">26.655</span><span class="token operator">:</span> OSPF<span class="token operator">-</span><span class="token number">2</span> LSGEN<span class="token operator">:</span> Scheduling rtr LSA <span class="token keyword">for</span> area <span class="token number">0</span>
<span class="token operator">*</span>Mar <span class="token number">18</span> <span class="token number">18</span><span class="token operator">:</span><span class="token number">00</span><span class="token operator">:</span><span class="token number">26.731</span><span class="token operator">:</span> OSPF<span class="token operator">-</span><span class="token number">2</span> LSGEN<span class="token operator">:</span> Scheduling rtr LSA <span class="token keyword">for</span> area <span class="token number">0</span>
<span class="token operator">*</span>Mar <span class="token number">18</span> <span class="token number">18</span><span class="token operator">:</span><span class="token number">00</span><span class="token operator">:</span><span class="token number">26.743</span><span class="token operator">:</span> OSPF<span class="token operator">-</span><span class="token number">2</span> LSGEN<span class="token operator">:</span> Scheduling rtr LSA <span class="token keyword">for</span> area <span class="token number">0</span>
<span class="token operator">*</span>Mar <span class="token number">18</span> <span class="token number">18</span><span class="token operator">:</span><span class="token number">00</span><span class="token operator">:</span><span class="token number">27.107</span><span class="token operator">:</span> OSPF<span class="token operator">-</span><span class="token number">2</span> LSGEN<span class="token operator">:</span> Build router LSA <span class="token keyword">for</span> area <span class="token number">0</span><span class="token punctuation">,</span> router ID <span class="token number">11.11</span><span class="token number">.11</span><span class="token number">.11</span><span class="token punctuation">,</span> seq <span class="token number">0x80000001</span>
<span class="token operator">*</span>Mar <span class="token number">18</span> <span class="token number">18</span><span class="token operator">:</span><span class="token number">00</span><span class="token operator">:</span><span class="token number">27.143</span><span class="token operator">:</span> <span class="token operator">%</span>OSPF<span class="token operator">-</span><span class="token number">5</span><span class="token operator">-</span>ADJCHG<span class="token operator">:</span> Process <span class="token number">2</span><span class="token punctuation">,</span> Nbr <span class="token number">5.5</span><span class="token number">.5</span><span class="token number">.5</span> on FastEthernet0<span class="token operator">/</span><span class="token number">1</span> from LOADING to FULL<span class="token punctuation">,</span> Loading Done
<span class="token operator">*</span>Mar <span class="token number">18</span> <span class="token number">18</span><span class="token operator">:</span><span class="token number">00</span><span class="token operator">:</span><span class="token number">27.147</span><span class="token operator">:</span> OSPF<span class="token operator">-</span><span class="token number">2</span> LSGEN<span class="token operator">:</span> Scheduling rtr LSA <span class="token keyword">for</span> area <span class="token number">0</span>
<span class="token operator">*</span>Mar <span class="token number">18</span> <span class="token number">18</span><span class="token operator">:</span><span class="token number">00</span><span class="token operator">:</span><span class="token number">27.647</span><span class="token operator">:</span> OSPF<span class="token operator">-</span><span class="token number">2</span> LSGEN<span class="token operator">:</span> Rate limit LSA generation <span class="token keyword">for</span> <span class="token number">11.11</span><span class="token number">.11</span><span class="token number">.11</span> <span class="token number">11.11</span><span class="token number">.11</span><span class="token number">.11</span> <span class="token number">1</span>
<span class="token operator">*</span>Mar <span class="token number">18</span> <span class="token number">18</span><span class="token operator">:</span><span class="token number">00</span><span class="token operator">:</span><span class="token number">27.747</span><span class="token operator">:</span> OSPF<span class="token operator">-</span><span class="token number">2</span> LSMAX<span class="token operator">:</span> Rcv Maxage LSA<span class="token punctuation">,</span> Type <span class="token number">3</span><span class="token punctuation">,</span> LSID <span class="token number">7.7</span><span class="token number">.7</span><span class="token number">.7</span><span class="token punctuation">,</span> Adv rtr <span class="token number">11.11</span><span class="token number">.11</span><span class="token number">.11</span><span class="token punctuation">,</span> age <span class="token number">3600</span><span class="token punctuation">,</span> seq <span class="token number">0x80000001</span><span class="token punctuation">,</span> from <span class="token number">5.5</span><span class="token number">.5</span><span class="token number">.5</span><span class="token punctuation">,</span> FastEthernet0<span class="token operator">/</span><span class="token number">1</span>
<span class="token operator">*</span>Mar <span class="token number">18</span> <span class="token number">18</span><span class="token operator">:</span><span class="token number">00</span><span class="token operator">:</span><span class="token number">27.751</span><span class="token operator">:</span> OSPF<span class="token operator">-</span><span class="token number">2</span> LSGEN<span class="token operator">:</span> Update summary LSA <span class="token number">7.7</span><span class="token number">.7</span><span class="token number">.7</span> <span class="token number">11.11</span><span class="token number">.11</span><span class="token number">.11</span> <span class="token number">3</span> <span class="token number">80000001</span>
<span class="token operator">*</span>Mar <span class="token number">18</span> <span class="token number">18</span><span class="token operator">:</span><span class="token number">00</span><span class="token operator">:</span><span class="token number">27.755</span><span class="token operator">:</span> OSPF<span class="token operator">-</span><span class="token number">2</span> LSGEN<span class="token operator">:</span> Rate limit LSA generation <span class="token keyword">for</span> <span class="token number">7.7</span><span class="token number">.7</span><span class="token number">.7</span> <span class="token number">11.11</span><span class="token number">.11</span><span class="token number">.11</span> <span class="token number">3</span>
<span class="token operator">*</span>Mar <span class="token number">18</span> <span class="token number">18</span><span class="token operator">:</span><span class="token number">00</span><span class="token operator">:</span><span class="token number">27.759</span><span class="token operator">:</span> OSPF<span class="token operator">-</span><span class="token number">2</span> LSMAX<span class="token operator">:</span> Rcv Maxage LSA<span class="token punctuation">,</span> Type <span class="token number">3</span><span class="token punctuation">,</span> LSID <span class="token number">8.8</span><span class="token number">.8</span><span class="token number">.8</span><span class="token punctuation">,</span> Adv rtr <span class="token number">11.11</span><span class="token number">.11</span><span class="token number">.11</span><span class="token punctuation">,</span> age <span class="token number">3600</span><span class="token punctuation">,</span> seq <span class="token number">0x80000001</span><span class="token punctuation">,</span> from <span class="token number">5.5</span><span class="token number">.5</span><span class="token number">.5</span><span class="token punctuation">,</span> FastEthernet0<span class="token operator">/</span><span class="token number">1</span>
<span class="token operator">*</span>Mar <span class="token number">18</span> <span class="token number">18</span><span class="token operator">:</span><span class="token number">00</span><span class="token operator">:</span><span class="token number">27.763</span><span class="token operator">:</span> OSPF<span class="token operator">-</span><span class="token number">2</span> LSGEN<span class="token operator">:</span> Update summary LSA <span class="token number">8.8</span><span class="token number">.8</span><span class="token number">.8</span> <span class="token number">11.11</span><span class="token number">.11</span><span class="token number">.11</span> <span class="token number">3</span> <span class="token number">80000001</span>
<span class="token operator">*</span>Mar <span class="token number">18</span> <span class="token number">18</span><span class="token operator">:</span><span class="token number">00</span><span class="token operator">:</span><span class="token number">27.767</span><span class="token operator">:</span> OSPF<span class="token operator">-</span><span class="token number">2</span> LSGEN<span class="token operator">:</span> Rate limit LSA generation <span class="token keyword">for</span> <span class="token number">8.8</span><span class="token number">.8</span><span class="token number">.8</span> <span class="token number">11.11</span><span class="token number">.11</span><span class="token number">.11</span> <span class="token number">3</span>
<span class="token operator">*</span>Mar <span class="token number">18</span> <span class="token number">18</span><span class="token operator">:</span><span class="token number">00</span><span class="token operator">:</span><span class="token number">27.771</span><span class="token operator">:</span> OSPF<span class="token operator">-</span><span class="token number">2</span> LSMAX<span class="token operator">:</span> Rcv Maxage LSA<span class="token punctuation">,</span> Type <span class="token number">3</span><span class="token punctuation">,</span> LSID <span class="token number">44.4</span>
R1#<span class="token number">4.44</span><span class="token number">.44</span><span class="token punctuation">,</span> Adv rtr <span class="token number">11.11</span><span class="token number">.11</span><span class="token number">.11</span><span class="token punctuation">,</span> age <span class="token number">3600</span><span class="token punctuation">,</span> seq <span class="token number">0x80000005</span><span class="token punctuation">,</span> from <span class="token number">5.5</span><span class="token number">.5</span><span class="token number">.5</span><span class="token punctuation">,</span> FastEthernet0<span class="token operator">/</span><span class="token number">1</span>
<span class="token operator">*</span>Mar <span class="token number">18</span> <span class="token number">18</span><span class="token operator">:</span><span class="token number">00</span><span class="token operator">:</span><span class="token number">27.775</span><span class="token operator">:</span> OSPF<span class="token operator">-</span><span class="token number">2</span> LSGEN<span class="token operator">:</span> Update summary LSA <span class="token number">44.44</span><span class="token number">.44</span><span class="token number">.44</span> <span class="token number">11.11</span><span class="token number">.11</span><span class="token number">.11</span> <span class="token number">3</span> <span class="token number">80000005</span>
<span class="token operator">*</span>Mar <span class="token number">18</span> <span class="token number">18</span><span class="token operator">:</span><span class="token number">00</span><span class="token operator">:</span><span class="token number">27.779</span><span class="token operator">:</span> OSPF<span class="token operator">-</span><span class="token number">2</span> LSGEN<span class="token operator">:</span> Rate limit LSA generation <span class="token keyword">for</span> <span class="token number">44.44</span><span class="token number">.44</span><span class="token number">.44</span> <span class="token number">11.11</span><span class="token number">.11</span><span class="token number">.11</span> <span class="token number">3</span>
<span class="token operator">*</span>Mar <span class="token number">18</span> <span class="token number">18</span><span class="token operator">:</span><span class="token number">00</span><span class="token operator">:</span><span class="token number">27.783</span><span class="token operator">:</span> OSPF<span class="token operator">-</span><span class="token number">2</span> LSMAX<span class="token operator">:</span> Rcv Maxage LSA<span class="token punctuation">,</span> Type <span class="token number">3</span><span class="token punctuation">,</span> LSID <span class="token number">192.168</span><span class="token number">.47</span><span class="token number">.0</span><span class="token punctuation">,</span> Adv rtr <span class="token number">11.11</span><span class="token number">.11</span><span class="token number">.11</span><span class="token punctuation">,</span> age <span class="token number">3600</span><span class="token punctuation">,</span> seq <span class="token number">0x80000005</span><span class="token punctuation">,</span> from <span class="token number">5.5</span><span class="token number">.5</span><span class="token number">.5</span><span class="token punctuation">,</span> FastEthernet0<span class="token operator">/</span><span class="token number">1</span>
<span class="token operator">*</span>Mar <span class="token number">18</span> <span class="token number">18</span><span class="token operator">:</span><span class="token number">00</span><span class="token operator">:</span><span class="token number">27.787</span><span class="token operator">:</span> OSPF<span class="token operator">-</span><span class="token number">2</span> LSGEN<span class="token operator">:</span> Update summary LSA <span class="token number">192.168</span><span class="token number">.47</span><span class="token number">.0</span> <span class="token number">11.11</span><span class="token number">.11</span><span class="token number">.11</span> <span class="token number">3</span> <span class="token number">80000005</span>
<span class="token operator">*</span>Mar <span class="token number">18</span> <span class="token number">18</span><span class="token operator">:</span><span class="token number">00</span><span class="token operator">:</span><span class="token number">27.791</span><span class="token operator">:</span> OSPF<span class="token operator">-</span><span class="token number">2</span> LSGEN<span class="token operator">:</span> Rate limit LSA generation <span class="token keyword">for</span> <span class="token number">192.168</span><span class="token number">.47</span><span class="token number">.0</span> <span class="token number">11.11</span><span class="token number">.11</span><span class="token number">.11</span> <span class="token number">3</span>
<span class="token operator">*</span>Mar <span class="token number">18</span> <span class="token number">18</span><span class="token operator">:</span><span class="token number">00</span><span class="token operator">:</span><span class="token number">27.795</span><span class="token operator">:</span> OSPF<span class="token operator">-</span><span class="token number">2</span> LSMAX<span class="token operator">:</span> Rcv Maxage LSA<span class="token punctuation">,</span> Type <span class="token number">3</span><span class="token punctuation">,</span> LSID <span class="token number">192.168</span><span class="token number">.78</span><span class="token number">.0</span><span class="token punctuation">,</span> Adv rtr <span class="token number">11.11</span><span class="token number">.11</span><span class="token number">.11</span><span class="token punctuation">,</span> age <span class="token number">3600</span><span class="token punctuation">,</span> seq <span class="token number">0x80000001</span><span class="token punctuation">,</span> from <span class="token number">5.5</span><span class="token number">.5</span><span class="token number">.5</span><span class="token punctuation">,</span> FastEthernet0<span class="token operator">/</span><span class="token number">1</span>
<span class="token operator">*</span>Mar <span class="token number">18</span> <span class="token number">18</span><span class="token operator">:</span><span class="token number">00</span><span class="token operator">:</span><span class="token number">27.799</span><span class="token operator">:</span> OSPF<span class="token operator">-</span><span class="token number">2</span> LSGEN<span class="token operator">:</span> Update summary LSA <span class="token number">192.168</span><span class="token number">.78</span><span class="token number">.0</span> <span class="token number">11.11</span><span class="token number">.11</span><span class="token number">.11</span> <span class="token number">3</span> <span class="token number">80000001</span>
<span class="token operator">*</span>Mar <span class="token number">18</span> <span class="token number">18</span><span class="token operator">:</span><span class="token number">00</span><span class="token operator">:</span><span class="token number">27.803</span><span class="token operator">:</span> OSPF<span class="token operator">-</span><span class="token number">2</span> LSGEN<span class="token operator">:</span> Rate limit LSA generation <span class="token keyword">for</span> <span class="token number">192.168</span><span class="token number">.78</span><span class="token number">.0</span> <span class="token number">11.11</span><span class="token number">.11</span><span class="token number">.11</span> <span class="token number">3</span>
<span class="token operator">*</span>Mar <span class="token number">18</span> <span class="token number">18</span><span class="token operator">:</span><span class="token number">00</span><span class="token operator">:</span><span class="token number">28.611</span><span class="token operator">:</span> OSPF<span class="token operator">-</span><span class="token number">2</span> LSGEN<span class="token operator">:</span> Scheduling rtr LSA <span class="token keyword">for</span> area <span class="token number">0</span>
R1#
<span class="token operator">*</span>Mar <span class="token number">18</span> <span class="token number">18</span><span class="token operator">:</span><span class="token number">00</span><span class="token operator">:</span><span class="token number">29.111</span><span class="token operator">:</span> OSPF<span class="token operator">-</span><span class="token number">2</span> LSGEN<span class="token operator">:</span> Rate limit LSA generation <span class="token keyword">for</span> <span class="token number">11.11</span><span class="token number">.11</span><span class="token number">.11</span> <span class="token number">11.11</span><span class="token number">.11</span><span class="token number">.11</span> <span class="token number">1</span>
R1#
<span class="token operator">*</span>Mar <span class="token number">18</span> <span class="token number">18</span><span class="token operator">:</span><span class="token number">00</span><span class="token operator">:</span><span class="token number">31.779</span><span class="token operator">:</span> OSPF<span class="token operator">-</span><span class="token number">2</span> LSMAX<span class="token operator">:</span> Rcv Maxage LSA<span class="token punctuation">,</span> Type <span class="token number">1</span><span class="token punctuation">,</span> LSID <span class="token number">11.11</span><span class="token number">.11</span><span class="token number">.11</span><span class="token punctuation">,</span> Adv rtr <span class="token number">11.11</span><span class="token number">.11</span><span class="token number">.11</span><span class="token punctuation">,</span> age <span class="token number">3600</span><span class="token punctuation">,</span> seq <span class="token number">0x80000006</span><span class="token punctuation">,</span> from <span class="token number">5.5</span><span class="token number">.5</span><span class="token number">.5</span><span class="token punctuation">,</span> FastEthernet0<span class="token operator">/</span><span class="token number">1</span>
<span class="token operator">*</span>Mar <span class="token number">18</span> <span class="token number">18</span><span class="token operator">:</span><span class="token number">00</span><span class="token operator">:</span><span class="token number">31.787</span><span class="token operator">:</span> OSPF<span class="token operator">-</span><span class="token number">2</span> LSGEN<span class="token operator">:</span> Update router LSA <span class="token number">11.11</span><span class="token number">.11</span><span class="token number">.11</span> <span class="token number">11.11</span><span class="token number">.11</span><span class="token number">.11</span> <span class="token number">1</span> <span class="token number">80000006</span>
<span class="token operator">*</span>Mar <span class="token number">18</span> <span class="token number">18</span><span class="token operator">:</span><span class="token number">00</span><span class="token operator">:</span><span class="token number">31.791</span><span class="token operator">:</span> OSPF<span class="token operator">-</span><span class="token number">2</span> LSGEN<span class="token operator">:</span> Rate limit LSA generation <span class="token keyword">for</span> <span class="token number">11.11</span><span class="token number">.11</span><span class="token number">.11</span> <span class="token number">11.11</span><span class="token number">.11</span><span class="token number">.11</span> <span class="token number">1</span>
<span class="token operator">*</span>Mar <span class="token number">18</span> <span class="token number">18</span><span class="token operator">:</span><span class="token number">00</span><span class="token operator">:</span><span class="token number">32.071</span><span class="token operator">:</span> OSPF<span class="token operator">-</span><span class="token number">2</span> LSMAX<span class="token operator">:</span> Rcv Maxage LSA<span class="token punctuation">,</span> Type <span class="token number">1</span><span class="token punctuation">,</span> LSID <span class="token number">11.11</span><span class="token number">.11</span><span class="token number">.11</span><span class="token punctuation">,</span> Adv rtr <span class="token number">11.11</span><span class="token number">.11</span><span class="token number">.11</span><span class="token punctuation">,</span> age <span class="token number">3600</span><span class="token punctuation">,</span> seq <span class="token number">0x80000006</span><span class="token punctuation">,</span> from <span class="token number">5.5</span><span class="token number">.5</span><span class="token number">.5</span><span class="token punctuation">,</span> FastEthernet0<span class="token operator">/</span><span class="token number">1</span>
<span class="token operator">*</span>Mar <span class="token number">18</span> <span class="token number">18</span><span class="token operator">:</span><span class="token number">00</span><span class="token operator">:</span><span class="token number">32.075</span><span class="token operator">:</span> OSPF<span class="token operator">-</span><span class="token number">2</span> LSGEN<span class="token operator">:</span> Update router LSA <span class="token number">11.11</span><span class="token number">.11</span><span class="token number">.11</span> <span class="token number">11.11</span><span class="token number">.11</span><span class="token number">.11</span> <span class="token number">1</span> <span class="token number">80000006</span>
<span class="token operator">*</span>Mar <span class="token number">18</span> <span class="token number">18</span><span class="token operator">:</span><span class="token number">00</span><span class="token operator">:</span><span class="token number">32.079</span><span class="token operator">:</span> OSPF<span class="token operator">-</span><span class="token number">2</span> LSGEN<span class="token operator">:</span> Rate limit LSA generation <span class="token keyword">for</span> <span class="token number">11.11</span><span class="token number">.11</span><span class="token number">.11</span> <span class="token number">11.11</span><span class="token number">.11</span><span class="token number">.11</span> <span class="token number">1</span>
R1#
<span class="token operator">*</span>Mar <span class="token number">18</span> <span class="token number">18</span><span class="token operator">:</span><span class="token number">00</span><span class="token operator">:</span><span class="token number">32.107</span><span class="token operator">:</span> OSPF<span class="token operator">-</span><span class="token number">2</span> LSGEN<span class="token operator">:</span> Build router LSA <span class="token keyword">for</span> area <span class="token number">0</span><span class="token punctuation">,</span> router ID <span class="token number">11.11</span><span class="token number">.11</span><span class="token number">.11</span><span class="token punctuation">,</span> seq <span class="token number">0x80000007</span>
<span class="token operator">*</span>Mar <span class="token number">18</span> <span class="token number">18</span><span class="token operator">:</span><span class="token number">00</span><span class="token operator">:</span><span class="token number">32.715</span><span class="token operator">:</span> OSPF<span class="token operator">-</span><span class="token number">2</span> LSMAX<span class="token operator">:</span> Rcv Maxage LSA<span class="token punctuation">,</span> Type <span class="token number">3</span><span class="token punctuation">,</span> LSID <span class="token number">7.7</span><span class="token number">.7</span><span class="token number">.7</span><span class="token punctuation">,</span> Adv rtr <span class="token number">11.11</span><span class="token number">.11</span><span class="token number">.11</span><span class="token punctuation">,</span> age <span class="token number">3600</span><span class="token punctuation">,</span> seq <span class="token number">0x80000001</span><span class="token punctuation">,</span> from <span class="token number">5.5</span><span class="token number">.5</span><span class="token number">.5</span><span class="token punctuation">,</span> FastEthernet0<span class="token operator">/</span><span class="token number">1</span>
<span class="token operator">*</span>Mar <span class="token number">18</span> <span class="token number">18</span><span class="token operator">:</span><span class="token number">00</span><span class="token operator">:</span><span class="token number">32.719</span><span class="token operator">:</span> OSPF<span class="token operator">-</span><span class="token number">2</span> LSMAX<span class="token operator">:</span> Rcv Maxage LSA<span class="token punctuation">,</span> Type <span class="token number">3</span><span class="token punctuation">,</span> LSID <span class="token number">8.8</span><span class="token number">.8</span><span class="token number">.8</span><span class="token punctuation">,</span> Adv rtr <span class="token number">11.11</span><span class="token number">.11</span><span class="token number">.11</span><span class="token punctuation">,</span> age <span class="token number">3600</span><span class="token punctuation">,</span> seq <span class="token number">0x80000001</span><span class="token punctuation">,</span> from <span class="token number">5.5</span><span class="token number">.5</span><span class="token number">.5</span><span class="token punctuation">,</span> FastEthernet0<span class="token operator">/</span><span class="token number">1</span>
<span class="token operator">*</span>Mar <span class="token number">18</span> <span class="token number">18</span><span class="token operator">:</span><span class="token number">00</span><span class="token operator">:</span><span class="token number">32.723</span><span class="token operator">:</span> OSPF<span class="token operator">-</span><span class="token number">2</span> LSMAX<span class="token operator">:</span> Rcv Maxage LSA<span class="token punctuation">,</span> Type <span class="token number">3</span><span class="token punctuation">,</span> LSID <span class="token number">44.44</span><span class="token number">.44</span><span class="token number">.44</span><span class="token punctuation">,</span> Adv rtr <span class="token number">11.11</span><span class="token number">.11</span><span class="token number">.11</span><span class="token punctuation">,</span> age <span class="token number">3600</span><span class="token punctuation">,</span> seq <span class="token number">0x80000005</span><span class="token punctuation">,</span> from <span class="token number">5.5</span><span class="token number">.5</span><span class="token number">.5</span><span class="token punctuation">,</span> FastEthernet0<span class="token operator">/</span><span class="token number">1</span>
R1#
<span class="token operator">*</span>Mar <span class="token number">18</span> <span class="token number">18</span><span class="token operator">:</span><span class="token number">00</span><span class="token operator">:</span><span class="token number">32.727</span><span class="token operator">:</span> OSPF<span class="token operator">-</span><span class="token number">2</span> LSMAX<span class="token operator">:</span> Rcv Maxage LSA<span class="token punctuation">,</span> Type <span class="token number">3</span><span class="token punctuation">,</span> LSID <span class="token number">192.168</span><span class="token number">.47</span><span class="token number">.0</span><span class="token punctuation">,</span> Adv rtr <span class="token number">11.11</span><span class="token number">.11</span><span class="token number">.11</span><span class="token punctuation">,</span> age <span class="token number">3600</span><span class="token punctuation">,</span> seq <span class="token number">0x80000005</span><span class="token punctuation">,</span> from <span class="token number">5.5</span><span class="token number">.5</span><span class="token number">.5</span><span class="token punctuation">,</span> FastEthernet0<span class="token operator">/</span><span class="token number">1</span>
<span class="token operator">*</span>Mar <span class="token number">18</span> <span class="token number">18</span><span class="token operator">:</span><span class="token number">00</span><span class="token operator">:</span><span class="token number">32.727</span><span class="token operator">:</span> OSPF<span class="token operator">-</span><span class="token number">2</span> LSMAX<span class="token operator">:</span> Rcv Maxage LSA<span class="token punctuation">,</span> Type <span class="token number">3</span><span class="token punctuation">,</span> LSID <span class="token number">192.168</span><span class="token number">.78</span><span class="token number">.0</span><span class="token punctuation">,</span> Adv rtr <span class="token number">11.11</span><span class="token number">.11</span><span class="token number">.11</span><span class="token punctuation">,</span> age <span class="token number">3600</span><span class="token punctuation">,</span> seq <span class="token number">0x80000001</span><span class="token punctuation">,</span> from <span class="token number">5.5</span><span class="token number">.5</span><span class="token number">.5</span><span class="token punctuation">,</span> FastEthernet0<span class="token operator">/</span><span class="token number">1</span>
<span class="token comment">//可以看到，正如之前的结论，PE1（R1）收到关于VPN A站点2中前缀的LSA是类型3的LSA；</span>
<span class="token comment">//证实了PE2（R4）将这些类型为1和2的LSA转换为类型3的LSA后，再将其发送给PE1（R1）；</span></code></pre>

<h2 id="实验2：OSPF-Sham-Link-in-MPLS-VPN"><a href="#实验2：OSPF-Sham-Link-in-MPLS-VPN" class="headerlink" title="实验2：OSPF Sham Link in MPLS VPN"></a>实验2：OSPF Sham Link in MPLS VPN</h2><h3 id="理论概述："><a href="#理论概述：" class="headerlink" title="理论概述："></a>理论概述：</h3><p>在OSPF看来，MPLS VPN超骨干网络超越了OSPF骨干区域Area0，MPLS VPN超骨干网络神似OSPF骨干区域Area0，<br>但它又和OSPF骨干区域Area0不同，所以PE路由器会执行ABR的功能，会将类型为1和2的LSA转换为类型3的LSA；<br>所以当PE在收到来自对端远程PE发来的OSPF区域内路由（O）时，会将OSPF区域内路由转换为OSPF区域间路由（O IA）。<br>为了避免PE将类型1和类型2的LSA转换为类型3的LSA，可以在PE之间创建OSPF Sham Link；这样，当LSA在Sham Link中<br>进行洪泛时，所有的OSPF路由类型都不会改变，不会转变为类型3或者类型5的LSA；</p>
<h3 id="配置："><a href="#配置：" class="headerlink" title="配置："></a>配置：</h3><p>在PE上配置OSPF Sham Link；</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>#router ospf <span class="token number">2</span> vrf A<span class="token operator">-</span>Site1
<span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span>#area <span class="token number">0</span> sham<span class="token operator">-</span>link <span class="token number">11.11</span><span class="token number">.11</span><span class="token number">.11</span> <span class="token number">44.44</span><span class="token number">.44</span><span class="token number">.44</span>
<span class="token comment">//注意：必须将Sham Link的源地址和目的地址所在的接口划分进VRF；</span>

<span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>#router ospf <span class="token number">2</span> vrf A<span class="token operator">-</span>Site2
<span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span>#area <span class="token number">0</span> sham<span class="token operator">-</span>link <span class="token number">44.44</span><span class="token number">.44</span><span class="token number">.44</span> <span class="token number">11.11</span><span class="token number">.11</span><span class="token number">.11</span></code></pre>

<p><strong>注意：在OSPF VRF进程中配置完sham link后发现sham link反复震荡；</strong></p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token operator">*</span>Mar <span class="token number">20</span> <span class="token number">15</span><span class="token operator">:</span><span class="token number">39</span><span class="token operator">:</span><span class="token number">37.859</span><span class="token operator">:</span> <span class="token operator">%</span>OSPF<span class="token operator">-</span><span class="token number">5</span><span class="token operator">-</span>ADJCHG<span class="token operator">:</span> Process <span class="token number">2</span><span class="token punctuation">,</span> Nbr <span class="token number">11.11</span><span class="token number">.11</span><span class="token number">.11</span> on OSPF_SL0 from LOADING to FULL<span class="token punctuation">,</span> Loading Done
<span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>#
<span class="token operator">*</span>Mar <span class="token number">20</span> <span class="token number">15</span><span class="token operator">:</span><span class="token number">39</span><span class="token operator">:</span><span class="token number">42.979</span><span class="token operator">:</span> <span class="token operator">%</span>OSPF<span class="token operator">-</span><span class="token number">5</span><span class="token operator">-</span>ADJCHG<span class="token operator">:</span> Process <span class="token number">2</span><span class="token punctuation">,</span> Nbr <span class="token number">11.11</span><span class="token number">.11</span><span class="token number">.11</span> on OSPF_SL0 from FULL to DOWN<span class="token punctuation">,</span> Neighbor Down<span class="token operator">:</span> Interface down or detached
<span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span># 
<span class="token operator">*</span>Mar <span class="token number">20</span> <span class="token number">15</span><span class="token operator">:</span><span class="token number">39</span><span class="token operator">:</span><span class="token number">48.703</span><span class="token operator">:</span> <span class="token operator">%</span>OSPF<span class="token operator">-</span><span class="token number">5</span><span class="token operator">-</span>ADJCHG<span class="token operator">:</span> Process <span class="token number">2</span><span class="token punctuation">,</span> Nbr <span class="token number">11.11</span><span class="token number">.11</span><span class="token number">.11</span> on OSPF_SL0 from LOADING to FULL<span class="token punctuation">,</span> Loading Done
<span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>#
<span class="token operator">*</span>Mar <span class="token number">20</span> <span class="token number">15</span><span class="token operator">:</span><span class="token number">39</span><span class="token operator">:</span><span class="token number">52.999</span><span class="token operator">:</span> <span class="token operator">%</span>OSPF<span class="token operator">-</span><span class="token number">5</span><span class="token operator">-</span>ADJCHG<span class="token operator">:</span> Process <span class="token number">2</span><span class="token punctuation">,</span> Nbr <span class="token number">11.11</span><span class="token number">.11</span><span class="token number">.11</span> on OSPF_SL0 from FULL to DOWN<span class="token punctuation">,</span> Neighbor Down<span class="token operator">:</span> Interface down or detached
<span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>#
<span class="token operator">*</span>Mar <span class="token number">20</span> <span class="token number">15</span><span class="token operator">:</span><span class="token number">39</span><span class="token operator">:</span><span class="token number">58.743</span><span class="token operator">:</span> <span class="token operator">%</span>OSPF<span class="token operator">-</span><span class="token number">5</span><span class="token operator">-</span>ADJCHG<span class="token operator">:</span> Process <span class="token number">2</span><span class="token punctuation">,</span> Nbr <span class="token number">11.11</span><span class="token number">.11</span><span class="token number">.11</span> on OSPF_SL0 from LOADING to FULL<span class="token punctuation">,</span> Loading Done
<span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>#
<span class="token operator">*</span>Mar <span class="token number">20</span> <span class="token number">15</span><span class="token operator">:</span><span class="token number">40</span><span class="token operator">:</span><span class="token number">03.011</span><span class="token operator">:</span> <span class="token operator">%</span>OSPF<span class="token operator">-</span><span class="token number">5</span><span class="token operator">-</span>ADJCHG<span class="token operator">:</span> Process <span class="token number">2</span><span class="token punctuation">,</span> Nbr <span class="token number">11.11</span><span class="token number">.11</span><span class="token number">.11</span> on OSPF_SL0 from FULL to DOWN<span class="token punctuation">,</span> Neighbor Down<span class="token operator">:</span> Interface down or detached
<span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>#
<span class="token operator">*</span>Mar <span class="token number">20</span> <span class="token number">15</span><span class="token operator">:</span><span class="token number">40</span><span class="token operator">:</span><span class="token number">08.879</span><span class="token operator">:</span> <span class="token operator">%</span>OSPF<span class="token operator">-</span><span class="token number">5</span><span class="token operator">-</span>ADJCHG<span class="token operator">:</span> Process <span class="token number">2</span><span class="token punctuation">,</span> Nbr <span class="token number">11.11</span><span class="token number">.11</span><span class="token number">.11</span> on OSPF_SL0 from LOADING to FULL<span class="token punctuation">,</span> Loading Done
<span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>#
<span class="token operator">*</span>Mar <span class="token number">20</span> <span class="token number">15</span><span class="token operator">:</span><span class="token number">40</span><span class="token operator">:</span><span class="token number">13.039</span><span class="token operator">:</span> <span class="token operator">%</span>OSPF<span class="token operator">-</span><span class="token number">5</span><span class="token operator">-</span>ADJCHG<span class="token operator">:</span> Process <span class="token number">2</span><span class="token punctuation">,</span> Nbr <span class="token number">11.11</span><span class="token number">.11</span><span class="token number">.11</span> on OSPF_SL0 from FULL to DOWN<span class="token punctuation">,</span> Neighbor Down<span class="token operator">:</span> Interface down or detached
<span class="token comment">//注意：必须在PE上将各自用作Sham Link的源地址的接口地址通告进MP-BGP的IPv4 VRF地址族，否则Sham Link会反复震荡；</span></code></pre>

<p>将接口Loopback1的地址以路由的形式通告进MP-BGP的IPv4 VRF地址族；</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>#router bgp <span class="token number">1</span>
<span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span>#address<span class="token operator">-</span>family ipv4 vrf A<span class="token operator">-</span>Site1
<span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token operator">-</span>af<span class="token punctuation">)</span>#network <span class="token number">11.11</span><span class="token number">.11</span><span class="token number">.11</span> mask <span class="token number">255.255</span><span class="token number">.255</span><span class="token number">.255</span>

<span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>#router bgp <span class="token number">1</span>
<span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span>#address<span class="token operator">-</span>family ipv4 vrf A<span class="token operator">-</span>Site2
<span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token operator">-</span>af<span class="token punctuation">)</span>#network <span class="token number">44.44</span><span class="token number">.44</span><span class="token number">.44</span> mask <span class="token number">255.255</span><span class="token number">.255</span><span class="token number">.255</span></code></pre>

<p>注意：在将接口Loopback1的地址以路由的形式通告进MP-BGP的IPv4 VRF地址族，发现Sham Link依旧反复震荡；</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>#
<span class="token operator">*</span>Mar <span class="token number">20</span> <span class="token number">15</span><span class="token operator">:</span><span class="token number">39</span><span class="token operator">:</span><span class="token number">58.743</span><span class="token operator">:</span> <span class="token operator">%</span>OSPF<span class="token operator">-</span><span class="token number">5</span><span class="token operator">-</span>ADJCHG<span class="token operator">:</span> Process <span class="token number">2</span><span class="token punctuation">,</span> Nbr <span class="token number">11.11</span><span class="token number">.11</span><span class="token number">.11</span> on OSPF_SL0 from LOADING to FULL<span class="token punctuation">,</span> Loading Done
<span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>#
<span class="token operator">*</span>Mar <span class="token number">20</span> <span class="token number">15</span><span class="token operator">:</span><span class="token number">40</span><span class="token operator">:</span><span class="token number">03.011</span><span class="token operator">:</span> <span class="token operator">%</span>OSPF<span class="token operator">-</span><span class="token number">5</span><span class="token operator">-</span>ADJCHG<span class="token operator">:</span> Process <span class="token number">2</span><span class="token punctuation">,</span> Nbr <span class="token number">11.11</span><span class="token number">.11</span><span class="token number">.11</span> on OSPF_SL0 from FULL to DOWN<span class="token punctuation">,</span> Neighbor Down<span class="token operator">:</span> Interface down or detached
<span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>#
<span class="token operator">*</span>Mar <span class="token number">20</span> <span class="token number">15</span><span class="token operator">:</span><span class="token number">40</span><span class="token operator">:</span><span class="token number">08.879</span><span class="token operator">:</span> <span class="token operator">%</span>OSPF<span class="token operator">-</span><span class="token number">5</span><span class="token operator">-</span>ADJCHG<span class="token operator">:</span> Process <span class="token number">2</span><span class="token punctuation">,</span> Nbr <span class="token number">11.11</span><span class="token number">.11</span><span class="token number">.11</span> on OSPF_SL0 from LOADING to FULL<span class="token punctuation">,</span> Loading Done
<span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>#
<span class="token operator">*</span>Mar <span class="token number">20</span> <span class="token number">15</span><span class="token operator">:</span><span class="token number">40</span><span class="token operator">:</span><span class="token number">13.039</span><span class="token operator">:</span> <span class="token operator">%</span>OSPF<span class="token operator">-</span><span class="token number">5</span><span class="token operator">-</span>ADJCHG<span class="token operator">:</span> Process <span class="token number">2</span><span class="token punctuation">,</span> Nbr <span class="token number">11.11</span><span class="token number">.11</span><span class="token number">.11</span> on OSPF_SL0 from FULL to DOWN<span class="token punctuation">,</span> Neighbor Down<span class="token operator">:</span> Interface down or detached
<span class="token comment">//注意：作为Sham Link源地址和目的地址的接口不能被通告进OSPF VRF进程；</span></code></pre>
<p>将作为Sham Link源地址，并且同时也作为了对方PE Sham Link目的地址的接口移除OSPF VRF进程；</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>#router ospf <span class="token number">2</span> vrf A<span class="token operator">-</span>Site1               
<span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span>#no network <span class="token number">11.11</span><span class="token number">.11</span><span class="token number">.11</span> <span class="token number">0.0</span><span class="token number">.0</span><span class="token number">.0</span> area <span class="token number">0</span>

<span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>#router ospf <span class="token number">2</span> vrf A<span class="token operator">-</span>Site2
<span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span>#no network <span class="token number">44.44</span><span class="token number">.44</span><span class="token number">.44</span> <span class="token number">0.0</span><span class="token number">.0</span><span class="token number">.0</span> area <span class="token number">0</span></code></pre>

<p><strong>OSPF Sham Link持续稳定！</strong></p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span>#
<span class="token operator">*</span>Mar <span class="token number">20</span> <span class="token number">16</span><span class="token operator">:</span><span class="token number">19</span><span class="token operator">:</span><span class="token number">35.779</span><span class="token operator">:</span> <span class="token operator">%</span>OSPF<span class="token operator">-</span><span class="token number">5</span><span class="token operator">-</span>ADJCHG<span class="token operator">:</span> Process <span class="token number">2</span><span class="token punctuation">,</span> Nbr <span class="token number">44.44</span><span class="token number">.44</span><span class="token number">.44</span> on OSPF_SL0 from LOADING to FULL<span class="token punctuation">,</span> Loading Done

<span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span>#
<span class="token operator">*</span>Mar <span class="token number">20</span> <span class="token number">16</span><span class="token operator">:</span><span class="token number">19</span><span class="token operator">:</span><span class="token number">36.067</span><span class="token operator">:</span> <span class="token operator">%</span>OSPF<span class="token operator">-</span><span class="token number">5</span><span class="token operator">-</span>ADJCHG<span class="token operator">:</span> Process <span class="token number">2</span><span class="token punctuation">,</span> Nbr <span class="token number">11.11</span><span class="token number">.11</span><span class="token number">.11</span> on OSPF_SL0 from LOADING to FULL<span class="token punctuation">,</span> Loading Done</code></pre>

<h3 id="验证与调试："><a href="#验证与调试：" class="headerlink" title="验证与调试："></a>验证与调试：</h3><p>查看R6的路由表；</p>
<pre class="language-c" data-language="c"><code class="language-c">R6#sh ip route
Codes<span class="token operator">:</span> L <span class="token operator">-</span> local<span class="token punctuation">,</span> C <span class="token operator">-</span> connected<span class="token punctuation">,</span> S <span class="token operator">-</span> <span class="token keyword">static</span><span class="token punctuation">,</span> R <span class="token operator">-</span> RIP<span class="token punctuation">,</span> M <span class="token operator">-</span> mobile<span class="token punctuation">,</span> B <span class="token operator">-</span> BGP
        D <span class="token operator">-</span> EIGRP<span class="token punctuation">,</span> EX <span class="token operator">-</span> EIGRP external<span class="token punctuation">,</span> O <span class="token operator">-</span> OSPF<span class="token punctuation">,</span> IA <span class="token operator">-</span> OSPF inter area 
        N1 <span class="token operator">-</span> OSPF NSSA external type <span class="token number">1</span><span class="token punctuation">,</span> N2 <span class="token operator">-</span> OSPF NSSA external type <span class="token number">2</span>
        E1 <span class="token operator">-</span> OSPF external type <span class="token number">1</span><span class="token punctuation">,</span> E2 <span class="token operator">-</span> OSPF external type <span class="token number">2</span>
        i <span class="token operator">-</span> IS<span class="token operator">-</span>IS<span class="token punctuation">,</span> su <span class="token operator">-</span> IS<span class="token operator">-</span>IS summary<span class="token punctuation">,</span> L1 <span class="token operator">-</span> IS<span class="token operator">-</span>IS level<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> L2 <span class="token operator">-</span> IS<span class="token operator">-</span>IS level<span class="token operator">-</span><span class="token number">2</span>
        ia <span class="token operator">-</span> IS<span class="token operator">-</span>IS inter area<span class="token punctuation">,</span> <span class="token operator">*</span> <span class="token operator">-</span> candidate <span class="token keyword">default</span><span class="token punctuation">,</span> U <span class="token operator">-</span> per<span class="token operator">-</span>user <span class="token keyword">static</span> route
        o <span class="token operator">-</span> ODR<span class="token punctuation">,</span> P <span class="token operator">-</span> periodic downloaded <span class="token keyword">static</span> route<span class="token punctuation">,</span> H <span class="token operator">-</span> NHRP<span class="token punctuation">,</span> l <span class="token operator">-</span> LISP
        <span class="token operator">+</span> <span class="token operator">-</span> replicated route<span class="token punctuation">,</span> <span class="token operator">%</span> <span class="token operator">-</span> next hop override
Gateway of last resort is not set
        <span class="token number">5.0</span><span class="token number">.0</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">32</span> is subnetted<span class="token punctuation">,</span> <span class="token number">1</span> subnets
O        <span class="token number">5.5</span><span class="token number">.5</span><span class="token number">.5</span> <span class="token punctuation">[</span><span class="token number">110</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">]</span> via <span class="token number">192.168</span><span class="token number">.56</span><span class="token number">.5</span><span class="token punctuation">,</span> <span class="token number">00</span><span class="token operator">:</span><span class="token number">57</span><span class="token operator">:</span><span class="token number">04</span><span class="token punctuation">,</span> FastEthernet0<span class="token operator">/</span><span class="token number">0</span>
        <span class="token number">6.0</span><span class="token number">.0</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">32</span> is subnetted<span class="token punctuation">,</span> <span class="token number">1</span> subnets
C        <span class="token number">6.6</span><span class="token number">.6</span><span class="token number">.6</span> is directly connected<span class="token punctuation">,</span> Loopback0
        <span class="token number">7.0</span><span class="token number">.0</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">32</span> is subnetted<span class="token punctuation">,</span> <span class="token number">1</span> subnets
O        <span class="token number">7.7</span><span class="token number">.7</span><span class="token number">.7</span> <span class="token punctuation">[</span><span class="token number">110</span><span class="token operator">/</span><span class="token number">5</span><span class="token punctuation">]</span> via <span class="token number">192.168</span><span class="token number">.56</span><span class="token number">.5</span><span class="token punctuation">,</span> <span class="token number">00</span><span class="token operator">:</span><span class="token number">10</span><span class="token operator">:</span><span class="token number">36</span><span class="token punctuation">,</span> FastEthernet0<span class="token operator">/</span><span class="token number">0</span>
        <span class="token number">8.0</span><span class="token number">.0</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">32</span> is subnetted<span class="token punctuation">,</span> <span class="token number">1</span> subnets
O        <span class="token number">8.8</span><span class="token number">.8</span><span class="token number">.8</span> <span class="token punctuation">[</span><span class="token number">110</span><span class="token operator">/</span><span class="token number">6</span><span class="token punctuation">]</span> via <span class="token number">192.168</span><span class="token number">.56</span><span class="token number">.5</span><span class="token punctuation">,</span> <span class="token number">00</span><span class="token operator">:</span><span class="token number">10</span><span class="token operator">:</span><span class="token number">36</span><span class="token punctuation">,</span> FastEthernet0<span class="token operator">/</span><span class="token number">0</span>
        <span class="token number">11.0</span><span class="token number">.0</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">32</span> is subnetted<span class="token punctuation">,</span> <span class="token number">1</span> subnets
O E2     <span class="token number">11.11</span><span class="token number">.11</span><span class="token number">.11</span> <span class="token punctuation">[</span><span class="token number">110</span><span class="token operator">/</span><span class="token number">1</span><span class="token punctuation">]</span> via <span class="token number">192.168</span><span class="token number">.56</span><span class="token number">.5</span><span class="token punctuation">,</span> <span class="token number">00</span><span class="token operator">:</span><span class="token number">18</span><span class="token operator">:</span><span class="token number">37</span><span class="token punctuation">,</span> FastEthernet0<span class="token operator">/</span><span class="token number">0</span>
        <span class="token number">44.0</span><span class="token number">.0</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">32</span> is subnetted<span class="token punctuation">,</span> <span class="token number">1</span> subnets
O E2     <span class="token number">44.44</span><span class="token number">.44</span><span class="token number">.44</span> <span class="token punctuation">[</span><span class="token number">110</span><span class="token operator">/</span><span class="token number">1</span><span class="token punctuation">]</span> via <span class="token number">192.168</span><span class="token number">.56</span><span class="token number">.5</span><span class="token punctuation">,</span> <span class="token number">00</span><span class="token operator">:</span><span class="token number">10</span><span class="token operator">:</span><span class="token number">36</span><span class="token punctuation">,</span> FastEthernet0<span class="token operator">/</span><span class="token number">0</span>
O     <span class="token number">192.168</span><span class="token number">.15</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span> <span class="token punctuation">[</span><span class="token number">110</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">]</span> via <span class="token number">192.168</span><span class="token number">.56</span><span class="token number">.5</span><span class="token punctuation">,</span> <span class="token number">00</span><span class="token operator">:</span><span class="token number">57</span><span class="token operator">:</span><span class="token number">04</span><span class="token punctuation">,</span> FastEthernet0<span class="token operator">/</span><span class="token number">0</span>
O     <span class="token number">192.168</span><span class="token number">.47</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span> <span class="token punctuation">[</span><span class="token number">110</span><span class="token operator">/</span><span class="token number">4</span><span class="token punctuation">]</span> via <span class="token number">192.168</span><span class="token number">.56</span><span class="token number">.5</span><span class="token punctuation">,</span> <span class="token number">00</span><span class="token operator">:</span><span class="token number">10</span><span class="token operator">:</span><span class="token number">36</span><span class="token punctuation">,</span> FastEthernet0<span class="token operator">/</span><span class="token number">0</span>
        <span class="token number">192.168</span><span class="token number">.56</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span> is variably subnetted<span class="token punctuation">,</span> <span class="token number">2</span> subnets<span class="token punctuation">,</span> <span class="token number">2</span> masks
C        <span class="token number">192.168</span><span class="token number">.56</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span> is directly connected<span class="token punctuation">,</span> FastEthernet0<span class="token operator">/</span><span class="token number">0</span>
L        <span class="token number">192.168</span><span class="token number">.56</span><span class="token number">.6</span><span class="token operator">/</span><span class="token number">32</span> is directly connected<span class="token punctuation">,</span> FastEthernet0<span class="token operator">/</span><span class="token number">0</span>
O     <span class="token number">192.168</span><span class="token number">.78</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span> <span class="token punctuation">[</span><span class="token number">110</span><span class="token operator">/</span><span class="token number">5</span><span class="token punctuation">]</span> via <span class="token number">192.168</span><span class="token number">.56</span><span class="token number">.5</span><span class="token punctuation">,</span> <span class="token number">00</span><span class="token operator">:</span><span class="token number">10</span><span class="token operator">:</span><span class="token number">36</span><span class="token punctuation">,</span> FastEthernet0<span class="token operator">/</span><span class="token number">0</span></code></pre>
<p>注意到，现在关于R6上看到关于站点2的路由就变成了OSPF区域内路由（O）；但是，由于关于11.11.11.11&#x2F;32和44.44.44.44&#x2F;32的路由，由于它们并不是在OSPF里进行通告的,而是通告进BGP，然后才被重分发进OSPF的，所以都变成了OSPF外部路由（O E2）；</p>
]]></content>
      <categories>
        <category>Network</category>
      </categories>
      <tags>
        <tag>MPLS</tag>
        <tag>Network</tag>
      </tags>
  </entry>
  <entry>
    <title>MPLS 实验9：OSPF Sham Link and Backdoor Link in MPLS VPN</title>
    <url>/2014/MPLS_Lab_9/</url>
    <content><![CDATA[<h1 id="实验环境："><a href="#实验环境：" class="headerlink" title="实验环境："></a>实验环境：</h1><ul>
<li>模拟器：GNS3 0.8.6</li>
<li>Cisco IOS：c7200-adventerprisek9-mz.151-4.M2.image</li>
</ul>
<h1 id="实验拓扑："><a href="#实验拓扑：" class="headerlink" title="实验拓扑："></a>实验拓扑：</h1><p><img src="/2014/MPLS_Lab_9/topo.png"></p>
<span id="more"></span>

<h1 id="基本预配置："><a href="#基本预配置：" class="headerlink" title="基本预配置："></a>基本预配置：</h1><h2 id="R1："><a href="#R1：" class="headerlink" title="R1："></a>R1：</h2><pre class="language-c" data-language="c"><code class="language-c">hostname R1
<span class="token operator">!</span>
ip cef
<span class="token operator">!</span>
ip vrf A<span class="token operator">-</span>Site1
    rd <span class="token number">1</span><span class="token operator">:</span><span class="token number">1</span>
    route<span class="token operator">-</span>target export <span class="token number">1</span><span class="token operator">:</span><span class="token number">1</span>
    route<span class="token operator">-</span>target import <span class="token number">1</span><span class="token operator">:</span><span class="token number">1</span>
<span class="token operator">!</span>
mpls label protocol ldp
<span class="token operator">!</span>
interface Loopback0
    ip address <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span> <span class="token number">255.255</span><span class="token number">.255</span><span class="token number">.255</span>
    ip ospf <span class="token number">1</span> area <span class="token number">0</span>
<span class="token operator">!</span>
interface Loopback1
    ip vrf forwarding A<span class="token operator">-</span>Site1
    ip address <span class="token number">11.11</span><span class="token number">.11</span><span class="token number">.11</span> <span class="token number">255.255</span><span class="token number">.255</span><span class="token number">.255</span>
<span class="token operator">!</span>
interface FastEthernet0<span class="token operator">/</span><span class="token number">0</span>
    ip address <span class="token number">192.168</span><span class="token number">.12</span><span class="token number">.1</span> <span class="token number">255.255</span><span class="token number">.255</span><span class="token number">.0</span>
    ip ospf <span class="token number">1</span> area <span class="token number">0</span>
    no shutdown
mpls ip  
<span class="token operator">!</span>
interface FastEthernet0<span class="token operator">/</span><span class="token number">1</span>
    ip vrf forwarding A<span class="token operator">-</span>Site1
    ip address <span class="token number">192.168</span><span class="token number">.13</span><span class="token number">.1</span> <span class="token number">255.255</span><span class="token number">.255</span><span class="token number">.0</span>
    ip ospf <span class="token number">2</span> area <span class="token number">0</span>
    no shutdown
<span class="token operator">!</span>
router ospf <span class="token number">2</span> vrf A<span class="token operator">-</span>Site1
    router<span class="token operator">-</span>id <span class="token number">11.11</span><span class="token number">.11</span><span class="token number">.11</span>
    redistribute bgp <span class="token number">1</span> subnets
<span class="token operator">!</span>
router ospf <span class="token number">1</span>
    router<span class="token operator">-</span>id <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span>
<span class="token operator">!</span>
router bgp <span class="token number">1</span>
    bgp log<span class="token operator">-</span>neighbor<span class="token operator">-</span>changes
    neighbor <span class="token number">2.2</span><span class="token number">.2</span><span class="token number">.2</span> remote<span class="token operator">-</span>as <span class="token number">1</span>
    neighbor <span class="token number">2.2</span><span class="token number">.2</span><span class="token number">.2</span> update<span class="token operator">-</span>source Loopback0
    neighbor <span class="token number">2.2</span><span class="token number">.2</span><span class="token number">.2</span> next<span class="token operator">-</span>hop<span class="token operator">-</span>self
    <span class="token operator">!</span>
    address<span class="token operator">-</span>family vpnv4
    neighbor <span class="token number">2.2</span><span class="token number">.2</span><span class="token number">.2</span> activate
    neighbor <span class="token number">2.2</span><span class="token number">.2</span><span class="token number">.2</span> send<span class="token operator">-</span>community both
    exit<span class="token operator">-</span>address<span class="token operator">-</span>family
    <span class="token operator">!</span>
    address<span class="token operator">-</span>family ipv4 vrf A<span class="token operator">-</span>Site1
    redistribute connected
    redistribute ospf <span class="token number">2</span> match internal external <span class="token number">1</span> external <span class="token number">2</span>
    exit<span class="token operator">-</span>address<span class="token operator">-</span>family
<span class="token operator">!</span>
mpls ldp router<span class="token operator">-</span>id Loopback0 force
<span class="token operator">!</span>
line con <span class="token number">0</span>
    exec<span class="token operator">-</span>timeout <span class="token number">0</span> <span class="token number">0</span>
    logging synchronous
<span class="token operator">!</span>
end</code></pre>

<h2 id="R2"><a href="#R2" class="headerlink" title="R2:"></a>R2:</h2><pre class="language-c" data-language="c"><code class="language-c">hostname R2
<span class="token operator">!</span>
ip cef
<span class="token operator">!</span>
ip vrf A<span class="token operator">-</span>Site2
    rd <span class="token number">1</span><span class="token operator">:</span><span class="token number">2</span>
    route<span class="token operator">-</span>target export <span class="token number">1</span><span class="token operator">:</span><span class="token number">1</span>
    route<span class="token operator">-</span>target import <span class="token number">1</span><span class="token operator">:</span><span class="token number">1</span>
<span class="token operator">!</span>
mpls label protocol ldp
<span class="token operator">!</span>
interface Loopback0
    ip address <span class="token number">2.2</span><span class="token number">.2</span><span class="token number">.2</span> <span class="token number">255.255</span><span class="token number">.255</span><span class="token number">.255</span>
    ip ospf <span class="token number">1</span> area <span class="token number">0</span>
<span class="token operator">!</span>
interface Loopback1
    ip vrf forwarding A<span class="token operator">-</span>Site2
    ip address <span class="token number">22.22</span><span class="token number">.22</span><span class="token number">.22</span> <span class="token number">255.255</span><span class="token number">.255</span><span class="token number">.255</span>
<span class="token operator">!</span>
interface FastEthernet0<span class="token operator">/</span><span class="token number">0</span>
    ip address <span class="token number">192.168</span><span class="token number">.12</span><span class="token number">.2</span> <span class="token number">255.255</span><span class="token number">.255</span><span class="token number">.0</span>
    ip ospf <span class="token number">1</span> area <span class="token number">0</span>
    no shutdown
mpls ip  
<span class="token operator">!</span>
interface FastEthernet0<span class="token operator">/</span><span class="token number">1</span>
    ip vrf forwarding A<span class="token operator">-</span>Site2
    ip address <span class="token number">192.168</span><span class="token number">.24</span><span class="token number">.2</span> <span class="token number">255.255</span><span class="token number">.255</span><span class="token number">.0</span>
    ip ospf <span class="token number">2</span> area <span class="token number">0</span>
    no shutdown
<span class="token operator">!</span>
router ospf <span class="token number">2</span> vrf A<span class="token operator">-</span>Site2
    router<span class="token operator">-</span>id <span class="token number">22.22</span><span class="token number">.22</span><span class="token number">.22</span>
    redistribute bgp <span class="token number">1</span> subnets
<span class="token operator">!</span>
router ospf <span class="token number">1</span>
    router<span class="token operator">-</span>id <span class="token number">2.2</span><span class="token number">.2</span><span class="token number">.2</span>
<span class="token operator">!</span>
router bgp <span class="token number">1</span>
    bgp log<span class="token operator">-</span>neighbor<span class="token operator">-</span>changes
    neighbor <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span> remote<span class="token operator">-</span>as <span class="token number">1</span>
    neighbor <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span> update<span class="token operator">-</span>source Loopback0
    neighbor <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span> next<span class="token operator">-</span>hop<span class="token operator">-</span>self
    <span class="token operator">!</span>
    address<span class="token operator">-</span>family vpnv4
    neighbor <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span> activate
    neighbor <span class="token number">1.1</span><span class="token number">.1</span><span class="token number">.1</span> send<span class="token operator">-</span>community both
    exit<span class="token operator">-</span>address<span class="token operator">-</span>family
    <span class="token operator">!</span>
    address<span class="token operator">-</span>family ipv4 vrf A<span class="token operator">-</span>Site2
    redistribute connected
    redistribute ospf <span class="token number">2</span> match internal external <span class="token number">1</span> external <span class="token number">2</span>
    exit<span class="token operator">-</span>address<span class="token operator">-</span>family
<span class="token operator">!</span>
mpls ldp router<span class="token operator">-</span>id Loopback0 force
<span class="token operator">!</span>
line con <span class="token number">0</span>
    exec<span class="token operator">-</span>timeout <span class="token number">0</span> <span class="token number">0</span>

    logging synchronous
<span class="token operator">!</span>
end</code></pre>
<h2 id="R3"><a href="#R3" class="headerlink" title="R3:"></a>R3:</h2><pre class="language-c" data-language="c"><code class="language-c">hostname R3
<span class="token operator">!</span>
ip cef
<span class="token operator">!</span>
interface Loopback0
    ip address <span class="token number">3.3</span><span class="token number">.3</span><span class="token number">.3</span> <span class="token number">255.255</span><span class="token number">.255</span><span class="token number">.255</span>
    ip ospf <span class="token number">1</span> area <span class="token number">0</span>
<span class="token operator">!</span>
interface FastEthernet0<span class="token operator">/</span><span class="token number">1</span>
    ip address <span class="token number">192.168</span><span class="token number">.13</span><span class="token number">.3</span> <span class="token number">255.255</span><span class="token number">.255</span><span class="token number">.0</span>
    ip ospf <span class="token number">1</span> area <span class="token number">0</span>
    no shutdown
<span class="token operator">!</span>
interface Serial1<span class="token operator">/</span><span class="token number">0</span>
    ip address <span class="token number">192.168</span><span class="token number">.34</span><span class="token number">.3</span> <span class="token number">255.255</span><span class="token number">.255</span><span class="token number">.0</span>
    ip ospf <span class="token number">1</span> area <span class="token number">0</span>
    no shutdown
    clock rate <span class="token number">64000</span>
<span class="token operator">!</span>
router ospf <span class="token number">1</span>
    router<span class="token operator">-</span>id <span class="token number">3.3</span><span class="token number">.3</span><span class="token number">.3</span>
<span class="token operator">!</span>
line con <span class="token number">0</span>
    exec<span class="token operator">-</span>timeout <span class="token number">0</span> <span class="token number">0</span>
    logging synchronous
<span class="token operator">!</span>
end</code></pre>
<h2 id="R4"><a href="#R4" class="headerlink" title="R4:"></a>R4:</h2><pre class="language-c" data-language="c"><code class="language-c">hostname R4
<span class="token operator">!</span>
ip cef
<span class="token operator">!</span>
interface Loopback0
    ip address <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span> <span class="token number">255.255</span><span class="token number">.255</span><span class="token number">.255</span>
    ip ospf <span class="token number">1</span> area <span class="token number">0</span>
<span class="token operator">!</span>
interface FastEthernet0<span class="token operator">/</span><span class="token number">1</span>
    ip address <span class="token number">192.168</span><span class="token number">.24</span><span class="token number">.4</span> <span class="token number">255.255</span><span class="token number">.255</span><span class="token number">.0</span>
    ip ospf <span class="token number">1</span> area <span class="token number">0</span>
    no shutdown
<span class="token operator">!</span>
interface Serial1<span class="token operator">/</span><span class="token number">0</span>
    ip address <span class="token number">192.168</span><span class="token number">.34</span><span class="token number">.4</span> <span class="token number">255.255</span><span class="token number">.255</span><span class="token number">.0</span>
    ip ospf <span class="token number">1</span> area <span class="token number">0</span>
    no shutdown
<span class="token operator">!</span>
router ospf <span class="token number">1</span>
    router<span class="token operator">-</span>id <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span>
<span class="token operator">!</span>
line con <span class="token number">0</span>
    exec<span class="token operator">-</span>timeout <span class="token number">0</span> <span class="token number">0</span>
    logging synchronous
<span class="token operator">!</span>
end</code></pre>
<h1 id="实验与调试："><a href="#实验与调试：" class="headerlink" title="实验与调试："></a>实验与调试：</h1><h2 id="实验1：当在VPN站点之间存在后门备份链路时，使用OSPF-Sham-Link解决后门链路优先于MPLS-VPN链路的问题；"><a href="#实验1：当在VPN站点之间存在后门备份链路时，使用OSPF-Sham-Link解决后门链路优先于MPLS-VPN链路的问题；" class="headerlink" title="实验1：当在VPN站点之间存在后门备份链路时，使用OSPF Sham Link解决后门链路优先于MPLS VPN链路的问题；"></a>实验1：当在VPN站点之间存在后门备份链路时，使用OSPF Sham Link解决后门链路优先于MPLS VPN链路的问题；</h2><p>查看R3的路由表；</p>
<pre class="language-c" data-language="c"><code class="language-c">R3#show ip route
Codes<span class="token operator">:</span> L <span class="token operator">-</span> local<span class="token punctuation">,</span> C <span class="token operator">-</span> connected<span class="token punctuation">,</span> S <span class="token operator">-</span> <span class="token keyword">static</span><span class="token punctuation">,</span> R <span class="token operator">-</span> RIP<span class="token punctuation">,</span> M <span class="token operator">-</span> mobile<span class="token punctuation">,</span> B <span class="token operator">-</span> BGP
        D <span class="token operator">-</span> EIGRP<span class="token punctuation">,</span> EX <span class="token operator">-</span> EIGRP external<span class="token punctuation">,</span> O <span class="token operator">-</span> OSPF<span class="token punctuation">,</span> IA <span class="token operator">-</span> OSPF inter area 
        N1 <span class="token operator">-</span> OSPF NSSA external type <span class="token number">1</span><span class="token punctuation">,</span> N2 <span class="token operator">-</span> OSPF NSSA external type <span class="token number">2</span>
        E1 <span class="token operator">-</span> OSPF external type <span class="token number">1</span><span class="token punctuation">,</span> E2 <span class="token operator">-</span> OSPF external type <span class="token number">2</span>
        i <span class="token operator">-</span> IS<span class="token operator">-</span>IS<span class="token punctuation">,</span> su <span class="token operator">-</span> IS<span class="token operator">-</span>IS summary<span class="token punctuation">,</span> L1 <span class="token operator">-</span> IS<span class="token operator">-</span>IS level<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> L2 <span class="token operator">-</span> IS<span class="token operator">-</span>IS level<span class="token operator">-</span><span class="token number">2</span>
        ia <span class="token operator">-</span> IS<span class="token operator">-</span>IS inter area<span class="token punctuation">,</span> <span class="token operator">*</span> <span class="token operator">-</span> candidate <span class="token keyword">default</span><span class="token punctuation">,</span> U <span class="token operator">-</span> per<span class="token operator">-</span>user <span class="token keyword">static</span> route
        o <span class="token operator">-</span> ODR<span class="token punctuation">,</span> P <span class="token operator">-</span> periodic downloaded <span class="token keyword">static</span> route<span class="token punctuation">,</span> H <span class="token operator">-</span> NHRP<span class="token punctuation">,</span> l <span class="token operator">-</span> LISP
        <span class="token operator">+</span> <span class="token operator">-</span> replicated route<span class="token punctuation">,</span> <span class="token operator">%</span> <span class="token operator">-</span> next hop override
Gateway of last resort is not set
        <span class="token number">3.0</span><span class="token number">.0</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">32</span> is subnetted<span class="token punctuation">,</span> <span class="token number">1</span> subnets
C        <span class="token number">3.3</span><span class="token number">.3</span><span class="token number">.3</span> is directly connected<span class="token punctuation">,</span> Loopback0
        <span class="token number">4.0</span><span class="token number">.0</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">32</span> is subnetted<span class="token punctuation">,</span> <span class="token number">1</span> subnets
O        <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span> <span class="token punctuation">[</span><span class="token number">110</span><span class="token operator">/</span><span class="token number">65</span><span class="token punctuation">]</span> via <span class="token number">192.168</span><span class="token number">.34</span><span class="token number">.4</span><span class="token punctuation">,</span> <span class="token number">00</span><span class="token operator">:</span><span class="token number">03</span><span class="token operator">:</span><span class="token number">07</span><span class="token punctuation">,</span> Serial1<span class="token operator">/</span><span class="token number">0</span>
        <span class="token number">192.168</span><span class="token number">.13</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span> is variably subnetted<span class="token punctuation">,</span> <span class="token number">2</span> subnets<span class="token punctuation">,</span> <span class="token number">2</span> masks
C        <span class="token number">192.168</span><span class="token number">.13</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span> is directly connected<span class="token punctuation">,</span> FastEthernet0<span class="token operator">/</span><span class="token number">1</span>
L        <span class="token number">192.168</span><span class="token number">.13</span><span class="token number">.3</span><span class="token operator">/</span><span class="token number">32</span> is directly connected<span class="token punctuation">,</span> FastEthernet0<span class="token operator">/</span><span class="token number">1</span>
O     <span class="token number">192.168</span><span class="token number">.24</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span> <span class="token punctuation">[</span><span class="token number">110</span><span class="token operator">/</span><span class="token number">65</span><span class="token punctuation">]</span> via <span class="token number">192.168</span><span class="token number">.34</span><span class="token number">.4</span><span class="token punctuation">,</span> <span class="token number">00</span><span class="token operator">:</span><span class="token number">03</span><span class="token operator">:</span><span class="token number">07</span><span class="token punctuation">,</span> Serial1<span class="token operator">/</span><span class="token number">0</span>
        <span class="token number">192.168</span><span class="token number">.34</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span> is variably subnetted<span class="token punctuation">,</span> <span class="token number">2</span> subnets<span class="token punctuation">,</span> <span class="token number">2</span> masks
C        <span class="token number">192.168</span><span class="token number">.34</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span> is directly connected<span class="token punctuation">,</span> Serial1<span class="token operator">/</span><span class="token number">0</span>
L        <span class="token number">192.168</span><span class="token number">.34</span><span class="token number">.3</span><span class="token operator">/</span><span class="token number">32</span> is directly connected<span class="token punctuation">,</span> Serial1<span class="token operator">/</span><span class="token number">0</span>
<span class="token comment">//此时，R3去往4.4.4.4/32和192.168.24.0/24是通过走后门链路；</span>
<span class="token comment">//而后门链路通常是作为备份链路，在主链路正常的情况下，通常不希望，走备份链路；</span></code></pre>
<p>查看R3的OSPF Database；</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token function">R3</span><span class="token punctuation">(</span>config<span class="token operator">-</span><span class="token keyword">if</span><span class="token punctuation">)</span>#<span class="token keyword">do</span> sh ip  ospf <span class="token number">1</span> database
            OSPF Router with <span class="token function">ID</span> <span class="token punctuation">(</span><span class="token number">3.3</span><span class="token number">.3</span><span class="token number">.3</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>Process ID <span class="token number">1</span><span class="token punctuation">)</span>
                Router Link <span class="token function">States</span> <span class="token punctuation">(</span>Area <span class="token number">0</span><span class="token punctuation">)</span>
Link ID         ADV Router      Age         Seq#       Checksum Link count
<span class="token number">3.3</span><span class="token number">.3</span><span class="token number">.3</span>         <span class="token number">3.3</span><span class="token number">.3</span><span class="token number">.3</span>         <span class="token number">10</span>          <span class="token number">0x80000006</span> <span class="token number">0x003904</span> <span class="token number">4</span>
<span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span>         <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span>         <span class="token number">11</span>          <span class="token number">0x80000004</span> <span class="token number">0x0049D4</span> <span class="token number">4</span>
<span class="token number">11.11</span><span class="token number">.11</span><span class="token number">.11</span>     <span class="token number">11.11</span><span class="token number">.11</span><span class="token number">.11</span>     <span class="token number">110</span>         <span class="token number">0x80000001</span> <span class="token number">0x00B333</span> <span class="token number">1</span>
<span class="token number">22.22</span><span class="token number">.22</span><span class="token number">.22</span>     <span class="token number">22.22</span><span class="token number">.22</span><span class="token number">.22</span>     <span class="token number">95</span>          <span class="token number">0x80000002</span> <span class="token number">0x0075FF</span> <span class="token number">1</span>
<span class="token number">192.168</span><span class="token number">.24</span><span class="token number">.4</span>    <span class="token number">192.168</span><span class="token number">.24</span><span class="token number">.4</span>    <span class="token number">1384</span>        <span class="token number">0x80000005</span> <span class="token number">0x00DADF</span> <span class="token number">4</span>
                Net Link <span class="token function">States</span> <span class="token punctuation">(</span>Area <span class="token number">0</span><span class="token punctuation">)</span>
Link ID         ADV Router      Age         Seq#       Checksum
<span class="token number">192.168</span><span class="token number">.13</span><span class="token number">.3</span>    <span class="token number">3.3</span><span class="token number">.3</span><span class="token number">.3</span>         <span class="token number">108</span>         <span class="token number">0x80000001</span> <span class="token number">0x007408</span>
<span class="token number">192.168</span><span class="token number">.24</span><span class="token number">.4</span>    <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span>         <span class="token number">94</span>          <span class="token number">0x80000001</span> <span class="token number">0x001D1F</span>
                Summary Net Link <span class="token function">States</span> <span class="token punctuation">(</span>Area <span class="token number">0</span><span class="token punctuation">)</span>
Link ID         ADV Router      Age         Seq#       Checksum
<span class="token number">3.3</span><span class="token number">.3</span><span class="token number">.3</span>         <span class="token number">22.22</span><span class="token number">.22</span><span class="token number">.22</span>     <span class="token number">99</span>          <span class="token number">0x80000001</span> <span class="token number">0x00F461</span>
<span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span>         <span class="token number">11.11</span><span class="token number">.11</span><span class="token number">.11</span>     <span class="token number">89</span>          <span class="token number">0x80000001</span> <span class="token number">0x00126C</span>
<span class="token number">192.168</span><span class="token number">.13</span><span class="token number">.0</span>    <span class="token number">22.22</span><span class="token number">.22</span><span class="token number">.22</span>     <span class="token number">99</span>          <span class="token number">0x80000001</span> <span class="token number">0x0034B8</span>
<span class="token number">192.168</span><span class="token number">.24</span><span class="token number">.0</span>    <span class="token number">11.11</span><span class="token number">.11</span><span class="token number">.11</span>     <span class="token number">99</span>          <span class="token number">0x80000001</span> <span class="token number">0x000608</span>
                Type<span class="token operator">-</span><span class="token number">5</span> AS External Link States
Link ID         ADV Router      Age         Seq#       Checksum Tag
<span class="token number">11.11</span><span class="token number">.11</span><span class="token number">.11</span>     <span class="token number">22.22</span><span class="token number">.22</span><span class="token number">.22</span>     <span class="token number">99</span>          <span class="token number">0x80000001</span> <span class="token number">0x00E478</span> <span class="token number">3489660929</span>
<span class="token number">22.22</span><span class="token number">.22</span><span class="token number">.22</span>     <span class="token number">11.11</span><span class="token number">.11</span><span class="token number">.11</span>     <span class="token number">109</span>         <span class="token number">0x80000001</span> <span class="token number">0x003429</span> <span class="token number">3489660929</span></code></pre>
<p>注意到，从MPLS VPN过来的LSA是类型3的LSA，而从后门链路过来的LSA是类型1的LSA；以前的实验说过，在OSPF看来，MPLS VPN超骨干网络超越了OSPF骨干区域Area0，MPLS VPN超骨干网络神似OSPF骨干区域Area0，但它又和OSPF骨干区域Area0不同，所以PE路由器会执行ABR的功能，会将类型为1和2的LSA转换为类型3的LSA；所以当PE在收到来自对端远程PE发来的OSPF区域内路由（O）时，会将OSPF区域内路由转换为OSPF区域间路由（O IA）。</p>
<p>为了避免PE将类型1和类型2的LSA转换为类型3的LSA，可以在PE之间创建OSPF Sham Link；这样，当LSA在Sham Link中进行洪泛时，所有的OSPF路由类型都不会改变，不会转变为类型3或者类型5的LSA；</p>
<p><strong>在PE上配置OSPF Sham Link；</strong></p>
<pre class="language-c" data-language="c"><code class="language-c">注意：必须将Sham Link的源地址和目的地址所在的接口划分进VRF；
<span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>#router ospf <span class="token number">2</span> vrf A<span class="token operator">-</span>Site1
<span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span>#area <span class="token number">0</span> sham<span class="token operator">-</span>link <span class="token number">11.11</span><span class="token number">.11</span><span class="token number">.11</span> <span class="token number">22.22</span><span class="token number">.22</span><span class="token number">.22</span>

<span class="token function">R2</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>#router ospf <span class="token number">2</span> vrf A<span class="token operator">-</span>Site2
<span class="token function">R2</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span>#area <span class="token number">0</span> sham<span class="token operator">-</span>link <span class="token number">22.22</span><span class="token number">.22</span><span class="token number">.22</span> <span class="token number">11.11</span><span class="token number">.11</span><span class="token number">.11</span>

<span class="token comment">//将接口Loopback1的地址以路由的形式通告进MP-BGP的IPv4 VRF地址族；</span>
<span class="token comment">//注意：必须在PE上将各自用作Sham Link的源地址的接口地址通告进MP-BGP的IPv4 VRF地址族，否则Sham Link会反复震荡；</span>
<span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>#router bgp <span class="token number">1</span>
<span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span>#address<span class="token operator">-</span>family ipv4 vrf A<span class="token operator">-</span>Site1
<span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token operator">-</span>af<span class="token punctuation">)</span>#network <span class="token number">11.11</span><span class="token number">.11</span><span class="token number">.11</span> mask <span class="token number">255.255</span><span class="token number">.255</span><span class="token number">.255</span>

<span class="token function">R2</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>#router bgp <span class="token number">1</span>
<span class="token function">R2</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span>#address<span class="token operator">-</span>family ipv4 vrf A<span class="token operator">-</span>Site2
<span class="token function">R2</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token operator">-</span>af<span class="token punctuation">)</span>#network <span class="token number">22.22</span><span class="token number">.22</span><span class="token number">.22</span> mask <span class="token number">255.255</span><span class="token number">.255</span><span class="token number">.255</span></code></pre>
<p>将作为Sham Link源地址，并且同时也作为了对方PE Sham Link目的地址的接口移除OSPF VRF进程；</p>
<blockquote>
<p>备注：虽然在此次实验中，我没有将R1和R2的Loopback1通告进OSPF VRF进程，但仍需注意这一点；</p>
</blockquote>
<blockquote>
<p>注意：确保作为Sham Link源地址和目的地址的接口不能被通告进OSPF VRF进程；</p>
</blockquote>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>#router ospf <span class="token number">2</span> vrf A<span class="token operator">-</span>Site1               
<span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span>#no network <span class="token number">11.11</span><span class="token number">.11</span><span class="token number">.11</span> <span class="token number">0.0</span><span class="token number">.0</span><span class="token number">.0</span> area <span class="token number">0</span>

<span class="token function">R2</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>#router ospf <span class="token number">2</span> vrf A<span class="token operator">-</span>Site2
<span class="token function">R2</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span>#no network <span class="token number">22.22</span><span class="token number">.22</span><span class="token number">.22</span> <span class="token number">0.0</span><span class="token number">.0</span><span class="token number">.0</span> area <span class="token number">0</span></code></pre>
<p>查看R3的路由表；</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token function">R3</span><span class="token punctuation">(</span>config<span class="token operator">-</span><span class="token keyword">if</span><span class="token punctuation">)</span>#<span class="token keyword">do</span> sh ip route           
Codes<span class="token operator">:</span> L <span class="token operator">-</span> local<span class="token punctuation">,</span> C <span class="token operator">-</span> connected<span class="token punctuation">,</span> S <span class="token operator">-</span> <span class="token keyword">static</span><span class="token punctuation">,</span> R <span class="token operator">-</span> RIP<span class="token punctuation">,</span> M <span class="token operator">-</span> mobile<span class="token punctuation">,</span> B <span class="token operator">-</span> BGP
        D <span class="token operator">-</span> EIGRP<span class="token punctuation">,</span> EX <span class="token operator">-</span> EIGRP external<span class="token punctuation">,</span> O <span class="token operator">-</span> OSPF<span class="token punctuation">,</span> IA <span class="token operator">-</span> OSPF inter area 
        N1 <span class="token operator">-</span> OSPF NSSA external type <span class="token number">1</span><span class="token punctuation">,</span> N2 <span class="token operator">-</span> OSPF NSSA external type <span class="token number">2</span>
        E1 <span class="token operator">-</span> OSPF external type <span class="token number">1</span><span class="token punctuation">,</span> E2 <span class="token operator">-</span> OSPF external type <span class="token number">2</span>
        i <span class="token operator">-</span> IS<span class="token operator">-</span>IS<span class="token punctuation">,</span> su <span class="token operator">-</span> IS<span class="token operator">-</span>IS summary<span class="token punctuation">,</span> L1 <span class="token operator">-</span> IS<span class="token operator">-</span>IS level<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> L2 <span class="token operator">-</span> IS<span class="token operator">-</span>IS level<span class="token operator">-</span><span class="token number">2</span>
        ia <span class="token operator">-</span> IS<span class="token operator">-</span>IS inter area<span class="token punctuation">,</span> <span class="token operator">*</span> <span class="token operator">-</span> candidate <span class="token keyword">default</span><span class="token punctuation">,</span> U <span class="token operator">-</span> per<span class="token operator">-</span>user <span class="token keyword">static</span> route
        o <span class="token operator">-</span> ODR<span class="token punctuation">,</span> P <span class="token operator">-</span> periodic downloaded <span class="token keyword">static</span> route<span class="token punctuation">,</span> H <span class="token operator">-</span> NHRP<span class="token punctuation">,</span> l <span class="token operator">-</span> LISP
        <span class="token operator">+</span> <span class="token operator">-</span> replicated route<span class="token punctuation">,</span> <span class="token operator">%</span> <span class="token operator">-</span> next hop override
Gateway of last resort is not set
        <span class="token number">3.0</span><span class="token number">.0</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">32</span> is subnetted<span class="token punctuation">,</span> <span class="token number">1</span> subnets
C        <span class="token number">3.3</span><span class="token number">.3</span><span class="token number">.3</span> is directly connected<span class="token punctuation">,</span> Loopback0
        <span class="token number">4.0</span><span class="token number">.0</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">32</span> is subnetted<span class="token punctuation">,</span> <span class="token number">1</span> subnets
O        <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span> <span class="token punctuation">[</span><span class="token number">110</span><span class="token operator">/</span><span class="token number">4</span><span class="token punctuation">]</span> via <span class="token number">192.168</span><span class="token number">.13</span><span class="token number">.1</span><span class="token punctuation">,</span> <span class="token number">00</span><span class="token operator">:</span><span class="token number">01</span><span class="token operator">:</span><span class="token number">09</span><span class="token punctuation">,</span> FastEthernet0<span class="token operator">/</span><span class="token number">1</span> <span class="token comment">//注意路由的度量值；</span>
        <span class="token number">11.0</span><span class="token number">.0</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">32</span> is subnetted<span class="token punctuation">,</span> <span class="token number">1</span> subnets
O E2     <span class="token number">11.11</span><span class="token number">.11</span><span class="token number">.11</span> <span class="token punctuation">[</span><span class="token number">110</span><span class="token operator">/</span><span class="token number">1</span><span class="token punctuation">]</span> via <span class="token number">192.168</span><span class="token number">.13</span><span class="token number">.1</span><span class="token punctuation">,</span> <span class="token number">00</span><span class="token operator">:</span><span class="token number">03</span><span class="token operator">:</span><span class="token number">04</span><span class="token punctuation">,</span> FastEthernet0<span class="token operator">/</span><span class="token number">1</span>
        <span class="token number">22.0</span><span class="token number">.0</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">32</span> is subnetted<span class="token punctuation">,</span> <span class="token number">1</span> subnets
O E2     <span class="token number">22.22</span><span class="token number">.22</span><span class="token number">.22</span> <span class="token punctuation">[</span><span class="token number">110</span><span class="token operator">/</span><span class="token number">1</span><span class="token punctuation">]</span> via <span class="token number">192.168</span><span class="token number">.13</span><span class="token number">.1</span><span class="token punctuation">,</span> <span class="token number">00</span><span class="token operator">:</span><span class="token number">15</span><span class="token operator">:</span><span class="token number">51</span><span class="token punctuation">,</span> FastEthernet0<span class="token operator">/</span><span class="token number">1</span>
        <span class="token number">192.168</span><span class="token number">.13</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span> is variably subnetted<span class="token punctuation">,</span> <span class="token number">2</span> subnets<span class="token punctuation">,</span> <span class="token number">2</span> masks
C        <span class="token number">192.168</span><span class="token number">.13</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span> is directly connected<span class="token punctuation">,</span> FastEthernet0<span class="token operator">/</span><span class="token number">1</span>
L        <span class="token number">192.168</span><span class="token number">.13</span><span class="token number">.3</span><span class="token operator">/</span><span class="token number">32</span> is directly connected<span class="token punctuation">,</span> FastEthernet0<span class="token operator">/</span><span class="token number">1</span>
O     <span class="token number">192.168</span><span class="token number">.24</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span> <span class="token punctuation">[</span><span class="token number">110</span><span class="token operator">/</span><span class="token number">3</span><span class="token punctuation">]</span> via <span class="token number">192.168</span><span class="token number">.13</span><span class="token number">.1</span><span class="token punctuation">,</span> <span class="token number">00</span><span class="token operator">:</span><span class="token number">01</span><span class="token operator">:</span><span class="token number">09</span><span class="token punctuation">,</span> FastEthernet0<span class="token operator">/</span><span class="token number">1</span>
        <span class="token number">192.168</span><span class="token number">.34</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span> is variably subnetted<span class="token punctuation">,</span> <span class="token number">2</span> subnets<span class="token punctuation">,</span> <span class="token number">2</span> masks
C        <span class="token number">192.168</span><span class="token number">.34</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span> is directly connected<span class="token punctuation">,</span> Serial1<span class="token operator">/</span><span class="token number">0</span>
L        <span class="token number">192.168</span><span class="token number">.34</span><span class="token number">.3</span><span class="token operator">/</span><span class="token number">32</span> is directly connected<span class="token punctuation">,</span> Serial1<span class="token operator">/</span><span class="token number">0</span></code></pre>

<p>查看R4的路由表；</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token operator">-</span><span class="token keyword">if</span><span class="token punctuation">)</span>#<span class="token keyword">do</span> sh ip route
Codes<span class="token operator">:</span> L <span class="token operator">-</span> local<span class="token punctuation">,</span> C <span class="token operator">-</span> connected<span class="token punctuation">,</span> S <span class="token operator">-</span> <span class="token keyword">static</span><span class="token punctuation">,</span> R <span class="token operator">-</span> RIP<span class="token punctuation">,</span> M <span class="token operator">-</span> mobile<span class="token punctuation">,</span> B <span class="token operator">-</span> BGP
        D <span class="token operator">-</span> EIGRP<span class="token punctuation">,</span> EX <span class="token operator">-</span> EIGRP external<span class="token punctuation">,</span> O <span class="token operator">-</span> OSPF<span class="token punctuation">,</span> IA <span class="token operator">-</span> OSPF inter area 
        N1 <span class="token operator">-</span> OSPF NSSA external type <span class="token number">1</span><span class="token punctuation">,</span> N2 <span class="token operator">-</span> OSPF NSSA external type <span class="token number">2</span>
        E1 <span class="token operator">-</span> OSPF external type <span class="token number">1</span><span class="token punctuation">,</span> E2 <span class="token operator">-</span> OSPF external type <span class="token number">2</span>
        i <span class="token operator">-</span> IS<span class="token operator">-</span>IS<span class="token punctuation">,</span> su <span class="token operator">-</span> IS<span class="token operator">-</span>IS summary<span class="token punctuation">,</span> L1 <span class="token operator">-</span> IS<span class="token operator">-</span>IS level<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> L2 <span class="token operator">-</span> IS<span class="token operator">-</span>IS level<span class="token operator">-</span><span class="token number">2</span>
        ia <span class="token operator">-</span> IS<span class="token operator">-</span>IS inter area<span class="token punctuation">,</span> <span class="token operator">*</span> <span class="token operator">-</span> candidate <span class="token keyword">default</span><span class="token punctuation">,</span> U <span class="token operator">-</span> per<span class="token operator">-</span>user <span class="token keyword">static</span> route
        o <span class="token operator">-</span> ODR<span class="token punctuation">,</span> P <span class="token operator">-</span> periodic downloaded <span class="token keyword">static</span> route<span class="token punctuation">,</span> H <span class="token operator">-</span> NHRP<span class="token punctuation">,</span> l <span class="token operator">-</span> LISP
        <span class="token operator">+</span> <span class="token operator">-</span> replicated route<span class="token punctuation">,</span> <span class="token operator">%</span> <span class="token operator">-</span> next hop override
Gateway of last resort is not set
        <span class="token number">3.0</span><span class="token number">.0</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">32</span> is subnetted<span class="token punctuation">,</span> <span class="token number">1</span> subnets
O        <span class="token number">3.3</span><span class="token number">.3</span><span class="token number">.3</span> <span class="token punctuation">[</span><span class="token number">110</span><span class="token operator">/</span><span class="token number">4</span><span class="token punctuation">]</span> via <span class="token number">192.168</span><span class="token number">.24</span><span class="token number">.2</span><span class="token punctuation">,</span> <span class="token number">00</span><span class="token operator">:</span><span class="token number">02</span><span class="token operator">:</span><span class="token number">12</span><span class="token punctuation">,</span> FastEthernet0<span class="token operator">/</span><span class="token number">1</span> <span class="token comment">//注意路由的度量值；</span>
        <span class="token number">4.0</span><span class="token number">.0</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">32</span> is subnetted<span class="token punctuation">,</span> <span class="token number">1</span> subnets
C        <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span> is directly connected<span class="token punctuation">,</span> Loopback0
        <span class="token number">11.0</span><span class="token number">.0</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">32</span> is subnetted<span class="token punctuation">,</span> <span class="token number">1</span> subnets
O E2     <span class="token number">11.11</span><span class="token number">.11</span><span class="token number">.11</span> <span class="token punctuation">[</span><span class="token number">110</span><span class="token operator">/</span><span class="token number">1</span><span class="token punctuation">]</span> via <span class="token number">192.168</span><span class="token number">.24</span><span class="token number">.2</span><span class="token punctuation">,</span> <span class="token number">00</span><span class="token operator">:</span><span class="token number">16</span><span class="token operator">:</span><span class="token number">39</span><span class="token punctuation">,</span> FastEthernet0<span class="token operator">/</span><span class="token number">1</span>
        <span class="token number">22.0</span><span class="token number">.0</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">32</span> is subnetted<span class="token punctuation">,</span> <span class="token number">1</span> subnets
O E2     <span class="token number">22.22</span><span class="token number">.22</span><span class="token number">.22</span> <span class="token punctuation">[</span><span class="token number">110</span><span class="token operator">/</span><span class="token number">1</span><span class="token punctuation">]</span> via <span class="token number">192.168</span><span class="token number">.24</span><span class="token number">.2</span><span class="token punctuation">,</span> <span class="token number">00</span><span class="token operator">:</span><span class="token number">02</span><span class="token operator">:</span><span class="token number">12</span><span class="token punctuation">,</span> FastEthernet0<span class="token operator">/</span><span class="token number">1</span>
O     <span class="token number">192.168</span><span class="token number">.13</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span> <span class="token punctuation">[</span><span class="token number">110</span><span class="token operator">/</span><span class="token number">3</span><span class="token punctuation">]</span> via <span class="token number">192.168</span><span class="token number">.24</span><span class="token number">.2</span><span class="token punctuation">,</span> <span class="token number">00</span><span class="token operator">:</span><span class="token number">02</span><span class="token operator">:</span><span class="token number">12</span><span class="token punctuation">,</span> FastEthernet0<span class="token operator">/</span><span class="token number">1</span>
        <span class="token number">192.168</span><span class="token number">.24</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span> is variably subnetted<span class="token punctuation">,</span> <span class="token number">2</span> subnets<span class="token punctuation">,</span> <span class="token number">2</span> masks
C        <span class="token number">192.168</span><span class="token number">.24</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span> is directly connected<span class="token punctuation">,</span> FastEthernet0<span class="token operator">/</span><span class="token number">1</span>
L        <span class="token number">192.168</span><span class="token number">.24</span><span class="token number">.4</span><span class="token operator">/</span><span class="token number">32</span> is directly connected<span class="token punctuation">,</span> FastEthernet0<span class="token operator">/</span><span class="token number">1</span>
        <span class="token number">192.168</span><span class="token number">.34</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span> is variably subnetted<span class="token punctuation">,</span> <span class="token number">2</span> subnets<span class="token punctuation">,</span> <span class="token number">2</span> masks
C        <span class="token number">192.168</span><span class="token number">.34</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span> is directly connected<span class="token punctuation">,</span> Serial1<span class="token operator">/</span><span class="token number">0</span>
L        <span class="token number">192.168</span><span class="token number">.34</span><span class="token number">.4</span><span class="token operator">/</span><span class="token number">32</span> is directly connected<span class="token punctuation">,</span> Serial1<span class="token operator">/</span><span class="token number">0</span>
<span class="token comment">//可以看到R3和R4现在都通过MPLS VPN去往对方所在站点；</span></code></pre>

<p>在必要时还可以修改Sham Link的开销，让Sham Link比后门链路的度量值更低，以便优先选择作为主链路的MPLS VPN，而不是备份的后门链路；</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>#router ospf <span class="token number">2</span> vrf A<span class="token operator">-</span>Site1
<span class="token function">R1</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span># area <span class="token number">0</span> sham<span class="token operator">-</span>link <span class="token number">11.11</span><span class="token number">.11</span><span class="token number">.11</span> <span class="token number">22.22</span><span class="token number">.22</span><span class="token number">.22</span> cost <span class="token number">10</span>

<span class="token function">R2</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token operator">-</span>af<span class="token punctuation">)</span>#router ospf <span class="token number">2</span> vrf A<span class="token operator">-</span>Site2
<span class="token function">R2</span><span class="token punctuation">(</span>config<span class="token operator">-</span>router<span class="token punctuation">)</span>#area <span class="token number">0</span> sham<span class="token operator">-</span>link <span class="token number">22.22</span><span class="token number">.22</span><span class="token number">.22</span> <span class="token number">11.11</span><span class="token number">.11</span><span class="token number">.11</span> cost <span class="token number">10</span></code></pre>

<p>查看R3的路由表；</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token function">R3</span><span class="token punctuation">(</span>config<span class="token operator">-</span><span class="token keyword">if</span><span class="token punctuation">)</span>#<span class="token keyword">do</span> sh ip route
Codes<span class="token operator">:</span> L <span class="token operator">-</span> local<span class="token punctuation">,</span> C <span class="token operator">-</span> connected<span class="token punctuation">,</span> S <span class="token operator">-</span> <span class="token keyword">static</span><span class="token punctuation">,</span> R <span class="token operator">-</span> RIP<span class="token punctuation">,</span> M <span class="token operator">-</span> mobile<span class="token punctuation">,</span> B <span class="token operator">-</span> BGP
        D <span class="token operator">-</span> EIGRP<span class="token punctuation">,</span> EX <span class="token operator">-</span> EIGRP external<span class="token punctuation">,</span> O <span class="token operator">-</span> OSPF<span class="token punctuation">,</span> IA <span class="token operator">-</span> OSPF inter area 
        N1 <span class="token operator">-</span> OSPF NSSA external type <span class="token number">1</span><span class="token punctuation">,</span> N2 <span class="token operator">-</span> OSPF NSSA external type <span class="token number">2</span>
        E1 <span class="token operator">-</span> OSPF external type <span class="token number">1</span><span class="token punctuation">,</span> E2 <span class="token operator">-</span> OSPF external type <span class="token number">2</span>
        i <span class="token operator">-</span> IS<span class="token operator">-</span>IS<span class="token punctuation">,</span> su <span class="token operator">-</span> IS<span class="token operator">-</span>IS summary<span class="token punctuation">,</span> L1 <span class="token operator">-</span> IS<span class="token operator">-</span>IS level<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> L2 <span class="token operator">-</span> IS<span class="token operator">-</span>IS level<span class="token operator">-</span><span class="token number">2</span>
        ia <span class="token operator">-</span> IS<span class="token operator">-</span>IS inter area<span class="token punctuation">,</span> <span class="token operator">*</span> <span class="token operator">-</span> candidate <span class="token keyword">default</span><span class="token punctuation">,</span> U <span class="token operator">-</span> per<span class="token operator">-</span>user <span class="token keyword">static</span> route
        o <span class="token operator">-</span> ODR<span class="token punctuation">,</span> P <span class="token operator">-</span> periodic downloaded <span class="token keyword">static</span> route<span class="token punctuation">,</span> H <span class="token operator">-</span> NHRP<span class="token punctuation">,</span> l <span class="token operator">-</span> LISP
        <span class="token operator">+</span> <span class="token operator">-</span> replicated route<span class="token punctuation">,</span> <span class="token operator">%</span> <span class="token operator">-</span> next hop override
Gateway of last resort is not set
        <span class="token number">3.0</span><span class="token number">.0</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">32</span> is subnetted<span class="token punctuation">,</span> <span class="token number">1</span> subnets
C        <span class="token number">3.3</span><span class="token number">.3</span><span class="token number">.3</span> is directly connected<span class="token punctuation">,</span> Loopback0
        <span class="token number">4.0</span><span class="token number">.0</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">32</span> is subnetted<span class="token punctuation">,</span> <span class="token number">1</span> subnets
O        <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span> <span class="token punctuation">[</span><span class="token number">110</span><span class="token operator">/</span><span class="token number">13</span><span class="token punctuation">]</span> via <span class="token number">192.168</span><span class="token number">.13</span><span class="token number">.1</span><span class="token punctuation">,</span> <span class="token number">00</span><span class="token operator">:</span><span class="token number">00</span><span class="token operator">:</span><span class="token number">58</span><span class="token punctuation">,</span> FastEthernet0<span class="token operator">/</span><span class="token number">1</span> <span class="token comment">//注意路由的度量值变化；</span>
        <span class="token number">11.0</span><span class="token number">.0</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">32</span> is subnetted<span class="token punctuation">,</span> <span class="token number">1</span> subnets
O E2     <span class="token number">11.11</span><span class="token number">.11</span><span class="token number">.11</span> <span class="token punctuation">[</span><span class="token number">110</span><span class="token operator">/</span><span class="token number">1</span><span class="token punctuation">]</span> via <span class="token number">192.168</span><span class="token number">.13</span><span class="token number">.1</span><span class="token punctuation">,</span> <span class="token number">00</span><span class="token operator">:</span><span class="token number">04</span><span class="token operator">:</span><span class="token number">59</span><span class="token punctuation">,</span> FastEthernet0<span class="token operator">/</span><span class="token number">1</span>
        <span class="token number">22.0</span><span class="token number">.0</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">32</span> is subnetted<span class="token punctuation">,</span> <span class="token number">1</span> subnets
O E2     <span class="token number">22.22</span><span class="token number">.22</span><span class="token number">.22</span> <span class="token punctuation">[</span><span class="token number">110</span><span class="token operator">/</span><span class="token number">1</span><span class="token punctuation">]</span> via <span class="token number">192.168</span><span class="token number">.13</span><span class="token number">.1</span><span class="token punctuation">,</span> <span class="token number">00</span><span class="token operator">:</span><span class="token number">17</span><span class="token operator">:</span><span class="token number">46</span><span class="token punctuation">,</span> FastEthernet0<span class="token operator">/</span><span class="token number">1</span>
        <span class="token number">192.168</span><span class="token number">.13</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span> is variably subnetted<span class="token punctuation">,</span> <span class="token number">2</span> subnets<span class="token punctuation">,</span> <span class="token number">2</span> masks
C        <span class="token number">192.168</span><span class="token number">.13</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span> is directly connected<span class="token punctuation">,</span> FastEthernet0<span class="token operator">/</span><span class="token number">1</span>
L        <span class="token number">192.168</span><span class="token number">.13</span><span class="token number">.3</span><span class="token operator">/</span><span class="token number">32</span> is directly connected<span class="token punctuation">,</span> FastEthernet0<span class="token operator">/</span><span class="token number">1</span>
O     <span class="token number">192.168</span><span class="token number">.24</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span> <span class="token punctuation">[</span><span class="token number">110</span><span class="token operator">/</span><span class="token number">12</span><span class="token punctuation">]</span> via <span class="token number">192.168</span><span class="token number">.13</span><span class="token number">.1</span><span class="token punctuation">,</span> <span class="token number">00</span><span class="token operator">:</span><span class="token number">00</span><span class="token operator">:</span><span class="token number">58</span><span class="token punctuation">,</span> FastEthernet0<span class="token operator">/</span><span class="token number">1</span>
        <span class="token number">192.168</span><span class="token number">.34</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span> is variably subnetted<span class="token punctuation">,</span> <span class="token number">2</span> subnets<span class="token punctuation">,</span> <span class="token number">2</span> masks
C        <span class="token number">192.168</span><span class="token number">.34</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span> is directly connected<span class="token punctuation">,</span> Serial1<span class="token operator">/</span><span class="token number">0</span>
L        <span class="token number">192.168</span><span class="token number">.34</span><span class="token number">.3</span><span class="token operator">/</span><span class="token number">32</span> is directly connected<span class="token punctuation">,</span> Serial1<span class="token operator">/</span><span class="token number">0</span></code></pre>
<p>查看R4的路由表；</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token function">R4</span><span class="token punctuation">(</span>config<span class="token operator">-</span><span class="token keyword">if</span><span class="token punctuation">)</span>#<span class="token keyword">do</span> sh ip route
Codes<span class="token operator">:</span> L <span class="token operator">-</span> local<span class="token punctuation">,</span> C <span class="token operator">-</span> connected<span class="token punctuation">,</span> S <span class="token operator">-</span> <span class="token keyword">static</span><span class="token punctuation">,</span> R <span class="token operator">-</span> RIP<span class="token punctuation">,</span> M <span class="token operator">-</span> mobile<span class="token punctuation">,</span> B <span class="token operator">-</span> BGP
        D <span class="token operator">-</span> EIGRP<span class="token punctuation">,</span> EX <span class="token operator">-</span> EIGRP external<span class="token punctuation">,</span> O <span class="token operator">-</span> OSPF<span class="token punctuation">,</span> IA <span class="token operator">-</span> OSPF inter area 
        N1 <span class="token operator">-</span> OSPF NSSA external type <span class="token number">1</span><span class="token punctuation">,</span> N2 <span class="token operator">-</span> OSPF NSSA external type <span class="token number">2</span>
        E1 <span class="token operator">-</span> OSPF external type <span class="token number">1</span><span class="token punctuation">,</span> E2 <span class="token operator">-</span> OSPF external type <span class="token number">2</span>
        i <span class="token operator">-</span> IS<span class="token operator">-</span>IS<span class="token punctuation">,</span> su <span class="token operator">-</span> IS<span class="token operator">-</span>IS summary<span class="token punctuation">,</span> L1 <span class="token operator">-</span> IS<span class="token operator">-</span>IS level<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> L2 <span class="token operator">-</span> IS<span class="token operator">-</span>IS level<span class="token operator">-</span><span class="token number">2</span>
        ia <span class="token operator">-</span> IS<span class="token operator">-</span>IS inter area<span class="token punctuation">,</span> <span class="token operator">*</span> <span class="token operator">-</span> candidate <span class="token keyword">default</span><span class="token punctuation">,</span> U <span class="token operator">-</span> per<span class="token operator">-</span>user <span class="token keyword">static</span> route
        o <span class="token operator">-</span> ODR<span class="token punctuation">,</span> P <span class="token operator">-</span> periodic downloaded <span class="token keyword">static</span> route<span class="token punctuation">,</span> H <span class="token operator">-</span> NHRP<span class="token punctuation">,</span> l <span class="token operator">-</span> LISP
        <span class="token operator">+</span> <span class="token operator">-</span> replicated route<span class="token punctuation">,</span> <span class="token operator">%</span> <span class="token operator">-</span> next hop override
Gateway of last resort is not set
        <span class="token number">3.0</span><span class="token number">.0</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">32</span> is subnetted<span class="token punctuation">,</span> <span class="token number">1</span> subnets
O        <span class="token number">3.3</span><span class="token number">.3</span><span class="token number">.3</span> <span class="token punctuation">[</span><span class="token number">110</span><span class="token operator">/</span><span class="token number">13</span><span class="token punctuation">]</span> via <span class="token number">192.168</span><span class="token number">.24</span><span class="token number">.2</span><span class="token punctuation">,</span> <span class="token number">00</span><span class="token operator">:</span><span class="token number">02</span><span class="token operator">:</span><span class="token number">11</span><span class="token punctuation">,</span> FastEthernet0<span class="token operator">/</span><span class="token number">1</span> <span class="token comment">//注意路由的度量值变化；</span>
        <span class="token number">4.0</span><span class="token number">.0</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">32</span> is subnetted<span class="token punctuation">,</span> <span class="token number">1</span> subnets
C        <span class="token number">4.4</span><span class="token number">.4</span><span class="token number">.4</span> is directly connected<span class="token punctuation">,</span> Loopback0
        <span class="token number">11.0</span><span class="token number">.0</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">32</span> is subnetted<span class="token punctuation">,</span> <span class="token number">1</span> subnets
O E2     <span class="token number">11.11</span><span class="token number">.11</span><span class="token number">.11</span> <span class="token punctuation">[</span><span class="token number">110</span><span class="token operator">/</span><span class="token number">1</span><span class="token punctuation">]</span> via <span class="token number">192.168</span><span class="token number">.24</span><span class="token number">.2</span><span class="token punctuation">,</span> <span class="token number">00</span><span class="token operator">:</span><span class="token number">19</span><span class="token operator">:</span><span class="token number">40</span><span class="token punctuation">,</span> FastEthernet0<span class="token operator">/</span><span class="token number">1</span>
        <span class="token number">22.0</span><span class="token number">.0</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">32</span> is subnetted<span class="token punctuation">,</span> <span class="token number">1</span> subnets
O E2     <span class="token number">22.22</span><span class="token number">.22</span><span class="token number">.22</span> <span class="token punctuation">[</span><span class="token number">110</span><span class="token operator">/</span><span class="token number">1</span><span class="token punctuation">]</span> via <span class="token number">192.168</span><span class="token number">.24</span><span class="token number">.2</span><span class="token punctuation">,</span> <span class="token number">00</span><span class="token operator">:</span><span class="token number">05</span><span class="token operator">:</span><span class="token number">13</span><span class="token punctuation">,</span> FastEthernet0<span class="token operator">/</span><span class="token number">1</span>
O     <span class="token number">192.168</span><span class="token number">.13</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span> <span class="token punctuation">[</span><span class="token number">110</span><span class="token operator">/</span><span class="token number">12</span><span class="token punctuation">]</span> via <span class="token number">192.168</span><span class="token number">.24</span><span class="token number">.2</span><span class="token punctuation">,</span> <span class="token number">00</span><span class="token operator">:</span><span class="token number">02</span><span class="token operator">:</span><span class="token number">11</span><span class="token punctuation">,</span> FastEthernet0<span class="token operator">/</span><span class="token number">1</span>
        <span class="token number">192.168</span><span class="token number">.24</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span> is variably subnetted<span class="token punctuation">,</span> <span class="token number">2</span> subnets<span class="token punctuation">,</span> <span class="token number">2</span> masks
C        <span class="token number">192.168</span><span class="token number">.24</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span> is directly connected<span class="token punctuation">,</span> FastEthernet0<span class="token operator">/</span><span class="token number">1</span>
L        <span class="token number">192.168</span><span class="token number">.24</span><span class="token number">.4</span><span class="token operator">/</span><span class="token number">32</span> is directly connected<span class="token punctuation">,</span> FastEthernet0<span class="token operator">/</span><span class="token number">1</span>
        <span class="token number">192.168</span><span class="token number">.34</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span> is variably subnetted<span class="token punctuation">,</span> <span class="token number">2</span> subnets<span class="token punctuation">,</span> <span class="token number">2</span> masks
C        <span class="token number">192.168</span><span class="token number">.34</span><span class="token number">.0</span><span class="token operator">/</span><span class="token number">24</span> is directly connected<span class="token punctuation">,</span> Serial1<span class="token operator">/</span><span class="token number">0</span>
L        <span class="token number">192.168</span><span class="token number">.34</span><span class="token number">.4</span><span class="token operator">/</span><span class="token number">32</span> is directly connected<span class="token punctuation">,</span> Serial1<span class="token operator">/</span><span class="token number">0</span></code></pre>]]></content>
      <categories>
        <category>Network</category>
      </categories>
      <tags>
        <tag>MPLS</tag>
        <tag>Network</tag>
      </tags>
  </entry>
  <entry>
    <title>BIG-IP Local Traffic Manager Concepts v11.5.0</title>
    <url>/2017/BIG-IP-Local-Traffic-Manager-Concepts-v11-5-0/</url>
    <content><![CDATA[<blockquote>
<p>本文是 F5官方文档 <a href="https://techdocs.f5.com/kb/en-us/products/big-ip_ltm/manuals/product/ltm-concepts-11-5-0.html">BIG-IP Local Traffic Manager Concepts v11.5.0</a> 的中文翻译版。初次于2017年11月30日发布在 <a href="https://github.com/filefi/CN_BIG-IP_Local_Traffic_Manager_Concepts_v11.5.0">此repo</a>。</p>
</blockquote>
<h1 id="第1章-介绍本地流量管理器（Local-Traffic-Manager）"><a href="#第1章-介绍本地流量管理器（Local-Traffic-Manager）" class="headerlink" title="第1章 介绍本地流量管理器（Local Traffic Manager）"></a>第1章 介绍本地流量管理器（Local Traffic Manager）</h1><h2 id="1-1-什么是BIG-IP本地流量管理器？"><a href="#1-1-什么是BIG-IP本地流量管理器？" class="headerlink" title="1.1 什么是BIG-IP本地流量管理器？"></a>1.1 什么是BIG-IP本地流量管理器？</h2><p>BIG-IP本地流量管理（Local Traffic Manager）控制流入或流出局域网LAN（包括内联网intranet）的网络流量。</p>
<p>出于智能地调整网络服务器上负载的目的，LTM的一个常用功能是它拦截和重定向入站网络流量的能力。但是，调整服务器负载并不是唯一的本地流量管理方式。</p>
<p>LTM包含了各种功能，例如，执行检查和转换报头和内容数据，管理基于SSL证书的认证，以及压缩HTTP响应。这样做，BIG-IP系统不仅会定向流量到适合的服务器资源，而且还通过执行Web服务器通常执行的任务来增强了网络安全，并释放了服务器资源。</p>
<blockquote>
<p>注意： BIG-IP LTM是组成BIG-IP产品系列的几种产品之一。BIG-IP产品线中的所有产品都运行在强大的流量管理操作系统（Traffic Management Operating System）（通常称为TMOS）上。</p>
</blockquote>
<span id="more"></span>

<h2 id="1-2-连接（Connection）和会话（Session）的超时设置"><a href="#1-2-连接（Connection）和会话（Session）的超时设置" class="headerlink" title="1.2 连接（Connection）和会话（Session）的超时设置"></a>1.2 连接（Connection）和会话（Session）的超时设置</h2><p>LTM有一些可以被设置，以促进活动（active）连接管理的超时设置。只要连接仍然处于活动状态（active），系统就会通过跟踪连接表中的连接来显式地管理每个连接。连接表（Connection table）包含关于客户端（client-side）和服务器端（server-side）连接的状态信息，以及客户端与服务器端之间的关系的状态信息。</p>
<p>连接表中每个连接都消耗系统资源来维护连接表条目和检查连接状态。当LTM必须判断一个连接何时不再处于活动状态（active），然后撤销（retire）连接，以避免耗尽关键系统资源。如果连接表不断增长，并保持未检查状态（unchecked），如内存和处理器周期这样的资源将存在风险。</p>
<p>当使用会话保持（Session persistence）时，你也可以管理会话保持表中的条目的持续时间。</p>
<h2 id="1-3-连接收割（Connection-reaping）"><a href="#1-3-连接收割（Connection-reaping）" class="headerlink" title="1.3 连接收割（Connection reaping）"></a>1.3 连接收割（Connection reaping）</h2><p>以正常方式关闭和重置的连接会自动从连接表中撤销（retire）。然而，由于许多原因，大量连接通常保持空闲，而没有正常关闭。因此，一旦这些连接被判断为处于非活跃状态（inactive），LTM必须收割（reap）这些连接。收割（reaping）是撤销或回收原本处于空闲的连接的过程。</p>
<p>由于你可以在多个地方配置超时设置，所以有时可能有不止一个超时设置在影响同一个连接。理解这一点很重要。最佳的超时配置是：为了保留系统资源，在确定连接处于非活动状态（inactive）并应该被撤销（retire）之前，将空闲连接保持一段适当的时间（取决于具体应用）。</p>
<h2 id="1-4-空闲超时选项"><a href="#1-4-空闲超时选项" class="headerlink" title="1.4 空闲超时选项"></a>1.4 空闲超时选项</h2><p>通过与处理连接的虚拟服务器（virtual server）相关联的模板（protocol profiles）或SNAT，空闲连接可以被超时。基于SNAT automap 或 VLAN group设置，没有被虚拟服务器（virtual server）管理的连接也可以被超时。</p>
<p>应用于一个连接的最短超时值是始终生效的。但是，在某些情况下，你可以想要修改此行为。</p>
<p>例如，你可能已经配置了一个用于处理长期连接（long-standing connections）的forwarding virtual server，并且这些连接可能会长时间处于空闲状态（例如SSH会话）。在这种情况下，你可以在相关的protocol profile（在这个例子中，SSH使用的是TCP）中配置一个很长的空闲超时值。但是，如果SNAT automap功能也被启用，则默认的300秒静态超时值仍然生效。</p>
<h3 id="影响连接收割的空闲超时设置"><a href="#影响连接收割的空闲超时设置" class="headerlink" title="影响连接收割的空闲超时设置"></a>影响连接收割的空闲超时设置</h3><p>以下是一个包含影响连接收割的空闲连接超时设置的对象列表。对于每种对象类型，表中列出了默认值，以及该值是否是用户可配置的。</p>
<table>
<thead>
<tr>
<th>配置对象类型</th>
<th>默认值（秒）</th>
<th>用户可配置</th>
</tr>
</thead>
<tbody><tr>
<td>Fast L4, Fast HTTP, TCP, SCTP profiles</td>
<td>300</td>
<td>是</td>
</tr>
<tr>
<td>UDP profiles</td>
<td>60</td>
<td>是</td>
</tr>
<tr>
<td>SNAT automap</td>
<td>300</td>
<td>否</td>
</tr>
<tr>
<td>VLAN group</td>
<td>300</td>
<td>否</td>
</tr>
</tbody></table>
<h2 id="1-5-其他超时设置"><a href="#1-5-其他超时设置" class="headerlink" title="1.5 其他超时设置"></a>1.5 其他超时设置</h2><p>LTM包含其他2个超时设置，但这些设置不影响连接收割。这些设置出现在 OneConnect™ 和 会话保持（persistence profile）中。</p>
<p>OneConnect超时值控制着空闲的服务器端（server-side）连接可用于重用（re-use）的时长。也就是说，在服务器端（server-side）连接空闲了一段时间之后，这个超时值可能会导致系统关闭此服务器端（server-side）连接。在这种情况下，由于连接从未被主动使用，所以没有活动的（active）客户端（client-side）连接受到影响，并且系统会为新连接透明地选择或建立另一个服务器端（server-side）连接。OneConnect超时设置不需要与其他模板（profile）的超时设置相一致。</p>
<p>会话保持（Persistence）超时设置其实是一个会话（Session）的空闲超时设置，而不是单个连接（connection）。因此，会话保持超时设置通常应该被设置为稍大于适用的连接空闲超时设置，以此来允许会话继续，即使该会话中的连接已经过期。</p>
<h3 id="不影响连接收割的空闲超时设置"><a href="#不影响连接收割的空闲超时设置" class="headerlink" title="不影响连接收割的空闲超时设置"></a>不影响连接收割的空闲超时设置</h3><p>LTM包括其他2个空闲超时设置，但这些设置不会影响连接收割。这些设置出现在 <em><strong>OneConnect</strong></em> 和 <strong>persistence <em>profile</em></strong> 中。此表展示了这些设置的默认值以及设置是否是用户可配置的。</p>
<table>
<thead>
<tr>
<th>配置对象类型</th>
<th>默认值（秒）</th>
<th>用户可配置</th>
</tr>
</thead>
<tbody><tr>
<td>OneConnect™ profiles</td>
<td>disabled</td>
<td>是</td>
</tr>
<tr>
<td>Cookie Hash, Destination Address Affinity, Hash, SIP, Source Address Affinity, and Universal persistence profiles</td>
<td>180</td>
<td>是</td>
</tr>
<tr>
<td>MSRDP and SSL persistence profiles</td>
<td>300</td>
<td>是</td>
</tr>
</tbody></table>
<h2 id="1-6-关于network-map"><a href="#1-6-关于network-map" class="headerlink" title="1.6 关于network map"></a>1.6 关于network map</h2><p>BIG-IP Configuration utility 包括被称为network map的功能。<em><strong>network map</strong></em> 显示一个本地流量对象的汇总，以及BIG-IP系统上的virtual server，pool和pool member的可视化示意图。对于本地流量汇总和network map，你都可以使用检索机制来自定义显示内容，该机制根据您指定的条件过滤要显示的内容。系统会以蓝色来高亮显示所有检索操作的匹配结果。</p>
<h3 id="过滤机制"><a href="#过滤机制" class="headerlink" title="过滤机制"></a>过滤机制</h3><p>通过使用过滤框（filter bar）中的Type和Status列表，以及Search Box，你可以过滤network map功能的结果。有了Search box，你可以选择输入特定的字符串。图1.1 展示了Network Map界面中的过滤选项。</p>
<p><img src="https://support.f5.com/kb/global/manual_images/MAN-0377-06_v6/filter_screen.png" alt="image"><br><strong>图1：Network Map界面中的过滤选项</strong></p>
<p>当使用Search Box时，你可以指定在搜索操作中系统所使用的文本字符串。默认值是星号（*）。Status和Type字段的设置决定了搜索的范围。系统使用所指定的搜索字符串来过滤显示在屏幕上的结果。</p>
<p>例如，如果你限制搜索的内容为只包括IP地址包含10.10的不可用结点（Node），此操作将返回这些结点（Nodes），连同Pool的成员（Members），Pool本身，相关联的VS，以及你显式应用于VS的iRules。系统会按VS Name的字母顺序对结果排序。</p>
<p>系统支持搜索以IPv4和IPv6的地址格式搜索名字，IP地址，以及IP地址：端口组合。如果会像有星号通配符包围着字符串那样来处理字符串。例如，你指定了<code>10</code>，系统会像你输入了<code>*10*</code>那样来进行有效查找。当然你也可以明确地包含星号通配符。例如，你可以使用下列字搜索字符串:<code>10.10.10.*:80</code>,<code>10.10.*</code>和<code>*:80</code>。如果你明确地包含通配符，系统也会相应地处理该字符串。例如，如果你指定<code>10*</code>，则系统假设你希望搜索IP地址以10开头的对象。</p>
<blockquote>
<p>提示：在浏览器运行变慢和停止处理之前，浏览器可以渲染数据的量是有限制的。映射大型配置可能会接近这些限制; 因此，内存限制可能会阻止系统生成整个配置的network map<br>。如果发生这种情况，系统会发布一个警告（alert），指出您可以使用Network Map汇总界面来确定配置的复杂程度。这可以给你关于所生成的network map大小的指示。您可以修改搜索条件以返回较少的结果，这样生成的network map就不会遇到这些限制了。</p>
</blockquote>
<h3 id="对象汇总"><a href="#对象汇总" class="headerlink" title="对象汇总"></a>对象汇总</h3><p>当你第一次打开Network Map界面，该界面将显示本地流量对象的汇总摘要。此汇总摘要包括使用搜索机制指定的对象类型，每种对象类型的数量，以及对于每种对象类型，不同状态对象的数量。</p>
<p>汇总摘要会显示以下对象类型的数据：</p>
<ul>
<li>Virtual Server</li>
<li>Pools</li>
<li>Pool members</li>
<li>Nodes</li>
<li>iRules</li>
</ul>
<blockquote>
<p>注意：本地流量摘要仅包含被VS引用的那些对象。例如，如果您已经在系统上配置了一个Pool，但没有引用该Pool的VS，则本地流量摘要不包括此Pool，及其成员或摘要中的关联的节点。</p>
</blockquote>
<p>此图显示了汇总系统上本地流量对象的network map界面的示例。</p>
<p><img src="https://support.f5.com/kb/global/manual_images/MAN-0377-06_v6/i_net_map_summary.png" alt="image"></p>
<p><strong>图2：本地流量汇总摘要</strong></p>
<h3 id="network-map显示"><a href="#network-map显示" class="headerlink" title="network map显示"></a>network map显示</h3><p>Network Map 显示了在系统上定义的对象名称和状态的可视化层次结构，这些对象类型包括 VS，Pools，Pool Member，Nodes以及iRules。Network Map能够显示上下文中的所有对象，并从顶部的VS开始。在屏幕顶部的 Status，Type 和 Search 设置决定了 Network Map 包含的对象。</p>
<p>当你将光标放在 Network map 中的一个对象上时，系统将显示悬停文本，其中包含关于该对象的信息。当你把光标放在伴随对象的状态图标上时，系统将显示悬停文本，其中包含关于该对象状态信息，文本也将出现 在Pool 的 Properties 界面。</p>
<p>系统按字母表顺序对对象进行排序，然后以层次化结构的方式组织依赖对象。</p>
<p>由于 Network Map 在上下文中显示对象的方式，更新后的界面（screen）也会显示与这些对象相关的其他状态、类型和名字的对象。这是因为 Network Map 在显示对象时， 总是在上下文中显示那些依赖它们的对象，以及它们依赖的对象。</p>
<p>例如，如果你有一个可用的 VS 和一个可用的 Pool，以及2个 Pool Member（其中1个可用，1个离线），然后从 Status 列表中选择 Offline，这将导致系统在上下文中显示离线（offline）的 Pool Member，以及可用的 VS 和 可用的 Pool。这是因为可用的 VS 和可用的 Pool 依赖于离线的 Pool Member。</p>
]]></content>
      <categories>
        <category>F5</category>
      </categories>
      <tags>
        <tag>F5</tag>
        <tag>LoadBalance</tag>
      </tags>
  </entry>
  <entry>
    <title>BIG-IP System iRules Concepts v11.6</title>
    <url>/2017/BIG-IP-System-iRules-Concepts-v11-6/</url>
    <content><![CDATA[<blockquote>
<p>本文是 F5官方文档 <a href="https://support.f5.com/kb/en-us/products/big-ip_ltm/manuals/product/bigip-system-irules-concepts-11-6-0.html">BIG-IP System iRules Concepts v11.6</a> 的中文翻译版。初次于2017年11月30日发布在 <a href="https://github.com/filefi/CN_BIG-IP_System_iRules_Concepts_v11.6">此repo</a>。</p>
</blockquote>
<h1 id="1-iRules介绍"><a href="#1-iRules介绍" class="headerlink" title="1 iRules介绍"></a>1 iRules介绍</h1><h2 id="什么是iRule"><a href="#什么是iRule" class="headerlink" title="什么是iRule"></a>什么是iRule</h2><p>iRule是BIG-IP本地流量管理器（LTM）中的一个强大而灵活的功能，你可以用它来管理你的网络流量。使用基于行业标准工具命令语言（Tcl）的语法，iRules功能不仅允许您根据报头数据（header data）选择Pools，还可以通过搜索您自定义的任何类型的内容数据来定向流量。因此，iRules功能显著地增强了您自定义内容交换（content switching）以适应您确切需求的能力。</p>
<blockquote>
<p>重要：有关iRules语法的完整和详细信息，请参阅F5 Networks DevCentral网站 <a href="http://devcentral.f5.com.请注意,irules必须符合标准的tcl语法规则/">http://devcentral.f5.com。请注意，iRules必须符合标准的Tcl语法规则</a>; 因此，有关Tcl语法的更多信息，请参见 <a href="http://tmml.sourceforge.net/doc/tcl/index.html%E3%80%82">http://tmml.sourceforge.net/doc/tcl/index.html。</a></p>
</blockquote>
<p>如果您想要单独的连接来命中（target）除为Virtual Server定义的默认Pool之外的Pool，则你就可以写这样一个iRule脚本。iRules允许您更直接地指定要将流量定向到你想要的目的地。使用iRules，您不仅可以将流量发送到Pool，还可以向单个Pool Member，端口或URI发送流量。您创建的iRules可以很简单，也可以很复杂，具体取决于您的内容交换（content-switching）需求。</p>
<pre class="language-tcl" data-language="tcl"><code class="language-tcl">when CLIENT_ACCEPTED <span class="token punctuation">&#123;</span>
    <span class="token builtin">if</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">[</span>IP::addr <span class="token punctuation">[</span>IP::client_addr<span class="token punctuation">]</span> equals 10.10.10.10<span class="token punctuation">]</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#123;</span>
        pool my_pool 
    <span class="token punctuation">&#125;</span> 
<span class="token punctuation">&#125;</span></code></pre>

<p>当客户端连接被接受时，这条iRule会被触发。这时，如果客户端的地址与 <code>10.10.10.10</code> 相匹配，将使得本地流量管理器（LTM）将数据包发送到my_pool池。</p>
<span id="more"></span>

<p>使用称为通用检查引擎（Universal Inspection Engine）的功能，您可以编写一个搜索数据包头部或实际数据包内容的iRule，然后根据该检索结果来定向数据包。iRules还可以根据客户端认证的结果来定向数据包。</p>
<p>iRules不仅可以将流量定向到特定Pool，还可以将流量定向到单个Pool Member，甚至包括特定端口号和URI路径，以实现会话保持（persistence）或满足特定的负载均衡要求。</p>
<p>用于编写iRules的语法是基于工具命令语言（Tcl）编程标准。因此，您可以使用许多标准Tcl命令，以及本地流量管理器（LTM）提供的强大的扩展集，以帮助您进一步提高负载均衡效率。</p>
<blockquote>
<p>重要提示：引用iRule中的对象时，必须包含对象的完整路径名。</p>
</blockquote>
<h3 id="iRule命令"><a href="#iRule命令" class="headerlink" title="iRule命令"></a>iRule命令</h3><p>iRule中的 <em><strong>iRule命令</strong></em> 会使本地流量管理器（LTM）采取一些动作，如查询数据，操作数据，或指定流量的目的地。您可以在iRules中包含的命令类型有：</p>
<h4 id="声明命令（Statement-Commands）"><a href="#声明命令（Statement-Commands）" class="headerlink" title="声明命令（Statement Commands）"></a>声明命令（Statement Commands）</h4><p>这些命令会引起诸如选择流量目的地或分配SNAT转换地址等动作。语句命令的一个例子是<code>pool &lt;name&gt;</code>，它将流量引导到命名的负载平衡池（Pool）。</p>
<h4 id="查询或操纵数据的命令"><a href="#查询或操纵数据的命令" class="headerlink" title="查询或操纵数据的命令"></a>查询或操纵数据的命令</h4><p>一些命令会搜索报头（header）和内容数据，而其他命令执行数据操作，例如将header插入到HTTP请求中。查询命令的一个例子是 <code>IP:: remote_addr</code>，它搜索并返回连接的远程IP地址。数据操作命令的一个例子是<code>HTTP::header remove &lt;name&gt;</code>，它从请求或响应中删除命名的header的最后一次事件（occurrence）。</p>
<h4 id="工具命令（Utility-Commands）"><a href="#工具命令（Utility-Commands）" class="headerlink" title="工具命令（Utility Commands）"></a>工具命令（Utility Commands）</h4><p>这些命令是对解析和操作内容非常有用的功能。一个工具命令的例子是<code>decode_uri &lt;string&gt;</code>，它使用HTTP URI编码解码命名的字符串并返回结果。</p>
<h3 id="事件声明"><a href="#事件声明" class="headerlink" title="事件声明"></a>事件声明</h3><p>iRules是事件驱动的，这意味着本地流量管理器(LTM)会根据您在iRule中指定的事件来触发iRule。<em><strong>事件声明</strong></em> 是iRule中一个事件的详细描述，这个事件会导致本地流量管理器（LTM）不论何时，只要事件发生就触发iRule。事件<code>HTTP_REQUEST</code>是触发iRule事件声明的例子，每当系统收到HTTP请求时，此事件会触发iRule；还有事件<code> CLIENT_ACCCEPTED</code>，此事件会在客户端建立连接时触发iRule。</p>
<pre class="language-tcl" data-language="tcl"><code class="language-tcl">when HTTP_REQUEST <span class="token punctuation">&#123;</span> 
    <span class="token builtin">if</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">[</span>HTTP::uri<span class="token punctuation">]</span> contains <span class="token string">"aol"</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#123;</span>
        pool aol_pool 
    <span class="token punctuation">&#125;</span> <span class="token builtin">else</span> <span class="token punctuation">&#123;</span> 
        pool all_pool 
    <span class="token punctuation">&#125;</span> 
<span class="token punctuation">&#125;</span></code></pre>

<h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><p>iRule运算符会比较表达式中的两个操作数。</p>
<p>例如，您可以使用<code>contains</code>运算符将变量操作数与常量进行比较。您可以通过创建一个if语句来表示以下内容：“如果HTTP URI包含aol，发送到aol_pool池。</p>
<h2 id="创建iRule"><a href="#创建iRule" class="headerlink" title="创建iRule"></a>创建iRule</h2><p>您创建一个iRule来自定义BIG-IP系统处理流量的方式。</p>
<ol>
<li>在主选项卡（Main Tab）上，以此点击<strong>Local Traffic &gt; iRules</strong>.</li>
<li>点击<strong>Create</strong>。</li>
<li>在<strong>Name</strong>字段中，键入名称，如my_irule.iRule的完整路径名称不能超过255个字符.</li>
<li>在<strong>Definition</strong>字段中，使用“工具命令语言（Tcl）”语法键入iRule的语法。 有关iRules语法的完整和详细信息，请参阅F5 Networks DevCentral网站 <a href="http://devcentral.f5.com/">http://devcentral.f5.com</a>.</li>
<li>点击<strong>Finished</strong>.</li>
</ol>
<hr>
<h1 id="2-iRule命令"><a href="#2-iRule命令" class="headerlink" title="2 iRule命令"></a>2 iRule命令</h1><h2 id="iRule命令类型"><a href="#iRule命令类型" class="headerlink" title="iRule命令类型"></a>iRule命令类型</h2><p>有三种iRule命令类型：</p>
<ul>
<li>声明命令（Statement Commands）</li>
<li>查询与操作命令（Query and Manipulation Commands）</li>
<li>工具（Utility）命令（也称为函数）</li>
</ul>
<h3 id="声明命令"><a href="#声明命令" class="headerlink" title="声明命令"></a>声明命令</h3><p>iRules中一些可用的命令被称为声明命令（Statement Commands）。<em><strong>声明命令</strong></em> 使得LTM能够执行各种不同的动作。例如，其中一些命令可以指定要使用LTM来重定向的pool和server。其他命令指定实现SNAT连接的翻译地址（Translation Address）。还有其他命令用于指定类似data group或者persistence profile的对象。</p>
<blockquote>
<p>有关语句命令的完整列表，请参阅F5 Networks DevCentral网站 <a href="http://devcentral.f5.com./">http://devcentral.f5.com。</a></p>
</blockquote>
<h3 id="查询和操作命令"><a href="#查询和操作命令" class="headerlink" title="查询和操作命令"></a>查询和操作命令</h3><p>使用iRules命令，你可以查询包含在一个请求或相应的头部（Header）或内容中的特定数据，或者操作这些数据。数据处理指的是插入，替换和删除数据，以及设置在头部（Header）和Cookie中找到的某些值。</p>
<p>例如，使用iRules中的<code>IP::idle_timeout</code>命令，你可以查询当前被设置在数据包报头中的空闲超时（Idle Timeout）值，然后相对应地对数据包进行负载均衡。你也可以使用<code>IP :: idle_timeout</code>命令将空闲超时设置为您选择的特定值。</p>
<blockquote>
<p>有关iRules命令的命名空间的完整列表，请参阅F5 Networks DevCentral网站 <a href="http://devcentral.f5.com./">http://devcentral.f5.com。</a></p>
</blockquote>
<h3 id="工具命令"><a href="#工具命令" class="headerlink" title="工具命令"></a>工具命令</h3><p>LTM包括一些你可以在iRules中使用的工具命令。你可以使用这些命令来解析和检索内容，将数据编码为ASCII格式，校验数据完整性，以及检索关于Active的pool和pool member的信息。</p>
<h2 id="pool命令"><a href="#pool命令" class="headerlink" title="pool命令"></a>pool命令</h2><p>一旦你已经在iRules中指定了一个查询，你就可以使用<code>pool</code>命令来选择一个你希望LTM向其发送请求的负载均衡Pool。这是一个此命令的示例：</p>
<pre class="language-tcl" data-language="tcl"><code class="language-tcl">when HTTP_REQUEST <span class="token punctuation">&#123;</span> 
    <span class="token keyword">set</span> <span class="token variable">uri</span> <span class="token punctuation">[</span>HTTP::uri<span class="token punctuation">]</span> 
    <span class="token builtin">if</span> <span class="token punctuation">&#123;</span> $<span class="token variable">uri</span> ends_with <span class="token string">".gif"</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#123;</span>
        pool my_pool 
    <span class="token punctuation">&#125;</span> <span class="token builtin">elseif</span> <span class="token punctuation">&#123;</span> $<span class="token variable">uri</span> ends_with <span class="token string">".jpg"</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#123;</span>
        pool your_pool
    <span class="token punctuation">&#125;</span> 
<span class="token punctuation">&#125;</span></code></pre>

<h2 id="node命令"><a href="#node命令" class="headerlink" title="node命令"></a>node命令</h2><p>作为<code>pool</code>命令的替代命令，你也可以写一个定向流量到指定服务器（server）的iRule。要这样做，你可以使用<code>node</code>命令。</p>
<pre class="language-tcl" data-language="tcl"><code class="language-tcl">when HTTP_REQUEST <span class="token punctuation">&#123;</span> 
    <span class="token builtin">if</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">[</span>HTTP::uri<span class="token punctuation">]</span> ends_with <span class="token string">".gif"</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#123;</span>
        node 10.1.2.200 80 
    <span class="token punctuation">&#125;</span> 
<span class="token punctuation">&#125;</span></code></pre>

<h2 id="选择缓存服务器池（pool）的命令"><a href="#选择缓存服务器池（pool）的命令" class="headerlink" title="选择缓存服务器池（pool）的命令"></a>选择缓存服务器池（pool）的命令</h2><p>你可以创建一个iRule，这个iRule可以从缓存服务器池（pool）中选择一个服务器（Server）。这是一个从缓存服务器池中选择一个服务器的示例：</p>
<pre class="language-tcl" data-language="tcl"><code class="language-tcl">when HTTP_REQUEST <span class="token punctuation">&#123;</span>
    <span class="token comment"># This line specifies the expressions that determine whether the BIG-IP system sends requests to the cache pool:</span>
    <span class="token builtin">if</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">[</span>HTTP::uri<span class="token punctuation">]</span> ends_with <span class="token string">"html"</span> or <span class="token punctuation">[</span>HTTP::uri<span class="token punctuation">]</span> ends_with <span class="token string">"gif"</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#123;</span>
        pool cache_pool
        <span class="token keyword">set</span> <span class="token variable">key</span> <span class="token punctuation">[</span>crc32 <span class="token punctuation">[</span><span class="token keyword">concat</span> <span class="token punctuation">[</span>domain <span class="token punctuation">[</span>HTTP::host<span class="token punctuation">]</span> 2<span class="token punctuation">]</span> <span class="token punctuation">[</span>HTTP::uri<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
        <span class="token keyword">set</span> <span class="token variable">cache_mbr</span> <span class="token punctuation">[</span>persist lookup hash $<span class="token variable">key</span> node<span class="token punctuation">]</span>
        <span class="token builtin">if</span> <span class="token punctuation">&#123;</span> $<span class="token variable">cache_mbr</span> <span class="token operator">ne</span> <span class="token string">""</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#123;</span>
            <span class="token comment"># This line verifies that the request is not coming from the cache:</span>
            <span class="token builtin">if</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">[</span>IP::addr <span class="token punctuation">[</span>IP::remote_addr<span class="token punctuation">]</span> equals $<span class="token variable">cache_mbr</span><span class="token punctuation">]</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#123;</span>
                <span class="token comment"># This line sends the request from the cache to the origin pool:</span>
                pool origin_pool
                <span class="token builtin">return</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token comment">#These lines ensure that the persistence record is added for this host/URI:</span>
    persist hash $<span class="token variable">key</span>
    <span class="token punctuation">&#125;</span> <span class="token builtin">else</span> <span class="token punctuation">&#123;</span>
        pool origin_pool
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>

<blockquote>
<p>注意：LTM是在BIG-IP系统接收到URI的请求时，重定向URI到一个新的缓存服务器，而不是在pool member变为不可用时进行这一重定向操作。</p>
</blockquote>
<h2 id="HTTP-redirect命令"><a href="#HTTP-redirect命令" class="headerlink" title="HTTP::redirect命令"></a><code>HTTP::redirect</code>命令</h2><p>除了配置iRule来选择指定的pool，你也可以使用 <code>HTTP::redirect</code> iRule命令来重定向HTTP请求到特定位置（location）。这个位置（location）可以是一个主机名或是一个URI。</p>
<p>以下是一个被配置来重定向HTTP响应的iRule。</p>
<pre class="language-tcl" data-language="tcl"><code class="language-tcl">when HTTP_RESPONSE <span class="token punctuation">&#123;</span>
    <span class="token builtin">if</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">[</span>HTTP::status<span class="token punctuation">]</span> contains <span class="token string">"404"</span><span class="token punctuation">&#125;</span> <span class="token punctuation">&#123;</span>
        HTTP::redirect <span class="token string">"http://www.siterequest.com/"</span> 
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>这是一个重定向HTTP请求的iRule示例：</p>
<pre class="language-tcl" data-language="tcl"><code class="language-tcl">when HTTP_REQUEST <span class="token punctuation">&#123;</span>
    <span class="token builtin">if</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">[</span>HTTP::uri<span class="token punctuation">]</span> contains <span class="token string">"secure"</span><span class="token punctuation">&#125;</span> <span class="token punctuation">&#123;</span> 
        HTTP::redirect <span class="token string">"https://[HTTP::host][HTTP::uri]"</span>
    <span class="token punctuation">&#125;</span> 
<span class="token punctuation">&#125;</span></code></pre>

<h2 id="snat和snatpool命令"><a href="#snat和snatpool命令" class="headerlink" title="snat和snatpool命令"></a><code>snat</code>和<code>snatpool</code>命令</h2><p>iRules功能包括2个声明命令<code>snat</code>和<code>snatpool</code>。使用<code>snat</code>命令可以为iRule中的初始（Original）IP地址分配一个指定的翻译地址（Translation Address），而不是使用BIG-IP Configuration utility中的SNAT界面。</p>
<p>使用<code>snatpool</code>命令也可以为初始（Original）IP地址分配翻译地址（Translation Address），尽管不像<code>snat</code>命令，<code>snatpool</code>命令使得LTM从你之前创建的一个特定SNAT池（pool）中选择翻译地址。</p>
<hr>
<h1 id="3-iRule评估（evaluation）"><a href="#3-iRule评估（evaluation）" class="headerlink" title="3 iRule评估（evaluation）"></a>3 iRule评估（evaluation）</h1><h2 id="关于iRule评估（evaluation）"><a href="#关于iRule评估（evaluation）" class="headerlink" title="关于iRule评估（evaluation）"></a>关于iRule评估（evaluation）</h2><p>在不存在iRule的基本系统配置中，LTM将入站流量引导到接收这些流量的VS的默认pool。然而，你可能想让LTM引导某些连接到其他目的地。如果想这样做，可以写一个引导流量到其他目的地的iRule，但这依赖于某种类型的事件发生。否则，流量继续被引导到给VS所分配的默认pool。</p>
<p>因此，每当一个你已经在iRule中指定的事件发生时，iRules都将被评估（evaluate）。例如，如果iRule包含事件声明<code>CLIENT_ACCEPTED</code>，那么每当LTM接受一个客户端连接，iRule将被触发。然后，LTM遵循iRule的剩余部分来决定数据包的目的地。</p>
<blockquote>
<p>注意：当你对iRule进行持久化修改，如果连接表中已经存在连接，那么，修改只有在连接到期后才会生效。同理，当你启用iRule的日志，然后修改iRule（或者变更日志消息本身），也是类似的。</p>
</blockquote>
<h2 id="事件类型"><a href="#事件类型" class="headerlink" title="事件类型"></a>事件类型</h2><p>iRule命令语法包括几种你可以在iRule中指定的事件声明类型。例如：</p>
<ul>
<li>全局事件，例如<code>CLIENT_ACCEPTED</code></li>
<li>HTTP事件，例如<code>HTTP_REQUEST</code></li>
<li>SSL事件，例如<code>CLIENTSSL_HANDSAKE</code></li>
<li>认证（Authentication）事件，例如<code>AUTH_SUCCESS</code></li>
</ul>
<blockquote>
<p>有关iRule事件及其说明的完整列表，请参阅F5 Networks DevCentral网站 <a href="http://devcentral.f5.com./">http://devcentral.f5.com。</a></p>
</blockquote>
<h2 id="iRule上下文（context）"><a href="#iRule上下文（context）" class="headerlink" title="iRule上下文（context）"></a>iRule上下文（context）</h2><p>对于每个你在iRule中指定的事件，你也可以指定由关键字<code>clientside</code>或<code>serverside</code>所表示的上下文（context）。因为每个事件都有与之关联的默认上下文，所以，如果你想要修改默认的上下文（context），你只需要声明一个上下文（context）。</p>
<p>这个例子展示了<code>my_iRule1</code>，它包含事件声明 <code>CLIENT_ACCEPTED</code>，以及iRule命令<code>IP::remote_addr</code>。在这种情况下，iRule命令返回的IP地址是客户端的IP地址。因为事件声明<code>CLIENT_ACCEPED</code>的默认上下文（context）是<code>clientside</code>。</p>
<pre class="language-tcl" data-language="tcl"><code class="language-tcl">when CLIENT_ACCEPTED <span class="token punctuation">&#123;</span> 
    <span class="token builtin">if</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">[</span>IP::addr <span class="token punctuation">[</span>IP::remote_addr<span class="token punctuation">]</span> equals 10.1.1.80<span class="token punctuation">]</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#123;</span>
        pool my_pool1 
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>同样地，如果你在iRule中包括事件声明<code>SERVER_CONNECTED</code>，以及iRule命令<code>IP::remote_addr</code>，那么iRule命令返回的IP地址就是服务器的IP地址。因为，事件声明<code>SERVER_CONNECTED</code>的默认上下文是<code>serverside</code>。</p>
<p>上述例子展示了当你在处理iRule命令时，编写使用默认上下文（context）的iRule<br>将发生什么。然而，你可以显式地指定关键字<code>clientside</code>和<code>serverside</code>来变更iRule命令的行为。</p>
<p>继续之前的例子，下面的例子展示了事件声明<code>SERVER_CONNECTED</code>和显式地为iRule命令<code>IP::remote_addr</code>指定关键字<code>clientside</code>。在这种情况下，iRule命令返回的IP地址就是客户端的IP地址，尽管事件声明的默认上下文是服务器端。</p>
<pre class="language-none"><code class="language-none">when SERVER_CONNECTED &#123;
    if &#123; [IP::addr [IP::addr [clientside &#123;IP::remote_addr&#125;] equals 10.1.1.80] &#125; &#123;
        discard 
    &#125; 
&#125;</code></pre>

<blockquote>
<p>注意：你可以通过使用一个紧跟在事件名后的关键字<code>when</code>在iRule中进行事件声明。这展示了iRule中事件声明的一个例子。</p>
</blockquote>
<h2 id="VS的iRules分配"><a href="#VS的iRules分配" class="headerlink" title="VS的iRules分配"></a>VS的iRules分配</h2><p>当你将多个iRules作为资源分配给VS时，考虑这些iRules在VS中被列出的顺序是很重要的。这是因为LTM以可用的iRules被列出的顺序来处理重复的iRule事件。因此，一个iRule事件可以终结事件触发，从而阻止LTM触发随后的事件。</p>
<blockquote>
<p>如果一个iRule引用了一个profile，LTM最后处理这种类型的iRule，而不管它本身在VS的iRules列表中的顺序。</p>
</blockquote>
<hr>
<h1 id="4-iRules与管理分区"><a href="#4-iRules与管理分区" class="headerlink" title="4 iRules与管理分区"></a>4 iRules与管理分区</h1><p>你应该了解与管理分区相关的某些iRule配置概念：</p>
<ul>
<li>iRule可以引用任何对象，无论所引用的对象属于哪个分区。例如，贮存（reside）在分区 <em>partition_a</em> 的iRule可以包含指定了贮存（reside）在分区 <em>partition_b</em> 的pool对象的pool语句。</li>
<li>你可以只从贮存（reside）在当前写入分区（Write Partition）或分区 <em>Common</em> 中的VS里删除iRule分配。</li>
<li>注意：你可以只将iRule与贮存（reside）在当前写分区（Write partition）或分区 <em>Common</em> 中的VS进行关联。</li>
<li>你可以将现有的iRule与多个VS进行关联。在这种情况下，iRule将成为与在当前写分区（Write partition）中的每个VS相关联的唯一iRule。因为这条命令覆盖了之前所有的iRule分配。F5不推荐使用此命令。</li>
</ul>
<hr>
<h1 id="5-iRules与本地流量Profiles"><a href="#5-iRules与本地流量Profiles" class="headerlink" title="5 iRules与本地流量Profiles"></a>5 iRules与本地流量Profiles</h1><h2 id="iRules与模板（Profiles）"><a href="#iRules与模板（Profiles）" class="headerlink" title="iRules与模板（Profiles）"></a>iRules与模板（Profiles）</h2><p>当你在写iRule时，你可能想要iRule识别特定模板（profile）配置的值，以便能够做出更加有根据的流量管理决定。幸运的是，iRules功能包括这样一个命令，这个命令是专门设计来读取你在iRule脚本中指定的模板（profile）设置的值。</p>
<p>iRule不仅可以读取模板（profile）配置的值，还可以覆盖某些设置的值。这意味着你可以针对个别连接（connection）应用不同的配置值。这里的个别连接指的是所配置的值与LTM应用于大多数通过VS的连接的配置值所不同的连接。</p>
<h2 id="profile命令"><a href="#profile命令" class="headerlink" title="profile命令"></a><code>profile</code>命令</h2><p>iRules功能包含一个叫作<code>PROFILE</code>的命令。当你在iRule中指定<code>PROFILE</code>命令和指定模板（profile）类型和设置，iRule会读取指定模板（profile）的配置值。为此，iRule会找到分配给VS的指定模板（profile）类型，然后读取你在<code>PROFILE</code>中命令序列中指定的配置值。然后，iRule可以使用此信息来管理流量。</p>
<p>例如，你可以在你的iRule中指定命令<code>PROFILE::tcp idle_timeout</code>。然后，LTM会找到分配给VS的TCP profile（比如，<code>my_tcp</code>）,并查询你给空闲超时（Idel Timeout）设置所分配的值。</p>
<h2 id="覆盖模板（profile）配置的命令"><a href="#覆盖模板（profile）配置的命令" class="headerlink" title="覆盖模板（profile）配置的命令"></a>覆盖模板（profile）配置的命令</h2><p>一些用于查询和造作报头和数据内容的iRule命令在各种profile中有着等价的配置。当你在iRule中使用这些命令，并且一个事件触发了这条iRule，LTM将使用在iRule中指定的值覆盖这些profile设置的值。</p>
<p>例如，HTTP profile可能指定某个用于压缩HTTP数据的缓冲区大小，但是你可能想要为特定类型的HTTP连接指定一个不同的缓冲区大小。在这种情况下，你可以在你的iRule中包含命令<code>HTTP::compress_buffer_size</code>，以指定一个不同于profile中的值。</p>
<hr>
<h1 id="6-数据组-Data-Groups"><a href="#6-数据组-Data-Groups" class="headerlink" title="6 数据组 - Data Groups"></a>6 数据组 - Data Groups</h1><h2 id="关于数据组"><a href="#关于数据组" class="headerlink" title="关于数据组"></a>关于数据组</h2><p>编写iRules时，数据组是非常有用的。一个数据组只是一组相关的元素，例如AOL客户端的一组IP地址。当您用<code>class match</code>命令或 运算符<code>contains</code>指定数据组时，您不需要在iRule表达式中列出多个值作为参数。</p>
<p>您可以定义三种类型的数据组：地址，整数和字符串。</p>
<p>BIG-IP系统包括三个预配置数据组： <em>private_net</em>，<em>images</em>，和 <em>aol</em>。</p>
<p>要了解数据组的有用性，首先要了解<code>class match</code>命令和运算符<code>contains</code>。</p>
<blockquote>
<p>注意：您只能根据你的用户角色和分区访问分配来管理您有权限管理的那些数据组。</p>
</blockquote>
<blockquote>
<p>警告：不要试图修改或删除三种预配置数据组中的任何一种（private_net，images，和aol）。否则可能会产生不良后果。</p>
</blockquote>
<h3 id="关于class-match命令"><a href="#关于class-match命令" class="headerlink" title="关于class match命令"></a>关于<code>class match</code>命令</h3><p>BIG-IP系统包括一个称为<code>class</code>的iRule命令 ，此命令具有一个<code>match</code>选项，根据iRule中使用的命令是否表示特定数据组的成员，您可以使用该命令来选择Pool。当你使用<code>class</code>命令，BIG-IP系统知道跟在标识符后面的字符串是数据组的名称。</p>
<p>例如，如果<code>IP::remote_addr</code>命令的值是数据组AOL的成员，使用<code>class</code>命令，您可以使BIG-IP系统将所有入站的AOL连接负载均衡到aol_pool池。在这种情况下，<code>class match</code>命令表示命名为aol的对象是一个值的集合（即一个数据组）。</p>
<pre class="language-tcl" data-language="tcl"><code class="language-tcl">when CLIENT_ACCEPTED <span class="token punctuation">&#123;</span> 
    <span class="token builtin">if</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">[</span>class match <span class="token punctuation">[</span>IP::remote_addr<span class="token punctuation">]</span> equals aol<span class="token punctuation">]</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#123;</span>
        pool aol_pool 
    <span class="token punctuation">&#125;</span> <span class="token builtin">else</span> <span class="token punctuation">&#123;</span>
        pool all_pool
    <span class="token punctuation">&#125;</span> 
<span class="token punctuation">&#125;</span></code></pre>

<h3 id="存储选项"><a href="#存储选项" class="headerlink" title="存储选项"></a>存储选项</h3><p>使用LTM，你能够以2种方式存储数据，<em>内嵌存储（in-line storage）</em> 或者 <em>外部存储</em>。</p>
<h4 id="内嵌存储（in-line-storage）"><a href="#内嵌存储（in-line-storage）" class="headerlink" title="内嵌存储（in-line storage）"></a>内嵌存储（in-line storage）</h4><p>当你创建data group时，LTM会自动把所创建的data group完整地保存在配置文件<code>bigip.conf</code>中。这种存储类型称为</p>
<p>一般来说，由于对大数据组（data group）有大量检索要求，<em>内嵌存储（in-line storage）</em> 会使用额外的系统资源。因此，LTM向你提供了外部存储数据的能力，也就是，存储在<code>bigip.conf</code>文件以外的文件。</p>
<h4 id="外部存储（External-storage）"><a href="#外部存储（External-storage）" class="headerlink" title="外部存储（External storage）"></a>外部存储（External storage）</h4><p>你可以选择将数据组（data group）存储在BIG-IP系统上的其他位置，也就是说，<code>bigip.conf</code>以外的文件。这样的数据组（data group）称为<em>外部数据组（external data groups）</em>。因为数据组（data group）被存储在其他位置，<code>bigip.conf</code>文件本身只包含数据组（data group）的文件名和元数据（meta-data）。在外部存储的数据组（data group）文件中的数据以逗号分隔的值的列表（CSV格式）被存储。</p>
<blockquote>
<p>重要：如果你尝试加载包含外部数据组（data group）元数据（meta-data）的<code>bigip.conf</code>文件，并且此文件是BIP-IP 系统v9.4之前的版本创建的，系统将产生错误。外部数据组的元数据（meta-data）包含关键字<code>extern</code>，也就是这个关键字导致了加载过程中错误的产生。BIP-IP 系统v9.4及其以后版本，<code>bigip.conf</code>文件已经不再需要关键字<code>extern</code>了。</p>
</blockquote>
<p>为了创建外部数据组，你要先使用BIG-IP Configuration utility的 <strong>System</strong> 选项从其他位置导入一个文件。然后，使用<strong>Local Traffic iRules</strong>配置界面，来创建一个基于该导入文件的外部数据组。</p>
<p>根据平台硬件和可用内存（建议使用8GB或更多内存）外部数据组（external data group）扩展到超过10,000,000条条目。拥有更大数据项目的数据组可以用较少条目的外部数据来支持。此外，对外部数据组的更新是完全原子的（atomic）：例如，只有新数据成功完成加载后，系统才会更新数据组。你可以使用命令<code>[class exists xyz]</code>来检查数据组是否已经完成加载了。</p>
<h3 id="关于data-groups的文件导入"><a href="#关于data-groups的文件导入" class="headerlink" title="关于data groups的文件导入"></a>关于data groups的文件导入</h3><p>使用BIG-IP Configuration utility，你可以导入包含你想要在data group中使用的内容的外部文件。当你将一个现有文件导入BIG-IP系统，那么BIG-IP系统会创建一个包含指定内容（地址，字符串或整数）类型的data group。</p>
<h4 id="导入data-group的文件"><a href="#导入data-group的文件" class="headerlink" title="导入data group的文件"></a>导入data group的文件</h4><p>使用BIG-IP Configuration utility，你可以从外部系统导入文件，并使用此文件来创建data group。</p>
<ol>
<li>在主标签页，依次点击 <strong>System &gt; File Management &gt; Data Group File List &gt; Import</strong>。</li>
<li>对于文件名设置，点击 <strong>Browse</strong>。系统将打开一个浏览窗口，以便你可以定位到你希望导入到BIG-IP系统的文件。</li>
<li>在<strong>Name</strong>字段中，为导入的文件输入一个新名字。</li>
<li>从<strong>File Content</strong>列表中选择数据组的内容类型。</li>
<li>在<strong>Key&#x2F;Value Pair Separator</strong>字段中，保留默认值或删除值，然后指定一个新的分隔符。</li>
<li>在<strong>Data Group Name</strong>字段中，输入data group的名字。</li>
<li>点击<strong>Import</strong>按钮。</li>
</ol>
<h4 id="查看已导入的data-group文件的列表"><a href="#查看已导入的data-group文件的列表" class="headerlink" title="查看已导入的data group文件的列表"></a>查看已导入的data group文件的列表</h4><p>使用BIG-IP Configuration utility，你可以查看已经导入到BIG-IP系统的data group文件的列表。</p>
<ol>
<li>在主界标签页，依次点击 <strong>System &gt; File Management &gt; Data Group File List</strong>。</li>
<li>在名字列，查看文件的列表。</li>
</ol>
<hr>
<h1 id="7-iFiles"><a href="#7-iFiles" class="headerlink" title="7 iFiles"></a>7 iFiles</h1><h2 id="关于iRules文件的导入"><a href="#关于iRules文件的导入" class="headerlink" title="关于iRules文件的导入"></a>关于iRules文件的导入</h2><p>如果你想要写iRule，而这个iRule要引用一个贮存（reside）在其他系统上的文件，你必须先将此文件导入到BIG-IP系统里。然后，你可以将此文件转换为iRule可以引用的iFile。</p>
<h3 id="为iRule导入文件"><a href="#为iRule导入文件" class="headerlink" title="为iRule导入文件"></a>为iRule导入文件</h3><p>在你执行此操作之前，你想要导入的此文件必须贮存（reside）在你指定的系统上。</p>
<p>你可以将文件从其他系统导入到BIG-IP系统，这是编写引用该文件的iRule的第一步。</p>
<ol>
<li>在主标签页，依次点击 <strong>System &gt; File Management &gt; iFile List &gt; Import</strong>。</li>
<li>对于<strong>File Name</strong>的设置，点击 <strong>Browse</strong>。系统将打开一个浏览窗口，以便你可以定位到你希望导入到BIG-IP系统的文件。</li>
<li>浏览文件，然后点击<strong>Open</strong>。你选择的文件的名字将出现在<strong>File Name</strong>设置中。</li>
<li>在<strong>Name</strong>字段，输入新的文件名，例如<em>1k.html</em>。新的文件名将出现在导入的文件的列表中。</li>
<li>点击<strong>Import</strong>按钮。</li>
</ol>
<p>在你执行此任务后，你导入的文件将贮存（reside）在BIG-IP系统上。</p>
<h3 id="查看已导入文件的列表"><a href="#查看已导入文件的列表" class="headerlink" title="查看已导入文件的列表"></a>查看已导入文件的列表</h3><p>出于在iRule中引用这些文件的目的，你可以执行此操作来查看已经导入到BIG-IP系统的文件的列表。</p>
<ol>
<li>在主标签页，依次点击 <strong>System &gt; File Management &gt; iFile List</strong>。</li>
<li>在名字列，查看iFiles的列表。</li>
<li>点击<strong>Cancel</strong>按钮。</li>
</ol>
<h2 id="关于iFiles"><a href="#关于iFiles" class="headerlink" title="关于iFiles"></a>关于iFiles</h2><p>使用BIG-IP Configuration utility，你可以创建被称为iFile的特殊文件。一个 <em>iFile</em>是一个文件，此文件基于你之前从其他系统导入到BIG-IP系统上的外部文件。基于所指定的一个iRule事件，你可以从iRule中引用一个iFile。</p>
<p>为了创建一个iFile，并在iRule中使用它，你要从主标签页的<strong>Local Traffic</strong>选项开始。</p>
<blockquote>
<p>重要：在创建iFile之前，你必须将文件从其他系统导入到BIG-IP系统。</p>
</blockquote>
<h3 id="查看iFiles列表"><a href="#查看iFiles列表" class="headerlink" title="查看iFiles列表"></a>查看iFiles列表</h3><p>出于在iRule中引用这些文件的目的，你可以执行此操作来查看已经导入到BIG-IP系统的文件的列表。</p>
<ol>
<li>在主标签页，依次点击 <strong>Local Traffic &gt; iRules &gt; iFile List</strong>。</li>
<li>在名字列，查看你之前在BIG-IP上创建的iFiles的列表。</li>
</ol>
<h3 id="创建iFile"><a href="#创建iFile" class="headerlink" title="创建iFile"></a>创建iFile</h3><p>作为先决条件，确保当前管理分区被设置为你想要保存（reside）iFile的分区。还要确保该文件已经导入到BIG-IP系统了。</p>
<p>你可以执行此操作来创建你之后能够在iRule中引用的iFile。</p>
<ol>
<li>在主标签页，依次点击 <strong>Local Traffic &gt; iRules &gt; iFile List</strong>。</li>
<li>点击<strong>Create</strong>。</li>
<li>在<strong>Name</strong>字段中，输入新的iFile文件名，例如 <em>ifileURL</em>。</li>
<li>从<strong>File Name</strong>列表中，选择导入的文件对象的名字，例如 <em>1k.html</em>。</li>
<li>点击<strong>Finished</strong>。新的iFile就会出现在iFiles列表中。</li>
</ol>
<p>这个操作的结果是，你现在有了一个iRule可以引用的文件。</p>
<h2 id="引用iFile的iRule命令"><a href="#引用iFile的iRule命令" class="headerlink" title="引用iFile的iRule命令"></a>引用iFile的iRule命令</h2><p>有了这些iRule命令，你可以从iRule中引用新的iFile：</p>
<ul>
<li><code>[ifile get IFILENAME]</code></li>
<li><code>[ifile listall]</code></li>
<li><code>[ifile attributes IFILENAME]</code></li>
<li><code>[ifile size IFILENAME]</code></li>
<li><code>[ifile last_updated_by IFILENAME]</code></li>
<li><code>[ifile last_update_time IFILENAME]</code></li>
<li><code>[ifile revision IFILENAME]</code></li>
<li><code>[ifile checksum IFILENAME]</code></li>
<li><code>array set [file attributes IFILENAME]</code></li>
</ul>
<p>这个简单的iRule展示这些命令中的其中一些：</p>
<pre class="language-tcl" data-language="tcl"><code class="language-tcl">ltm rule ifile_rule <span class="token punctuation">&#123;</span> 
    when HTTP_RESPONSE <span class="token punctuation">&#123;</span> 
        <span class="token comment"># return a list of iFiles in all partitions </span>
        <span class="token keyword">set</span> <span class="token variable">listifiles</span> <span class="token punctuation">[</span>ifile listall<span class="token punctuation">]</span>
        log local0. <span class="token string">"list of ifiles: $listifiles"</span>
        
        <span class="token comment"># return the attributes of an iFile specified </span>
        <span class="token keyword">array</span> <span class="token keyword">set</span> array_attributes <span class="token punctuation">[</span>ifile attributes <span class="token string">"/Common/ifileURL"</span><span class="token punctuation">]</span>
        
        <span class="token builtin">foreach</span> <span class="token punctuation">&#123;</span>array attr<span class="token punctuation">&#125;</span> <span class="token punctuation">[</span><span class="token keyword">array</span> get array_attributes <span class="token punctuation">]</span> <span class="token punctuation">&#123;</span>
            log local0. <span class="token string">"$array : $attr"</span>
        <span class="token punctuation">&#125;</span> 
        
        <span class="token comment"># serve an iFile when http status is 404. </span>
        <span class="token keyword">set</span> <span class="token variable">file</span> <span class="token punctuation">[</span>ifile get <span class="token string">"Common/ifileURL"</span><span class="token punctuation">]</span> 
        log local0. <span class="token string">"file: $ifile"</span> 
        <span class="token builtin">if</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">[</span>HTTP::status<span class="token punctuation">]</span> equals <span class="token string">"404"</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#123;</span>
            HTTP::respond 200 ifile <span class="token string">"/Common/ifileURL"</span> 
        <span class="token punctuation">&#125;</span> 
    <span class="token punctuation">&#125;</span> 
<span class="token punctuation">&#125;</span></code></pre>]]></content>
      <categories>
        <category>F5</category>
      </categories>
      <tags>
        <tag>F5</tag>
        <tag>LoadBalance</tag>
      </tags>
  </entry>
  <entry>
    <title>配置和管理逻辑卷管理器 (Logical Volume Manager)</title>
    <url>/2022/Logical_Volume_Manager_Administration/</url>
    <content><![CDATA[<h1 id="1-逻辑卷管理概述"><a href="#1-逻辑卷管理概述" class="headerlink" title="1. 逻辑卷管理概述"></a>1. 逻辑卷管理概述</h1><p>逻辑卷管理 (LVM) 在物理存储上创建抽象层，帮助您创建逻辑存储卷。这比直接使用物理存储的方式具有更大的灵活性。</p>
<p>此外，硬件存储配置在软件中隐藏，因此可以调整大小并移动，无需停止应用或卸载文件系统。这可降低操作成本。</p>
<span id="more"></span>

<h2 id="1-1-LVM-组件"><a href="#1-1-LVM-组件" class="headerlink" title="1.1 LVM 组件"></a>1.1 LVM 组件</h2><p> LVM 具有以下基本组件：</p>
<ul>
<li><strong>物理卷 (Physical Volume, PV)</strong> ：物理卷 (PV) 是指定为 LVM 使用的物理硬盘分区或整个硬盘。如需更多信息，请参阅<a href="https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/configuring_and_managing_logical_volumes/managing-lvm-physical-volumes_configuring-and-managing-logical-volumes">管理 LVM 物理卷</a>。</li>
<li><strong>卷组 (Volume Group, VG)</strong> ：卷组 (VG) 是物理卷 (PV) 的集合，它会创建一个磁盘空间资源池，可以从中分配逻辑卷 (LV)。如需更多信息，请参阅<a href="https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/configuring_and_managing_logical_volumes/managing-lvm-volume-groups_configuring-and-managing-logical-volumes">管理 LVM 卷组</a>。</li>
<li><strong>逻辑卷 (Logical Volume, LV)</strong> ：逻辑卷 (LV) 代表可挂载的存储设备，用于创建文件系统。如需更多信息，请参阅<a href="https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/configuring_and_managing_logical_volumes/managing-lvm-logical-volumes_configuring-and-managing-logical-volumes">管理 LVM 逻辑卷</a>。</li>
</ul>
<p><img src="/2022/Logical_Volume_Manager_Administration/basic-lvm-volume-components.png" alt="LVM 逻辑卷组件"></p>
<ul>
<li><strong>物理扩展 (Physical Extend, PE)</strong> ：物理扩展 (PE) 是增大或者减小逻辑卷容量的最小值。当使用物理卷创建卷组时，默认情况下每个物理扩展 (PE) 的大小为 4MB。如果默认物理扩展 (PE) 大小不合适，可以使用 <code>-s</code> 选项为 <code>vgcreate</code> 命令指定范围大小。</li>
</ul>
<p><img src="/2022/Logical_Volume_Manager_Administration/pe_vg.gif" alt="VG和PE关系图"></p>
<p>如上图所示，VG 中的 PE 分配给虚线部分的 LV。如果未来要扩充 VG ，为这个 VG 添加其他的 PV 即可。如果要扩充 LV，也是通过分配 VG 中未使用的 PE 给 LV 实现的。</p>
<h2 id="1-2-LVM-的优点"><a href="#1-2-LVM-的优点" class="headerlink" title="1.2 LVM 的优点"></a>1.2 LVM 的优点</h2><p>与直接使用物理存储相比，逻辑卷具有以下优势：</p>
<ul>
<li><strong>灵活的容量</strong> ：使用逻辑卷时，您可以将设备和分区聚合到一个逻辑卷中。借助此功能，文件系统可以扩展到多个设备中，就像它们是一个单一的大型设备一样。</li>
<li><strong>存储卷大小</strong> ：您可以使用简单的软件命令扩展逻辑卷或减小逻辑卷大小，而无需重新格式化和重新分区基础设备。</li>
<li><strong>在线数据重新定位</strong> ：部署更新、更快或者更弹性的存储子系统，可以在系统活跃时移动数据。在磁盘处于使用状态时可以重新分配磁盘。例如，您可以在删除热插拔磁盘前将其清空。</li>
<li><strong>方便的设备命名</strong> ：逻辑卷可以使用用户定义的名称和自定义名称进行管理。</li>
<li><strong>条带化卷</strong> ：您可以创建一个在两个或者多个设备间条带化分布数据的逻辑卷。这可显著提高吞吐量。</li>
<li><strong>RAID 卷</strong> ：逻辑卷为您对数据配置 RAID 提供了一种便捷的方式。这可防止设备故障并提高性能。</li>
<li><strong>卷快照</strong> ：您可以对数据进行快照（逻辑卷在一个特点时间点上的副本）用于一致性备份或测试更改的影响，而不影响实际数据。</li>
<li><strong>精简卷</strong> ：逻辑卷可以使用精简模式置备。这可让您创建大于可用物理空间的逻辑卷。</li>
<li><strong>缓存卷</strong> ：缓存逻辑卷使用快速块设备，如 SSD 驱动器，以提高更大、较慢的块设备的性能。</li>
</ul>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>LVM</tag>
      </tags>
  </entry>
  <entry>
    <title>This beta version of Typora is expired</title>
    <url>/2022/This-beta-version-of-Typora-is-expired/</url>
    <content><![CDATA[<span id="more"></span>

<p><img src="/2022/This-beta-version-of-Typora-is-expired/dealwith0.webp"></p>
<p>通过修改注册表，可以解决这个问题：</p>
<ol>
<li>win+r 打开运行窗口</li>
<li>在搜索栏输入<code>regedit</code>，回车后打开注册表</li>
<li>在注册表中找到：<code>计算机\HKEY_CURRENT_USER\Software\Typora</code></li>
<li>鼠标右键Typora，选择权限</li>
<li>选择<code>Administraors</code>，将下面的权限选择为拒绝</li>
</ol>
<p><img src="/2022/This-beta-version-of-Typora-is-expired/dealwith.webp"></p>
<ol start="6">
<li>重新打开Typora，发现可以正常运行了</li>
</ol>
]]></content>
      <categories>
        <category>Miscellaneous</category>
      </categories>
      <tags>
        <tag>Editor</tag>
      </tags>
  </entry>
  <entry>
    <title>Ansible 用户指南</title>
    <url>/2022/ansible_user_guide/</url>
    <content><![CDATA[<h1 id="安装指南"><a href="#安装指南" class="headerlink" title="安装指南"></a>安装指南</h1><h2 id="安装-Ansible"><a href="#安装-Ansible" class="headerlink" title="安装 Ansible"></a>安装 Ansible</h2><h3 id="前提条件"><a href="#前提条件" class="headerlink" title="前提条件"></a>前提条件</h3><h4 id="控制节点要求-（Control-node-requirements）"><a href="#控制节点要求-（Control-node-requirements）" class="headerlink" title="控制节点要求 （Control node requirements）"></a>控制节点要求 （<a href="https://docs.ansible.com/ansible/latest/installation_guide/intro_installation.html#id8">Control node requirements</a>）</h4><p>除Windows外，其他任何安装了 Python 3.8 或更新版本的计算机都能成为控制节点，包括 RHEL，Debian，CentOS 以及任何 BSD 等等。</p>
<h4 id="被管理节点要求-（Managed-node-requirements）"><a href="#被管理节点要求-（Managed-node-requirements）" class="headerlink" title="被管理节点要求 （Managed node requirements）"></a>被管理节点要求 （<a href="https://docs.ansible.com/ansible/latest/installation_guide/intro_installation.html#id9">Managed node requirements</a>）</h4><p>对于大多数被管理的节点，Ansible使用SSH和SFTP来创建连接。但如果SFTP不可用，也可以使用SCP。同时，还需要运行Python。</p>
<h3 id="选择要安装的Ansible版本"><a href="#选择要安装的Ansible版本" class="headerlink" title="选择要安装的Ansible版本"></a>选择要安装的Ansible版本</h3><p>有2种方式安装Ansible：S</p>
<ul>
<li>使用各操作系统的包管理器安装预编译的Ansible包</li>
<li>使用<code>pip</code>安装Ansible</li>
</ul>
<h3 id="使用pip安装并升级Ansible"><a href="#使用pip安装并升级Ansible" class="headerlink" title="使用pip安装并升级Ansible"></a>使用<code>pip</code>安装并升级Ansible</h3><h4 id="使用pip安装Ansible"><a href="#使用pip安装Ansible" class="headerlink" title="使用pip安装Ansible"></a>使用<code>pip</code>安装Ansible</h4><p>安装Ansible：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ python -m pip <span class="token function">install</span> --user ansible</code></pre>

<p>安装paramiko：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ python -m pip <span class="token function">install</span> --user paramiko</code></pre>

<p>全局安装Ansible：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> python -m pip <span class="token function">install</span> ansible</code></pre>

<blockquote>
<p>Running <code>pip</code> with <code>sudo</code> will make global changes to the system. Since <code>pip</code> does not coordinate with system package managers, it could make changes to your system that leaves it in an inconsistent or non-functioning state. This is particularly true for macOS. Installing with <code>--user</code> is recommended unless you understand fully the implications of modifying global files on the system.</p>
</blockquote>
<h4 id="在虚拟环境中使用pip安装Ansible"><a href="#在虚拟环境中使用pip安装Ansible" class="headerlink" title="在虚拟环境中使用pip安装Ansible"></a>在虚拟环境中使用<code>pip</code>安装Ansible</h4><pre class="language-bash" data-language="bash"><code class="language-bash">$ python -m virtualenv ansible  <span class="token comment"># Create a virtualenv if one does not already exist</span>
$ <span class="token builtin class-name">source</span> ansible/bin/activate   <span class="token comment"># Activate the virtual environment</span>
$ python -m pip <span class="token function">install</span> ansible</code></pre>

<blockquote>
<p>高版本的Python3都自带了虚拟环境模块<code>venv</code>，不需要单独安装<code>virtualenv</code></p>
</blockquote>
<span id="more"></span>

<h3 id="验证安装"><a href="#验证安装" class="headerlink" title="验证安装"></a>验证安装</h3><p>不管使用哪种安装方式都可以使用以下命令验证Ansible安装正确：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ ansible all -m <span class="token function">ping</span> --ask-pass</code></pre>

<h3 id="为Ansible命令添加Shell补全功能"><a href="#为Ansible命令添加Shell补全功能" class="headerlink" title="为Ansible命令添加Shell补全功能"></a>为Ansible命令添加Shell补全功能</h3><h4 id="在RHEL-CentOS-or-Fedora上安装argcomplete"><a href="#在RHEL-CentOS-or-Fedora上安装argcomplete" class="headerlink" title="在RHEL, CentOS, or Fedora上安装argcomplete"></a><a href="https://docs.ansible.com/ansible/latest/installation_guide/intro_installation.html#installing-argcomplete-on-rhel-centos-or-fedora">在RHEL, CentOS, or Fedora上安装<code>argcomplete</code></a></h4><p>在Fedora上:</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> dnf <span class="token function">install</span> python-argcomplete</code></pre>

<p>在RHEL and CentOS上:</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> yum <span class="token function">install</span> epel-release
$ <span class="token function">sudo</span> yum <span class="token function">install</span> python-argcomplete</code></pre>

<h4 id="使用pip安装argcomplete"><a href="#使用pip安装argcomplete" class="headerlink" title="使用pip安装argcomplete"></a><a href="https://docs.ansible.com/ansible/latest/installation_guide/intro_installation.html#id41">使用<code>pip</code>安装<code>argcomplete</code></a></h4><pre class="language-bash" data-language="bash"><code class="language-bash">$ python -m pip <span class="token function">install</span> argcomplete</code></pre>

<h4 id="配置argcomplete"><a href="#配置argcomplete" class="headerlink" title="配置argcomplete"></a><a href="https://docs.ansible.com/ansible/latest/installation_guide/intro_installation.html#id42">配置<code>argcomplete</code></a></h4><p>有2种方式可以配置<code>argcomplete</code>：</p>
<ul>
<li>全局配置（Global configuration）</li>
<li>每命令配置 （Per command configuration）</li>
</ul>
<p>全局补全配置要求bash 4.2：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> activate-global-python-argcomplete</code></pre>

<p>如果没有bash 4.2，则必须为每个脚本独立注册。将以下命令放入shell配置文件<code>~/.profile</code> 或者 <code>~/.bash_profile</code>：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token builtin class-name">eval</span> <span class="token variable"><span class="token variable">$(</span>register-python-argcomplete ansible<span class="token variable">)</span></span>
$ <span class="token builtin class-name">eval</span> <span class="token variable"><span class="token variable">$(</span>register-python-argcomplete ansible-config<span class="token variable">)</span></span>
$ <span class="token builtin class-name">eval</span> <span class="token variable"><span class="token variable">$(</span>register-python-argcomplete ansible-console<span class="token variable">)</span></span>
$ <span class="token builtin class-name">eval</span> <span class="token variable"><span class="token variable">$(</span>register-python-argcomplete ansible-doc<span class="token variable">)</span></span>
$ <span class="token builtin class-name">eval</span> <span class="token variable"><span class="token variable">$(</span>register-python-argcomplete ansible-galaxy<span class="token variable">)</span></span>
$ <span class="token builtin class-name">eval</span> <span class="token variable"><span class="token variable">$(</span>register-python-argcomplete ansible-inventory<span class="token variable">)</span></span>
$ <span class="token builtin class-name">eval</span> <span class="token variable"><span class="token variable">$(</span>register-python-argcomplete ansible-playbook<span class="token variable">)</span></span>
$ <span class="token builtin class-name">eval</span> <span class="token variable"><span class="token variable">$(</span>register-python-argcomplete ansible-pull<span class="token variable">)</span></span>
$ <span class="token builtin class-name">eval</span> <span class="token variable"><span class="token variable">$(</span>register-python-argcomplete ansible-vault<span class="token variable">)</span></span></code></pre>

<h2 id="Ansible配置文件"><a href="#Ansible配置文件" class="headerlink" title="Ansible配置文件"></a>Ansible配置文件</h2><h3 id="获取最新的配置"><a href="#获取最新的配置" class="headerlink" title="获取最新的配置"></a>获取最新的配置</h3><p>如果是从包管理器安装Ansible，则最新的<code>ansible.cfg</code>文件应该在<code>/etc/ansible</code>中。</p>
<p>如果使用<code>pip</code>安装Ansible，你可能需要手动创建此文件以覆盖旧的Ansible配置。可以从github获取<a href="https://github.com/ansible/ansible/blob/devel/examples/ansible.cfg">最新的<code>ansible.cfg</code>实例</a>。</p>
<p>从Ansible 2.4开始，可以使用<code>ansible-config</code>命令行工具查看所有可用的选项并检查当前的值。</p>
<p>从Ansible 2.12(core) 开始，要生成示例配置文件（所有默认<code>disabled</code>的配置都被注释）可以使用<code>ansible-config init</code>命令：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ ansible-config init --disabled <span class="token operator">></span> ansible.cfg</code></pre>

<p>通过包含存在的插件还生成更完整的配置文件：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ ansible-config init --disabled -t all <span class="token operator">></span> ansible.cfg</code></pre>

<p>要获得所有可用的配置请访问<a href="https://docs.ansible.com/ansible/latest/reference_appendices/config.html#ansible-configuration-settings">configuration_settings</a>.</p>
<h3 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h3><p>Ansible也允许使用环境变量配置。如果这些环境变量被设置，则从配置文件加载的配置将被覆盖。</p>
<p>要获得所有可用的环境变量，请访问<a href="https://docs.ansible.com/ansible/latest/reference_appendices/config.html#ansible-configuration-settings">Ansible Configuration Settings</a></p>
<h3 id="命令行选项"><a href="#命令行选项" class="headerlink" title="命令行选项"></a>命令行选项</h3><p>命令行只包含最常用的配置选项。命令行中的参数将覆盖从配置文件和环境变量传入的配置。</p>
<h1 id="用户手册"><a href="#用户手册" class="headerlink" title="用户手册"></a>用户手册</h1><h2 id="Ansible中的概念"><a href="#Ansible中的概念" class="headerlink" title="Ansible中的概念"></a>Ansible中的概念</h2><ul>
<li>控制节点 (Control node)：必须是Linux。需要安装Python。</li>
<li>被管理节点 (Managed nodes)：</li>
<li>Inventory:</li>
<li>Collections:</li>
<li>Modules:</li>
<li>Tasks</li>
<li>Playbooks</li>
</ul>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>ansible</tag>
      </tags>
  </entry>
  <entry>
    <title>批量将某li某li特定关注组中的UP修改为悄悄关注</title>
    <url>/2022/batch_modify_bilibili_follow_group/</url>
    <content><![CDATA[<p>如题，调用batchModify函数即可批量将某li某li特定关注组中的UP修改为悄悄关注。</p>
<span id="more"></span>

<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/**
*将bilibili某个关注组中的所有up批量改为悄悄关注
*@param mid &#123;number&#125; 自己的id
*@param tagid &#123;number&#125; 要被批量修改的关注组的组id
*/</span>
<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">batchModify</span><span class="token punctuation">(</span><span class="token parameter">mid<span class="token punctuation">,</span> tagid<span class="token punctuation">,</span> maxPageNum<span class="token operator">=</span><span class="token number">100</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">let</span> csrf<span class="token punctuation">;</span>
    document<span class="token punctuation">.</span>cookie<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'; '</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>item<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">'bili_jct'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            csrf <span class="token operator">=</span> item<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'='</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> pn <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> pn <span class="token operator">&lt;=</span> maxPageNum<span class="token punctuation">;</span> pn<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">const</span> resp <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">https://api.bilibili.com/x/relation/tag?mid=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>mid<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">&amp;tagid=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>tagid<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">&amp;pn=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>pn<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">&amp;ps=20&amp;json=json&amp;callback=__jp16</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>
        <span class="token string-property property">"headers"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
          <span class="token string-property property">"accept"</span><span class="token operator">:</span> <span class="token string">"*/*"</span><span class="token punctuation">,</span>
          <span class="token string-property property">"accept-language"</span><span class="token operator">:</span> <span class="token string">"zh-CN,zh;q=0.9"</span><span class="token punctuation">,</span>
          <span class="token string-property property">"cache-control"</span><span class="token operator">:</span> <span class="token string">"no-cache"</span><span class="token punctuation">,</span>
          <span class="token string-property property">"pragma"</span><span class="token operator">:</span> <span class="token string">"no-cache"</span><span class="token punctuation">,</span>
          <span class="token string-property property">"sec-ch-ua"</span><span class="token operator">:</span> <span class="token string">"\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"101\", \"Google Chrome\";v=\"101\""</span><span class="token punctuation">,</span>
          <span class="token string-property property">"sec-ch-ua-mobile"</span><span class="token operator">:</span> <span class="token string">"?0"</span><span class="token punctuation">,</span>
          <span class="token string-property property">"sec-ch-ua-platform"</span><span class="token operator">:</span> <span class="token string">"\"Windows\""</span><span class="token punctuation">,</span>
          <span class="token string-property property">"sec-fetch-dest"</span><span class="token operator">:</span> <span class="token string">"script"</span><span class="token punctuation">,</span>
          <span class="token string-property property">"sec-fetch-mode"</span><span class="token operator">:</span> <span class="token string">"cors"</span><span class="token punctuation">,</span>
          <span class="token string-property property">"sec-fetch-site"</span><span class="token operator">:</span> <span class="token string">"same-site"</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
        <span class="token string-property property">"referrer"</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">https://space.bilibili.com/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>mid<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">/fans/follow?tagid=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>tagid<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>
        <span class="token string-property property">"referrerPolicy"</span><span class="token operator">:</span> <span class="token string">"no-referrer-when-downgrade"</span><span class="token punctuation">,</span>
        <span class="token string-property property">"body"</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
        <span class="token string-property property">"method"</span><span class="token operator">:</span> <span class="token string">"GET"</span><span class="token punctuation">,</span>
        <span class="token string-property property">"mode"</span><span class="token operator">:</span> <span class="token string">"cors"</span><span class="token punctuation">,</span>
        <span class="token string-property property">"credentials"</span><span class="token operator">:</span> <span class="token string">"include"</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">const</span> json <span class="token operator">=</span> <span class="token keyword">await</span> resp<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>json<span class="token punctuation">.</span>data<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> item <span class="token keyword">of</span> json<span class="token punctuation">.</span>data<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>mid<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">await</span> <span class="token function">modify</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>mid<span class="token punctuation">,</span> csrf<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span> 
<span class="token punctuation">&#125;</span>

<span class="token comment">/**
* 将用户id为fid的up注改为悄悄关注
* @param fid &#123;number&#125; 要修改为悄悄关注的up的用户id
*/</span>
<span class="token keyword">function</span> <span class="token function">modify</span><span class="token punctuation">(</span><span class="token parameter">fid<span class="token punctuation">,</span> csrf</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">"https://api.bilibili.com/x/relation/modify"</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>
      <span class="token string-property property">"headers"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
        <span class="token string-property property">"accept"</span><span class="token operator">:</span> <span class="token string">"application/json, text/plain, */*"</span><span class="token punctuation">,</span>
        <span class="token string-property property">"accept-language"</span><span class="token operator">:</span> <span class="token string">"zh-CN,zh;q=0.9"</span><span class="token punctuation">,</span>
        <span class="token string-property property">"cache-control"</span><span class="token operator">:</span> <span class="token string">"no-cache"</span><span class="token punctuation">,</span>
        <span class="token string-property property">"content-type"</span><span class="token operator">:</span> <span class="token string">"application/x-www-form-urlencoded"</span><span class="token punctuation">,</span>
        <span class="token string-property property">"pragma"</span><span class="token operator">:</span> <span class="token string">"no-cache"</span><span class="token punctuation">,</span>
        <span class="token string-property property">"sec-ch-ua"</span><span class="token operator">:</span> <span class="token string">"\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"101\", \"Google Chrome\";v=\"101\""</span><span class="token punctuation">,</span>
        <span class="token string-property property">"sec-ch-ua-mobile"</span><span class="token operator">:</span> <span class="token string">"?0"</span><span class="token punctuation">,</span>
        <span class="token string-property property">"sec-ch-ua-platform"</span><span class="token operator">:</span> <span class="token string">"\"Windows\""</span><span class="token punctuation">,</span>
        <span class="token string-property property">"sec-fetch-dest"</span><span class="token operator">:</span> <span class="token string">"empty"</span><span class="token punctuation">,</span>
        <span class="token string-property property">"sec-fetch-mode"</span><span class="token operator">:</span> <span class="token string">"cors"</span><span class="token punctuation">,</span>
        <span class="token string-property property">"sec-fetch-site"</span><span class="token operator">:</span> <span class="token string">"same-site"</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
      <span class="token string-property property">"referrer"</span><span class="token operator">:</span> <span class="token string">"https://space.bilibili.com/14629610/?spm_id_from=333.999.0.0"</span><span class="token punctuation">,</span>
      <span class="token string-property property">"referrerPolicy"</span><span class="token operator">:</span> <span class="token string">"no-referrer-when-downgrade"</span><span class="token punctuation">,</span>
      <span class="token string-property property">"body"</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">fid=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>fid<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">&amp;act=3&amp;re_src=11&amp;spmid=333.999.0.0&amp;extend_content=%7B%22entity%22%3A%22user%22%2C%22entity_id%22%3A14629610%2C%22fp%22%3A%220%5Cu00011920%2C%2C1080%5Cu0001Win32%5Cu000116%5Cu00018%5Cu000124%5Cu00011%5Cu0001zh-CN%5Cu00011%5Cu00010%2C%2C0%2C%2C0%5Cu0001Mozilla%2F5.0%20%28Windows%20NT%2010.0%3B%20Win64%3B%20x64%29%20AppleWebKit%2F537.36%20%28KHTML%2C%20like%20Gecko%29%20Chrome%2F101.0.4951.67%20Safari%2F537.36%22%7D&amp;jsonp=jsonp&amp;csrf=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>csrf<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>
      <span class="token string-property property">"method"</span><span class="token operator">:</span> <span class="token string">"POST"</span><span class="token punctuation">,</span>
      <span class="token string-property property">"mode"</span><span class="token operator">:</span> <span class="token string">"cors"</span><span class="token punctuation">,</span>
      <span class="token string-property property">"credentials"</span><span class="token operator">:</span> <span class="token string">"include"</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span></code></pre>]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>Reverse</tag>
        <tag>PWN</tag>
      </tags>
  </entry>
  <entry>
    <title>CheatEngine Tutorial</title>
    <url>/2022/cheat_engine_tutorial/</url>
    <content><![CDATA[<h1 id="CheatEngine-Tutorial"><a href="#CheatEngine-Tutorial" class="headerlink" title="CheatEngine Tutorial"></a>CheatEngine Tutorial</h1><h2 id="Step-1"><a href="#Step-1" class="headerlink" title="Step 1"></a>Step 1</h2><p><img src="/2022/cheat_engine_tutorial/image-20220215145201605.png"></p>
<h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><pre class="language-text" data-language="text"><code class="language-text">Welcome to the Cheat Engine Tutorial (v3.6)

This tutorial will teach you the basics of cheating in video games. It will also show you foundational aspects of using Cheat Engine (or CE for short). Follow the steps below to get started.

1: Open Cheat Engine if it currently isn't running.
2: Click on the "Open Process" icon (it's the top-left icon with the computer on it, below "File".).
3: With the Process List window now open, look for this tutorial's process in the list. It will look something like "00001F98-Tutorial-x86_64.exe" or "0000047C-Tutorial-i386.exe". (The first 8 numbers/letters will probably be different.)
4: Once you've found the process, click on it to select it, then click the "Open" button. (Don't worry about all the other buttons right now. You can learn about them later if you're interested.)

Congratulations! If you did everything correctly, the process window should be gone with Cheat Engine now attached to the tutorial (you will see the process name towards the top-center of CE).

Click the "Next" button below to continue, or fill in the password and click the "OK" button to proceed to that step.)

If you're having problems, simply head over to forum.cheatengine.org, then click on "Tutorials" to view beginner-friendly guides!</code></pre>

<h3 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h3><h4 id="步骤1：选择要附加的进程"><a href="#步骤1：选择要附加的进程" class="headerlink" title="步骤1：选择要附加的进程"></a>步骤1：选择要附加的进程</h4><p><img src="/2022/cheat_engine_tutorial/image-20220215145836858.png"></p>
<p><img src="/2022/cheat_engine_tutorial/image-20220215150314077.png"></p>
<span id="more"></span>

<h2 id="Step-2"><a href="#Step-2" class="headerlink" title="Step 2"></a>Step 2</h2><h3 id="Description-1"><a href="#Description-1" class="headerlink" title="Description"></a>Description</h3><pre class="language-none"><code class="language-none">Step 2: Exact Value scanning (PW&#x3D;090453)
Now that you have opened the tutorial with Cheat Engine let&#39;s get on with the next step.

You can see at the bottom of this window is the text Health: xxx
Each time you click &#39;Hit me&#39;  your health gets decreased.

To get to the next step you have to find this value and change it to 1000

To find the value there are different ways, but I&#39;ll tell you about the easiest, &#39;Exact Value&#39;:
First make sure value type is set to at least 2-bytes or 4-bytes. 1-byte will also work, but you&#39;ll run into an easy to fix problem when you&#39;ve found the address and want to change it. The 8-byte may perhaps works if the bytes after the address are 0, but I wouldn&#39;t take the bet.
Single, double, and the other scans just don&#39;t work, because they store the value in a different way.

When the value type is set correctly, make sure the scantype is set to &#39;Exact Value&#39;
Then fill in the number your health is in the value box. And click &#39;First Scan&#39;
After a while (if you have an extremely slow pc) the scan is done and the results are shown in the list on the left.

If you find more than 1 address and you don&#39;t know for sure which address it is, click &#39;Hit me&#39;, fill in the new health value into the value box, and click &#39;Next Scan&#39;
repeat this until you&#39;re sure you&#39;ve found it. (that includes that there&#39;s only 1 address in the list.....)

Now double click the address in the list on the left. This makes the address pop-up in the list at the bottom, showing you the current value.
Double click the value, (or select it and press enter), and change the value to 1000.

If everything went ok the Next button should become enabled, and you&#39;re ready for the next step.


Note:
If you did anything wrong while scanning, click &quot;New Scan&quot; and repeat the scanning again.
Also, try playing around with the value and click &#39;Hit me&#39;.</code></pre>

<h3 id="操作-1"><a href="#操作-1" class="headerlink" title="操作"></a>操作</h3><p><img src="/2022/cheat_engine_tutorial/image-20220215151801088.png"></p>
<p><img src="/2022/cheat_engine_tutorial/image-20220215152155476.png"></p>
<p><img src="/2022/cheat_engine_tutorial/image-20220215152500187.png"></p>
<p><img src="/2022/cheat_engine_tutorial/image-20220215152558471.png"></p>
<p><img src="/2022/cheat_engine_tutorial/image-20220215152638141.png"></p>
<p><img src="/2022/cheat_engine_tutorial/image-20220215152855906.png"></p>
<p><img src="/2022/cheat_engine_tutorial/image-20220215153108418.png"></p>
<p><img src="/2022/cheat_engine_tutorial/image-20220215153634400.png"></p>
<p><img src="/2022/cheat_engine_tutorial/image-20220215153905170.png"></p>
<p><img src="/2022/cheat_engine_tutorial/image-20220215154113896.png"></p>
<p><img src="/2022/cheat_engine_tutorial/image-20220215154508980.png"></p>
<h2 id="Step-3"><a href="#Step-3" class="headerlink" title="Step 3"></a>Step 3</h2><h3 id="Description-2"><a href="#Description-2" class="headerlink" title="Description"></a>Description</h3><pre class="language-none"><code class="language-none">Step 3: Unknown initial value (PW&#x3D;419482)
Ok, seeing that you&#39;ve figured out how to find a value using exact value let&#39;s move on to the next step.

First things first though. Since you are doing a new scan, you have to click on New Scan first, to start a new scan. (You may think this is straighforward, but you&#39;d be surprised how many people get stuck on that step) I won&#39;t be explaining this step again, so keep this in mind.
Now that you&#39;ve started a new scan, let&#39;s continue.

In the previous test we knew the initial value so we could do an exact value search, but now we have a status bar where we don&#39;t know the starting value.
We only know that the value is between 0 and 500. And each time you click &#39;Hit me&#39; you lose some health. The amount you lose each time is shown above the status bar.

Again there are several different ways to find the value. (like doing a decreased value by... scan), but I&#39;ll only explain the easiest. &quot;Unknown initial value&quot;, and decreased value.
Because you don&#39;t know the value it is right now, exact value wont do any good, so choose as scantype &#39;Unknown initial value&#39;, again, the value type is 4-bytes. (Most windows apps use 4-bytes.) Click First scan and wait till it&#39;s done.

When it is done click &#39;Hit me&#39;. You&#39;ll lose some of your health. (the amount you lost shows for a few seconds and then disappears, but you don&#39;t need that)
Now go to Cheat Engine, and choose &#39;Decreased Value&#39; and click &#39;Next Scan&#39;
When that scan is done, click &#39;Hit me&#39; again, and repeat the above till you only find a few. 

We know the value is between 0 and 500, so pick the one that is most likely the address we need, and add it to the list.
Now change the health to 5000, to proceed to the next step.</code></pre>

<h3 id="操作-2"><a href="#操作-2" class="headerlink" title="操作"></a>操作</h3><p><img src="/2022/cheat_engine_tutorial/image-20220215173831872.png"></p>
<p><img src="/2022/cheat_engine_tutorial/image-20220215173929270.png"><img src="/2022/cheat_engine_tutorial/image-20220215174056856.png"></p>
<p><img src="/2022/cheat_engine_tutorial/image-20220215174649344.png"></p>
<p><img src="/2022/cheat_engine_tutorial/image-20220215174800299.png"><img src="/2022/cheat_engine_tutorial/image-20220215174937499.png"><img src="/2022/cheat_engine_tutorial/image-20220215175020697.png"></p>
]]></content>
      <categories>
        <category>PWN</category>
      </categories>
      <tags>
        <tag>Reverse</tag>
        <tag>PWN</tag>
      </tags>
  </entry>
  <entry>
    <title>《Docker 从入门到实践》学习笔记</title>
    <url>/2022/docker_practice/</url>
    <content><![CDATA[<h1 id="什么是-Docker"><a href="#什么是-Docker" class="headerlink" title="什么是 Docker"></a>什么是 Docker</h1><p><strong>Docker</strong> 使用 <code>Google</code> 公司推出的 <a href="https://golang.google.cn/">Go 语言</a> 进行开发实现，基于 <code>Linux</code> 内核的 <a href="https://zh.wikipedia.org/wiki/Cgroups">cgroup</a>，<a href="https://en.wikipedia.org/wiki/Linux_namespaces">namespace</a>，以及 <a href="https://docs.docker.com/storage/storagedriver/overlayfs-driver/">OverlayFS</a> 类的 <a href="https://en.wikipedia.org/wiki/Union_mount">Union FS</a> 等技术，对进程进行封装隔离，属于 <a href="https://en.wikipedia.org/wiki/Operating-system-level_virtualization">操作系统层面的虚拟化技术</a>。由于隔离的进程独立于宿主和其它的隔离的进程，因此也称其为容器。</p>
<p><img src="/2022/docker_practice/docker-on-linux-16488874880822.png" alt="Docker在Linux中的架构"></p>
<h2 id="传统虚拟机-VS-Docker"><a href="#传统虚拟机-VS-Docker" class="headerlink" title="传统虚拟机 VS Docker"></a>传统虚拟机 VS Docker</h2><p>传统虚拟机技术是虚拟出一套硬件后，在其上运行一个完整操作系统，在该系统上再运行所需应用进程；而容器内的应用进程直接运行于宿主的内核，容器内没有自己的内核，而且也没有进行硬件虚拟。因此容器要比传统虚拟机更为轻便。</p>
<p><img src="/2022/docker_practice/vm.png" alt="传统虚拟机"></p>
<p><img src="/2022/docker_practice/docker.png" alt="Docker"></p>
<span id="more"></span>

<h1 id="Docker-的三个基本概念"><a href="#Docker-的三个基本概念" class="headerlink" title="Docker 的三个基本概念"></a>Docker 的三个基本概念</h1><h2 id="镜像（Image）"><a href="#镜像（Image）" class="headerlink" title="镜像（Image）"></a>镜像（<code>Image</code>）</h2><p><strong>Docker 镜像</strong> 是一个特殊的root文件系统，比如官方镜像 <code>ubuntu:18.04</code> 就包含了完整的一套 Ubuntu 18.04 最小系统的 root 文件系统 (RootFS)。镜像除了提供容器运行时所需的程序、库、资源、配置等文件外，还包含了一些为运行时准备的一些配置参数（如匿名卷、环境变量、用户等）。<strong>镜像 <em>不包含</em> 任何动态数据，其内容在构建之后也不会被改变。</strong></p>
<h3 id="分层存储"><a href="#分层存储" class="headerlink" title="分层存储"></a>分层存储</h3><ul>
<li>镜像并非是像一个 ISO 那样的打包文件，镜像只是一个虚拟的概念，其实际体现并非由一个文件组成，而是由一组文件系统组成，或者说，由多层文件系统联合组成。</li>
<li>镜像构建时，会一层层构建，前一层是后一层的基础。每一层构建完就不会再发生改变，后一层上的任何改变只发生在自己这一层。比如，删除前一层文件的操作，实际不是真的删除前一层的文件，而是仅在当前层标记为该文件已删除。在最终容器运行的时候，虽然不会看到这个文件，但是实际上该文件会一直跟随镜像。</li>
<li>分层存储的特征还使得镜像的复用、定制变的更为容易。甚至可以用之前构建好的镜像作为基础层，然后进一步添加新的层，以定制自己所需的内容，构建新的镜像。</li>
</ul>
<p><img src="/2022/docker_practice/image-20220412153434717.png"></p>
<h2 id="容器（Container）"><a href="#容器（Container）" class="headerlink" title="容器（Container）"></a>容器（<code>Container</code>）</h2><ul>
<li>镜像（Image）和容器（Container）的关系，就像是面向对象程序设计中的 类 和 实例 一样，镜像是静态的定义，容器是镜像运行时的实体。容器可以被创建、启动、停止、删除、暂停等。</li>
<li>容器的实质是进程，但与直接在宿主执行的进程不同，容器进程运行于属于自己的独立的 命名空间。因此容器可以拥有自己的 root 文件系统 (RootFS)、自己的网络配置、自己的进程空间，甚至自己的用户 ID 空间。</li>
<li>镜像也使用分层存储。每一个容器运行时，是以镜像为基础层，在其上创建一个当前容器的存储层，我们可以称这个为容器运行时读写而准备的存储层为 <strong>容器存储层</strong>。容器存储层的生存周期和容器一样，容器消亡时，容器存储层也随之消亡。因此，<strong>任何保存于容器存储层的信息都会随容器删除而丢失。</strong></li>
<li><strong>按照 Docker 最佳实践的要求，容器不应该向其存储层内写入任何数据，容器存储层要保持无状态化。</strong> 所有的文件写入操作，都应该使用 <a href="">数据卷（Volume）</a>、或者 <a href="">绑定宿主目录</a>，在这些位置的读写会跳过容器存储层，直接对宿主（或网络存储）发生读写，其性能和稳定性更高。数据卷的生存周期独立于容器，容器消亡，数据卷不会消亡。因此，使用数据卷后，容器删除或者重新运行之后，数据却不会丢失。</li>
</ul>
<h2 id="仓库（Repository）"><a href="#仓库（Repository）" class="headerlink" title="仓库（Repository）"></a>仓库（<code>Repository</code>）</h2><p><a href="">Docker Registry</a> 是一个集中的存储、分发镜像的服务。</p>
<p>一个 Docker Registry 中可以包含多个 仓库（Repository）；每个仓库可以包含多个 标签（Tag）；每个标签对应一个镜像。</p>
<p>通常，一个仓库会包含同一个软件不同版本的镜像，而标签就常用于对应该软件的各个版本。我们可以通过 <code>&lt;仓库名&gt;:&lt;标签&gt;</code> 的格式来指定具体是这个软件哪个版本的镜像。如果不给出标签，将以 <code>latest</code> 作为默认标签。</p>
<h3 id="公有-Docker-Registry"><a href="#公有-Docker-Registry" class="headerlink" title="公有 Docker Registry"></a>公有 Docker Registry</h3><p>Docker Registry 公开服务是开放给用户使用、允许用户管理镜像的 Registry 服务。一般这类公开服务允许用户免费上传、下载公开的镜像，并可能提供收费服务供用户管理私有镜像。</p>
<h3 id="私有-Docker-Registry"><a href="#私有-Docker-Registry" class="headerlink" title="私有 Docker Registry"></a>私有 Docker Registry</h3><p>除了使用公开服务外，用户还可以在本地搭建私有 Docker Registry。Docker 官方提供了 Docker Registry 镜像，可以直接使用做为私有 Registry 服务。</p>
<h1 id="安装Docker"><a href="#安装Docker" class="headerlink" title="安装Docker"></a>安装Docker</h1><p>安装Docker的3种方式：</p>
<ul>
<li>使用包管理器软件源安装，如<code>yum</code>、<code>dnf</code>、<code>apt</code>等；</li>
<li>下载预编译二进制安装包，如rpm，deb等；</li>
<li>使用便捷脚本（convenience scripts）安装Docker（不建议在生产环境部署时使用此方法）；</li>
</ul>
<h2 id="建立-docker-用户组"><a href="#建立-docker-用户组" class="headerlink" title="建立 docker 用户组"></a>建立 docker 用户组</h2><p>默认情况下，docker 命令会使用 Unix socket 与 Docker 引擎通讯。而只有 root 用户和 docker 组的用户才可以访问 Docker 引擎的 Unix socket。出于安全考虑，一般 Linux 系统上不会直接使用 root 用户。因此，更好地做法是将需要使用 docker 的用户加入 docker 用户组。<br>建立 docker 组：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">groupadd</span> <span class="token function">docker</span></code></pre>
<p>将当前用户加入 docker 组：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">usermod</span> -aG <span class="token function">docker</span> <span class="token environment constant">$USER</span></code></pre>
<p>退出当前终端并重新登录，进行如下测试。</p>
<h2 id="镜像加速器"><a href="#镜像加速器" class="headerlink" title="镜像加速器"></a>镜像加速器</h2><p>在 <code>/etc/docker/daemon.json</code> 中写入如下内容（如果文件不存在请新建该文件）：</p>
<pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>
  <span class="token property">"registry-mirrors"</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token string">"https://hub-mirror.c.163.com"</span><span class="token punctuation">,</span>
    <span class="token string">"https://mirror.baidubce.com"</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>之后重新启动服务。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> systemctl daemon-reload
$ <span class="token function">sudo</span> systemctl restart <span class="token function">docker</span></code></pre>

<p>执行 <code>docker info</code>，如果从结果中看到了如下内容，说明配置成功。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">docker</span> info
Registry Mirrors:
 https://hub-mirror.c.163.com/</code></pre>

<h1 id="Docker-镜像管理"><a href="#Docker-镜像管理" class="headerlink" title="Docker 镜像管理"></a>Docker 镜像管理</h1><h2 id="获取镜像"><a href="#获取镜像" class="headerlink" title="获取镜像"></a>获取镜像</h2><p>从 Docker 镜像仓库获取镜像的命令是 <code>docker pull</code>。通过 <code>docker pull --help</code> 命令查看具体选项。其命令格式为：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">docker</span> pull <span class="token punctuation">[</span>选项<span class="token punctuation">]</span> <span class="token punctuation">[</span>Docker Registry 地址<span class="token punctuation">[</span>:端口号<span class="token punctuation">]</span>/<span class="token punctuation">]</span>仓库名<span class="token punctuation">[</span>:标签<span class="token punctuation">]</span></code></pre>

<p>镜像名称的格式：</p>
<ul>
<li>Docker 镜像仓库地址：地址的格式一般是 <code>&lt;域名/IP&gt;[:端口号]</code>。默认地址是 Docker Hub(<code>docker.io</code>)。</li>
<li>仓库名：如之前所说，这里的仓库名是两段式名称，即 <code>&lt;用户名&gt;/&lt;软件名&gt;</code>。对于 Docker Hub，如果不给出用户名，则默认为 <code>library</code>，也就是官方镜像。</li>
</ul>
<p>实例：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">docker</span> pull ubuntu:18.04
<span class="token number">18.04</span>: Pulling from library/ubuntu
92dc2a97ff99: Pull complete
be13a9d27eb8: Pull complete
c8299583700a: Pull complete
Digest: sha256:4bc3ae6596938cb0d9e5ac51a1152ec9dcac2a1c50829c74abd9c4361e321b26
Status: Downloaded newer image <span class="token keyword">for</span> ubuntu:18.04
docker.io/library/ubuntu:18.04</code></pre>



<h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">docker</span> run -it --rm ubuntu:18.04 <span class="token function">bash</span>

root@e7009c6ce357:/<span class="token comment"># cat /etc/os-release</span>
<span class="token assign-left variable">NAME</span><span class="token operator">=</span><span class="token string">"Ubuntu"</span>
<span class="token assign-left variable">VERSION</span><span class="token operator">=</span><span class="token string">"18.04.1 LTS (Bionic Beaver)"</span>
<span class="token assign-left variable">ID</span><span class="token operator">=</span>ubuntu
<span class="token assign-left variable">ID_LIKE</span><span class="token operator">=</span>debian
<span class="token assign-left variable">PRETTY_NAME</span><span class="token operator">=</span><span class="token string">"Ubuntu 18.04.1 LTS"</span>
<span class="token assign-left variable">VERSION_ID</span><span class="token operator">=</span><span class="token string">"18.04"</span>
<span class="token assign-left variable">HOME_URL</span><span class="token operator">=</span><span class="token string">"https://www.ubuntu.com/"</span>
<span class="token assign-left variable">SUPPORT_URL</span><span class="token operator">=</span><span class="token string">"https://help.ubuntu.com/"</span>
<span class="token assign-left variable">BUG_REPORT_URL</span><span class="token operator">=</span><span class="token string">"https://bugs.launchpad.net/ubuntu/"</span>
<span class="token assign-left variable">PRIVACY_POLICY_URL</span><span class="token operator">=</span><span class="token string">"https://www.ubuntu.com/legal/terms-and-policies/privacy-policy"</span>
<span class="token assign-left variable">VERSION_CODENAME</span><span class="token operator">=</span>bionic
<span class="token assign-left variable">UBUNTU_CODENAME</span><span class="token operator">=</span>bionic</code></pre>

<p>使用命令<code>docker run</code> 运行容器，具体格式我们会在 <a href="">容器</a> 一节进行详细讲解，我们这里简要的说明一下上面用到的参数。</p>
<ul>
<li><code>-it</code>：这是两个参数，一个是 <code>-i</code>：交互式操作，一个是 <code>-t</code> 终端。我们这里打算进入 <code>bash</code> 执行一些命令并查看返回结果，因此我们需要交互式终端。</li>
<li><code>--rm</code>：这个参数是说容器退出后随之将其删除。默认情况下，为了排障需求，退出的容器并不会立即删除，除非手动 <code>docker rm</code>。我们这里只是随便执行个命令，看看结果，不需要排障和保留结果，因此使用 <code>--rm</code> 可以避免浪费空间。</li>
<li><code>镜像名:标签</code>：这是指用特定镜像为基础来启动容器，如 <code>ubuntu:18.04</code> 。</li>
<li><code>bash</code>：放在镜像名后的是 <strong>命令</strong>，这里我们希望有个交互式 Shell，因此用的是 <code>bash</code>。</li>
</ul>
<h2 id="列出本地镜像"><a href="#列出本地镜像" class="headerlink" title="列出本地镜像"></a>列出本地镜像</h2><p>查看本地镜像可以使用：</p>
<ul>
<li><code>docker images</code></li>
<li><code>docker image ls</code></li>
</ul>
<p>使用<code>docker image ls --help</code>查看命令帮助：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">docker</span> image <span class="token function">ls</span> --help

Usage:  <span class="token function">docker</span> image <span class="token function">ls</span> <span class="token punctuation">[</span>OPTIONS<span class="token punctuation">]</span> <span class="token punctuation">[</span>REPOSITORY<span class="token punctuation">[</span>:TAG<span class="token punctuation">]</span><span class="token punctuation">]</span>

List images

Aliases:
  ls, list

Options:
  -a, --all             Show all images <span class="token punctuation">(</span>default hides intermediate images<span class="token punctuation">)</span>
      --digests         Show digests
  -f, --filter filter   Filter output based on conditions provided
      --format string   Pretty-print images using a Go template
      --no-trunc        Don't truncate output
  -q, --quiet           Only show image IDs</code></pre>

<p><code>docker image ls</code>默认列出所有顶层镜像，列表包含了 <code>仓库名</code>、<code>标签</code>、<code>镜像 ID</code>、<code>创建时间</code> 以及 <code>所占用的空间</code>：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">docker</span> image <span class="token function">ls</span>
REPOSITORY           TAG                 IMAGE ID            CREATED             SIZE
redis                latest              5f515359c7f8        <span class="token number">5</span> days ago          <span class="token number">183</span> MB
nginx                latest              05a60462f8ba        <span class="token number">5</span> days ago          <span class="token number">181</span> MB
mongo                <span class="token number">3.2</span>                 fe9198c04d62        <span class="token number">5</span> days ago          <span class="token number">342</span> MB
<span class="token operator">&lt;</span>none<span class="token operator">></span>               <span class="token operator">&lt;</span>none<span class="token operator">></span>              00285df0df87        <span class="token number">5</span> days ago          <span class="token number">342</span> MB
ubuntu               <span class="token number">18.04</span>               329ed837d508        <span class="token number">3</span> days ago          <span class="token number">63</span>.3MB
ubuntu               bionic              329ed837d508        <span class="token number">3</span> days ago          <span class="token number">63</span>.3MB</code></pre>

<h3 id="镜像体积"><a href="#镜像体积" class="headerlink" title="镜像体积"></a>镜像体积</h3><p><code>docker image ls</code>列出的所占用空间和在 Docker Hub 上看到的镜像大小不同。比如，<code>ubuntu:18.04</code> 镜像大小，在这里是 <code>63.3MB</code>，但是在 <a href="https://hub.docker.com/layers/ubuntu/library/ubuntu/bionic/images/sha256-32776cc92b5810ce72e77aca1d949de1f348e1d281d3f00ebcc22a3adcdc9f42?context=explore">Docker Hub</a> 显示的却是 <code>25.47 MB</code>。Docker Hub 中显示的体积是压缩后的体积，而 <code>docker image ls</code> 显示的是镜像下载到本地后，展开后的各层所占空间的总和。</p>
<p><code>docker image ls</code> 列表中的镜像体积总和并非是所有镜像实际硬盘消耗。由于 Docker 镜像是多层存储结构，并且可以继承、复用，因此不同镜像可能会因为使用相同的基础镜像，从而拥有共同的层。由于 Docker 使用 Union FS，相同的层只需要保存一份即可，因此实际镜像硬盘占用空间很可能要比这个列表镜像大小的总和要小的多。</p>
<p>镜像、容器、数据卷实际所占用的空间通过 <code>docker system df</code> 或<code>docker system df -v</code>命令查看：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">docker</span> system <span class="token function">df</span>

TYPE                TOTAL               ACTIVE              SIZE                RECLAIMABLE
Images              <span class="token number">24</span>                  <span class="token number">0</span>                   <span class="token number">1</span>.992GB             <span class="token number">1</span>.992GB <span class="token punctuation">(</span><span class="token number">100</span>%<span class="token punctuation">)</span>
Containers          <span class="token number">1</span>                   <span class="token number">0</span>                   <span class="token number">62</span>.82MB             <span class="token number">62</span>.82MB <span class="token punctuation">(</span><span class="token number">100</span>%<span class="token punctuation">)</span>
Local Volumes       <span class="token number">9</span>                   <span class="token number">0</span>                   <span class="token number">652</span>.2MB             <span class="token number">652</span>.2MB <span class="token punctuation">(</span><span class="token number">100</span>%<span class="token punctuation">)</span>
Build Cache                                                 0B                  0B</code></pre>

<h3 id="虚悬镜像-dangling-image"><a href="#虚悬镜像-dangling-image" class="headerlink" title="虚悬镜像 (dangling image)"></a>虚悬镜像 (dangling image)</h3><p><code>docker pull</code> 和<code>docker build</code> 操作可能导致**虚悬镜像 (dangling image)**。由于新旧镜像同名，旧镜像名称被取消，从而出现仓库名、标签均为 <code>&lt;none&gt;</code> 的镜像。</p>
<p>上面的镜像列表中，还可以看到一个特殊的镜像，这个镜像既没有仓库名，也没有标签，均为 <code>&lt;none&gt;</code>：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token operator">&lt;</span>none<span class="token operator">></span>               <span class="token operator">&lt;</span>none<span class="token operator">></span>              00285df0df87        <span class="token number">5</span> days ago          <span class="token number">342</span> MB</code></pre>

<p>这个镜像原本是有镜像名和标签的，原来为 <code>mongo:3.2</code>，随着官方镜像维护，发布了新版本后，重新 <code>docker pull mongo:3.2</code> 时，<code>mongo:3.2</code> 这个镜像名被转移到了新下载的镜像身上，而旧的镜像上的这个名称则被取消，从而成为了 <code>&lt;none&gt;</code>。</p>
<p>这类无标签镜像也被称为 <strong>虚悬镜像(dangling image)</strong> ，可以用下面的命令专门显示这类镜像：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">docker</span> image <span class="token function">ls</span> -f <span class="token assign-left variable">dangling</span><span class="token operator">=</span>true

REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE
<span class="token operator">&lt;</span>none<span class="token operator">></span>              <span class="token operator">&lt;</span>none<span class="token operator">></span>              00285df0df87        <span class="token number">5</span> days ago          <span class="token number">342</span> MB</code></pre>

<p>一般来说，虚悬镜像已经失去了存在的价值，可以用下面的命令删除：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">docker</span> image prune</code></pre>

<h3 id="中间层镜像"><a href="#中间层镜像" class="headerlink" title="中间层镜像"></a>中间层镜像</h3><p>为了加速镜像构建、重复利用资源，Docker 会利用 <strong>中间层镜像</strong>。所以在使用一段时间后，可能会看到一些依赖的中间层镜像。</p>
<p>默认的 <code>docker image ls</code> 列表中只会显示顶层镜像，如果希望显示包括中间层镜像在内的所有镜像的话，需要加 <code>-a</code> 参数。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">docker</span> image <span class="token function">ls</span> -a</code></pre>

<p>这样会看到很多无标签的镜像，与之前的虚悬镜像不同，这些无标签的镜像很多都是中间层镜像，是其它镜像所依赖的镜像。这些无标签镜像不应该删除，否则会导致上层镜像因为依赖丢失而出错。实际上，这些镜像也没必要删除，因为之前说过，相同的层只会存一遍，而这些镜像是别的镜像的依赖，因此并不会因为它们被列出来而多存了一份，无论如何你也会需要它们。只要删除那些依赖它们的镜像后，这些依赖的中间层镜像也会被连带删除。</p>
<h3 id="列出部分镜像"><a href="#列出部分镜像" class="headerlink" title="列出部分镜像"></a>列出部分镜像</h3><p>不加任何参数的情况下，<code>docker image ls</code> 会列出所有顶层镜像，但是有时候我们只希望列出部分镜像。</p>
<p>根据仓库名列出镜像：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">docker</span> image <span class="token function">ls</span> ubuntu
REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE
ubuntu              <span class="token number">18.04</span>               329ed837d508        <span class="token number">3</span> days ago          <span class="token number">63</span>.3MB
ubuntu              bionic              329ed837d508        <span class="token number">3</span> days ago          <span class="token number">63</span>.3MB</code></pre>

<p>列出特定的某个镜像，也就是说指定仓库名和标签</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">docker</span> image <span class="token function">ls</span> ubuntu:18.04
REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE
ubuntu              <span class="token number">18.04</span>               329ed837d508        <span class="token number">3</span> days ago          <span class="token number">63</span>.3MB</code></pre>

<p>除此以外，<code>docker image ls</code> 还支持强大的过滤器参数 <code>--filter</code>，或者简写 <code>-f</code>。之前我们已经看到了使用过滤器来列出虚悬镜像的用法，它还有更多的用法。比如，我们希望看到在 <code>mongo:3.2</code> 之后建立的镜像，可以用下面的命令：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">docker</span> image <span class="token function">ls</span> -f <span class="token assign-left variable">since</span><span class="token operator">=</span>mongo:3.2
REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE
redis               latest              5f515359c7f8        <span class="token number">5</span> days ago          <span class="token number">183</span> MB
nginx               latest              05a60462f8ba        <span class="token number">5</span> days ago          <span class="token number">181</span> MB</code></pre>

<p>想查看某个位置之前的镜像也可以，只需要把 <code>since</code> 换成 <code>before</code> 即可。</p>
<p>此外，如果镜像构建时，定义了 <code>LABEL</code>，还可以通过 <code>LABEL</code> 来过滤。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">docker</span> image <span class="token function">ls</span> -f <span class="token assign-left variable">label</span><span class="token operator">=</span>com.example.version<span class="token operator">=</span><span class="token number">0.1</span></code></pre>

<h3 id="只显示镜像ID"><a href="#只显示镜像ID" class="headerlink" title="只显示镜像ID"></a>只显示镜像ID</h3><p>使用 <code>-q</code> 参数只显示镜像ID：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">docker</span> image <span class="token function">ls</span> -q
5f515359c7f8
05a60462f8ba
fe9198c04d62
00285df0df87
329ed837d508
329ed837d508</code></pre>

<p><code>--filter</code> 配合 <code>-q</code> 产生出指定范围的 ID 列表，然后送给另一个 <code>docker</code> 命令作为参数，从而针对这组实体成批的进行某种操作的做法在 Docker 命令行使用过程中非常常见，不仅仅是镜像，将来我们会在各个命令中看到这类搭配以完成很强大的功能。因此每次在文档看到过滤器后，可以多注意一下它们的用法。</p>
<h3 id="以特定格式显示"><a href="#以特定格式显示" class="headerlink" title="以特定格式显示"></a>以特定格式显示</h3><p>另外一些时候，我们可能只是对表格的结构不满意，希望自己组织列；或者不希望有标题，这样方便其它程序解析结果等，这就用到了 <a href="https://gohugo.io/templates/introduction/">Go 的模板语法</a>。</p>
<p>比如，下面的命令会直接列出镜像结果，并且只包含镜像ID和仓库名：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">docker</span> image <span class="token function">ls</span> --format <span class="token string">"&#123;&#123;.ID&#125;&#125;: &#123;&#123;.Repository&#125;&#125;"</span>
5f515359c7f8: redis
05a60462f8ba: nginx
fe9198c04d62: mongo
00285df0df87: <span class="token operator">&lt;</span>none<span class="token operator">></span>
329ed837d508: ubuntu
329ed837d508: ubuntu</code></pre>

<p>或者打算以表格等距显示，并且有标题行，和默认一样，不过自己定义列：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">docker</span> image <span class="token function">ls</span> --format <span class="token string">"table &#123;&#123;.ID&#125;&#125;<span class="token entity" title="\t">\t</span>&#123;&#123;.Repository&#125;&#125;<span class="token entity" title="\t">\t</span>&#123;&#123;.Tag&#125;&#125;"</span>
IMAGE ID            REPOSITORY          TAG
5f515359c7f8        redis               latest
05a60462f8ba        nginx               latest
fe9198c04d62        mongo               <span class="token number">3.2</span>
00285df0df87        <span class="token operator">&lt;</span>none<span class="token operator">></span>              <span class="token operator">&lt;</span>none<span class="token operator">></span>
329ed837d508        ubuntu              <span class="token number">18.04</span>
329ed837d508        ubuntu              bionic</code></pre>

<h2 id="删除本地镜像"><a href="#删除本地镜像" class="headerlink" title="删除本地镜像"></a>删除本地镜像</h2><p>如果要删除本地的镜像，可以使用以下2个命令：</p>
<ul>
<li><p><code>docker rmi</code>命令</p>
</li>
<li><p><code>docker image rm</code> 命令</p>
</li>
</ul>
<p>其格式为：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">docker</span> rmi <span class="token punctuation">[</span>选项<span class="token punctuation">]</span> <span class="token operator">&lt;</span>镜像<span class="token operator"><span class="token file-descriptor important">1</span>></span> <span class="token punctuation">[</span><span class="token operator">&lt;</span>镜像<span class="token operator"><span class="token file-descriptor important">2</span>></span> <span class="token punctuation">..</span>.<span class="token punctuation">]</span>
$ <span class="token function">docker</span> image <span class="token function">rm</span> <span class="token punctuation">[</span>选项<span class="token punctuation">]</span> <span class="token operator">&lt;</span>镜像<span class="token operator"><span class="token file-descriptor important">1</span>></span> <span class="token punctuation">[</span><span class="token operator">&lt;</span>镜像<span class="token operator"><span class="token file-descriptor important">2</span>></span> <span class="token punctuation">..</span>.<span class="token punctuation">]</span></code></pre>

<h3 id="用-ID、镜像名、摘要删除镜像"><a href="#用-ID、镜像名、摘要删除镜像" class="headerlink" title="用 ID、镜像名、摘要删除镜像"></a>用 ID、镜像名、摘要删除镜像</h3><p>比如我们有这么一些镜像：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">docker</span> image <span class="token function">ls</span>
REPOSITORY                  TAG                 IMAGE ID            CREATED             SIZE
centos                      latest              0584b3d2cf6d        <span class="token number">3</span> weeks ago         <span class="token number">196.5</span> MB
redis                       alpine              501ad78535f0        <span class="token number">3</span> weeks ago         <span class="token number">21.03</span> MB
<span class="token function">docker</span>                      latest              cf693ec9b5c7        <span class="token number">3</span> weeks ago         <span class="token number">105.1</span> MB
nginx                       latest              e43d811ce2f4        <span class="token number">5</span> weeks ago         <span class="token number">181.5</span> MB</code></pre>

<p>其中，<code>&lt;镜像&gt;</code> 可以是：</p>
<ul>
<li><code>镜像长 ID</code>：镜像的完整 ID，也称为 <code>长 ID</code>，来删除镜像。</li>
<li><code>镜像短 ID</code>：<code>docker image ls</code> 默认列出的是短 ID 。通常情况下，镜像ID不需要写完整，只要短ID的前几个字符能唯一确定一个镜像即可。</li>
<li><code>镜像名</code> ：即 <code>&lt;仓库名&gt;:&lt;标签&gt;</code>。</li>
<li><code>镜像摘要</code>：镜像的sha256哈希摘要。</li>
</ul>
<p>比如这里，如果我们要删除 <code>redis:alpine</code> 镜像，短ID<code>501ad78535f0</code>的前3个字符<code>501</code>就可以唯一确定此镜像，可以执行<code>docker image rm 501</code>删除此镜像：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">docker</span> image <span class="token function">rm</span> <span class="token number">501</span>
Untagged: redis:alpine
Untagged: redis@sha256:f1ed3708f538b537eb9c2a7dd50dc90a706f7debd7e1196c9264edeea521a86d
Deleted: sha256:501ad78535f015d88872e13fa87a828425117e3d28075d0c117932b05bf189b7
Deleted: sha256:96167737e29ca8e9d74982ef2a0dda76ed7b430da55e321c071f0dbff8c2899b
Deleted: sha256:32770d1dcf835f192cafd6b9263b7b597a1778a403a109e2cc2ee866f74adf23
Deleted: sha256:127227698ad74a5846ff5153475e03439d96d4b1c7f2a449c7a826ef74a2d2fa
Deleted: sha256:1333ecc582459bac54e1437335c0816bc17634e131ea0cc48daa27d32c75eab3
Deleted: sha256:4fc455b921edf9c4aea207c51ab39b10b06540c8b4825ba57b3feed1668fa7c7</code></pre>

<p>我们也可以用<code>镜像名</code>，也就是 <code>&lt;仓库名&gt;:&lt;标签&gt;</code>，来删除镜像。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">docker</span> image <span class="token function">rm</span> centos
Untagged: centos:latest
Untagged: centos@sha256:b2f9d1c0ff5f87a4743104d099a3d561002ac500db1b9bfa02a783a46e0d366c
Deleted: sha256:0584b3d2cf6d235ee310cf14b54667d889887b838d3f3d3033acd70fc3c48b8a
Deleted: sha256:97ca462ad9eeae25941546209454496e1d66749d53dfa2ee32bf1faabd239d38</code></pre>

<p>当然，更精确的是使用 <code>镜像摘要</code> 删除镜像。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">docker</span> image <span class="token function">ls</span> --digests
REPOSITORY                  TAG                 DIGEST                                                                    IMAGE ID            CREATED             SIZE
<span class="token function">node</span>                        slim                sha256:b4f0e0bdeb578043c1ea6862f0d40cc4afe32a4a582f3be235a3b164422be228   6e0c4c8e3913        <span class="token number">3</span> weeks ago         <span class="token number">214</span> MB

$ <span class="token function">docker</span> image <span class="token function">rm</span> node@sha256:b4f0e0bdeb578043c1ea6862f0d40cc4afe32a4a582f3be235a3b164422be228
Untagged: node@sha256:b4f0e0bdeb578043c1ea6862f0d40cc4afe32a4a582f3be235a3b164422be228</code></pre>

<p>可以使用 <code>docker image ls -q</code> 来配合使用 <code>docker image rm</code>，这样可以成批的删除希望删除的镜像。比如，我们需要删除所有仓库名为 <code>redis</code> 的镜像：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> image <span class="token function">rm</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">docker</span> image <span class="token function">ls</span> -q redis<span class="token variable">)</span></span></code></pre>

<p>或者删除所有在 <code>mongo:3.2</code> 之前的镜像</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">docker</span> image <span class="token function">rm</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">docker</span> image <span class="token function">ls</span> -q -f <span class="token assign-left variable">before</span><span class="token operator">=</span>mongo:3.2<span class="token variable">)</span></span></code></pre>

<h3 id="镜像的Untagged-和-Deleted"><a href="#镜像的Untagged-和-Deleted" class="headerlink" title="镜像的Untagged 和 Deleted"></a>镜像的Untagged 和 Deleted</h3><p><img src="/2022/docker_practice/image-20220412153434717.png"></p>
<ul>
<li>镜像由多层镜像联合组成，包含对其父镜像、父镜像的父镜像、祖先镜像等直至基础镜像的所有操作的总和。</li>
<li>对基础镜像或已有镜像进行修改，可产生新的顶层镜像。被修改的基础进行或已有镜像就成为新的顶层镜像的父镜像。新产生的顶层镜像会引用其父镜像（同时父镜像也会引用自己的父镜像），并作为一个整体形成一个完整的新镜像。</li>
<li>镜像的唯一标识是其 ID 和摘要。</li>
<li>多个不同镜像可能依赖的“层”完全相同，换句话说，多个依赖（引用）的“层”完全相同的镜像可以是不同镜像，因为它们ID不同。例如，可以使用<code>docker commit</code>将同一个容器进行<code>commit</code>为多个不同镜像，并设置不同标签。</li>
<li>删除镜像时，删除行为分为2个阶段：<code>Untagged</code>和<code>Deleted</code>。首先会对该镜像取消标签 (untag) ，然后再删除 (delete)该镜像。但当该镜像被其他镜像依赖（引用）时，只能先将镜像<code>Untagged</code>，但无法立即<code>Deleted</code>该镜像。直到没有任何层依赖当前镜像时，才会真实的删除当前镜像。</li>
<li>除了镜像依赖以外，还需要注意的是容器对镜像的依赖。如果有用这个镜像启动的容器存在（即使容器没有运行），那么同样不可以删除这个镜像。</li>
</ul>
<h2 id="由容器创建镜像"><a href="#由容器创建镜像" class="headerlink" title="由容器创建镜像"></a>由容器创建镜像</h2><p>镜像是多层存储，每一层是在前一层的基础上进行的修改；而容器以镜像为基础层，在其基础上加一层可读写的容器存储层。镜像是静态的，容器是动态的。在容器运行过程中，可以动态的修改容器。</p>
<p>使用<code>docker commit</code>命令可以将容器的存储层保存为镜像，即将修改后的容器状态固化为镜像。</p>
<p><code>ocker commit</code> 的语法格式为：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> commit <span class="token punctuation">[</span>选项<span class="token punctuation">]</span> <span class="token operator">&lt;</span>容器ID或容器名<span class="token operator">></span> <span class="token punctuation">[</span><span class="token operator">&lt;</span>仓库名<span class="token operator">></span><span class="token punctuation">[</span>:<span class="token operator">&lt;</span>标签<span class="token operator">></span><span class="token punctuation">]</span><span class="token punctuation">]</span></code></pre>

<p>例如，运行ubuntu镜像，创建容器<code>ub</code>，在<code>ub</code>中创建文件：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost docker<span class="token punctuation">]</span><span class="token comment"># docker run -it --name=ub ubuntu bash</span>
root@3f67f307e836:/<span class="token comment"># touch f1.txt</span>
root@3f67f307e836:/<span class="token comment"># echo "create file f1.txt" > f1.txt </span>
root@3f67f307e836:/<span class="token comment"># exit</span>
<span class="token builtin class-name">exit</span></code></pre>

<p>并将修改后的容器<code>ub</code>固化为镜像<code>from-ub:latest</code>：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost docker<span class="token punctuation">]</span><span class="token comment"># docker commit -m 'create file f1.txt' ub from-ub:latest</span>
sha256:ccc63c912efae74b3f547a6c0d23f0434fc3215d538f625f09fe4cc5f7d4d7d8</code></pre>

<p>查看本地镜像：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost docker<span class="token punctuation">]</span><span class="token comment"># docker image ls</span>
REPOSITORY    TAG       IMAGE ID       CREATED          SIZE
from-ub       latest    ccc63c912efa   <span class="token number">12</span> minutes ago   <span class="token number">72</span>.8MB
ubuntu        latest    825d55fb6340   <span class="token number">5</span> days ago       <span class="token number">72</span>.8MB
nginx         <span class="token number">1.21</span>.6    12766a6745ee   <span class="token number">12</span> days ago      142MB
hello-world   latest    feb5d9fea6a5   <span class="token number">6</span> months ago     <span class="token number">13</span>.3kB</code></pre>

<p>使用<code>docker diff</code>检查对容器文件系统中文件或目录的修改：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost docker<span class="token punctuation">]</span><span class="token comment"># docker diff ub</span>
C /root
A /root/.bash_history
A /f1.txt</code></pre>

<p>使用<code>docker image history</code>命令查看对镜像的修改历史：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost docker<span class="token punctuation">]</span><span class="token comment"># docker image history from-ub:latest</span>
IMAGE          CREATED          CREATED BY                                      SIZE      COMMENT
ccc63c912efa   <span class="token number">35</span> seconds ago   <span class="token function">bash</span>                                            73B       create <span class="token function">file</span> f1.txt
825d55fb6340   <span class="token number">5</span> days ago       /bin/sh -c <span class="token comment">#(nop)  CMD ["bash"]                 0B        </span>
<span class="token operator">&lt;</span>missing<span class="token operator">></span>      <span class="token number">5</span> days ago       /bin/sh -c <span class="token comment">#(nop) ADD file:b83df51ab7caf8a4d…   72.8MB    </span>
<span class="token punctuation">[</span>root@localhost docker<span class="token punctuation">]</span><span class="token comment"># docker image history ubuntu:latest </span>
IMAGE          CREATED      CREATED BY                                      SIZE      COMMENT
825d55fb6340   <span class="token number">5</span> days ago   /bin/sh -c <span class="token comment">#(nop)  CMD ["bash"]                 0B        </span>
<span class="token operator">&lt;</span>missing<span class="token operator">></span>      <span class="token number">5</span> days ago   /bin/sh -c <span class="token comment">#(nop) ADD file:b83df51ab7caf8a4d…   72.8MB</span></code></pre>

<h3 id="慎用-docker-commit"><a href="#慎用-docker-commit" class="headerlink" title="慎用 docker commit"></a>慎用 <code>docker commit</code></h3><p>由于容器是动态的，在容器运行过程中，容器文件系统中的很多文件都可能被修改过。所以由<code>docker commit</code>生成镜像，可能会有大量的无关内容被添加进来，将会导致镜像极为臃肿。而且对于这些修改，我们是无法确切知道到底是做了哪些修改的。</p>
<h2 id="使用-Dockerfile-定制镜像"><a href="#使用-Dockerfile-定制镜像" class="headerlink" title="使用 Dockerfile 定制镜像"></a>使用 Dockerfile 定制镜像</h2><p>使用Dockerfile允许我们以一个镜像作为基础，在其上进行定制。Dockerfile 是一个文本文件，其内包含了一条条的 <em><em>指令(Instruction)<strong>，</strong></em>每一条指令构建一层</em>**，因此每一条指令的内容，就是描述该层应当如何构建。</p>
<p>在 <a href="https://hub.docker.com/search?q=&type=image&image_filter=official">Docker Hub</a> 上有非常多的高质量的官方镜像，可以在其中寻找一个最符合我们最终目标的镜像为基础镜像进行定制。</p>
<p>下面以定制 <code>nginx</code> 镜像为例，使用 Dockerfile 来定制镜像<code>mynginx</code>。在一个空白目录中，建立一个文本文件，并命名为 <code>Dockerfile</code>：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">mkdir</span> mynginx
$ <span class="token builtin class-name">cd</span> mynginx
$ <span class="token function">touch</span> Dockerfile</code></pre>

<p>编辑<code>Dockerfile</code>内容如下：</p>
<pre class="language-docker" data-language="docker"><code class="language-docker"><span class="token instruction"><span class="token keyword">FROM</span> nginx</span>
<span class="token instruction"><span class="token keyword">RUN</span> echo <span class="token string">'&lt;h1>Hello, Docker!&lt;/h1>'</span> > /usr/share/nginx/html/index.html</span></code></pre>

<h3 id="构建镜像"><a href="#构建镜像" class="headerlink" title="构建镜像"></a>构建镜像</h3><p>在<code>Dockerfile</code>所在目录中执行<code>docker build</code>命令构建镜像：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">docker</span> build -t nginx:v3 <span class="token builtin class-name">.</span>
Sending build context to Docker daemon <span class="token number">2.048</span> kB
Step <span class="token number">1</span> <span class="token builtin class-name">:</span> FROM nginx
 ---<span class="token operator">></span> e43d811ce2f4
Step <span class="token number">2</span> <span class="token builtin class-name">:</span> RUN <span class="token builtin class-name">echo</span> <span class="token string">'&lt;h1>Hello, Docker!&lt;/h1>'</span> <span class="token operator">></span> /usr/share/nginx/html/index.html
 ---<span class="token operator">></span> Running <span class="token keyword">in</span> 9cdc27646c7b
 ---<span class="token operator">></span> 44aa4490ce2c
Removing intermediate container 9cdc27646c7b
Successfully built 44aa4490ce2c</code></pre>

<p>从命令的输出结果可以看到，在 <code>Step 2</code> 中，<code>RUN</code> 指令启动了一个中间容器 <code>9cdc27646c7b</code>，执行了所要求的命令，随后删除了所用到的这个中间容器 <code>9cdc27646c7b</code>，并最后提交了这一层 <code>44aa4490ce2c</code>。</p>
<h3 id="镜像构建上下文（Context）"><a href="#镜像构建上下文（Context）" class="headerlink" title="镜像构建上下文（Context）"></a>镜像构建上下文（Context）</h3><p>Docker 是基于C&#x2F;S架构设计的，分为 Docker 引擎（也就是服务端守护进程）和客户端工具。表面上我们好像是在本机执行各种 <code>docker</code> 功能，但实际上，一切都是使用的远程调用形式在服务端（Docker 引擎）完成。而 <code>docker build</code> 命令构建镜像，其实并非在本地构建，而是在服务端，也就是 Docker 引擎中构建的。</p>
<p>刚才的命令 <code>docker build -t nginx:v3 .</code> 中的这个 <code>.</code>，实际上是在指定 <em><strong>上下文的目录</strong></em>，<code>docker build</code> 命令会将该目录下的内容打包交给 Docker 引擎以帮助构建镜像。</p>
<p>因此，类似<code>COPY</code> 这类指令中的 <em><strong>源文件的路径</strong></em> 都是<em><strong>相对路径</strong></em>，引用的是打包上传后的上下文目录。 所以<code>COPY ../package.json /app</code> 或者 <code>COPY /opt/xxxx /app</code> 是无法使用的，因为这些路径已经超出了上下文的范围，Docker 引擎无法获得这些位置的文件。</p>
<p>如果观察 <code>docker build</code> 输出，我们其实已经看到了这个发送上下文的过程：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">docker</span> build -t nginx:v3 <span class="token builtin class-name">.</span>
Sending build context to Docker daemon <span class="token number">2.048</span> kB</code></pre>

<p>一般来说，应该会将 <code>Dockerfile</code> 置于一个空目录下，或者项目根目录下。如果该目录下没有所需文件，那么应该把所需文件复制一份过来。如果目录下有些东西确实不希望构建时传给 Docker 引擎，那么可以用 <code>.gitignore</code> 一样的语法写一个 <code>.dockerignore</code>，该文件是用于剔除不需要作为上下文传递给 Docker 引擎的。</p>
<p>在默认情况下，如果不额外指定 <code>Dockerfile</code> 的话，会将上下文目录下的名为 <code>Dockerfile</code> 的文件作为 Dockerfile。实际上 <code>Dockerfile</code> 的文件名并不要求必须为 <code>Dockerfile</code>，而且并不要求必须位于上下文目录中，比如可以用 <code>-f ../Dockerfile.php</code> 参数指定某个文件作为 <code>Dockerfile</code>。</p>
<h3 id="docker-build的其他构建方式"><a href="#docker-build的其他构建方式" class="headerlink" title="docker build的其他构建方式"></a><code>docker build</code>的其他构建方式</h3><h4 id="由URL构建"><a href="#由URL构建" class="headerlink" title="由URL构建"></a>由URL构建</h4><p><code>docker build</code> 还支持从 URL 构建，比如可以直接从 Git repo 中构建：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># $env:DOCKER_BUILDKIT=0</span>
<span class="token comment"># export DOCKER_BUILDKIT=0</span>

$ <span class="token function">docker</span> build -t hello-world https://github.com/docker-library/hello-world.git<span class="token comment">#master:amd64/hello-world</span>

Step <span class="token number">1</span>/3 <span class="token builtin class-name">:</span> FROM scratch
 ---<span class="token operator">></span>
Step <span class="token number">2</span>/3 <span class="token builtin class-name">:</span> COPY hello /
 ---<span class="token operator">></span> ac779757d46e
Step <span class="token number">3</span>/3 <span class="token builtin class-name">:</span> CMD <span class="token punctuation">[</span><span class="token string">"/hello"</span><span class="token punctuation">]</span>
 ---<span class="token operator">></span> Running <span class="token keyword">in</span> d2a513a760ed
Removing intermediate container d2a513a760ed
 ---<span class="token operator">></span> 038ad4142d2b
Successfully built 038ad4142d2b</code></pre>

<p>如果所给出的 URL 不是个 Git repo，而是个 <code>tar</code> 压缩包，那么 Docker 引擎会下载这个包，并自动解压缩，以其作为上下文，开始构建。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> build http://server/context.tar.gz</code></pre>

<h4 id="由标准输入构建"><a href="#由标准输入构建" class="headerlink" title="由标准输入构建"></a>由标准输入构建</h4><p>从标准输入中读取 Dockerfile 进行构建：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> build - <span class="token operator">&lt;</span> Dockerfile</code></pre>

<p>或</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">cat</span> Dockerfile <span class="token operator">|</span> <span class="token function">docker</span> build -</code></pre>

<p>或者，从标准输入中读取上下文压缩包进行构建</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">docker</span> build - <span class="token operator">&lt;</span> context.tar.gz</code></pre>

<p><strong>这种形式由于直接从标准输入中读取 Dockerfile 的内容，它没有上下文，因此不可以像其他方法那样可以将本地文件 <code>COPY</code> 进镜像之类的事情。</strong></p>
<h2 id="Dockerfile指令详解"><a href="#Dockerfile指令详解" class="headerlink" title="Dockerfile指令详解"></a><code>Dockerfile</code>指令详解</h2><h3 id="FROM-指定基础镜像"><a href="#FROM-指定基础镜像" class="headerlink" title="FROM 指定基础镜像"></a><code>FROM</code> 指定基础镜像</h3><p> <code>FROM</code> 指定以一个镜像为 <strong>基础镜像</strong>，因此一个 <code>Dockerfile</code> 中 <code>FROM</code> 是必备的指令，并且必须是第1条指令。</p>
<p>除了选择现有镜像为基础镜像外，Docker 还存在一个特殊的镜像，名为 <code>scratch</code>。这个镜像是虚拟的概念，并不实际存在，它表示一个空白的镜像。如果你以 scratch 为基础镜像的话，意味着你不以任何镜像为基础，接下来所写的指令将作为镜像第一层开始存在。</p>
<pre class="language-docker" data-language="docker"><code class="language-docker"><span class="token instruction"><span class="token keyword">FROM</span> scratch</span>
...</code></pre>

<h3 id="RUN-执行命令"><a href="#RUN-执行命令" class="headerlink" title="RUN 执行命令"></a><code>RUN</code> 执行命令</h3><p><code>RUN</code>用来执行命令行命令。由于命令行的强大能力，<code>RUN</code> 指令在定制镜像时是最常用的指令之一。其格式有2种：</p>
<ul>
<li><em>shell</em> 格式：<code>RUN &lt;命令&gt;</code>，就像直接在命令行中输入的命令一样。</li>
<li><em>exec</em> 格式：<code>RUN [&quot;可执行文件&quot;, &quot;参数1&quot;, &quot;参数2&quot;]</code>，这更像是函数调用中的格式。</li>
</ul>
<p>Dockerfile 中每一个指令都会建立一层，<code>RUN</code> 也不例外。<strong>每一个 <code>RUN</code> 的行为会创建一层镜像。而下面的这种写法，创建了 7 层镜像。这是完全没有意义的，而且产生非常臃肿、非常多层的镜像。</strong></p>
<blockquote>
<p><strong>注意：Union FS 是有最大层数限制的，比如 AUFS，曾经是最大不得超过 42 层，现在是不得超过 127 层。</strong></p>
</blockquote>
<pre class="language-docker" data-language="docker"><code class="language-docker"><span class="token instruction"><span class="token keyword">FROM</span> debian:stretch</span>

<span class="token instruction"><span class="token keyword">RUN</span> apt-get update</span>
<span class="token instruction"><span class="token keyword">RUN</span> apt-get install -y gcc libc6-dev make wget</span>
<span class="token instruction"><span class="token keyword">RUN</span> wget -O redis.tar.gz <span class="token string">"http://download.redis.io/releases/redis-5.0.3.tar.gz"</span></span>
<span class="token instruction"><span class="token keyword">RUN</span> mkdir -p /usr/src/redis</span>
<span class="token instruction"><span class="token keyword">RUN</span> tar -xzf redis.tar.gz -C /usr/src/redis --strip-components=1</span>
<span class="token instruction"><span class="token keyword">RUN</span> make -C /usr/src/redis</span>
<span class="token instruction"><span class="token keyword">RUN</span> make -C /usr/src/redis install</span></code></pre>

<p>上面写法应改为下面这样：</p>
<pre class="language-docker" data-language="docker"><code class="language-docker"><span class="token instruction"><span class="token keyword">FROM</span> debian:stretch</span>

<span class="token instruction"><span class="token keyword">RUN</span> set -x; buildDeps=<span class="token string">'gcc libc6-dev make wget'</span> <span class="token operator">\</span>
    &amp;&amp; apt-get update <span class="token operator">\</span>
    &amp;&amp; apt-get install -y <span class="token variable">$buildDeps</span> <span class="token operator">\</span>
    &amp;&amp; wget -O redis.tar.gz <span class="token string">"http://download.redis.io/releases/redis-5.0.3.tar.gz"</span> <span class="token operator">\</span>
    &amp;&amp; mkdir -p /usr/src/redis <span class="token operator">\</span>
    &amp;&amp; tar -xzf redis.tar.gz -C /usr/src/redis --strip-components=1 <span class="token operator">\</span>
    &amp;&amp; make -C /usr/src/redis <span class="token operator">\</span>
    &amp;&amp; make -C /usr/src/redis install <span class="token operator">\</span>
    &amp;&amp; rm -rf /var/lib/apt/lists/* <span class="token operator">\</span>
    &amp;&amp; rm redis.tar.gz <span class="token operator">\</span>
    &amp;&amp; rm -r /usr/src/redis <span class="token operator">\</span>
    &amp;&amp; apt-get purge -y --auto-remove <span class="token variable">$buildDeps</span></span></code></pre>

<p>这里没有使用很多个 <code>RUN</code>指令，而是仅仅通过一个 <code>RUN</code> 指令，使用 <code>&amp;&amp;</code> 将各个命令串联起来，并使用<code>\</code>将行尾换行符转义。从而将之前的 7 层镜像，简化为了 1 层。</p>
<p>可以看到，为了尽可能减少镜像体积，避免构建出臃肿的镜像；这一组命令的最后添加了清理工作的命令，删除了为了编译构建所需要的软件，清理了所有下载、展开的文件，并且还清理了 <code>apt</code> 缓存文件。</p>
<h3 id="COPY-复制文件"><a href="#COPY-复制文件" class="headerlink" title="COPY 复制文件"></a><code>COPY</code> 复制文件</h3><p><code>COPY</code> 指令将从构建上下文目录中 <code>&lt;源路径&gt;</code> 的文件&#x2F;目录复制到新的一层的镜像内的 <code>&lt;目标路径&gt;</code> 位置。</p>
<p>和 <code>RUN</code> 指令一样，也有两种格式，一种类似于命令行，一种类似于函数调用：</p>
<ul>
<li><code>COPY [--chown=&lt;user&gt;:&lt;group&gt;] &lt;源路径&gt;... &lt;目标路径&gt;</code></li>
<li><code>COPY [--chown=&lt;user&gt;:&lt;group&gt;] [&quot;&lt;源路径1&gt;&quot;,... &quot;&lt;目标路径&gt;&quot;]</code></li>
</ul>
<p>如：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">COPY package.json /usr/src/app/</code></pre>

<p><code>&lt;源路径&gt;</code> 可以是多个，甚至可以是通配符，其通配符规则要满足 Go 的 <a href="https://golang.org/pkg/path/filepath/#Match"><code>filepath.Match</code></a> 规则，如：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">COPY hom* /mydir/
COPY hom?.txt /mydir/</code></pre>

<p><code>&lt;目标路径&gt;</code> 可以是容器内的绝对路径，也可以是相对于工作目录的相对路径（工作目录可以用 <code>WORKDIR</code> 指令来指定）。目标路径不需要事先创建，如果目录不存在会在复制文件前先行创建缺失目录。</p>
<p><strong>使用 <code>COPY</code> 指令，源文件的各种元数据都会保留。</strong>比如读、写、执行权限、文件变更时间等。这个特性对于镜像定制很有用。特别是构建相关文件都在使用 Git 进行管理的时候。</p>
<p>在使用该指令的时候还可以加上 <code>--chown=&lt;user&gt;:&lt;group&gt;</code> 选项来改变文件的所属用户及所属组。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">COPY --chown<span class="token operator">=</span><span class="token number">55</span>:mygroup files* /mydir/
COPY --chown<span class="token operator">=</span>bin files* /mydir/
COPY --chown<span class="token operator">=</span><span class="token number">1</span> files* /mydir/
COPY --chown<span class="token operator">=</span><span class="token number">10</span>:11 files* /mydir/</code></pre>

<p>如果源路径为文件夹，复制的时候不是直接复制该文件夹，而是将文件夹中的内容复制到目标路径。</p>
<h3 id="ADD-更高级的复制文件"><a href="#ADD-更高级的复制文件" class="headerlink" title="ADD 更高级的复制文件"></a><code>ADD</code> 更高级的复制文件</h3><p><code>ADD</code> 指令和 <code>COPY</code> 的格式和性质基本一致。但是在 <code>COPY</code> 基础上增加了一些功能。</p>
<p>比如 <code>&lt;源路径&gt;</code> 可以是一个 <code>URL</code>，这种情况下，Docker 引擎会试图去下载这个链接的文件放到 <code>&lt;目标路径&gt;</code> 去。下载后的文件权限自动设置为 <code>600</code>。</p>
<p>如果 <code>&lt;源路径&gt;</code> 为一个 <code>tar</code> 压缩文件的话，压缩格式为 <code>gzip</code>, <code>bzip2</code> 以及 <code>xz</code> 的情况下，<code>ADD</code> 指令将会自动解压缩这个压缩文件到 <code>&lt;目标路径&gt;</code> 去。</p>
<p>在 <code>COPY</code> 和 <code>ADD</code> 指令中选择的时候，应遵循 Docker 官方的 <a href="">Dockerfile 最佳实践文档</a> 中提出的原则，所有的文件复制均使用 <code>COPY</code> 指令，仅在需要自动解压缩的场合使用 <code>ADD</code>。</p>
<p>在使用该指令的时候还可以加上 <code>--chown=&lt;user&gt;:&lt;group&gt;</code> 选项来改变文件的所属用户及所属组。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">ADD --chown<span class="token operator">=</span><span class="token number">55</span>:mygroup files* /mydir/
ADD --chown<span class="token operator">=</span>bin files* /mydir/
ADD --chown<span class="token operator">=</span><span class="token number">1</span> files* /mydir/
ADD --chown<span class="token operator">=</span><span class="token number">10</span>:11 files* /mydir/</code></pre>

<h3 id="CMD-容器启动命令"><a href="#CMD-容器启动命令" class="headerlink" title="CMD 容器启动命令"></a><code>CMD</code> 容器启动命令</h3><p><code>CMD</code> 指令就是用于指定默认的容器主进程的启动命令的。Docker 不是虚拟机，容器就是进程。既然是进程，那么在启动容器的时候，需要指定所运行的程序及参数。</p>
<p><code>CMD</code> 指令的格式：</p>
<ul>
<li><code>shell</code> 格式：<code>CMD &lt;命令&gt;</code></li>
<li><code>exec</code> 格式：<code>CMD [&quot;可执行文件&quot;, &quot;参数1&quot;, &quot;参数2&quot;...]</code></li>
<li>参数列表格式：<code>CMD [&quot;参数1&quot;, &quot;参数2&quot;...]</code>。在指定了 <code>ENTRYPOINT</code> 指令后，用 <code>CMD</code> 指定具体的参数。</li>
</ul>
<p>在指令格式上，一般推荐使用 <code>exec</code> 格式，这类格式在解析时会被解析为 JSON 数组，因此一定要使用双引号 <code>&quot;</code>，而不要使用单引号。</p>
<p>Docker 不是虚拟机，<strong>容器中的应用都应该以前台执行</strong>，而不是像虚拟机、物理机里面那样，用 <code>systemd</code> 去启动后台服务，容器内没有后台服务的概念。</p>
<p><strong>对于容器而言，其启动程序就是容器应用进程，容器就是为了主进程而存在的，主进程退出，容器就失去了存在的意义，从而退出，其它辅助进程不是它需要关心的东西。</strong></p>
<p>一些初学者将 <code>CMD</code> 写为：</p>
<pre class="language-docker" data-language="docker"><code class="language-docker"><span class="token instruction"><span class="token keyword">CMD</span> service nginx start</span></code></pre>

<p>使用 <code>service nginx start</code> 命令，则是希望 upstart 来以后台守护进程形式启动 <code>nginx</code> 服务。而刚才说了 <code>CMD service nginx start</code> 会被理解为 <code>CMD [ &quot;sh&quot;, &quot;-c&quot;, &quot;service nginx start&quot;]</code>，因此主进程实际上是 <code>sh</code>。那么当 <code>service nginx start</code> 命令结束后，<code>sh</code> 也就结束了，<code>sh</code> 作为主进程退出了，自然就会令容器退出。</p>
<p>正确的做法是直接执行 <code>nginx</code> 可执行文件，并且要求以前台形式运行。比如：</p>
<pre class="language-docker" data-language="docker"><code class="language-docker"><span class="token instruction"><span class="token keyword">CMD</span> [<span class="token string">"nginx"</span>, <span class="token string">"-g"</span>, <span class="token string">"daemon off;"</span>]</span></code></pre>

<h3 id="ENTRYPOINT-入口点"><a href="#ENTRYPOINT-入口点" class="headerlink" title="ENTRYPOINT 入口点"></a><code>ENTRYPOINT</code> 入口点</h3><p><code>ENTRYPOINT</code> 的目的和 <code>CMD</code> 一样，都是在指定容器启动程序及参数。<code>ENTRYPOINT</code> 在运行时也可以替代，不过比 <code>CMD</code> 要略显繁琐，需要通过 <code>docker run</code> 的参数 <code>--entrypoint</code> 来指定。</p>
<p>当指定了 <code>ENTRYPOINT</code> 后，<code>CMD</code> 的含义就发生了改变，不再是直接的运行其命令，而是将 <code>CMD</code> 的内容作为参数传给 <code>ENTRYPOINT</code> 指令，换句话说实际执行时，将变为：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token operator">&lt;</span>ENTRYPOINT<span class="token operator">></span> <span class="token string">"&lt;CMD>"</span></code></pre>

<h4 id="场景1：让镜像变成像命令一样使用"><a href="#场景1：让镜像变成像命令一样使用" class="headerlink" title="场景1：让镜像变成像命令一样使用"></a>场景1：让镜像变成像命令一样使用</h4><p>假设我们要构建一个得知自己当前公网 IP 的镜像。</p>
<h5 id="（1）使用CMD来实现："><a href="#（1）使用CMD来实现：" class="headerlink" title="（1）使用CMD来实现："></a>（1）使用<code>CMD</code>来实现：</h5><pre class="language-docker" data-language="docker"><code class="language-docker"><span class="token instruction"><span class="token keyword">FROM</span> ubuntu:18.04</span>
<span class="token instruction"><span class="token keyword">RUN</span> apt-get update <span class="token operator">\</span>
    &amp;&amp; apt-get install -y curl <span class="token operator">\</span>
    &amp;&amp; rm -rf /var/lib/apt/lists/*</span>
<span class="token instruction"><span class="token keyword">CMD</span> [ <span class="token string">"curl"</span>, <span class="token string">"-s"</span>, <span class="token string">"http://myip.ipip.net"</span> ]</span></code></pre>

<p>使用 <code>docker build -t myip .</code> 来构建镜像，然后执行：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">docker</span> run myip
当前 IP：61.148.226.66 来自：北京市 联通</code></pre>

<p>假如我们修改镜像执行curl的参数：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">docker</span> run myip -i
docker: Error response from daemon: invalid header field value <span class="token string">"oci runtime error: container_linux.go:247: starting container process caused <span class="token entity" title="\&quot;">\"</span>exec: <span class="token entity" title="\\">\\</span><span class="token entity" title="\&quot;">\"</span>-i<span class="token entity" title="\\">\\</span><span class="token entity" title="\&quot;">\"</span>: executable file not found in <span class="token environment constant">$PATH</span><span class="token entity" title="\&quot;">\"</span><span class="token entity" title="\n">\n</span>"</span><span class="token builtin class-name">.</span></code></pre>

<p>跟在镜像名后面的是 <code>command</code>，运行时会替换 Dockerfile中<code>CMD</code> 的默认值。因此这里的 <code>-i</code> 替换了一个新的 <code>CMD</code>指令。自然是找不到<code>-i</code>这个命令的。</p>
<p>如果我们希望加入 <code>-i</code> 这参数，我们就必须重新完整的输入这个命令：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">docker</span> run myip <span class="token function">curl</span> -s http://myip.ipip.net -i</code></pre>



<h5 id="（2）使用ENTRYPOINT来实现："><a href="#（2）使用ENTRYPOINT来实现：" class="headerlink" title="（2）使用ENTRYPOINT来实现："></a>（2）使用<code>ENTRYPOINT</code>来实现：</h5><pre class="language-docker" data-language="docker"><code class="language-docker"><span class="token instruction"><span class="token keyword">FROM</span> ubuntu:18.04</span>
<span class="token instruction"><span class="token keyword">RUN</span> apt-get update <span class="token operator">\</span>
    &amp;&amp; apt-get install -y curl <span class="token operator">\</span>
    &amp;&amp; rm -rf /var/lib/apt/lists/*</span>
<span class="token instruction"><span class="token keyword">ENTRYPOINT</span> [ <span class="token string">"curl"</span>, <span class="token string">"-s"</span>, <span class="token string">"http://myip.ipip.net"</span> ]</span></code></pre>

<p>直接使用 <code>docker run myip -i</code>：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">docker</span> run myip
当前 IP：61.148.226.66 来自：北京市 联通

$ <span class="token function">docker</span> run myip -i
HTTP/1.1 <span class="token number">200</span> OK
Server: nginx/1.8.0
Date: Tue, <span class="token number">22</span> Nov <span class="token number">2016</span> 05:12:40 GMT
Content-Type: text/html<span class="token punctuation">;</span> <span class="token assign-left variable">charset</span><span class="token operator">=</span>UTF-8
Vary: Accept-Encoding
X-Powered-By: PHP/5.6.24-1~dotdeb+7.1
X-Cache: MISS from cache-2
X-Cache-Lookup: MISS from cache-2:80
X-Cache: MISS from proxy-2_6
Transfer-Encoding: chunked
Via: <span class="token number">1.1</span> cache-2:80, <span class="token number">1.1</span> proxy-2_6:8006
Connection: keep-alive

当前 IP：61.148.226.66 来自：北京市 联通</code></pre>

<p>当存在 <code>ENTRYPOINT</code> 时，<code>CMD</code> 的内容将会作为参数传给（追加给） <code>ENTRYPOINT</code>，而这里 <code>-i</code> 就是新的 <code>CMD</code>，因此会作为参数传给 <code>curl -s http://myip.ipip.net</code>，从而达到了我们预期的效果。</p>
<h4 id="场景2：应用运行前的准备工作"><a href="#场景2：应用运行前的准备工作" class="headerlink" title="场景2：应用运行前的准备工作"></a>场景2：应用运行前的准备工作</h4><p>有时候，启动容器（启动容器就是启动主进程）前，需要一些准备工作。比如 <code>mysql</code> 类的数据库，可能需要一些数据库配置、初始化的工作，这些工作要在最终的 mysql 服务器运行之前解决。可能希望避免使用 <code>root</code> 用户去启动服务，从而提高安全性，而在启动服务前还需要以 <code>root</code> 身份执行一些必要的准备工作，最后切换到服务用户身份启动服务。</p>
<p>这种情况下，可以写一个脚本，然后放入 <code>ENTRYPOINT</code> 中去执行，而这个脚本会将接到的参数（也就是 <code>&lt;CMD&gt;</code>）作为命令，在脚本最后执行。比如官方镜像 <code>redis</code> 中就是这么做的：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">FROM alpine:3.4
<span class="token punctuation">..</span>.
RUN addgroup -S redis <span class="token operator">&amp;&amp;</span> adduser -S -G redis redis
<span class="token punctuation">..</span>.
ENTRYPOINT <span class="token punctuation">[</span><span class="token string">"docker-entrypoint.sh"</span><span class="token punctuation">]</span>

EXPOSE <span class="token number">6379</span>
CMD <span class="token punctuation">[</span> <span class="token string">"redis-server"</span> <span class="token punctuation">]</span></code></pre>

<p>可以看到其中为了 redis 服务创建了 redis 用户，并在最后指定了 <code>ENTRYPOINT</code> 为 <code>docker-entrypoint.sh</code> 脚本。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/sh</span>
<span class="token punctuation">..</span>.
<span class="token comment"># allow the container to be started with `--user`</span>
<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$1</span>"</span> <span class="token operator">=</span> <span class="token string">'redis-server'</span> -a <span class="token string">"<span class="token variable"><span class="token variable">$(</span><span class="token function">id</span> -u<span class="token variable">)</span></span>"</span> <span class="token operator">=</span> <span class="token string">'0'</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
	<span class="token function">find</span> <span class="token builtin class-name">.</span> <span class="token punctuation">\</span><span class="token operator">!</span> -user redis -exec <span class="token function">chown</span> redis <span class="token string">'&#123;&#125;'</span> +
	<span class="token builtin class-name">exec</span> gosu redis <span class="token string">"<span class="token variable">$0</span>"</span> <span class="token string">"<span class="token variable">$@</span>"</span>
<span class="token keyword">fi</span>

<span class="token builtin class-name">exec</span> <span class="token string">"<span class="token variable">$@</span>"</span></code></pre>

<p>该脚本的内容就是根据 <code>CMD</code> 的内容来判断，如果是 <code>redis-server</code> 的话，则切换到 <code>redis</code> 用户身份启动服务器，否则依旧使用 <code>root</code> 身份执行。比如：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">docker</span> run -it redis <span class="token function">id</span>
<span class="token assign-left variable">uid</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span> <span class="token assign-left variable">gid</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span> <span class="token assign-left variable">groups</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span></code></pre>

<h3 id="ENV-设置环境变量"><a href="#ENV-设置环境变量" class="headerlink" title="ENV 设置环境变量"></a><code>ENV</code> 设置环境变量</h3><p><code>ENV</code> 指令设置环境变量，无论是后面的其它指令，如 RUN，还是运行时的应用，都可以直接使用这里定义的环境变量。</p>
<p>格式：</p>
<ul>
<li><p><code>ENV &lt;key&gt; &lt;value&gt;</code></p>
</li>
<li><p><code>ENV &lt;key1&gt;=&lt;value1&gt; &lt;key2&gt;=&lt;value2&gt;...</code></p>
</li>
</ul>
<pre class="language-docker" data-language="docker"><code class="language-docker"><span class="token instruction"><span class="token keyword">ENV</span> VERSION=1.0 DEBUG=on <span class="token operator">\</span>
    NAME=<span class="token string">"Happy Feet"</span></span></code></pre>

<p>定义了环境变量，那么在后续的指令中，就可以使用这个环境变量。比如在官方 node 镜像 Dockerfile 中，就有类似这样的代码：</p>
<pre class="language-docker" data-language="docker"><code class="language-docker"><span class="token instruction"><span class="token keyword">ENV</span> NODE_VERSION 7.2.0</span>

<span class="token instruction"><span class="token keyword">RUN</span> curl -SLO <span class="token string">"https://nodejs.org/dist/v$NODE_VERSION/node-v$NODE_VERSION-linux-x64.tar.xz"</span> <span class="token operator">\</span>
  &amp;&amp; curl -SLO <span class="token string">"https://nodejs.org/dist/v$NODE_VERSION/SHASUMS256.txt.asc"</span> <span class="token operator">\</span>
  &amp;&amp; gpg --batch --decrypt --output SHASUMS256.txt SHASUMS256.txt.asc <span class="token operator">\</span>
  &amp;&amp; grep <span class="token string">" node-v$NODE_VERSION-linux-x64.tar.xz\$"</span> SHASUMS256.txt | sha256sum -c - <span class="token operator">\</span>
  &amp;&amp; tar -xJf <span class="token string">"node-v$NODE_VERSION-linux-x64.tar.xz"</span> -C /usr/local --strip-components=1 <span class="token operator">\</span>
  &amp;&amp; rm <span class="token string">"node-v$NODE_VERSION-linux-x64.tar.xz"</span> SHASUMS256.txt.asc SHASUMS256.txt <span class="token operator">\</span>
  &amp;&amp; ln -s /usr/local/bin/node /usr/local/bin/nodejs</span></code></pre>
<p>在这里先定义了环境变量 NODE_VERSION，其后的 RUN 这层里，多次使用 $NODE_VERSION 来进行操作定制。</p>
<p>下列指令可以支持环境变量展开： <code>ADD</code>、<code>COPY</code>、<code>ENV</code>、<code>EXPOSE</code>、<code>FROM</code>、<code>LABEL</code>、<code>USER</code>、<code>WORKDIR</code>、<code>VOLUME</code>、<code>STOPSIGNAL</code>、<code>ONBUILD</code>、<code>RUN</code>。</p>
<h3 id="ARG-构建时环境变量"><a href="#ARG-构建时环境变量" class="headerlink" title="ARG 构建时环境变量"></a><code>ARG</code> 构建时环境变量</h3><p>格式：</p>
<ul>
<li><code>ARG &lt;参数名&gt;[=&lt;默认值&gt;]</code></li>
</ul>
<p>构建参数和 <code>ENV</code> 的效果类似，也可以设置环境变量。不同的是，<code>ARG</code> 所设置的是构建环境时的环境变量，在将来容器运行时是不会存在这些环境变量的。</p>
<blockquote>
<p>注意：不要使用 <code>ARG</code> 保存密码之类的信息，因为 <code>docker history</code> 还是可以看到所有值的。</p>
</blockquote>
<p><code>Dockerfile</code> 中的 <code>ARG</code> 指令是定义参数名称，以及定义其默认值。该默认值可以在构建命令 <code>docker build</code> 中用 <code>--build-arg &lt;参数名&gt;=&lt;值&gt;</code> 来覆盖。灵活的使用 <code>ARG</code> 指令，能够在不修改 Dockerfile 的情况下，构建出不同的镜像。</p>
<p>ARG 指令有生效范围，如果在 <code>FROM</code> 指令之前指定，那么只能用于 <code>FROM</code> 指令中。</p>
<pre class="language-docker" data-language="docker"><code class="language-docker"><span class="token instruction"><span class="token keyword">ARG</span> DOCKER_USERNAME=library</span>

<span class="token instruction"><span class="token keyword">FROM</span> <span class="token variable">$&#123;DOCKER_USERNAME&#125;</span>/alpine</span>

<span class="token instruction"><span class="token keyword">RUN</span> set -x ; echo <span class="token variable">$&#123;DOCKER_USERNAME&#125;</span></span></code></pre>

<p>使用上述 Dockerfile 会发现无法输出 <code>$&#123;DOCKER_USERNAME&#125;</code> 变量的值，要想正常输出，你必须在 <code>FROM</code> 之后再次指定 <code>ARG</code>：</p>
<pre class="language-docker" data-language="docker"><code class="language-docker"><span class="token comment"># 只在 FROM 中生效</span>
<span class="token instruction"><span class="token keyword">ARG</span> DOCKER_USERNAME=library</span>

<span class="token instruction"><span class="token keyword">FROM</span> <span class="token variable">$&#123;DOCKER_USERNAME&#125;</span>/alpine</span>

<span class="token comment"># 要想在 FROM 之后使用，必须再次指定</span>
<span class="token instruction"><span class="token keyword">ARG</span> DOCKER_USERNAME=library</span>

<span class="token instruction"><span class="token keyword">RUN</span> set -x ; echo <span class="token variable">$&#123;DOCKER_USERNAME&#125;</span></span></code></pre>

<p>对于多阶段构建，尤其要注意这个问题。下面2个 <code>FROM</code> 指令都可以使用 <code>$&#123;DOCKER_USERNAME&#125;</code>：</p>
<pre class="language-docker" data-language="docker"><code class="language-docker"><span class="token comment"># 这个变量在每个 FROM 中都生效</span>
<span class="token instruction"><span class="token keyword">ARG</span> DOCKER_USERNAME=library</span>

<span class="token instruction"><span class="token keyword">FROM</span> <span class="token variable">$&#123;DOCKER_USERNAME&#125;</span>/alpine</span>

<span class="token instruction"><span class="token keyword">RUN</span> set -x ; echo 1</span>

<span class="token instruction"><span class="token keyword">FROM</span> <span class="token variable">$&#123;DOCKER_USERNAME&#125;</span>/alpine</span>

<span class="token instruction"><span class="token keyword">RUN</span> set -x ; echo 2</span></code></pre>

<p>对于在各个阶段中使用的变量都必须在每个阶段分别指定：</p>
<pre class="language-docker" data-language="docker"><code class="language-docker"><span class="token instruction"><span class="token keyword">ARG</span> DOCKER_USERNAME=library</span>

<span class="token instruction"><span class="token keyword">FROM</span> <span class="token variable">$&#123;DOCKER_USERNAME&#125;</span>/alpine</span>

<span class="token comment"># 在FROM 之后使用变量，必须在每个阶段分别指定</span>
<span class="token instruction"><span class="token keyword">ARG</span> DOCKER_USERNAME=library</span>

<span class="token instruction"><span class="token keyword">RUN</span> set -x ; echo <span class="token variable">$&#123;DOCKER_USERNAME&#125;</span></span>

<span class="token instruction"><span class="token keyword">FROM</span> <span class="token variable">$&#123;DOCKER_USERNAME&#125;</span>/alpine</span>

<span class="token comment"># 在FROM 之后使用变量，必须在每个阶段分别指定</span>
<span class="token instruction"><span class="token keyword">ARG</span> DOCKER_USERNAME=library</span>

<span class="token instruction"><span class="token keyword">RUN</span> set -x ; echo <span class="token variable">$&#123;DOCKER_USERNAME&#125;</span></span></code></pre>

<h3 id="VOLUME-定义匿名卷"><a href="#VOLUME-定义匿名卷" class="headerlink" title="VOLUME 定义匿名卷"></a><code>VOLUME</code> 定义匿名卷</h3><p>容器运行时应该尽量保持容器存储层不发生写操作，对于数据库类需要保存动态数据的应用，其数据库文件应该保存于卷(volume)中。为了防止运行时用户忘记将动态文件所保存目录挂载为卷，在 <code>Dockerfile</code> 中，可以使用<code>VOLUME</code>指令事先指定某些目录挂载为匿名卷，这样在运行时如果用户不指定挂载，其应用也可以正常运行，不会向容器存储层写入大量数据。格式为：</p>
<ul>
<li><code>VOLUME [&quot;&lt;路径1&gt;&quot;, &quot;&lt;路径2&gt;&quot;...]</code></li>
<li><code>VOLUME &lt;路径&gt;</code></li>
</ul>
<p>下面的 <code>/data</code> 目录就会在容器运行时自动挂载为匿名卷，任何向 <code>/data</code> 中写入的信息都不会记录进容器存储层，从而保证了容器存储层的无状态化。</p>
<pre class="language-docker" data-language="docker"><code class="language-docker"><span class="token instruction"><span class="token keyword">VOLUME</span> /data</span></code></pre>

<p>运行容器时可以覆盖这个挂载设置。比如，使用了 <code>mydata</code> 这个命名卷挂载到了 <code>/data</code> 这个位置，替代了 <code>Dockerfile</code> 中定义的匿名卷的挂载配置：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">docker</span> run -d -v mydata:/data xxxx</code></pre>

<h3 id="EXPOSE-暴露端口"><a href="#EXPOSE-暴露端口" class="headerlink" title="EXPOSE 暴露端口"></a><code>EXPOSE</code> 暴露端口</h3><p><code>EXPOSE</code> 指令是声明容器运行时提供服务的端口，这只是一个声明，在容器运行时并不会因为这个声明应用就会开启这个端口的服务。格式为：</p>
<ul>
<li><code>EXPOSE &lt;端口1&gt; [&lt;端口2&gt;...]</code></li>
</ul>
<p>在 Dockerfile 中写入这样的声明有两个好处，一个是帮助镜像使用者理解这个镜像服务的守护端口，以方便配置映射；另一个用处则是在运行时使用随机端口映射时，也就是 <code>docker run -P</code> 时，会自动随机映射 <code>EXPOSE</code> 的端口。</p>
<p>要将 <code>EXPOSE</code> 和在运行时使用 <code>-p &lt;宿主端口&gt;:&lt;容器端口&gt;</code> 区分开来。<code>-p</code>，是映射宿主端口和容器端口，换句话说，就是将容器的对应端口服务公开给外界访问，而 <code>EXPOSE</code> 仅仅是声明容器打算使用什么端口而已，并不会自动在宿主进行端口映射。</p>
<h3 id="WORKDIR-指定工作目录"><a href="#WORKDIR-指定工作目录" class="headerlink" title="WORKDIR 指定工作目录"></a><code>WORKDIR</code> 指定工作目录</h3><p>使用 <code>WORKDIR</code> 指令可以来指定工作目录（或者称为当前目录），以后各层的当前目录就被改为指定的目录，如该目录不存在，<code>WORKDIR</code> 会帮你建立目录。格式为：</p>
<ul>
<li><code>WORKDIR &lt;工作目录路径&gt;</code></li>
</ul>
<p>其中，<em>工作目录路径</em> 是容器的文件系统目录。</p>
<p>之前提到一些初学者常犯的错误是把 <code>Dockerfile</code> 等同于 Shell 脚本来书写，这种错误的理解还可能会导致出现下面这样的错误：</p>
<pre class="language-docker" data-language="docker"><code class="language-docker"><span class="token instruction"><span class="token keyword">RUN</span> cd /app</span>
<span class="token instruction"><span class="token keyword">RUN</span> echo <span class="token string">"hello"</span> > world.txt</span></code></pre>

<p>如果将这个 <code>Dockerfile</code> 进行构建镜像运行后，会发现找不到 <code>/app/world.txt</code> 文件，或者其内容不是 <code>hello</code>。原因其实很简单，在 Shell 中，连续两行是同一个进程执行环境，因此前一个命令修改的内存状态，会直接影响后一个命令；<strong>而在 <code>Dockerfile</code> 中，这两行 <code>RUN</code> 命令的执行环境根本不同，是两个完全不同的容器。</strong>这就是对 <code>Dockerfile</code> 构建分层存储的概念不了解所导致的错误。</p>
<p>之前说过每一个 <code>RUN</code> 都是启动一个容器、执行命令、然后提交存储层文件变更。第一层 <code>RUN cd /app</code> 的执行仅仅是当前进程的工作目录变更，一个内存上的变化而已，其结果不会造成任何文件变更。而到第二层的时候，启动的是一个全新的容器，跟第一层的容器更完全没关系，自然不可能继承前一层构建过程中的内存变化。</p>
<p>因此如果需要改变以后各层的工作目录的位置，那么应该使用 <code>WORKDIR</code> 指令。</p>
<pre class="language-docker" data-language="docker"><code class="language-docker"><span class="token instruction"><span class="token keyword">WORKDIR</span> /app</span>

<span class="token instruction"><span class="token keyword">RUN</span> echo <span class="token string">"hello"</span> > world.txt</span></code></pre>

<p>如果你的 <code>WORKDIR</code> 指令使用的相对路径，那么所切换的路径与之前的 <code>WORKDIR</code> 有关：</p>
<pre class="language-docker" data-language="docker"><code class="language-docker"><span class="token instruction"><span class="token keyword">WORKDIR</span> /a</span>
<span class="token instruction"><span class="token keyword">WORKDIR</span> b</span>
<span class="token instruction"><span class="token keyword">WORKDIR</span> c</span>

<span class="token instruction"><span class="token keyword">RUN</span> pwd</span></code></pre>

<p><code>RUN pwd</code> 的工作目录为 <code>/a/b/c</code>。</p>
<h3 id="USER-指定当前用户"><a href="#USER-指定当前用户" class="headerlink" title="USER 指定当前用户"></a><code>USER</code> 指定当前用户</h3><p><code>USER</code> 指令和 <code>WORKDIR</code> 相似，都是改变环境状态并影响以后的层。<code>WORKDIR</code> 是改变工作目录，<code>USER</code> 则是改变之后层的执行 <code>RUN</code>, <code>CMD</code> 以及 <code>ENTRYPOINT</code> 这类命令的身份。格式：</p>
<ul>
<li><code>USER &lt;用户名&gt;[:&lt;用户组&gt;]</code></li>
</ul>
<p>注意，<code>USER</code> 只是帮助你切换到指定用户而已，这个用户必须是事先建立好的，否则无法切换。</p>
<pre class="language-docker" data-language="docker"><code class="language-docker"><span class="token instruction"><span class="token keyword">RUN</span> groupadd -r redis &amp;&amp; useradd -r -g redis redis</span>
<span class="token instruction"><span class="token keyword">USER</span> redis</span>
<span class="token instruction"><span class="token keyword">RUN</span> [ <span class="token string">"redis-server"</span> ]</span></code></pre>

<p>如果以 <code>root</code> 执行的脚本，在执行期间希望改变身份，比如希望以某个已经建立好的用户来运行某个服务进程，不要使用 <code>su</code> 或者 <code>sudo</code>，这些都需要比较麻烦的配置，而且在 TTY 缺失的环境下经常出错。建议使用 <a href="https://github.com/tianon/gosu"><code>gosu</code></a>。</p>
<pre class="language-docker" data-language="docker"><code class="language-docker"><span class="token comment"># 建立 redis 用户，并使用 gosu 换另一个用户执行命令</span>
<span class="token instruction"><span class="token keyword">RUN</span> groupadd -r redis &amp;&amp; useradd -r -g redis redis</span>
<span class="token comment"># 下载 gosu</span>
<span class="token instruction"><span class="token keyword">RUN</span> wget -O /usr/local/bin/gosu <span class="token string">"https://github.com/tianon/gosu/releases/download/1.12/gosu-amd64"</span> <span class="token operator">\</span>
    &amp;&amp; chmod +x /usr/local/bin/gosu <span class="token operator">\</span>
    &amp;&amp; gosu nobody true</span>
<span class="token comment"># 设置 CMD，并以另外的用户执行</span>
<span class="token instruction"><span class="token keyword">CMD</span> [ <span class="token string">"exec"</span>, <span class="token string">"gosu"</span>, <span class="token string">"redis"</span>, <span class="token string">"redis-server"</span> ]</span></code></pre>

<h3 id="HEALTHCHECK-健康检查"><a href="#HEALTHCHECK-健康检查" class="headerlink" title="HEALTHCHECK 健康检查"></a><code>HEALTHCHECK</code> 健康检查</h3><p><code>HEALTHCHECK</code> 指令是告诉 Docker 应该如何进行判断容器的状态是否正常。其格式如下：</p>
<ul>
<li><code>HEALTHCHECK [选项] CMD &lt;命令&gt;</code>：设置检查容器健康状况的命令</li>
<li><code>HEALTHCHECK NONE</code>：如果基础镜像有健康检查指令，使用这行可以屏蔽掉其健康检查指令</li>
</ul>
<p>在没有 <code>HEALTHCHECK</code> 指令前，Docker 引擎只可以通过容器内主进程是否退出来判断容器是否状态异常。很多情况下这没问题，但是如果程序进入死锁状态，或者死循环状态，应用进程并不退出，但是该容器已经无法提供服务了。在 1.12 以前，Docker 不会检测到容器的这种状态，从而不会重新调度，导致可能会有部分容器已经无法提供服务了却还在接受用户请求。</p>
<p>而自 1.12 之后，Docker 提供了 <code>HEALTHCHECK</code> 指令，通过该指令指定一行命令，用这行命令来判断容器主进程的服务状态是否还正常，从而比较真实的反应容器实际状态。</p>
<p>当在一个镜像指定了 <code>HEALTHCHECK</code> 指令后，用其启动容器，初始状态会为 <code>starting</code>，在 <code>HEALTHCHECK</code> 指令检查成功后变为 <code>healthy</code>，如果连续一定次数失败，则会变为 <code>unhealthy</code>。</p>
<p><code>HEALTHCHECK</code> 支持下列选项：</p>
<ul>
<li><code>--interval=&lt;间隔&gt;</code>：两次健康检查的间隔，默认为 30 秒；</li>
<li><code>--timeout=&lt;时长&gt;</code>：健康检查命令运行超时时间，如果超过这个时间，本次健康检查就被视为失败，默认 30 秒；</li>
<li><code>--retries=&lt;次数&gt;</code>：当连续失败指定次数后，则将容器状态视为 <code>unhealthy</code>，默认 3 次。</li>
</ul>
<p>和 <code>CMD</code>, <code>ENTRYPOINT</code> 一样，<code>HEALTHCHECK</code> 只可以出现一次，如果写了多个，只有最后一个生效。</p>
<p>在 <code>HEALTHCHECK [选项] CMD</code> 后面的命令，格式和 <code>ENTRYPOINT</code> 一样，分为 <code>shell</code> 格式和 <code>exec</code> 格式。命令的返回值决定了该次健康检查的成功与否：<code>0</code>：成功；<code>1</code>：失败；<code>2</code>：保留，不要使用这个值。</p>
<p>假设我们有个镜像是个最简单的 Web 服务，我们希望增加健康检查来判断其 Web 服务是否在正常工作，我们可以用 <code>curl</code> 来帮助判断，其 <code>Dockerfile</code> 的 <code>HEALTHCHECK</code> 可以这么写：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">FROM nginx
RUN <span class="token function">apt-get</span> update <span class="token operator">&amp;&amp;</span> <span class="token function">apt-get</span> <span class="token function">install</span> -y <span class="token function">curl</span> <span class="token operator">&amp;&amp;</span> <span class="token function">rm</span> -rf /var/lib/apt/lists/*
HEALTHCHECK --interval<span class="token operator">=</span>5s --timeout<span class="token operator">=</span>3s <span class="token punctuation">\</span>
  CMD <span class="token function">curl</span> -fs http://localhost/ <span class="token operator">||</span> <span class="token builtin class-name">exit</span> <span class="token number">1</span></code></pre>

<p>这里我们设置了每 5 秒检查一次（这里为了试验所以间隔非常短，实际应该相对较长），如果健康检查命令超过 3 秒没响应就视为失败，并且使用 <code>curl -fs http://localhost/ || exit 1</code> 作为健康检查命令。</p>
<p>使用 <code>docker build</code> 来构建这个镜像：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">docker</span> build -t myweb:v1 <span class="token builtin class-name">.</span></code></pre>

<p>构建好了后，我们启动一个容器：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">docker</span> run -d --name web -p <span class="token number">80</span>:80 myweb:v1</code></pre>



<h3 id="ONBUILD-作为基础镜像构建新镜像时执行"><a href="#ONBUILD-作为基础镜像构建新镜像时执行" class="headerlink" title="ONBUILD 作为基础镜像构建新镜像时执行"></a><code>ONBUILD</code> 作为基础镜像构建新镜像时执行</h3><p><code>ONBUILD</code> 是一个特殊的指令，它后面跟的是其它指令，比如 <code>RUN</code>, <code>COPY</code> 等，而这些指令，在当前镜像构建时并不会被执行。仅当以当前镜像为基础镜像，去构建下一级镜像的时候才会被执行。格式：</p>
<ul>
<li><code>ONBUILD &lt;其它指令&gt;</code></li>
</ul>
<p><code>Dockerfile</code> 中的其它指令都是为了定制当前镜像而准备的，唯有 <code>ONBUILD</code> 是为了帮助别人定制自己而准备的。</p>
<p>假设我们要制作 Node.js 所写的应用的镜像。我们都知道 Node.js 使用 <code>npm</code> 进行包管理，所有依赖、配置、启动信息等会放到 <code>package.json</code> 文件里。在拿到程序代码后，需要先进行 <code>npm install</code> 才可以获得所有需要的依赖。然后就可以通过 <code>npm start</code> 来启动应用。让我们用 <code>ONBUILD</code> 写一下基础镜像的 <code>Dockerfile</code>:</p>
<pre class="language-docker" data-language="docker"><code class="language-docker"><span class="token instruction"><span class="token keyword">FROM</span> node:slim</span>
<span class="token instruction"><span class="token keyword">RUN</span> mkdir /app</span>
<span class="token instruction"><span class="token keyword">WORKDIR</span> /app</span>
<span class="token instruction"><span class="token keyword">ONBUILD</span> <span class="token keyword">COPY</span> ./package.json /app</span>
<span class="token instruction"><span class="token keyword">ONBUILD</span> <span class="token keyword">RUN</span> [ <span class="token string">"npm"</span>, <span class="token string">"install"</span> ]</span>
<span class="token instruction"><span class="token keyword">ONBUILD</span> <span class="token keyword">COPY</span> . /app/</span>
<span class="token instruction"><span class="token keyword">CMD</span> [ <span class="token string">"npm"</span>, <span class="token string">"start"</span> ]</span></code></pre>

<p>将项目相关的指令加上 <code>ONBUILD</code>，这样在构建基础镜像的时候，这三行并不会被执行。只有在以此镜像作为基础镜像构建新镜像时，这三行才会被执行。</p>
<p>假设有其他类似的Node.js项目，各个Node.js项目的 <code>Dockerfile</code> 就变成了下面简单的一行：</p>
<pre class="language-docker" data-language="docker"><code class="language-docker"><span class="token instruction"><span class="token keyword">FROM</span> my-node</span></code></pre>

<p>当在各个项目目录中，用这个只有一行的 <code>Dockerfile</code> 构建镜像时，之前基础镜像的那三行 <code>ONBUILD</code> 就会开始执行，成功的将当前项目的代码复制进镜像、并且针对本项目执行 <code>npm install</code>，生成应用镜像。</p>
<h3 id="LABEL-为镜像添加元数据"><a href="#LABEL-为镜像添加元数据" class="headerlink" title="LABEL 为镜像添加元数据"></a>LABEL 为镜像添加元数据</h3><p><code>LABEL</code> 指令用来给镜像以键值对的形式添加一些元数据（metadata）：</p>
<pre class="language-docker" data-language="docker"><code class="language-docker"><span class="token instruction"><span class="token keyword">LABEL</span> &lt;key>=&lt;value> &lt;key>=&lt;value> &lt;key>=&lt;value> ...</span></code></pre>

<p>我们还可以用一些标签来申明镜像的作者、文档地址等：</p>
<pre class="language-docker" data-language="docker"><code class="language-docker"><span class="token instruction"><span class="token keyword">LABEL</span> org.opencontainers.image.authors=<span class="token string">"yeasy"</span></span>
<span class="token instruction"><span class="token keyword">LABEL</span> org.opencontainers.image.documentation=<span class="token string">"https://yeasy.gitbooks.io"</span></span></code></pre>

<p>具体可以参考 <a href="https://github.com/opencontainers/image-spec/blob/master/annotations.md">https://github.com/opencontainers/image-spec/blob/master/annotations.md</a></p>
<h3 id="SHELL-指令"><a href="#SHELL-指令" class="headerlink" title="SHELL 指令"></a>SHELL 指令</h3><p>格式：<code>SHELL [&quot;executable&quot;, &quot;parameters&quot;]</code></p>
<p><code>SHELL</code> 指令可以指定 <code>RUN</code> <code>ENTRYPOINT</code> <code>CMD</code> 指令的 shell，Linux 中默认为<code>[&quot;/bin/sh&quot;, &quot;-c&quot;]</code></p>
<pre class="language-docker" data-language="docker"><code class="language-docker"><span class="token instruction"><span class="token keyword">SHELL</span> [<span class="token string">"/bin/sh"</span>, <span class="token string">"-c"</span>]</span>

<span class="token instruction"><span class="token keyword">RUN</span> lll ; ls</span>

<span class="token instruction"><span class="token keyword">SHELL</span> [<span class="token string">"/bin/sh"</span>, <span class="token string">"-cex"</span>]</span>

<span class="token instruction"><span class="token keyword">RUN</span> lll ; ls</span></code></pre>

<p>两个 <code>RUN</code> 运行同一命令，第二个 <code>RUN</code> 运行的命令会打印出每条命令并当遇到错误时退出。</p>
<p>当 <code>ENTRYPOINT</code> <code>CMD</code> 以 shell 格式指定时，<code>SHELL</code> 指令所指定的 shell 也会成为这两个指令的 shell：</p>
<pre class="language-docker" data-language="docker"><code class="language-docker"><span class="token instruction"><span class="token keyword">SHELL</span> [<span class="token string">"/bin/sh"</span>, <span class="token string">"-cex"</span>]</span>

<span class="token comment"># /bin/sh -cex "nginx"</span>
<span class="token instruction"><span class="token keyword">ENTRYPOINT</span> nginx</span></code></pre>

<pre class="language-docker" data-language="docker"><code class="language-docker"><span class="token instruction"><span class="token keyword">SHELL</span> [<span class="token string">"/bin/sh"</span>, <span class="token string">"-cex"</span>]</span>

<span class="token comment"># /bin/sh -cex "nginx"</span>
<span class="token instruction"><span class="token keyword">CMD</span> nginx</span></code></pre>

<h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><ul>
<li><code>Dockerfie</code> 官方文档：<a href="https://docs.docker.com/engine/reference/builder/">https://docs.docker.com/engine/reference/builder/</a></li>
<li><code>Dockerfile</code> 最佳实践文档：<a href="https://docs.docker.com/develop/develop-images/dockerfile_best-practices/">https://docs.docker.com/develop/develop-images/dockerfile_best-practices/</a></li>
<li><code>Docker</code> 官方镜像 <code>Dockerfile</code>：<a href="https://github.com/docker-library/docs">https://github.com/docker-library/docs</a></li>
</ul>
<h2 id="Dockerfile-多阶段构建"><a href="#Dockerfile-多阶段构建" class="headerlink" title="Dockerfile 多阶段构建"></a>Dockerfile 多阶段构建</h2><p>Docker v17.05 开始支持多阶段构建 (<code>multistage builds</code>)。使用多阶段构建我们就可以很容易解决前面提到的问题，并且只需要编写一个 <code>Dockerfile</code>：</p>
<p>例如，编写 <code>Dockerfile</code> 文件：</p>
<pre class="language-docker" data-language="docker"><code class="language-docker"><span class="token instruction"><span class="token keyword">FROM</span> golang:alpine <span class="token keyword">as</span> builder</span>

<span class="token instruction"><span class="token keyword">RUN</span> apk --no-cache add git</span>

<span class="token instruction"><span class="token keyword">WORKDIR</span> /go/src/github.com/go/helloworld/</span>

<span class="token instruction"><span class="token keyword">RUN</span> go get -d -v github.com/go-sql-driver/mysql</span>

<span class="token instruction"><span class="token keyword">COPY</span> app.go .</span>

<span class="token instruction"><span class="token keyword">RUN</span> CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -o app .</span>

<span class="token instruction"><span class="token keyword">FROM</span> alpine:latest <span class="token keyword">as</span> prod</span>

<span class="token instruction"><span class="token keyword">RUN</span> apk --no-cache add ca-certificates</span>

<span class="token instruction"><span class="token keyword">WORKDIR</span> /root/</span>

<span class="token instruction"><span class="token keyword">COPY</span> <span class="token options"><span class="token property">--from</span><span class="token punctuation">=</span><span class="token string">0</span></span> /go/src/github.com/go/helloworld/app .</span>

<span class="token instruction"><span class="token keyword">CMD</span> [<span class="token string">"./app"</span>]</span></code></pre>

<p>构建镜像：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">docker</span> build -t go/helloworld:3 <span class="token builtin class-name">.</span></code></pre>

<h4 id="只构建某一阶段的镜像"><a href="#只构建某一阶段的镜像" class="headerlink" title="只构建某一阶段的镜像"></a>只构建某一阶段的镜像</h4><p>我们可以使用 <code>as</code> 来为某一阶段命名，例如</p>
<pre class="language-docker" data-language="docker"><code class="language-docker"><span class="token instruction"><span class="token keyword">FROM</span> golang:alpine <span class="token keyword">as</span> builder</span></code></pre>

<p>例如当我们只想构建 <code>builder</code> 阶段的镜像时，增加 <code>--target=builder</code> 参数即可：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">docker</span> build --target builder -t username/imagename:tag <span class="token builtin class-name">.</span></code></pre>

<h4 id="构建时从其他镜像复制文件"><a href="#构建时从其他镜像复制文件" class="headerlink" title="构建时从其他镜像复制文件"></a>构建时从其他镜像复制文件</h4><p>上面例子中我们使用 <code>COPY --from=0 /go/src/github.com/go/helloworld/app .</code> 从上一阶段的镜像中复制文件，我们也可以复制任意镜像中的文件。</p>
<pre class="language-docker" data-language="docker"><code class="language-docker">$ COPY --from=nginx:latest /etc/nginx/nginx.conf /nginx.conf</code></pre>

<h4 id="实战多阶段构建-Laravel-镜像"><a href="#实战多阶段构建-Laravel-镜像" class="headerlink" title="实战多阶段构建 Laravel 镜像"></a>实战多阶段构建 Laravel 镜像</h4><h5 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h5><p>新建一个 <code>Laravel</code> 项目或在已有的 <code>Laravel</code> 项目根目录下新建 <code>Dockerfile</code> <code>.dockerignore</code> <code>laravel.conf</code> 文件。</p>
<p>在 <code>.dockerignore</code> 文件中写入以下内容。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">.idea/
.git/
vendor/
node_modules/
public/js/
public/css/
public/mix-manifest.json
yarn-error.log
bootstrap/cache/*
storage/
<span class="token comment"># 自行添加其他需要排除的文件，例如 .env.* 文件</span></code></pre>

<p>在 <code>laravel.conf</code> 文件中写入 nginx 配置。</p>
<pre class="language-nginx" data-language="nginx"><code class="language-nginx"><span class="token directive"><span class="token keyword">server</span></span> <span class="token punctuation">&#123;</span>
  <span class="token directive"><span class="token keyword">listen</span> <span class="token number">80</span> default_server</span><span class="token punctuation">;</span>
  <span class="token directive"><span class="token keyword">root</span> /app/laravel/public</span><span class="token punctuation">;</span>
  <span class="token directive"><span class="token keyword">index</span> index.php index.html</span><span class="token punctuation">;</span>
  <span class="token directive"><span class="token keyword">location</span> /</span> <span class="token punctuation">&#123;</span>
      <span class="token directive"><span class="token keyword">try_files</span> <span class="token variable">$uri</span> <span class="token variable">$uri</span>/ /index.php?<span class="token variable">$query_string</span></span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token directive"><span class="token keyword">location</span> ~ .*\.php(\/.*)*$</span> <span class="token punctuation">&#123;</span>
    <span class="token directive"><span class="token keyword">fastcgi_pass</span>   laravel:9000</span><span class="token punctuation">;</span>
    <span class="token directive"><span class="token keyword">include</span>        fastcgi.conf</span><span class="token punctuation">;</span>
    <span class="token comment"># fastcgi_connect_timeout 300;</span>
    <span class="token comment"># fastcgi_send_timeout 300;</span>
    <span class="token comment"># fastcgi_read_timeout 300;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>

<h5 id="前端构建"><a href="#前端构建" class="headerlink" title="前端构建"></a>前端构建</h5><p>第一阶段进行前端构建。</p>
<pre class="language-docker" data-language="docker"><code class="language-docker"><span class="token instruction"><span class="token keyword">FROM</span> node:alpine <span class="token keyword">as</span> frontend</span>
<span class="token instruction"><span class="token keyword">COPY</span> package.json /app/</span>
<span class="token instruction"><span class="token keyword">RUN</span> set -x ; cd /app <span class="token operator">\</span>
      &amp;&amp; npm install --registry=https://registry.npmmirror.com</span>
<span class="token instruction"><span class="token keyword">COPY</span> webpack.mix.js webpack.config.js tailwind.config.js /app/</span>
<span class="token instruction"><span class="token keyword">COPY</span> resources/ /app/resources/</span>
<span class="token instruction"><span class="token keyword">RUN</span> set -x ; cd /app <span class="token operator">\</span>
      &amp;&amp; touch artisan <span class="token operator">\</span>
      &amp;&amp; mkdir -p public <span class="token operator">\</span>
      &amp;&amp; npm run production</span></code></pre>

<h5 id="安装-Composer-依赖"><a href="#安装-Composer-依赖" class="headerlink" title="安装 Composer 依赖"></a>安装 Composer 依赖</h5><p>第二阶段安装 Composer 依赖。</p>
<pre class="language-docker" data-language="docker"><code class="language-docker"><span class="token instruction"><span class="token keyword">FROM</span> composer <span class="token keyword">as</span> composer</span>
<span class="token instruction"><span class="token keyword">COPY</span> database/ /app/database/</span>
<span class="token instruction"><span class="token keyword">COPY</span> composer.json composer.lock /app/</span>
<span class="token instruction"><span class="token keyword">RUN</span> set -x ; cd /app <span class="token operator">\</span>
      &amp;&amp; composer config -g repo.packagist composer https://mirrors.aliyun.com/composer/ <span class="token operator">\</span>
      &amp;&amp; composer install <span class="token operator">\</span>
           --ignore-platform-reqs <span class="token operator">\</span>
           --no-interaction <span class="token operator">\</span>
           --no-plugins <span class="token operator">\</span>
           --no-scripts <span class="token operator">\</span>
           --prefer-dist</span></code></pre>

<h5 id="整合以上阶段所生成的文件"><a href="#整合以上阶段所生成的文件" class="headerlink" title="整合以上阶段所生成的文件"></a>整合以上阶段所生成的文件</h5><p>第三阶段对以上阶段生成的文件进行整合。</p>
<pre class="language-docker" data-language="docker"><code class="language-docker"><span class="token instruction"><span class="token keyword">FROM</span> php:7.4-fpm-alpine <span class="token keyword">as</span> laravel</span>
<span class="token instruction"><span class="token keyword">ARG</span> LARAVEL_PATH=/app/laravel</span>
<span class="token instruction"><span class="token keyword">COPY</span> <span class="token options"><span class="token property">--from</span><span class="token punctuation">=</span><span class="token string">composer</span></span> /app/vendor/ <span class="token variable">$&#123;LARAVEL_PATH&#125;</span>/vendor/</span>
<span class="token instruction"><span class="token keyword">COPY</span> . <span class="token variable">$&#123;LARAVEL_PATH&#125;</span></span>
<span class="token instruction"><span class="token keyword">COPY</span> <span class="token options"><span class="token property">--from</span><span class="token punctuation">=</span><span class="token string">frontend</span></span> /app/public/js/ <span class="token variable">$&#123;LARAVEL_PATH&#125;</span>/public/js/</span>
<span class="token instruction"><span class="token keyword">COPY</span> <span class="token options"><span class="token property">--from</span><span class="token punctuation">=</span><span class="token string">frontend</span></span> /app/public/css/ <span class="token variable">$&#123;LARAVEL_PATH&#125;</span>/public/css/</span>
<span class="token instruction"><span class="token keyword">COPY</span> <span class="token options"><span class="token property">--from</span><span class="token punctuation">=</span><span class="token string">frontend</span></span> /app/public/mix-manifest.json <span class="token variable">$&#123;LARAVEL_PATH&#125;</span>/public/mix-manifest.json</span>
<span class="token instruction"><span class="token keyword">RUN</span> set -x ; cd <span class="token variable">$&#123;LARAVEL_PATH&#125;</span> <span class="token operator">\</span>
      &amp;&amp; mkdir -p storage <span class="token operator">\</span>
      &amp;&amp; mkdir -p storage/framework/cache <span class="token operator">\</span>
      &amp;&amp; mkdir -p storage/framework/sessions <span class="token operator">\</span>
      &amp;&amp; mkdir -p storage/framework/testing <span class="token operator">\</span>
      &amp;&amp; mkdir -p storage/framework/views <span class="token operator">\</span>
      &amp;&amp; mkdir -p storage/logs <span class="token operator">\</span>
      &amp;&amp; chmod -R 777 storage <span class="token operator">\</span>
      &amp;&amp; php artisan package:discover</span></code></pre>

<h5 id="最后一个阶段构建-NGINX-镜像"><a href="#最后一个阶段构建-NGINX-镜像" class="headerlink" title="最后一个阶段构建 NGINX 镜像"></a>最后一个阶段构建 NGINX 镜像</h5><pre class="language-docker" data-language="docker"><code class="language-docker"><span class="token instruction"><span class="token keyword">FROM</span> nginx:alpine <span class="token keyword">as</span> nginx</span>
<span class="token instruction"><span class="token keyword">ARG</span> LARAVEL_PATH=/app/laravel</span>
<span class="token instruction"><span class="token keyword">COPY</span> laravel.conf /etc/nginx/conf.d/</span>
<span class="token instruction"><span class="token keyword">COPY</span> <span class="token options"><span class="token property">--from</span><span class="token punctuation">=</span><span class="token string">laravel</span></span> <span class="token variable">$&#123;LARAVEL_PATH&#125;</span>/public <span class="token variable">$&#123;LARAVEL_PATH&#125;</span>/public</span></code></pre>

<h5 id="构建-Laravel-及-Nginx-镜像"><a href="#构建-Laravel-及-Nginx-镜像" class="headerlink" title="构建 Laravel 及 Nginx 镜像"></a>构建 Laravel 及 Nginx 镜像</h5><p>使用 <code>docker build</code> 命令构建镜像。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">docker</span> build -t my/laravel --target<span class="token operator">=</span>laravel <span class="token builtin class-name">.</span>
$ <span class="token function">docker</span> build -t my/nginx --target<span class="token operator">=</span>nginx <span class="token builtin class-name">.</span></code></pre>

<h5 id="启动容器并测试"><a href="#启动容器并测试" class="headerlink" title="启动容器并测试"></a>启动容器并测试</h5><p>新建 Docker 网络</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">docker</span> network create laravel</code></pre>

<p>启动 laravel 容器， <code>--name=laravel</code> 参数设定的名字必须与 <code>nginx</code> 配置文件中的 <code>fastcgi_pass laravel:9000;</code> 一致：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">docker</span> run -dit --rm --name<span class="token operator">=</span>laravel --network<span class="token operator">=</span>laravel my/laravel</code></pre>

<p>启动 nginx 容器</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">docker</span> run -dit --rm --network<span class="token operator">=</span>laravel -p <span class="token number">8080</span>:80 my/nginx</code></pre>

<p>浏览器访问 <code>127.0.0.1:8080</code> 可以看到 Laravel 项目首页。</p>
<blockquote>
<p>也许 Laravel 项目依赖其他外部服务，例如 redis、MySQL，请自行启动这些服务之后再进行测试，本小节不再赘述。</p>
</blockquote>
<h5 id="生产环境优化"><a href="#生产环境优化" class="headerlink" title="生产环境优化"></a>生产环境优化</h5><p>本小节内容为了方便测试，将配置文件直接放到了镜像中，实际在使用时 <strong>建议</strong> 将配置文件作为 <code>config</code> 或 <code>secret</code> 挂载到容器中，请读者自行学习 <code>Swarm mode</code> 或 <code>Kubernetes</code> 的相关内容。</p>
<p>由于篇幅所限本小节只是简单列出，更多内容可以参考 <a href="https://github.com/khs1994-docker/laravel-demo">https://github.com/khs1994-docker/laravel-demo</a> 项目。</p>
<h5 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h5><p>完整的 <code>Dockerfile</code> 文件如下。</p>
<pre class="language-docker" data-language="docker"><code class="language-docker"><span class="token instruction"><span class="token keyword">FROM</span> node:alpine <span class="token keyword">as</span> frontend</span>
<span class="token instruction"><span class="token keyword">COPY</span> package.json /app/</span>
<span class="token instruction"><span class="token keyword">RUN</span> set -x ; cd /app <span class="token operator">\</span>
      &amp;&amp; npm install --registry=https://registry.npmmirror.com</span>
<span class="token instruction"><span class="token keyword">COPY</span> webpack.mix.js webpack.config.js tailwind.config.js /app/</span>
<span class="token instruction"><span class="token keyword">COPY</span> resources/ /app/resources/</span>
<span class="token instruction"><span class="token keyword">RUN</span> set -x ; cd /app <span class="token operator">\</span>
      &amp;&amp; touch artisan <span class="token operator">\</span>
      &amp;&amp; mkdir -p public <span class="token operator">\</span>
      &amp;&amp; npm run production</span>
<span class="token instruction"><span class="token keyword">FROM</span> composer <span class="token keyword">as</span> composer</span>
<span class="token instruction"><span class="token keyword">COPY</span> database/ /app/database/</span>
<span class="token instruction"><span class="token keyword">COPY</span> composer.json /app/</span>
<span class="token instruction"><span class="token keyword">RUN</span> set -x ; cd /app <span class="token operator">\</span>
      &amp;&amp; composer config -g repo.packagist composer https://mirrors.aliyun.com/composer/ <span class="token operator">\</span>
      &amp;&amp; composer install <span class="token operator">\</span>
           --ignore-platform-reqs <span class="token operator">\</span>
           --no-interaction <span class="token operator">\</span>
           --no-plugins <span class="token operator">\</span>
           --no-scripts <span class="token operator">\</span>
           --prefer-dist</span>
<span class="token instruction"><span class="token keyword">FROM</span> php:7.4-fpm-alpine <span class="token keyword">as</span> laravel</span>
<span class="token instruction"><span class="token keyword">ARG</span> LARAVEL_PATH=/app/laravel</span>
<span class="token instruction"><span class="token keyword">COPY</span> <span class="token options"><span class="token property">--from</span><span class="token punctuation">=</span><span class="token string">composer</span></span> /app/vendor/ <span class="token variable">$&#123;LARAVEL_PATH&#125;</span>/vendor/</span>
<span class="token instruction"><span class="token keyword">COPY</span> . <span class="token variable">$&#123;LARAVEL_PATH&#125;</span></span>
<span class="token instruction"><span class="token keyword">COPY</span> <span class="token options"><span class="token property">--from</span><span class="token punctuation">=</span><span class="token string">frontend</span></span> /app/public/js/ <span class="token variable">$&#123;LARAVEL_PATH&#125;</span>/public/js/</span>
<span class="token instruction"><span class="token keyword">COPY</span> <span class="token options"><span class="token property">--from</span><span class="token punctuation">=</span><span class="token string">frontend</span></span> /app/public/css/ <span class="token variable">$&#123;LARAVEL_PATH&#125;</span>/public/css/</span>
<span class="token instruction"><span class="token keyword">COPY</span> <span class="token options"><span class="token property">--from</span><span class="token punctuation">=</span><span class="token string">frontend</span></span> /app/public/mix-manifest.json <span class="token variable">$&#123;LARAVEL_PATH&#125;</span>/public/mix-manifest.json</span>
<span class="token instruction"><span class="token keyword">RUN</span> set -x ; cd <span class="token variable">$&#123;LARAVEL_PATH&#125;</span> <span class="token operator">\</span>
      &amp;&amp; mkdir -p storage <span class="token operator">\</span>
      &amp;&amp; mkdir -p storage/framework/cache <span class="token operator">\</span>
      &amp;&amp; mkdir -p storage/framework/sessions <span class="token operator">\</span>
      &amp;&amp; mkdir -p storage/framework/testing <span class="token operator">\</span>
      &amp;&amp; mkdir -p storage/framework/views <span class="token operator">\</span>
      &amp;&amp; mkdir -p storage/logs <span class="token operator">\</span>
      &amp;&amp; chmod -R 777 storage <span class="token operator">\</span>
      &amp;&amp; php artisan package:discover</span>
<span class="token instruction"><span class="token keyword">FROM</span> nginx:alpine <span class="token keyword">as</span> nginx</span>
<span class="token instruction"><span class="token keyword">ARG</span> LARAVEL_PATH=/app/laravel</span>
<span class="token instruction"><span class="token keyword">COPY</span> laravel.conf /etc/nginx/conf.d/</span>
<span class="token instruction"><span class="token keyword">COPY</span> <span class="token options"><span class="token property">--from</span><span class="token punctuation">=</span><span class="token string">laravel</span></span> <span class="token variable">$&#123;LARAVEL_PATH&#125;</span>/public <span class="token variable">$&#123;LARAVEL_PATH&#125;</span>/public</span></code></pre>

<h2 id="构建多种系统架构支持的-Docker-镜像-–-docker-manifest-命令详解"><a href="#构建多种系统架构支持的-Docker-镜像-–-docker-manifest-命令详解" class="headerlink" title="构建多种系统架构支持的 Docker 镜像 – docker manifest 命令详解"></a>构建多种系统架构支持的 Docker 镜像 – docker manifest 命令详解</h2><p>我们知道使用镜像创建一个容器，该镜像必须与 Docker 宿主机系统架构一致，例如 <code>Linux x86_64</code> 架构的系统中只能使用 <code>Linux x86_64</code> 的镜像创建容器。</p>
<blockquote>
<p>Windows、macOS 除外，其使用了 <a href="https://docs.docker.com/docker-for-mac/multi-arch/">binfmt_misc</a> 提供了多种架构支持，在 Windows、macOS 系统上 (x86_64) 可以运行 arm 等其他架构的镜像。</p>
</blockquote>
<p>例如我们在 <code>Linux x86_64</code> 中构建一个 <code>username/test</code> 镜像。</p>
<pre class="language-docker" data-language="docker"><code class="language-docker"><span class="token instruction"><span class="token keyword">FROM</span> alpine</span>
<span class="token instruction"><span class="token keyword">CMD</span> echo 1</span></code></pre>

<p>构建镜像后推送到 Docker Hub，之后我们尝试在树莓派 <code>Linux arm64v8</code> 中使用这个镜像。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">docker</span> run -it --rm username/test</code></pre>

<p>可以发现这个镜像根本获取不到。</p>
<p>要解决这个问题，通常采用的做法是通过镜像名区分不同系统架构的镜像，例如在 <code>Linux x86_64</code> 和 <code>Linux arm64v8</code> 分别构建 <code>username/test</code> 和 <code>username/arm64v8-test</code> 镜像。运行时使用对应架构的镜像即可。</p>
<p>这样做显得很繁琐，那么有没有一种方法让 Docker 引擎根据系统架构自动拉取对应的镜像呢？</p>
<p>我们发现在 <code>Linux x86_64</code> 和 <code>Linux arm64v8</code> 架构的计算机中分别使用 <code>golang:alpine</code> 镜像运行容器 <code>$ docker run golang:alpine go version</code> 时，容器能够正常的运行。</p>
<p>这是什么原因呢？</p>
<p>原因就是 <code>golang:alpine</code> 官方镜像有一个 <a href="https://docs.docker.com/registry/spec/manifest-v2-2/"><code>manifest</code> 列表 (<code>manifest list</code>)</a>。</p>
<p>当用户获取一个镜像时，Docker 引擎会首先查找该镜像是否有 <code>manifest</code> 列表，如果有的话 Docker 引擎会按照 Docker 运行环境（系统及架构）查找出对应镜像（例如 <code>golang:alpine</code>）。如果没有的话会直接获取镜像（例如上例中我们构建的 <code>username/test</code>）。</p>
<p>我们可以使用 <code>$ docker manifest inspect golang:alpine</code> 查看这个 <code>manifest</code> 列表的结构。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">docker</span> manifest inspect golang:alpine</code></pre>

<pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>
   <span class="token property">"schemaVersion"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
   <span class="token property">"mediaType"</span><span class="token operator">:</span> <span class="token string">"application/vnd.docker.distribution.manifest.list.v2+json"</span><span class="token punctuation">,</span>
   <span class="token property">"manifests"</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token punctuation">&#123;</span>
         <span class="token property">"mediaType"</span><span class="token operator">:</span> <span class="token string">"application/vnd.docker.distribution.manifest.v2+json"</span><span class="token punctuation">,</span>
         <span class="token property">"size"</span><span class="token operator">:</span> <span class="token number">1365</span><span class="token punctuation">,</span>
         <span class="token property">"digest"</span><span class="token operator">:</span> <span class="token string">"sha256:5e28ac423243b187f464d635bcfe1e909f4a31c6c8bce51d0db0a1062bec9e16"</span><span class="token punctuation">,</span>
         <span class="token property">"platform"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
            <span class="token property">"architecture"</span><span class="token operator">:</span> <span class="token string">"amd64"</span><span class="token punctuation">,</span>
            <span class="token property">"os"</span><span class="token operator">:</span> <span class="token string">"linux"</span>
         <span class="token punctuation">&#125;</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
      <span class="token punctuation">&#123;</span>
         <span class="token property">"mediaType"</span><span class="token operator">:</span> <span class="token string">"application/vnd.docker.distribution.manifest.v2+json"</span><span class="token punctuation">,</span>
         <span class="token property">"size"</span><span class="token operator">:</span> <span class="token number">1365</span><span class="token punctuation">,</span>
         <span class="token property">"digest"</span><span class="token operator">:</span> <span class="token string">"sha256:2945c46e26c9787da884b4065d1de64cf93a3b81ead1b949843dda1fcd458bae"</span><span class="token punctuation">,</span>
         <span class="token property">"platform"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
            <span class="token property">"architecture"</span><span class="token operator">:</span> <span class="token string">"arm"</span><span class="token punctuation">,</span>
            <span class="token property">"os"</span><span class="token operator">:</span> <span class="token string">"linux"</span><span class="token punctuation">,</span>
            <span class="token property">"variant"</span><span class="token operator">:</span> <span class="token string">"v7"</span>
         <span class="token punctuation">&#125;</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
      <span class="token punctuation">&#123;</span>
         <span class="token property">"mediaType"</span><span class="token operator">:</span> <span class="token string">"application/vnd.docker.distribution.manifest.v2+json"</span><span class="token punctuation">,</span>
         <span class="token property">"size"</span><span class="token operator">:</span> <span class="token number">1365</span><span class="token punctuation">,</span>
         <span class="token property">"digest"</span><span class="token operator">:</span> <span class="token string">"sha256:87fff60114fd3402d0c1a7ddf1eea1ded658f171749b57dc782fd33ee2d47b2d"</span><span class="token punctuation">,</span>
         <span class="token property">"platform"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
            <span class="token property">"architecture"</span><span class="token operator">:</span> <span class="token string">"arm64"</span><span class="token punctuation">,</span>
            <span class="token property">"os"</span><span class="token operator">:</span> <span class="token string">"linux"</span><span class="token punctuation">,</span>
            <span class="token property">"variant"</span><span class="token operator">:</span> <span class="token string">"v8"</span>
         <span class="token punctuation">&#125;</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
      <span class="token punctuation">&#123;</span>
         <span class="token property">"mediaType"</span><span class="token operator">:</span> <span class="token string">"application/vnd.docker.distribution.manifest.v2+json"</span><span class="token punctuation">,</span>
         <span class="token property">"size"</span><span class="token operator">:</span> <span class="token number">1365</span><span class="token punctuation">,</span>
         <span class="token property">"digest"</span><span class="token operator">:</span> <span class="token string">"sha256:607b43f1d91144f82a9433764e85eb3ccf83f73569552a49bc9788c31b4338de"</span><span class="token punctuation">,</span>
         <span class="token property">"platform"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
            <span class="token property">"architecture"</span><span class="token operator">:</span> <span class="token string">"386"</span><span class="token punctuation">,</span>
            <span class="token property">"os"</span><span class="token operator">:</span> <span class="token string">"linux"</span>
         <span class="token punctuation">&#125;</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
      <span class="token punctuation">&#123;</span>
         <span class="token property">"mediaType"</span><span class="token operator">:</span> <span class="token string">"application/vnd.docker.distribution.manifest.v2+json"</span><span class="token punctuation">,</span>
         <span class="token property">"size"</span><span class="token operator">:</span> <span class="token number">1365</span><span class="token punctuation">,</span>
         <span class="token property">"digest"</span><span class="token operator">:</span> <span class="token string">"sha256:25ead0e21ed5e246ce31e274b98c09aaf548606788ef28eaf375dc8525064314"</span><span class="token punctuation">,</span>
         <span class="token property">"platform"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
            <span class="token property">"architecture"</span><span class="token operator">:</span> <span class="token string">"ppc64le"</span><span class="token punctuation">,</span>
            <span class="token property">"os"</span><span class="token operator">:</span> <span class="token string">"linux"</span>
         <span class="token punctuation">&#125;</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
      <span class="token punctuation">&#123;</span>
         <span class="token property">"mediaType"</span><span class="token operator">:</span> <span class="token string">"application/vnd.docker.distribution.manifest.v2+json"</span><span class="token punctuation">,</span>
         <span class="token property">"size"</span><span class="token operator">:</span> <span class="token number">1365</span><span class="token punctuation">,</span>
         <span class="token property">"digest"</span><span class="token operator">:</span> <span class="token string">"sha256:69f5907fa93ea591175b2c688673775378ed861eeb687776669a48692bb9754d"</span><span class="token punctuation">,</span>
         <span class="token property">"platform"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
            <span class="token property">"architecture"</span><span class="token operator">:</span> <span class="token string">"s390x"</span><span class="token punctuation">,</span>
            <span class="token property">"os"</span><span class="token operator">:</span> <span class="token string">"linux"</span>
         <span class="token punctuation">&#125;</span>
      <span class="token punctuation">&#125;</span>
   <span class="token punctuation">]</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>可以看出 <code>manifest</code> 列表中包含了不同系统架构所对应的镜像 <code>digest</code> 值，这样 Docker 就可以在不同的架构中使用相同的 <code>manifest</code> (例如 <code>golang:alpine</code>) 获取对应的镜像。</p>
<p>下面介绍如何使用 <code>$ docker manifest</code> 命令创建并推送 <code>manifest</code> 列表到 Docker Hub。</p>
<h3 id="构建镜像-1"><a href="#构建镜像-1" class="headerlink" title="构建镜像"></a>构建镜像</h3><p>首先在 <code>Linux x86_64</code> 构建 <code>username/x8664-test</code> 镜像。并在 <code>Linux arm64v8</code> 中构建 <code>username/arm64v8-test</code> 镜像，构建好之后推送到 Docker Hub。</p>
<h3 id="创建-manifest-列表"><a href="#创建-manifest-列表" class="headerlink" title="创建 manifest 列表"></a>创建 <code>manifest</code> 列表</h3><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># $ docker manifest create MANIFEST_LIST MANIFEST [MANIFEST...]</span>
$ <span class="token function">docker</span> manifest create username/test <span class="token punctuation">\</span>
      username/x8664-test <span class="token punctuation">\</span>
      username/arm64v8-test</code></pre>

<p>当要修改一个 <code>manifest</code> 列表时，可以加入 <code>-a</code> 或 <code>--amend</code> 参数。</p>
<h3 id="设置-manifest-列表"><a href="#设置-manifest-列表" class="headerlink" title="设置 manifest 列表"></a>设置 <code>manifest</code> 列表</h3><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># $ docker manifest annotate [OPTIONS] MANIFEST_LIST MANIFEST</span>
$ <span class="token function">docker</span> manifest annotate username/test <span class="token punctuation">\</span>
      username/x8664-test <span class="token punctuation">\</span>
      --os linux --arch x86_64
$ <span class="token function">docker</span> manifest annotate username/test <span class="token punctuation">\</span>
      username/arm64v8-test <span class="token punctuation">\</span>
      --os linux --arch arm64 --variant v8</code></pre>

<p>这样就配置好了 <code>manifest</code> 列表。</p>
<h3 id="查看-manifest-列表"><a href="#查看-manifest-列表" class="headerlink" title="查看 manifest 列表"></a>查看 <code>manifest</code> 列表</h3><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">docker</span> manifest inspect username/test</code></pre>

<h3 id="推送-manifest-列表"><a href="#推送-manifest-列表" class="headerlink" title="推送 manifest 列表"></a>推送 <code>manifest</code> 列表</h3><p>最后我们可以将其推送到 Docker Hub。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">docker</span> manifest push username/test</code></pre>

<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>我们在 <code>Linux x86_64</code> <code>Linux arm64v8</code> 中分别执行 <code>$ docker run -it --rm username/test</code> 命令，发现可以正确的执行。</p>
<h3 id="官方博客"><a href="#官方博客" class="headerlink" title="官方博客"></a>官方博客</h3><p>详细了解 <code>manifest</code> 可以阅读官方博客。</p>
<ul>
<li><a href="https://www.docker.com/blog/multi-arch-all-the-things/">https://www.docker.com/blog/multi-arch-all-the-things/</a></li>
</ul>
<h2 id="其它制作镜像的方式"><a href="#其它制作镜像的方式" class="headerlink" title="其它制作镜像的方式"></a>其它制作镜像的方式</h2><p>除了标准的使用 <code>Dockerfile</code> 生成镜像的方法外，由于各种特殊需求和历史原因，还提供了一些其它方法用以生成镜像。</p>
<h3 id="从-rootfs-压缩包导入"><a href="#从-rootfs-压缩包导入" class="headerlink" title="从 rootfs 压缩包导入"></a>从 rootfs 压缩包导入</h3><p>格式：<code>docker import [选项] &lt;文件&gt;|&lt;URL&gt;|- [&lt;仓库名&gt;[:&lt;标签&gt;]]</code></p>
<p>压缩包可以是本地文件、远程 Web 文件，甚至是从标准输入中得到。压缩包将会在镜像 <code>/</code> 目录展开，并直接作为镜像第一层提交。</p>
<p>比如我们想要创建一个 <a href="https://openvz.org/">OpenVZ</a> 的 Ubuntu 16.04 <a href="https://wiki.openvz.org/Download/template/precreated">模板</a>的镜像：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">docker</span> <span class="token function">import</span> <span class="token punctuation">\</span>
    http://download.openvz.org/template/precreated/ubuntu-16.04-x86_64.tar.gz <span class="token punctuation">\</span>
    openvz/ubuntu:16.04
Downloading from http://download.openvz.org/template/precreated/ubuntu-16.04-x86_64.tar.gz
sha256:412b8fc3e3f786dca0197834a698932b9c51b69bd8cf49e100c35d38c9879213</code></pre>

<p>这条命令自动下载了 <code>ubuntu-16.04-x86_64.tar.gz</code> 文件，并且作为根文件系统展开导入，并保存为镜像 <code>openvz/ubuntu:16.04</code>。</p>
<p>导入成功后，我们可以用 <code>docker image ls</code> 看到这个导入的镜像：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">docker</span> image <span class="token function">ls</span> openvz/ubuntu
REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE
openvz/ubuntu       <span class="token number">16.04</span>               412b8fc3e3f7        <span class="token number">55</span> seconds ago      505MB</code></pre>

<p>如果我们查看其历史的话，会看到描述中有导入的文件链接：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">docker</span> <span class="token function">history</span> openvz/ubuntu:16.04
IMAGE               CREATED              CREATED BY          SIZE                COMMENT
f477a6e18e98        About a minute ago                       <span class="token number">214.9</span> MB            Imported from http://download.openvz.org/template/precreated/ubuntu-16.04-x86_64.tar.gz</code></pre>

<h3 id="Docker-镜像的导入和导出-docker-save-和-docker-load"><a href="#Docker-镜像的导入和导出-docker-save-和-docker-load" class="headerlink" title="Docker 镜像的导入和导出 docker save 和 docker load"></a>Docker 镜像的导入和导出 <code>docker save</code> 和 <code>docker load</code></h3><p>Docker 还提供了 <code>docker save</code> 和 <code>docker load</code> 命令，用以将镜像保存为一个文件，然后传输到另一个位置上，再加载进来。这是在没有 Docker Registry 时的做法，现在已经不推荐，镜像迁移应该直接使用 Docker Registry，无论是直接使用 Docker Hub 还是使用内网私有 Registry 都可以。</p>
<h4 id="保存镜像"><a href="#保存镜像" class="headerlink" title="保存镜像"></a>保存镜像</h4><p>使用 <code>docker save</code> 命令可以将镜像保存为归档文件。</p>
<p>比如我们希望保存这个 <code>alpine</code> 镜像。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">docker</span> image <span class="token function">ls</span> alpine
REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE
alpine              latest              baa5d63471ea        <span class="token number">5</span> weeks ago         <span class="token number">4.803</span> MB</code></pre>

<p>保存镜像的命令为：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">docker</span> save alpine -o filename
$ <span class="token function">file</span> filename
filename: POSIX <span class="token function">tar</span> archive</code></pre>

<p>这里的 filename 可以为任意名称甚至任意后缀名，但文件的本质都是归档文件</p>
<p><strong>注意：如果同名则会覆盖（没有警告）</strong></p>
<p>若使用 <code>gzip</code> 压缩：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">docker</span> save alpine <span class="token operator">|</span> <span class="token function">gzip</span> <span class="token operator">></span> alpine-latest.tar.gz</code></pre>

<p>然后我们将 <code>alpine-latest.tar.gz</code> 文件复制到了到了另一个机器上，可以用下面这个命令加载镜像：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">docker</span> load -i alpine-latest.tar.gz
Loaded image: alpine:latest</code></pre>

<p>如果我们结合这两个命令以及 <code>ssh</code> 甚至 <code>pv</code> 的话，利用 Linux 强大的管道，我们可以写一个命令完成从一个机器将镜像迁移到另一个机器，并且带进度条的功能：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> save <span class="token operator">&lt;</span>镜像名<span class="token operator">></span> <span class="token operator">|</span> <span class="token function">bzip2</span> <span class="token operator">|</span> <span class="token function">pv</span> <span class="token operator">|</span> <span class="token function">ssh</span> <span class="token operator">&lt;</span>用户名<span class="token operator">></span>@<span class="token operator">&lt;</span>主机名<span class="token operator">></span> <span class="token string">'cat | docker load'</span></code></pre>

<h2 id="Docker镜像实现原理"><a href="#Docker镜像实现原理" class="headerlink" title="Docker镜像实现原理"></a>Docker镜像实现原理</h2><p>Docker 镜像是怎么实现增量的修改和维护的？</p>
<p>每个镜像都由很多层次构成，Docker 使用 <a href="https://en.wikipedia.org/wiki/UnionFS">Union FS</a> 将这些不同的层结合到一个镜像中去。</p>
<p>通常 Union FS 有两个用途, 一方面可以实现不借助 LVM、RAID 将多个 disk 挂到同一个目录下,另一个更常用的就是将一个只读的分支和一个可写的分支联合在一起，Live CD 正是基于此方法可以允许在镜像不变的基础上允许用户在其上进行一些写操作。</p>
<p>Docker 在 OverlayFS 上构建的容器也是利用了类似的原理。</p>
<h1 id="Docker-容器管理"><a href="#Docker-容器管理" class="headerlink" title="Docker 容器管理"></a>Docker 容器管理</h1><p>容器是 Docker 又一核心概念。</p>
<p>简单的说，容器是独立运行的一个或一组应用，以及它们的运行态环境。对应的，虚拟机可以理解为模拟运行的一整套操作系统（提供了运行态环境和其他系统环境）和跑在上面的应用。</p>
<p>本章将具体介绍如何来管理一个容器，包括创建、启动和停止等。</p>
<h2 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h2><p>启动容器有2种方式：</p>
<ul>
<li>基于镜像新建一个容器并启动；</li>
<li>将在终止状态（<code>exited</code>）的容器重新启动。</li>
</ul>
<p>因为 Docker 的容器实在太轻量级了，很多时候用户都是随时删除和新创建容器。</p>
<h3 id="新建容器并启动"><a href="#新建容器并启动" class="headerlink" title="新建容器并启动"></a>新建容器并启动</h3><p>当利用 <code>docker run</code> 来创建容器时，Docker 在后台运行的标准操作包括：</p>
<ul>
<li>检查本地是否存在指定的镜像，不存在就从 <a href="../repository/README.md">registry</a> 下载</li>
<li>利用镜像创建并启动一个容器</li>
<li>分配一个文件系统，并在只读的镜像层外面挂载一层可读写层</li>
<li>从宿主主机配置的网桥接口中桥接一个虚拟接口到容器中去</li>
<li>从地址池配置一个 ip 地址给容器</li>
<li>执行用户指定的应用程序</li>
<li>执行完毕后容器被终止</li>
</ul>
<p>例如，下面的命令输出一个 “Hello World”，之后终止容器。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">docker</span> run ubuntu:18.04 /bin/echo <span class="token string">'Hello world'</span>
Hello world</code></pre>

<p>这跟在本地直接执行 <code>/bin/echo &#39;hello world&#39;</code> 几乎感觉不出任何区别。</p>
<p>下面的命令则启动一个 bash 终端，允许用户进行交互。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">docker</span> run -t -i ubuntu:18.04 /bin/bash
root@af8bae53bdd3:/<span class="token comment">#</span></code></pre>

<p>其中，<code>-t</code> 选项让Docker分配一个伪终端（pseudo-tty）并绑定到容器的标准输入上， <code>-i</code> 则让容器的标准输入保持打开。</p>
<p>在交互模式下，用户可以通过所创建的终端来输入命令，例如</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">root@af8bae53bdd3:/<span class="token comment"># pwd</span>
/
root@af8bae53bdd3:/<span class="token comment"># ls</span>
bin boot dev etc home lib lib64 media mnt opt proc root run sbin srv sys tmp usr var</code></pre>

<h3 id="启动已终止容器"><a href="#启动已终止容器" class="headerlink" title="启动已终止容器"></a>启动已终止容器</h3><p>可以利用 <code>docker container start</code> 命令，直接将一个已经终止（<code>exited</code>）的容器启动运行。</p>
<p>容器的核心为所执行的应用程序，所需要的资源都是应用程序运行所必需的。除此之外，并没有其它的资源。可以在伪终端中利用 <code>ps</code> 或 <code>top</code> 来查看进程信息。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">root@ba267838cc1b:/<span class="token comment"># ps</span>
  PID TTY          TIME CMD
    <span class="token number">1</span> ?        00:00:00 <span class="token function">bash</span>
   <span class="token number">11</span> ?        00:00:00 <span class="token function">ps</span></code></pre>

<p>可见，容器中仅运行了指定的 bash 应用。这种特点使得 Docker 对资源的利用率极高，是货真价实的轻量级虚拟化。</p>
<h2 id="后台运行"><a href="#后台运行" class="headerlink" title="后台运行"></a>后台运行</h2><p>更多的时候，需要让 Docker 在后台运行而不是直接把执行命令的结果输出在当前宿主机下。此时，可以通过添加 <code>-d</code> 参数来实现。</p>
<p>如果不使用 <code>-d</code> 参数运行容器。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">docker</span> run ubuntu:18.04 /bin/sh -c <span class="token string">"while true; do echo hello world; sleep 1; done"</span>
hello world
hello world
hello world
hello world</code></pre>

<p>容器会把输出的结果 (STDOUT) 打印到宿主机上面。</p>
<p>如果使用了 <code>-d</code> 参数运行容器。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">docker</span> run -d ubuntu:18.04 /bin/sh -c <span class="token string">"while true; do echo hello world; sleep 1; done"</span>
77b2dc01fe0f3f1265df143181e7b9af5e05279a884f4776ee75350ea9d8017a</code></pre>

<p>此时容器会在后台运行并不会把输出的结果 (STDOUT) 打印到宿主机上面(输出结果可以用 <code>docker logs</code> 查看)。</p>
<blockquote>
<p><strong>注：</strong> 容器是否会长久运行，是和 <code>docker run</code> 指定的命令有关，和 <code>-d</code> 参数无关。</p>
</blockquote>
<p>使用 <code>-d</code> 参数启动后会返回一个唯一的 id，也可以通过 <code>docker ps</code>命令或<code>docker container ls</code> 命令来查看容器信息。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">docker</span> container <span class="token function">ls</span>
CONTAINER ID  IMAGE         COMMAND               CREATED        STATUS       PORTS NAMES
77b2dc01fe0f  ubuntu:18.04  /bin/sh -c 'while <span class="token function">tr</span>  <span class="token number">2</span> minutes ago  Up <span class="token number">1</span> minute        agitated_wright</code></pre>

<p>可以通过<code>docker logs</code>命令或 <code>docker container logs</code> 命令获取容器的输出信息：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">docker</span> container logs <span class="token punctuation">[</span>container ID or NAMES<span class="token punctuation">]</span>
hello world
hello world
hello world
<span class="token builtin class-name">.</span> <span class="token builtin class-name">.</span> <span class="token builtin class-name">.</span></code></pre>

<h2 id="终止容器"><a href="#终止容器" class="headerlink" title="终止容器"></a>终止容器</h2><p>可以使用 <code>docker stop</code>命令或<code>docker container stop</code> 来终止一个运行中的容器。</p>
<p>此外，当 Docker 容器中指定的应用终结时，容器也自动终止。</p>
<p>例如对于上一章节中只启动了一个终端的容器，用户通过 <code>exit</code> 命令或 <code>Ctrl+d</code> 来退出终端时，所创建的容器立刻终止。</p>
<p>终止状态的容器可以用 <code>docker container ls -a</code> 命令看到。例如：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">docker</span> container <span class="token function">ls</span> -a
CONTAINER ID        IMAGE                    COMMAND                CREATED             STATUS                          PORTS               NAMES
ba267838cc1b        ubuntu:18.04             <span class="token string">"/bin/bash"</span>            <span class="token number">30</span> minutes ago      Exited <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> About a minute ago                       trusting_newton</code></pre>

<p>处于终止状态的容器，可以通过 <code>docker container start</code> 命令来重新启动。</p>
<p>此外，<code>docker container restart</code> 命令会将一个运行态的容器终止，然后再重新启动它。</p>
<h2 id="进入容器"><a href="#进入容器" class="headerlink" title="进入容器"></a>进入容器</h2><p>在使用 <code>-d</code> 参数时，容器启动后会进入后台。</p>
<p>某些时候需要进入容器进行操作，包括使用 <code>docker attach</code> 命令或 <code>docker exec</code> 命令，推荐大家使用 <code>docker exec</code> 命令，原因会在下面说明。</p>
<h3 id="attach-命令"><a href="#attach-命令" class="headerlink" title="attach 命令"></a><code>attach</code> 命令</h3><p>下面示例如何使用 <code>docker attach</code> 命令。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">docker</span> run -dit ubuntu
243c32535da7d142fb0e6df616a3c3ada0b8ab417937c853a9e1c251f499f550
$ <span class="token function">docker</span> container <span class="token function">ls</span>
CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES
243c32535da7        ubuntu:latest       <span class="token string">"/bin/bash"</span>         <span class="token number">18</span> seconds ago      Up <span class="token number">17</span> seconds                           nostalgic_hypatia
$ <span class="token function">docker</span> attach 243c
root@243c32535da7:/<span class="token comment">#</span></code></pre>

<p><em>注意：</em> 如果从这个 stdin 中 exit，会导致容器的停止。</p>
<h3 id="exec-命令"><a href="#exec-命令" class="headerlink" title="exec 命令"></a><code>exec</code> 命令</h3><h4 id="i-t-参数"><a href="#i-t-参数" class="headerlink" title="-i -t 参数"></a><code>-i</code> <code>-t</code> 参数</h4><p><code>docker exec</code> 后边可以跟多个参数，这里主要说明 <code>-i</code> <code>-t</code> 参数。</p>
<p>只用 <code>-i</code> 参数时，由于没有分配伪终端，界面没有我们熟悉的 Linux 命令提示符，但命令执行结果仍然可以返回。</p>
<p>当 <code>-i</code> <code>-t</code> 参数一起使用时，则可以看到我们熟悉的 Linux 命令提示符。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">docker</span> run -dit ubuntu
69d137adef7a8a689cbcb059e94da5489d3cddd240ff675c640c8d96e84fe1f6
$ <span class="token function">docker</span> container <span class="token function">ls</span>
CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES
69d137adef7a        ubuntu:latest       <span class="token string">"/bin/bash"</span>         <span class="token number">18</span> seconds ago      Up <span class="token number">17</span> seconds                           zealous_swirles
$ <span class="token function">docker</span> <span class="token builtin class-name">exec</span> -i 69d1 <span class="token function">bash</span>
<span class="token function">ls</span>
bin
boot
dev
<span class="token punctuation">..</span>.
$ <span class="token function">docker</span> <span class="token builtin class-name">exec</span> -it 69d1 <span class="token function">bash</span>
root@69d137adef7a:/<span class="token comment">#</span></code></pre>

<p>如果从这个 stdin 中 exit，不会导致容器的停止。这就是为什么推荐大家使用 <code>docker exec</code> 的原因。</p>
<p>更多参数说明请使用 <code>docker exec --help</code> 查看。</p>
<h2 id="导出和导入容器"><a href="#导出和导入容器" class="headerlink" title="导出和导入容器"></a>导出和导入容器</h2><h3 id="导出容器"><a href="#导出容器" class="headerlink" title="导出容器"></a>导出容器</h3><p>如果要导出本地某个容器，可以使用 <code>docker export</code> 命令。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">docker</span> container <span class="token function">ls</span> -a
CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                    PORTS               NAMES
7691a814370e        ubuntu:18.04        <span class="token string">"/bin/bash"</span>         <span class="token number">36</span> hours ago        Exited <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token number">21</span> hours ago                       <span class="token builtin class-name">test</span>
$ <span class="token function">docker</span> <span class="token builtin class-name">export</span> 7691a814370e <span class="token operator">></span> ubuntu.tar</code></pre>

<p>这样将导出容器快照到本地文件。</p>
<h3 id="导入容器快照"><a href="#导入容器快照" class="headerlink" title="导入容器快照"></a>导入容器快照</h3><p>可以使用 <code>docker import</code> 从容器快照文件中再导入为镜像，例如</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">cat</span> ubuntu.tar <span class="token operator">|</span> <span class="token function">docker</span> <span class="token function">import</span> - test/ubuntu:v1.0
$ <span class="token function">docker</span> image <span class="token function">ls</span>
REPOSITORY          TAG                 IMAGE ID            CREATED              VIRTUAL SIZE
test/ubuntu         v1.0                9d37a6082e97        About a minute ago   <span class="token number">171.3</span> MB</code></pre>

<p>此外，也可以通过指定 URL 或者某个目录来导入，例如</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">docker</span> <span class="token function">import</span> http://example.com/exampleimage.tgz example/imagerepo</code></pre>

<p><em>注：用户既可以使用 <code>docker load</code> 来导入镜像存储文件到本地镜像库，也可以使用 <code>docker import</code> 来导入一个容器快照到本地镜像库。这两者的区别在于容器快照文件将丢弃所有的历史记录和元数据信息（即仅保存容器当时的快照状态），而镜像存储文件将保存完整记录，体积也要大。此外，从容器快照文件导入时可以重新指定标签等元数据信息。</em></p>
<h2 id="删除容器"><a href="#删除容器" class="headerlink" title="删除容器"></a>删除容器</h2><p>可以使用 <code>docker rm</code>命令或<code>docker container rm</code>命令 来删除一个处于终止状态的容器。例如</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">docker</span> container <span class="token function">rm</span> trusting_newton
trusting_newton</code></pre>

<p>如果要删除一个运行中的容器，可以添加 <code>-f</code> 参数。Docker 会发送 <code>SIGKILL</code> 信号给容器。</p>
<h3 id="清理所有处于终止状态的容器"><a href="#清理所有处于终止状态的容器" class="headerlink" title="清理所有处于终止状态的容器"></a>清理所有处于终止状态的容器</h3><p>使用 <code>docker ps -a</code>命令或<code>docker container ls -a</code> 命令可以查看所有已经创建的包括终止状态的容器，如果数量太多要一个个删除可能会很麻烦，用下面的命令可以清理掉所有处于终止状态的容器。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">docker</span> container prune</code></pre>

<h1 id="Docker-仓库"><a href="#Docker-仓库" class="headerlink" title="Docker 仓库"></a>Docker 仓库</h1><p>仓库（<code>Repository</code>）是集中存放镜像的地方。</p>
<p>一个容易混淆的概念是注册服务器（<code>Registry</code>）。实际上注册服务器是管理仓库的具体服务器，每个服务器上可以有多个仓库，而每个仓库下面有多个镜像。从这方面来说，仓库可以被认为是一个具体的项目或目录。例如对于仓库地址 <code>docker.io/ubuntu</code> 来说，<code>docker.io</code> 是注册服务器地址，<code>ubuntu</code> 是仓库名。</p>
<p>大部分时候，并不需要严格区分这两者的概念。</p>
<h2 id="Docker-Hub"><a href="#Docker-Hub" class="headerlink" title="Docker Hub"></a>Docker Hub</h2><p>目前 Docker 官方维护了一个公共仓库 <a href="https://hub.docker.com/">Docker Hub</a>。大部分需求都可以通过在 Docker Hub 中直接下载镜像来实现。</p>
<h3 id="注册"><a href="#注册" class="headerlink" title="注册"></a>注册</h3><p>你可以在 <a href="https://hub.docker.com/">https://hub.docker.com</a> 免费注册一个 Docker 账号。</p>
<h3 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h3><p>可以通过执行 <code>docker login</code> 命令交互式的输入用户名及密码来完成在命令行界面登录 Docker Hub。</p>
<p>你可以通过 <code>docker logout</code> 退出登录。</p>
<h3 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h3><p>你可以通过 <code>docker search</code> 命令来查找官方仓库中的镜像，并利用 <code>docker pull</code> 命令来将它下载到本地。</p>
<p>例如以 <code>centos</code> 为关键词进行搜索：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">docker</span> search centos
NAME                               DESCRIPTION                                     STARS     OFFICIAL   AUTOMATED
centos                             The official build of CentOS.                   <span class="token number">6449</span>      <span class="token punctuation">[</span>OK<span class="token punctuation">]</span>
ansible/centos7-ansible            Ansible on Centos7                              <span class="token number">132</span>                  <span class="token punctuation">[</span>OK<span class="token punctuation">]</span>
consol/centos-xfce-vnc             Centos container with <span class="token string">"headless"</span> VNC session…   <span class="token number">126</span>                  <span class="token punctuation">[</span>OK<span class="token punctuation">]</span>
jdeathe/centos-ssh                 OpenSSH / Supervisor / EPEL/IUS/SCL Repos - …   <span class="token number">117</span>                  <span class="token punctuation">[</span>OK<span class="token punctuation">]</span>
centos/systemd                     systemd enabled base container.                 <span class="token number">96</span>                   <span class="token punctuation">[</span>OK<span class="token punctuation">]</span></code></pre>

<p>可以看到返回了很多包含关键字的镜像，其中包括镜像名字、描述、收藏数（表示该镜像的受关注程度）、是否官方创建（<code>OFFICIAL</code>）、是否自动构建 （<code>AUTOMATED</code>）。</p>
<p>根据是否是官方提供，可将镜像分为2类：</p>
<ul>
<li><p>一种是类似 <code>centos</code> 这样的镜像，被称为基础镜像或根镜像。这些基础镜像由 Docker 公司创建、验证、支持、提供。这样的镜像往往使用单个单词作为名字。</p>
</li>
<li><p>一种是类似 <code>ansible/centos7-ansible</code> 镜像，它是由 Docker Hub 的注册用户创建并维护的，往往带有用户名称前缀。可以通过前缀 <code>username/</code> 来指定使用某个用户提供的镜像，比如 ansible 用户。</p>
</li>
</ul>
<p>另外，在查找的时候通过 <code>--filter=stars=N</code> 参数可以指定仅显示收藏数量为 <code>N</code> 以上的镜像。</p>
<p>下载官方 <code>centos</code> 镜像到本地：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">docker</span> pull centos
Using default tag: latest
latest: Pulling from library/centos
7a0437f04f83: Pull complete
Digest: sha256:5528e8b1b1719d34604c87e11dcd1c0a20bedf46e83b5632cdeac91b8c04efc1
Status: Downloaded newer image <span class="token keyword">for</span> centos:latest
docker.io/library/centos:latest</code></pre>

<h3 id="推送镜像"><a href="#推送镜像" class="headerlink" title="推送镜像"></a>推送镜像</h3><p>用户也可以在登录后通过 <code>docker push</code> 命令来将自己的镜像推送到 Docker Hub。</p>
<p>以下命令中的 <code>username</code> 请替换为你的 Docker 账号用户名。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">docker</span> tag ubuntu:18.04 username/ubuntu:18.04
$ <span class="token function">docker</span> image <span class="token function">ls</span>
REPOSITORY                                               TAG                    IMAGE ID            CREATED             SIZE
ubuntu                                                   <span class="token number">18.04</span>                  275d79972a86        <span class="token number">6</span> days ago          <span class="token number">94</span>.6MB
username/ubuntu                                          <span class="token number">18.04</span>                  275d79972a86        <span class="token number">6</span> days ago          <span class="token number">94</span>.6MB
$ <span class="token function">docker</span> push username/ubuntu:18.04
$ <span class="token function">docker</span> search username
NAME                      DESCRIPTION                                     STARS               OFFICIAL            AUTOMATED
username/ubuntu</code></pre>

<h3 id="自动构建"><a href="#自动构建" class="headerlink" title="自动构建"></a>自动构建</h3><blockquote>
<p>2021 年 7 月 26 日之后，该项功能仅限<a href="https://www.docker.com/blog/changes-to-docker-hub-autobuilds/">付费用户</a>使用。</p>
</blockquote>
<p>自动构建（<code>Automated Builds</code>）功能对于需要经常升级镜像内程序来说，十分方便。</p>
<p>有时候，用户构建了镜像，安装了某个软件，当软件发布新版本则需要手动更新镜像。</p>
<p>而自动构建允许用户通过 Docker Hub 指定跟踪一个目标网站（支持 <a href="https://github.com/">GitHub</a> 或 <a href="https://bitbucket.org/">BitBucket</a>）上的项目，一旦项目发生新的提交 （<code>commit</code>）或者创建了新的标签（<code>tag</code>），Docker Hub 会自动构建镜像并推送到 Docker Hub 中。</p>
<p>要配置自动构建，包括如下的步骤：</p>
<ul>
<li><p>登录 Docker Hub；</p>
</li>
<li><p>在 Docker Hub 点击右上角头像，在账号设置（<code>Account Settings</code>）中关联（<code>Linked Accounts</code>）目标网站；</p>
</li>
<li><p>在 Docker Hub 中新建或选择已有的仓库，在 <code>Builds</code> 选项卡中选择 <code>Configure Automated Builds</code>；</p>
</li>
<li><p>选取一个目标网站中的项目（需要含 <code>Dockerfile</code>）和分支；</p>
</li>
<li><p>指定 <code>Dockerfile</code> 的位置，并保存。</p>
</li>
</ul>
<p>之后，可以在 Docker Hub 的仓库页面的 <code>Timeline</code> 选项卡中查看每次构建的状态。</p>
<h2 id="私有仓库"><a href="#私有仓库" class="headerlink" title="私有仓库"></a>私有仓库</h2><p>有时候使用 Docker Hub 这样的公共仓库可能不方便，用户可以创建一个本地仓库供私人使用。</p>
<p><a href="https://docs.docker.com/registry/"><code>docker-registry</code></a> 是官方提供的工具，可以用于构建私有的镜像仓库。本文内容基于 <a href="https://github.com/docker/distribution"><code>docker-registry</code></a> v2.x 版本。</p>
<h3 id="安装运行-docker-registry"><a href="#安装运行-docker-registry" class="headerlink" title="安装运行 docker-registry"></a>安装运行 docker-registry</h3><h4 id="容器运行"><a href="#容器运行" class="headerlink" title="容器运行"></a>容器运行</h4><p>你可以使用官方 <code>registry</code> 镜像来运行。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">docker</span> run -d -p <span class="token number">5000</span>:5000 --restart<span class="token operator">=</span>always --name registry registry</code></pre>

<p>这将使用官方的 <code>registry</code> 镜像来启动私有仓库。默认情况下，仓库会被创建在容器的 <code>/var/lib/registry</code> 目录下。你可以通过 <code>-v</code> 参数来将镜像文件存放在本地的指定路径。例如下面的例子将上传的镜像放到本地的 <code>/opt/data/registry</code> 目录。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">docker</span> run -d <span class="token punctuation">\</span>
    -p <span class="token number">5000</span>:5000 <span class="token punctuation">\</span>
    -v /opt/data/registry:/var/lib/registry <span class="token punctuation">\</span>
    registry</code></pre>

<h3 id="在私有仓库上传、搜索、下载镜像"><a href="#在私有仓库上传、搜索、下载镜像" class="headerlink" title="在私有仓库上传、搜索、下载镜像"></a>在私有仓库上传、搜索、下载镜像</h3><p>创建好私有仓库之后，就可以使用 <code>docker tag</code> 来标记一个镜像，然后推送它到仓库。例如私有仓库地址为 <code>127.0.0.1:5000</code>。</p>
<p>先在本机查看已有的镜像。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">docker</span> image <span class="token function">ls</span>
REPOSITORY                        TAG                 IMAGE ID            CREATED             VIRTUAL SIZE
ubuntu                            latest              ba5877dc9bec        <span class="token number">6</span> weeks ago         <span class="token number">192.7</span> MB</code></pre>

<p>使用 <code>docker tag</code> 将 <code>ubuntu:latest</code> 这个镜像标记为 <code>127.0.0.1:5000/ubuntu:latest</code>。</p>
<p>格式为 <code>docker tag IMAGE[:TAG] [REGISTRY_HOST[:REGISTRY_PORT]/]REPOSITORY[:TAG]</code>。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">docker</span> tag ubuntu:latest <span class="token number">127.0</span>.0.1:5000/ubuntu:latest
$ <span class="token function">docker</span> image <span class="token function">ls</span>
REPOSITORY                        TAG                 IMAGE ID            CREATED             VIRTUAL SIZE
ubuntu                            latest              ba5877dc9bec        <span class="token number">6</span> weeks ago         <span class="token number">192.7</span> MB
<span class="token number">127.0</span>.0.1:5000/ubuntu:latest      latest              ba5877dc9bec        <span class="token number">6</span> weeks ago         <span class="token number">192.7</span> MB</code></pre>

<p>使用 <code>docker push</code> 上传标记的镜像。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">docker</span> push <span class="token number">127.0</span>.0.1:5000/ubuntu:latest
The push refers to repository <span class="token punctuation">[</span><span class="token number">127.0</span>.0.1:5000/ubuntu<span class="token punctuation">]</span>
373a30c24545: Pushed
a9148f5200b0: Pushed
cdd3de0940ab: Pushed
fc56279bbb33: Pushed
b38367233d37: Pushed
2aebd096e0e2: Pushed
latest: digest: sha256:fe4277621f10b5026266932ddf760f5a756d2facd505a94d2da12f4f52f71f5a size: <span class="token number">1568</span></code></pre>

<p>用 <code>curl</code> 查看仓库中的镜像。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">curl</span> <span class="token number">127.0</span>.0.1:5000/v2/_catalog
<span class="token punctuation">&#123;</span><span class="token string">"repositories"</span>:<span class="token punctuation">[</span><span class="token string">"ubuntu"</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span></code></pre>

<p>这里可以看到 <code>&#123;&quot;repositories&quot;:[&quot;ubuntu&quot;]&#125;</code>，表明镜像已经被成功上传了。</p>
<p>先删除已有镜像，再尝试从私有仓库中下载这个镜像。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">docker</span> image <span class="token function">rm</span> <span class="token number">127.0</span>.0.1:5000/ubuntu:latest
$ <span class="token function">docker</span> pull <span class="token number">127.0</span>.0.1:5000/ubuntu:latest
Pulling repository <span class="token number">127.0</span>.0.1:5000/ubuntu:latest
ba5877dc9bec: Download complete
511136ea3c5a: Download complete
9bad880da3d2: Download complete
25f11f5fb0cb: Download complete
ebc34468f71d: Download complete
2318d26665ef: Download complete
$ <span class="token function">docker</span> image <span class="token function">ls</span>
REPOSITORY                         TAG                 IMAGE ID            CREATED             VIRTUAL SIZE
<span class="token number">127.0</span>.0.1:5000/ubuntu:latest       latest              ba5877dc9bec        <span class="token number">6</span> weeks ago         <span class="token number">192.7</span> MB</code></pre>

<h3 id="配置非-https-仓库地址"><a href="#配置非-https-仓库地址" class="headerlink" title="配置非 https 仓库地址"></a>配置非 https 仓库地址</h3><p>如果你不想使用 <code>127.0.0.1:5000</code> 作为仓库地址，比如想让本网段的其他主机也能把镜像推送到私有仓库。你就得把例如 <code>192.168.199.100:5000</code> 这样的内网地址作为私有仓库地址，这时你会发现无法成功推送镜像。</p>
<p>这是因为 Docker 默认不允许非 <code>HTTPS</code> 方式推送镜像。我们可以通过 Docker 的配置选项来取消这个限制，或者查看下一节配置能够通过 <code>HTTPS</code> 访问的私有仓库。</p>
<h3 id="Ubuntu-16-04-Debian-8-centos-7"><a href="#Ubuntu-16-04-Debian-8-centos-7" class="headerlink" title="Ubuntu 16.04+, Debian 8+, centos 7"></a>Ubuntu 16.04+, Debian 8+, centos 7</h3><p>对于使用 <code>systemd</code> 的系统，请在 <code>/etc/docker/daemon.json</code> 中写入如下内容（如果文件不存在请新建该文件）</p>
<pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>
  <span class="token property">"registry-mirror"</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token string">"https://hub-mirror.c.163.com"</span><span class="token punctuation">,</span>
    <span class="token string">"https://mirror.baidubce.com"</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token property">"insecure-registries"</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token string">"192.168.199.100:5000"</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">&#125;</span></code></pre>

<blockquote>
<p>注意：该文件必须符合 <code>json</code> 规范，否则 Docker 将不能启动。</p>
</blockquote>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>对于 Docker Desktop for Windows 、 Docker Desktop for Mac 在设置中的 <code>Docker Engine</code> 中进行编辑 ，增加和上边一样的字符串即可。</p>
<h2 id="私有仓库高级配置"><a href="#私有仓库高级配置" class="headerlink" title="私有仓库高级配置"></a>私有仓库高级配置</h2><p>上一节我们搭建了一个具有基础功能的私有仓库，本小节我们来使用 <code>Docker Compose</code> 搭建一个拥有权限认证、TLS 的私有仓库。</p>
<p>新建一个文件夹，以下步骤均在该文件夹中进行。</p>
<h3 id="准备站点证书"><a href="#准备站点证书" class="headerlink" title="准备站点证书"></a>准备站点证书</h3><p>如果你拥有一个域名，国内各大云服务商均提供免费的站点证书。你也可以使用 <code>openssl</code> 自行签发证书。</p>
<p>这里假设我们将要搭建的私有仓库地址为 <code>docker.domain.com</code>，下面我们介绍使用 <code>openssl</code> 自行签发 <code>docker.domain.com</code> 的站点 SSL 证书。</p>
<p>第一步创建 <code>CA</code> 私钥。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ openssl genrsa -out <span class="token string">"root-ca.key"</span> <span class="token number">4096</span></code></pre>

<p>第二步利用私钥创建 <code>CA</code> 根证书请求文件。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ openssl req <span class="token punctuation">\</span>
          -new -key <span class="token string">"root-ca.key"</span> <span class="token punctuation">\</span>
          -out <span class="token string">"root-ca.csr"</span> -sha256 <span class="token punctuation">\</span>
          -subj <span class="token string">'/C=CN/ST=Shanxi/L=Datong/O=Your Company Name/CN=Your Company Name Docker Registry CA'</span></code></pre>

<blockquote>
<p>以上命令中 <code>-subj</code> 参数里的 <code>/C</code> 表示国家，如 <code>CN</code>；<code>/ST</code> 表示省；<code>/L</code> 表示城市或者地区；<code>/O</code> 表示组织名；<code>/CN</code> 通用名称。</p>
</blockquote>
<p>第三步配置 <code>CA</code> 根证书，新建 <code>root-ca.cnf</code>。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root_ca<span class="token punctuation">]</span>
basicConstraints <span class="token operator">=</span> critical,CA:TRUE,pathlen:1
keyUsage <span class="token operator">=</span> critical, nonRepudiation, cRLSign, keyCertSign
<span class="token assign-left variable">subjectKeyIdentifier</span><span class="token operator">=</span>hash</code></pre>

<p>第四步签发根证书。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ openssl x509 -req  -days <span class="token number">3650</span>  -in <span class="token string">"root-ca.csr"</span> <span class="token punctuation">\</span>
               -signkey <span class="token string">"root-ca.key"</span> -sha256 -out <span class="token string">"root-ca.crt"</span> <span class="token punctuation">\</span>
               -extfile <span class="token string">"root-ca.cnf"</span> -extensions <span class="token punctuation">\</span>
               root_ca</code></pre>

<p>第五步生成站点 <code>SSL</code> 私钥。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ openssl genrsa -out <span class="token string">"docker.domain.com.key"</span> <span class="token number">4096</span></code></pre>

<p>第六步使用私钥生成证书请求文件。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ openssl req -new -key <span class="token string">"docker.domain.com.key"</span> -out <span class="token string">"site.csr"</span> -sha256 <span class="token punctuation">\</span>
          -subj <span class="token string">'/C=CN/ST=Shanxi/L=Datong/O=Your Company Name/CN=docker.domain.com'</span></code></pre>

<p>第七步配置证书，新建 <code>site.cnf</code> 文件。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>server<span class="token punctuation">]</span>
<span class="token assign-left variable">authorityKeyIdentifier</span><span class="token operator">=</span>keyid,issuer
basicConstraints <span class="token operator">=</span> critical,CA:FALSE
<span class="token assign-left variable">extendedKeyUsage</span><span class="token operator">=</span>serverAuth
keyUsage <span class="token operator">=</span> critical, digitalSignature, keyEncipherment
subjectAltName <span class="token operator">=</span> DNS:docker.domain.com, IP:127.0.0.1
<span class="token assign-left variable">subjectKeyIdentifier</span><span class="token operator">=</span>hash</code></pre>

<p>第八步签署站点 <code>SSL</code> 证书。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ openssl x509 -req -days <span class="token number">750</span> -in <span class="token string">"site.csr"</span> -sha256 <span class="token punctuation">\</span>
    -CA <span class="token string">"root-ca.crt"</span> -CAkey <span class="token string">"root-ca.key"</span>  -CAcreateserial <span class="token punctuation">\</span>
    -out <span class="token string">"docker.domain.com.crt"</span> -extfile <span class="token string">"site.cnf"</span> -extensions server</code></pre>

<p>这样已经拥有了 <code>docker.domain.com</code> 的网站 SSL 私钥 <code>docker.domain.com.key</code> 和 SSL 证书 <code>docker.domain.com.crt</code> 及 CA 根证书 <code>root-ca.crt</code>。</p>
<p>新建 <code>ssl</code> 文件夹并将 <code>docker.domain.com.key</code> <code>docker.domain.com.crt</code> <code>root-ca.crt</code> 这三个文件移入，删除其他文件。</p>
<h3 id="配置私有仓库"><a href="#配置私有仓库" class="headerlink" title="配置私有仓库"></a>配置私有仓库</h3><p>私有仓库默认的配置文件位于 <code>/etc/docker/registry/config.yml</code>，我们先在本地编辑 <code>config.yml</code>，之后挂载到容器中。</p>
<pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token number">0.1</span>
<span class="token key atrule">log</span><span class="token punctuation">:</span>
  <span class="token key atrule">accesslog</span><span class="token punctuation">:</span>
    <span class="token key atrule">disabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
  <span class="token key atrule">level</span><span class="token punctuation">:</span> debug
  <span class="token key atrule">formatter</span><span class="token punctuation">:</span> text
  <span class="token key atrule">fields</span><span class="token punctuation">:</span>
    <span class="token key atrule">service</span><span class="token punctuation">:</span> registry
    <span class="token key atrule">environment</span><span class="token punctuation">:</span> staging
<span class="token key atrule">storage</span><span class="token punctuation">:</span>
  <span class="token key atrule">delete</span><span class="token punctuation">:</span>
    <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
  <span class="token key atrule">cache</span><span class="token punctuation">:</span>
    <span class="token key atrule">blobdescriptor</span><span class="token punctuation">:</span> inmemory
  <span class="token key atrule">filesystem</span><span class="token punctuation">:</span>
    <span class="token key atrule">rootdirectory</span><span class="token punctuation">:</span> /var/lib/registry
<span class="token key atrule">auth</span><span class="token punctuation">:</span>
  <span class="token key atrule">htpasswd</span><span class="token punctuation">:</span>
    <span class="token key atrule">realm</span><span class="token punctuation">:</span> basic<span class="token punctuation">-</span>realm
    <span class="token key atrule">path</span><span class="token punctuation">:</span> /etc/docker/registry/auth/nginx.htpasswd
<span class="token key atrule">http</span><span class="token punctuation">:</span>
  <span class="token key atrule">addr</span><span class="token punctuation">:</span> <span class="token punctuation">:</span><span class="token number">443</span>
  <span class="token key atrule">host</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//docker.domain.com
  <span class="token key atrule">headers</span><span class="token punctuation">:</span>
    <span class="token key atrule">X-Content-Type-Options</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>nosniff<span class="token punctuation">]</span>
  <span class="token key atrule">http2</span><span class="token punctuation">:</span>
    <span class="token key atrule">disabled</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>
  <span class="token key atrule">tls</span><span class="token punctuation">:</span>
    <span class="token key atrule">certificate</span><span class="token punctuation">:</span> /etc/docker/registry/ssl/docker.domain.com.crt
    <span class="token key atrule">key</span><span class="token punctuation">:</span> /etc/docker/registry/ssl/docker.domain.com.key
<span class="token key atrule">health</span><span class="token punctuation">:</span>
  <span class="token key atrule">storagedriver</span><span class="token punctuation">:</span>
    <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
    <span class="token key atrule">interval</span><span class="token punctuation">:</span> 10s
<span class="token key atrule">threshold</span><span class="token punctuation">:</span> <span class="token number">3</span></code></pre>

<h3 id="生成-http-认证文件"><a href="#生成-http-认证文件" class="headerlink" title="生成 http 认证文件"></a>生成 http 认证文件</h3><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">mkdir</span> auth
$ <span class="token function">docker</span> run --rm <span class="token punctuation">\</span>
    --entrypoint htpasswd <span class="token punctuation">\</span>
    httpd:alpine <span class="token punctuation">\</span>
    -Bbn username password <span class="token operator">></span> auth/nginx.htpasswd</code></pre>

<blockquote>
<p>将上面的 <code>username</code> <code>password</code> 替换为你自己的用户名和密码。</p>
</blockquote>
<h3 id="编辑-docker-compose-yml"><a href="#编辑-docker-compose-yml" class="headerlink" title="编辑 docker-compose.yml"></a>编辑 <code>docker-compose.yml</code></h3><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">'3'</span>
<span class="token key atrule">services</span><span class="token punctuation">:</span>
  <span class="token key atrule">registry</span><span class="token punctuation">:</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> registry
    <span class="token key atrule">ports</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token string">"443:443"</span>
    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> ./<span class="token punctuation">:</span>/etc/docker/registry
      <span class="token punctuation">-</span> registry<span class="token punctuation">-</span>data<span class="token punctuation">:</span>/var/lib/registry
<span class="token key atrule">volumes</span><span class="token punctuation">:</span>
  registry<span class="token punctuation">-</span>data<span class="token punctuation">:</span></code></pre>

<h3 id="修改-hosts"><a href="#修改-hosts" class="headerlink" title="修改 hosts"></a>修改 hosts</h3><p>编辑 <code>/etc/hosts</code></p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token number">127.0</span>.0.1 docker.domain.com</code></pre>

<h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">docker-compose</span> up -d</code></pre>

<p>这样我们就搭建好了一个具有权限认证、TLS 的私有仓库，接下来我们测试其功能是否正常。</p>
<h3 id="测试私有仓库功能"><a href="#测试私有仓库功能" class="headerlink" title="测试私有仓库功能"></a>测试私有仓库功能</h3><p>由于自行签发的 CA 根证书不被系统信任，所以我们需要将 CA 根证书 <code>ssl/root-ca.crt</code> 移入 <code>/etc/docker/certs.d/docker.domain.com</code> 文件夹中。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">mkdir</span> -p /etc/docker/certs.d/docker.domain.com
$ <span class="token function">sudo</span> <span class="token function">cp</span> ssl/root-ca.crt /etc/docker/certs.d/docker.domain.com/ca.crt</code></pre>

<p>登录到私有仓库。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">docker</span> login docker.domain.com</code></pre>

<p>尝试推送、拉取镜像。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">docker</span> pull ubuntu:18.04
$ <span class="token function">docker</span> tag ubuntu:18.04 docker.domain.com/username/ubuntu:18.04
$ <span class="token function">docker</span> push docker.domain.com/username/ubuntu:18.04
$ <span class="token function">docker</span> image <span class="token function">rm</span> docker.domain.com/username/ubuntu:18.04
$ <span class="token function">docker</span> pull docker.domain.com/username/ubuntu:18.04</code></pre>

<p>如果我们退出登录，尝试推送镜像。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">docker</span> <span class="token builtin class-name">logout</span> docker.domain.com
$ <span class="token function">docker</span> push docker.domain.com/username/ubuntu:18.04
no basic auth credentials</code></pre>

<p>发现会提示没有登录，不能将镜像推送到私有仓库中。</p>
<h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p>如果你本机占用了 <code>443</code> 端口，你可以配置 <a href="https://docs.docker.com/registry/recipes/nginx/">Nginx 代理</a>，这里不再赘述。</p>
<h2 id="Nexus3-x-的私有仓库"><a href="#Nexus3-x-的私有仓库" class="headerlink" title="Nexus3.x 的私有仓库"></a>Nexus3.x 的私有仓库</h2><p>使用 Docker 官方的 Registry 创建的仓库面临一些维护问题。比如某些镜像删除以后空间默认是不会回收的，需要一些命令去回收空间然后重启 Registry。在企业中把内部的一些工具包放入 <code>Nexus</code> 中是比较常见的做法，最新版本 <code>Nexus3.x</code> 全面支持 Docker 的私有镜像。所以使用 <a href="https://www.sonatype.com/product/repository-oss-download"><code>Nexus3.x</code></a> 一个软件来管理 <code>Docker</code> , <code>Maven</code> , <code>Yum</code> , <code>PyPI</code> 等是一个明智的选择。</p>
<h3 id="启动-Nexus-容器"><a href="#启动-Nexus-容器" class="headerlink" title="启动 Nexus 容器"></a>启动 Nexus 容器</h3><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">docker</span> run -d --name nexus3 --restart<span class="token operator">=</span>always <span class="token punctuation">\</span>
    -p <span class="token number">8081</span>:8081 <span class="token punctuation">\</span>
    --mount <span class="token assign-left variable">src</span><span class="token operator">=</span>nexus-data,target<span class="token operator">=</span>/nexus-data <span class="token punctuation">\</span>
    sonatype/nexus3</code></pre>

<p>首次运行需等待 3-5 分钟，你可以使用 <code>docker logs nexus3 -f</code> 查看日志：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">docker</span> logs nexus3 -f
<span class="token number">2021</span>-03-11 <span class="token number">15</span>:31:21,990+0000 INFO  <span class="token punctuation">[</span>jetty-main-1<span class="token punctuation">]</span> *SYSTEM org.sonatype.nexus.bootstrap.jetty.JettyServer -
-------------------------------------------------
Started Sonatype Nexus OSS <span class="token number">3.30</span>.0-01
-------------------------------------------------</code></pre>

<p>如果你看到以上内容，说明 <code>Nexus</code> 已经启动成功，你可以使用浏览器打开 <code>http://YourIP:8081</code> 访问 <code>Nexus</code> 了。</p>
<p>首次运行请通过以下命令获取初始密码：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">docker</span> <span class="token builtin class-name">exec</span> nexus3 <span class="token function">cat</span> /nexus-data/admin.password
9266139e-41a2-4abb-92ec-e4142a3532cb</code></pre>

<p>首次启动 Nexus 的默认帐号是 <code>admin</code> ，密码则是上边命令获取到的，点击右上角登录，首次登录需更改初始密码。</p>
<p>登录之后可以点击页面上方的齿轮按钮按照下面的方法进行设置。</p>
<h3 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h3><p>创建一个私有仓库的方法： <code>Repository-&gt;Repositories</code> 点击右边菜单 <code>Create repository</code> 选择 <code>docker (hosted)</code></p>
<ul>
<li><strong>Name</strong>: 仓库的名称</li>
<li><strong>HTTP</strong>: 仓库单独的访问端口（例如：<strong>5001</strong>）</li>
<li><strong>Hosted -&gt; Deployment pollcy</strong>: 请选择 <strong>Allow redeploy</strong> 否则无法上传 Docker 镜像。</li>
</ul>
<p>其它的仓库创建方法请各位自己摸索，还可以创建一个 <code>docker (proxy)</code> 类型的仓库链接到 DockerHub 上。再创建一个 <code>docker (group)</code> 类型的仓库把刚才的 <code>hosted</code> 与 <code>proxy</code> 添加在一起。主机在访问的时候默认下载私有仓库中的镜像，如果没有将链接到 DockerHub 中下载并缓存到 Nexus 中。</p>
<h3 id="添加访问权限"><a href="#添加访问权限" class="headerlink" title="添加访问权限"></a>添加访问权限</h3><p>菜单 <code>Security-&gt;Realms</code> 把 Docker Bearer Token Realm 移到右边的框中保存。</p>
<p>添加用户规则：菜单 <code>Security-&gt;Roles</code>-&gt;<code>Create role</code>  在 <code>Privlleges</code> 选项搜索 docker 把相应的规则移动到右边的框中然后保存。</p>
<p>添加用户：菜单 <code>Security-&gt;Users</code>-&gt;<code>Create local user</code> 在 <code>Roles</code> 选项中选中刚才创建的规则移动到右边的窗口保存。</p>
<h3 id="NGINX-加密代理"><a href="#NGINX-加密代理" class="headerlink" title="NGINX 加密代理"></a>NGINX 加密代理</h3><p>证书的生成请参见 <a href="registry_auth.md"><code>私有仓库高级配置</code></a> 里面证书生成一节。</p>
<p>NGINX 示例配置如下</p>
<pre class="language-nginx" data-language="nginx"><code class="language-nginx"><span class="token directive"><span class="token keyword">upstream</span> register</span>
<span class="token punctuation">&#123;</span>
    <span class="token directive"><span class="token keyword">server</span> <span class="token string">"YourHostName OR IP"</span>:5001</span><span class="token punctuation">;</span> <span class="token comment">#端口为上面添加私有镜像仓库时设置的 HTTP 选项的端口号</span>
    <span class="token directive"><span class="token keyword">check</span> interval=3000 rise=2 fall=10 timeout=1000 type=http</span><span class="token punctuation">;</span>
    <span class="token directive"><span class="token keyword">check_http_send</span> <span class="token string">"HEAD / HTTP/1.0<span class="token escape entity">\r</span><span class="token escape entity">\n</span><span class="token escape entity">\r</span><span class="token escape entity">\n</span>"</span></span><span class="token punctuation">;</span>
    <span class="token directive"><span class="token keyword">check_http_expect_alive</span> http_4xx</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token directive"><span class="token keyword">server</span></span> <span class="token punctuation">&#123;</span>
    <span class="token directive"><span class="token keyword">server_name</span> YourDomainName</span><span class="token punctuation">;</span><span class="token comment">#如果没有 DNS 服务器做解析，请删除此选项使用本机 IP 地址访问</span>
    <span class="token directive"><span class="token keyword">listen</span>       <span class="token number">443</span> ssl</span><span class="token punctuation">;</span>
    <span class="token directive"><span class="token keyword">ssl_certificate</span> key/example.crt</span><span class="token punctuation">;</span>
    <span class="token directive"><span class="token keyword">ssl_certificate_key</span> key/example.key</span><span class="token punctuation">;</span>
    <span class="token directive"><span class="token keyword">ssl_session_timeout</span>  <span class="token number">5m</span></span><span class="token punctuation">;</span>
    <span class="token directive"><span class="token keyword">ssl_protocols</span> TLSv1 TLSv1.1 TLSv1.2</span><span class="token punctuation">;</span>
    <span class="token directive"><span class="token keyword">ssl_ciphers</span>  HIGH:!aNULL:!MD5</span><span class="token punctuation">;</span>
    <span class="token directive"><span class="token keyword">ssl_prefer_server_ciphers</span>   <span class="token boolean">on</span></span><span class="token punctuation">;</span>
    <span class="token directive"><span class="token keyword">large_client_header_buffers</span> <span class="token number">4</span> <span class="token number">32k</span></span><span class="token punctuation">;</span>
    <span class="token directive"><span class="token keyword">client_max_body_size</span> <span class="token number">300m</span></span><span class="token punctuation">;</span>
    <span class="token directive"><span class="token keyword">client_body_buffer_size</span> <span class="token number">512k</span></span><span class="token punctuation">;</span>
    <span class="token directive"><span class="token keyword">proxy_connect_timeout</span> <span class="token number">600</span></span><span class="token punctuation">;</span>
    <span class="token directive"><span class="token keyword">proxy_read_timeout</span>   <span class="token number">600</span></span><span class="token punctuation">;</span>
    <span class="token directive"><span class="token keyword">proxy_send_timeout</span>   <span class="token number">600</span></span><span class="token punctuation">;</span>
    <span class="token directive"><span class="token keyword">proxy_buffer_size</span>    <span class="token number">128k</span></span><span class="token punctuation">;</span>
    <span class="token directive"><span class="token keyword">proxy_buffers</span>       <span class="token number">4</span> <span class="token number">64k</span></span><span class="token punctuation">;</span>
    <span class="token directive"><span class="token keyword">proxy_busy_buffers_size</span> <span class="token number">128k</span></span><span class="token punctuation">;</span>
    <span class="token directive"><span class="token keyword">proxy_temp_file_write_size</span> <span class="token number">512k</span></span><span class="token punctuation">;</span>
    <span class="token directive"><span class="token keyword">location</span> /</span> <span class="token punctuation">&#123;</span>
        <span class="token directive"><span class="token keyword">proxy_set_header</span> Host <span class="token variable">$host</span></span><span class="token punctuation">;</span>
        <span class="token directive"><span class="token keyword">proxy_set_header</span> X-Forwarded-Proto <span class="token variable">$scheme</span></span><span class="token punctuation">;</span>
        <span class="token directive"><span class="token keyword">proxy_set_header</span> X-Forwarded-Port <span class="token variable">$server_port</span></span><span class="token punctuation">;</span>
        <span class="token directive"><span class="token keyword">proxy_set_header</span> X-Forwarded-For <span class="token variable">$proxy_add_x_forwarded_for</span></span><span class="token punctuation">;</span>
        <span class="token directive"><span class="token keyword">proxy_http_version</span> 1.1</span><span class="token punctuation">;</span>
        <span class="token directive"><span class="token keyword">proxy_set_header</span> Upgrade <span class="token variable">$http_upgrade</span></span><span class="token punctuation">;</span>
        <span class="token directive"><span class="token keyword">proxy_set_header</span> Connection <span class="token variable">$connection_upgrade</span></span><span class="token punctuation">;</span>
        <span class="token directive"><span class="token keyword">proxy_redirect</span> <span class="token boolean">off</span></span><span class="token punctuation">;</span>
        <span class="token directive"><span class="token keyword">proxy_set_header</span> X-Real-IP <span class="token variable">$remote_addr</span></span><span class="token punctuation">;</span>
        <span class="token directive"><span class="token keyword">proxy_pass</span> http://register</span><span class="token punctuation">;</span>
        <span class="token directive"><span class="token keyword">proxy_read_timeout</span> <span class="token number">900s</span></span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token directive"><span class="token keyword">error_page</span>   <span class="token number">500</span> <span class="token number">502</span> <span class="token number">503</span> <span class="token number">504</span>  /50x.html</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>

<h3 id="Docker-主机访问镜像仓库"><a href="#Docker-主机访问镜像仓库" class="headerlink" title="Docker 主机访问镜像仓库"></a>Docker 主机访问镜像仓库</h3><p>如果不启用 SSL 加密可以通过 <a href="./registry.md">前面章节</a> 的方法添加非 https 仓库地址到 Docker 的配置文件中然后重启 Docker。</p>
<p>使用 SSL 加密以后程序需要访问就不能采用修改配置的方式了。具体方法如下：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ openssl s_client -showcerts -connect YourDomainName OR HostIP:443 <span class="token operator">&lt;</span>/dev/null <span class="token operator"><span class="token file-descriptor important">2</span>></span>/dev/null<span class="token operator">|</span>openssl x509 -outform PEM <span class="token operator">></span>ca.crt
$ <span class="token function">cat</span> ca.crt <span class="token operator">|</span> <span class="token function">sudo</span> <span class="token function">tee</span> -a /etc/ssl/certs/ca-certificates.crt
$ systemctl restart <span class="token function">docker</span></code></pre>

<p>使用 <code>docker login YourDomainName OR HostIP</code> 进行测试，用户名密码填写上面 Nexus 中设置的。</p>
<h1 id="Docker-数据管理"><a href="#Docker-数据管理" class="headerlink" title="Docker 数据管理"></a>Docker 数据管理</h1><p>这一章介绍如何在 Docker 内部以及容器之间管理数据，在容器中管理数据主要有3种方式：</p>
<ul>
<li>数据卷（Volumes）</li>
<li>挂载主机目录 (Bind mounts)</li>
<li>tmpfs mount</li>
</ul>
<p><img src="/2022/docker_practice/types-of-mounts.png"></p>
<h2 id="挂载主机目录"><a href="#挂载主机目录" class="headerlink" title="挂载主机目录"></a>挂载主机目录</h2><h3 id="挂载一个主机目录作为数据卷"><a href="#挂载一个主机目录作为数据卷" class="headerlink" title="挂载一个主机目录作为数据卷"></a>挂载一个主机目录作为数据卷</h3><p>使用 <code>--mount</code> 标记可以指定挂载一个本地主机的目录到容器中去。本地目录的路径必须是绝对路径。</p>
<blockquote>
<p>注意：使用 <code>-v</code> 参数时如果本地目录不存在 Docker 会自动为你创建一个文件夹，使用 <code>--mount</code> 参数时如果本地目录不存在，Docker 会报错。</p>
</blockquote>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">docker</span> run -d -P <span class="token punctuation">\</span>
    --name web <span class="token punctuation">\</span>
    --mount <span class="token assign-left variable">type</span><span class="token operator">=</span>bind,source<span class="token operator">=</span>/src/webapp,target<span class="token operator">=</span>/usr/share/nginx/html <span class="token punctuation">\</span>
    nginx:alpine</code></pre>

<p>上面的命令加载主机的 <code>/src/webapp</code> 目录到容器的 <code>/usr/share/nginx/html</code>目录。这个功能在进行测试的时候十分方便，比如用户可以放置一些程序到本地目录中，来查看容器是否正常工作。</p>
<p>Docker 挂载主机目录的默认权限是 <em><strong>读写</strong></em>，用户也可以通过增加 <code>readonly</code> 指定为 <em><strong>只读</strong></em>。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">docker</span> run -d -P <span class="token punctuation">\</span>
    --name web <span class="token punctuation">\</span>
    --mount <span class="token assign-left variable">type</span><span class="token operator">=</span>bind,source<span class="token operator">=</span>/src/webapp,target<span class="token operator">=</span>/usr/share/nginx/html,readonly <span class="token punctuation">\</span>
    nginx:alpine</code></pre>

<p>加了 <code>readonly</code> 之后，就挂载为 <code>只读</code> 了。如果你在容器内 <code>/usr/share/nginx/html</code> 目录新建文件，会显示如下错误：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">/usr/share/nginx/html <span class="token comment"># touch new.txt</span>
touch: new.txt: Read-only <span class="token function">file</span> system</code></pre>

<h3 id="查看数据卷的具体信息"><a href="#查看数据卷的具体信息" class="headerlink" title="查看数据卷的具体信息"></a>查看数据卷的具体信息</h3><p>在主机里使用以下命令可以查看 <code>web</code> 容器的信息</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">docker</span> inspect web</code></pre>

<p><strong>挂载主机目录</strong> 的配置信息在 “Mounts” 键下面，注意<code>Type</code>为<code>bind</code>：</p>
<pre class="language-json" data-language="json"><code class="language-json"><span class="token property">"Mounts"</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">&#123;</span>
        <span class="token property">"Type"</span><span class="token operator">:</span> <span class="token string">"bind"</span><span class="token punctuation">,</span>
        <span class="token property">"Source"</span><span class="token operator">:</span> <span class="token string">"/src/webapp"</span><span class="token punctuation">,</span>
        <span class="token property">"Destination"</span><span class="token operator">:</span> <span class="token string">"/usr/share/nginx/html"</span><span class="token punctuation">,</span>
        <span class="token property">"Mode"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>
        <span class="token property">"RW"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
        <span class="token property">"Propagation"</span><span class="token operator">:</span> <span class="token string">"rprivate"</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">]</span><span class="token punctuation">,</span></code></pre>

<h3 id="挂载一个本地主机文件作为数据卷"><a href="#挂载一个本地主机文件作为数据卷" class="headerlink" title="挂载一个本地主机文件作为数据卷"></a>挂载一个本地主机文件作为数据卷</h3><p><code>--mount</code> 标记也可以从主机挂载单个文件到容器中：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">docker</span> run --rm -it <span class="token punctuation">\</span>
   --mount <span class="token assign-left variable">type</span><span class="token operator">=</span>bind,source<span class="token operator">=</span><span class="token environment constant">$HOME</span>/.bash_history,target<span class="token operator">=</span>/root/.bash_history <span class="token punctuation">\</span>
   ubuntu:18.04 <span class="token punctuation">\</span>
   <span class="token function">bash</span>
root@2affd44b4667:/<span class="token comment"># history</span>
<span class="token number">1</span>  <span class="token function">ls</span>
<span class="token number">2</span>  diskutil list</code></pre>

<p>这样就可以记录在容器输入过的命令了。</p>
<h2 id="数据卷"><a href="#数据卷" class="headerlink" title="数据卷"></a>数据卷</h2><p><strong>数据卷</strong> 是一个可供一个或多个容器使用的特殊目录，它绕过 UFS，可以提供很多有用的特性：</p>
<ul>
<li><p><strong>数据卷</strong> 可以在容器之间共享和重用</p>
</li>
<li><p>对 <strong>数据卷</strong> 的修改会立马生效</p>
</li>
<li><p>对 <strong>数据卷</strong> 的更新，不会影响镜像</p>
</li>
<li><p><strong>数据卷</strong> 默认会一直存在，即使容器被删除</p>
</li>
</ul>
<blockquote>
<p>注意：<strong>数据卷</strong> 的使用，类似于 Linux 下对目录或文件进行 mount，镜像中的被指定为挂载点的目录中的文件会复制到数据卷中（仅数据卷为空时会复制）。</p>
</blockquote>
<h3 id="创建一个数据卷"><a href="#创建一个数据卷" class="headerlink" title="创建一个数据卷"></a>创建一个数据卷</h3><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">docker</span> volume create my-vol</code></pre>

<p>查看所有的 数据卷：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">docker</span> volume <span class="token function">ls</span>
DRIVER              VOLUME NAME
<span class="token builtin class-name">local</span>               my-vol</code></pre>

<p>在主机里使用以下命令可以查看指定 数据卷 的信息：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">docker</span> volume inspect my-vol
<span class="token punctuation">[</span>
    <span class="token punctuation">&#123;</span>
        <span class="token string">"CreatedAt"</span><span class="token builtin class-name">:</span> <span class="token string">"2022-04-22T02:29:40+08:00"</span>,
        <span class="token string">"Driver"</span><span class="token builtin class-name">:</span> <span class="token string">"local"</span>,
        <span class="token string">"Labels"</span><span class="token builtin class-name">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>,
        <span class="token string">"Mountpoint"</span><span class="token builtin class-name">:</span> <span class="token string">"/var/lib/docker/volumes/my-vol/_data"</span>,
        <span class="token string">"Name"</span><span class="token builtin class-name">:</span> <span class="token string">"my-vol"</span>,
        <span class="token string">"Options"</span><span class="token builtin class-name">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>,
        <span class="token string">"Scope"</span><span class="token builtin class-name">:</span> <span class="token string">"local"</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">]</span></code></pre>

<h3 id="启动一个挂载数据卷的容器"><a href="#启动一个挂载数据卷的容器" class="headerlink" title="启动一个挂载数据卷的容器"></a>启动一个挂载数据卷的容器</h3><p>在用 <code>docker run</code> 命令的时候，使用 <code>-v</code> 参数来将 <code>数据卷</code> 挂载到容器里。在一次 <code>docker run</code> 中可以挂载多个 <code>数据卷</code>。</p>
<p>下面创建一个名为 <code>web</code> 的容器，并加载一个 <code>数据卷</code> 到容器的 <code>/usr/share/nginx/html</code> 目录。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">docker</span> run -d -P <span class="token punctuation">\</span>
    --name web <span class="token punctuation">\</span>
    -v my-vol:/usr/share/nginx/html <span class="token punctuation">\</span>
    nginx:alpine</code></pre>

<p>Docker 挂载数据卷的默认权限是<code>rw</code> <em><strong>读写</strong></em>，用户也可以通过增加 <code>ro</code> 指定为 <em><strong>只读</strong></em>。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">docker</span> run -d -P <span class="token punctuation">\</span>
    --name web <span class="token punctuation">\</span>
    -v my-vol:/usr/share/nginx/html:ro <span class="token punctuation">\</span>
    nginx:alpine</code></pre>

<p><code>-v</code>参数也可以直接挂载宿主机上的目录或文件：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">docker</span> run -d -P <span class="token punctuation">\</span>
    --name web <span class="token punctuation">\</span>
    -v <span class="token environment constant">$HOME</span>/.bash_history:/root/.bash_history <span class="token punctuation">\</span>
    nginx:alpine</code></pre>


<h3 id="查看数据卷的具体信息-1"><a href="#查看数据卷的具体信息-1" class="headerlink" title="查看数据卷的具体信息"></a>查看数据卷的具体信息</h3><p>在主机里使用以下命令可以查看 <code>web</code> 容器的信息：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">docker</span> inspect web</code></pre>

<p><strong>数据卷</strong> 的配置信息在 “Mounts” 键下面，注意<code>Type</code>为<code>volume</code>：</p>
<pre class="language-json" data-language="json"><code class="language-json"><span class="token property">"Mounts"</span><span class="token operator">:</span> <span class="token punctuation">[</span>
  <span class="token punctuation">&#123;</span>
    <span class="token property">"Type"</span><span class="token operator">:</span> <span class="token string">"volume"</span><span class="token punctuation">,</span>
    <span class="token property">"Name"</span><span class="token operator">:</span> <span class="token string">"my-vol"</span><span class="token punctuation">,</span>
    <span class="token property">"Source"</span><span class="token operator">:</span> <span class="token string">"/var/lib/docker/volumes/my-vol/_data"</span><span class="token punctuation">,</span>
    <span class="token property">"Destination"</span><span class="token operator">:</span> <span class="token string">"/usr/share/nginx/html"</span><span class="token punctuation">,</span>
    <span class="token property">"Driver"</span><span class="token operator">:</span> <span class="token string">"local"</span><span class="token punctuation">,</span>
    <span class="token property">"Mode"</span><span class="token operator">:</span> <span class="token string">"z"</span><span class="token punctuation">,</span>
    <span class="token property">"RW"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token property">"Propagation"</span><span class="token operator">:</span> <span class="token string">""</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">]</span><span class="token punctuation">,</span></code></pre>

<h3 id="删除数据卷"><a href="#删除数据卷" class="headerlink" title="删除数据卷"></a>删除数据卷</h3><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">docker</span> volume <span class="token function">rm</span> my-vol</code></pre>

<p><code>数据卷</code> 是被设计用来持久化数据的，它的生命周期独立于容器，Docker 不会在容器被删除后自动删除 <code>数据卷</code>，并且也不存在垃圾回收这样的机制来处理没有任何容器引用的 <code>数据卷</code>。如果需要在删除容器的同时移除数据卷。可以在删除容器的时候使用 <code>docker rm -v</code> 这个命令。</p>
<p>无主的数据卷可能会占据很多空间，要清理请使用以下命令：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">docker</span> volume prune</code></pre>


<h2 id="Docker-bind-Mounts和volume及tmpfs对比"><a href="#Docker-bind-Mounts和volume及tmpfs对比" class="headerlink" title="Docker bind Mounts和volume及tmpfs对比"></a>Docker bind Mounts和volume及tmpfs对比</h2><p>本文总结了 bind Mounts 和 volume 及 tmpfs 三种 Docker 管理容器数据方式的区别。</p>
<h3 id="bind-mounts"><a href="#bind-mounts" class="headerlink" title="bind mounts"></a>bind mounts</h3><p>根据官方文档的介绍：</p>
<blockquote>
<p>bind mounts have limited functionality compared to volumes. <strong>When you use a bind mount, a file or directory on the host machine is mounted into a container. The file or directory is referenced by its absolute path on the host machine.</strong> By contrast, when you use a volume, a new directory is created within Docker’s storage directory on the host machine, and Docker manages that directory’s contents.</p>
</blockquote>
<p><code>bind mounts</code>相比<code>volume</code>功能较为有限，创建一个 bind mount 之后，Host 上的一个文件&#x2F;文件夹就相当于被挂载到容器里了，该文件&#x2F;目录就被容器通过绝对路径引用了，<strong>意味着这个文件&#x2F;文件夹必须实现存在于 Host 上</strong>。</p>
<p>而使用使用<code>volume</code>时，会在 Host 主机上新建一个<strong>Docker 存储文件夹</strong>，文件夹里的内容由 Docker 管理。</p>
<blockquote>
<p>The file or directory does not need to exist on the Docker host already. It is created on demand if it does not yet exist. bind mounts are very performant, but they rely on the host machine’s filesystem having a specific directory structure available. If you are developing new Docker applications, consider using named volumes instead.</p>
</blockquote>
<p><code>volume</code>映射的文件&#x2F;目录不需要存在于 Host 上，它们是按需生成的，即可以被自动创建，不需要事先在 Host 上创建。</p>
<p><strong>虽然<code>bind mounts</code>很高效，但是它依赖 Host 上存在特定的目录结构</strong>，这对于部署到新主机上显然不是一件好事，所以推荐新应用使用<code>volume</code>。</p>
<h3 id="volume"><a href="#volume" class="headerlink" title="volume"></a>volume</h3><blockquote>
<p>Volumes are the preferred mechanism for persisting data generated by and used by Docker containers. While bind mounts are dependent on the directory structure and OS of the host machine, volumes are completely managed by Docker.</p>
</blockquote>
<p><code>volume</code>与<code>bind mounts</code>的区别在于后者依赖于 Host 上有特定的目录结构，而前者不需要，使用 volume 时文件的管理由 Docker 主导而不是 Host。</p>
<p><strong>文档还提到了<code>volume</code>相比于<code>bind mounts</code>的优点：</strong></p>
<ul>
<li><strong>更易于备份&#x2F;转移</strong></li>
<li>同时可用于 Linux&#x2F;Windows 容器</li>
<li>在多个容器间共享更安全</li>
<li><strong><code>volume</code>驱动能够让你在远程主机或云服务器上存储<code>volume</code>，还能实现数据加密等功能</strong></li>
<li>新容器可以提前填充内容到<code>volume</code>里</li>
<li>在 Mac 和 Windows 主机里<code>volume</code>性能比<code>bind mounts</code>好的多</li>
</ul>
<h3 id="tmpfs"><a href="#tmpfs" class="headerlink" title="tmpfs"></a>tmpfs</h3><p>若容器产生的数据不需要持久化，可以考虑使用<code>tmpfs</code>来避免持久化数据和写入容器层(writable layer)，从而提高性能。</p>
<p><code>tmpfs</code>是将文件写到内存中，可以避免写数据到容器层增加容器大小。</p>
<p>但<code>tmpfs</code>有两个缺点：</p>
<ul>
<li>只能在 Linux Host 上使用</li>
<li>不能在多个容器间共享</li>
</ul>
<p>下图解释了三者的关系：</p>
<p><img src="/2022/docker_practice/1.png" alt="bind-mounts volume tmpfs"></p>
<h3 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h3><p><a href="https://docs.docker.com/storage/bind-mounts/">Use bind mounts</a></p>
<p><a href="https://docs.docker.com/storage/volumes/">Use volumes</a></p>
<p><a href="https://docs.docker.com/storage/tmpfs/">Use tmpfs mounts</a></p>
<h1 id="Docker-网络管理"><a href="#Docker-网络管理" class="headerlink" title="Docker 网络管理"></a>Docker 网络管理</h1><h2 id="外部访问容器"><a href="#外部访问容器" class="headerlink" title="外部访问容器"></a>外部访问容器</h2><p>可以通过 <code>-P</code> 或 <code>-p</code> 参数来指定端口映射，以使外部可以访问容器中的服务。</p>
<p>当使用 <code>-P</code> 标记时，Docker 会随机映射一个端口到内部容器开放的网络端口。</p>
<p>使用 <code>docker container ls</code> 可以看到，本地主机的 32768 被映射到了容器的 80 端口。此时访问本机的 32768 端口即可访问容器内 NGINX 默认页面。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">docker</span> run -d -P nginx:alpine
$ <span class="token function">docker</span> container <span class="token function">ls</span> -l
CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                   NAMES
fae320d08268        nginx:alpine        <span class="token string">"/docker-entrypoint.…"</span>   <span class="token number">24</span> seconds ago      Up <span class="token number">20</span> seconds       <span class="token number">0.0</span>.0.0:32768-<span class="token operator">></span><span class="token number">80</span>/tcp   bold_mcnulty</code></pre>

<p>同样的，可以通过 <code>docker logs</code> 命令来查看访问记录。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">docker</span> logs fa
<span class="token number">172.17</span>.0.1 - - <span class="token punctuation">[</span><span class="token number">25</span>/Aug/2020:08:34:04 +0000<span class="token punctuation">]</span> <span class="token string">"GET / HTTP/1.1"</span> <span class="token number">200</span> <span class="token number">612</span> <span class="token string">"-"</span> <span class="token string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:80.0) Gecko/20100101 Firefox/80.0"</span> <span class="token string">"-"</span></code></pre>

<p><code>-p</code> 则可以指定要映射的端口，并且，在一个指定端口上只可以绑定一个容器。支持的格式有 <code>ip:hostPort:containerPort | ip::containerPort | hostPort:containerPort</code>。</p>
<h3 id="映射所有接口地址"><a href="#映射所有接口地址" class="headerlink" title="映射所有接口地址"></a>映射所有接口地址</h3><p>使用 <code>hostPort:containerPort</code> 格式本地的 80 端口映射到容器的 80 端口，可以执行</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">docker</span> run -d -p <span class="token number">80</span>:80 nginx:alpine</code></pre>

<p>此时默认会绑定本地所有接口上的所有地址。</p>
<h3 id="映射到指定地址的指定端口"><a href="#映射到指定地址的指定端口" class="headerlink" title="映射到指定地址的指定端口"></a>映射到指定地址的指定端口</h3><p>可以使用 <code>ip:hostPort:containerPort</code> 格式指定映射使用一个特定地址，比如 localhost 地址 127.0.0.1</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">docker</span> run -d -p <span class="token number">127.0</span>.0.1:80:80 nginx:alpine</code></pre>

<h3 id="映射到指定地址的任意端口"><a href="#映射到指定地址的任意端口" class="headerlink" title="映射到指定地址的任意端口"></a>映射到指定地址的任意端口</h3><p>使用 <code>ip::containerPort</code> 绑定 localhost 的任意端口到容器的 80 端口，本地主机会自动分配一个端口。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">docker</span> run -d -p <span class="token number">127.0</span>.0.1::80 nginx:alpine</code></pre>

<p>还可以使用 <code>udp</code> 标记来指定 <code>udp</code> 端口</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">docker</span> run -d -p <span class="token number">127.0</span>.0.1:80:80/udp nginx:alpine</code></pre>

<h3 id="查看映射端口配置"><a href="#查看映射端口配置" class="headerlink" title="查看映射端口配置"></a>查看映射端口配置</h3><p>使用 <code>docker port</code> 来查看当前映射的端口配置，也可以查看到绑定的地址</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">docker</span> port fa <span class="token number">80</span>
<span class="token number">0.0</span>.0.0:32768</code></pre>

<p>注意：</p>
<ul>
<li><p>容器有自己的内部网络和 ip 地址（使用 <code>docker inspect</code> 查看，Docker 还可以有一个可变的网络配置。）</p>
</li>
<li><p><code>-p</code> 标记可以多次使用来绑定多个端口</p>
</li>
</ul>
<p>例如：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">docker</span> run -d <span class="token punctuation">\</span>
    -p <span class="token number">80</span>:80 <span class="token punctuation">\</span>
    -p <span class="token number">443</span>:443 <span class="token punctuation">\</span>
    nginx:alpine</code></pre>

<h2 id="容器互联"><a href="#容器互联" class="headerlink" title="容器互联"></a>容器互联</h2><p>如果你之前有 <code>Docker</code> 使用经验，你可能已经习惯了使用 <code>--link</code> 参数来使容器互联。随着 Docker 网络的完善，强烈建议大家将容器加入自定义的 Docker 网络来连接多个容器，而不是使用 <code>--link</code> 参数。</p>
<h3 id="新建网络"><a href="#新建网络" class="headerlink" title="新建网络"></a>新建网络</h3><p>下面先创建一个新的 Docker 网络。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">docker</span> network create -d bridge my-net</code></pre>

<p><code>-d</code> 参数指定 Docker 网络类型，有 <code>bridge</code> <code>overlay</code>。其中 <code>overlay</code> 网络类型用于 <a href="../swarm_mode/">Swarm mode</a>，在本小节中你可以忽略它。</p>
<h3 id="连接容器"><a href="#连接容器" class="headerlink" title="连接容器"></a>连接容器</h3><p>运行一个容器并连接到新建的 <code>my-net</code> 网络</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">docker</span> run -it --rm --name busybox1 --network my-net busybox <span class="token function">sh</span></code></pre>

<p>打开新的终端，再运行一个容器并加入到 <code>my-net</code> 网络</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">docker</span> run -it --rm --name busybox2 --network my-net busybox <span class="token function">sh</span></code></pre>

<p>再打开一个新的终端查看容器信息</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">docker</span> container <span class="token function">ls</span>
CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES
b47060aca56b        busybox             <span class="token string">"sh"</span>                <span class="token number">11</span> minutes ago      Up <span class="token number">11</span> minutes                           busybox2
8720575823ec        busybox             <span class="token string">"sh"</span>                <span class="token number">16</span> minutes ago      Up <span class="token number">16</span> minutes                           busybox1</code></pre>

<p>下面通过 <code>ping</code> 来证明 <code>busybox1</code> 容器和 <code>busybox2</code> 容器建立了互联关系。</p>
<p>在 <code>busybox1</code> 容器输入以下命令</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">/ <span class="token comment"># ping busybox2</span>
PING busybox2 <span class="token punctuation">(</span><span class="token number">172.19</span>.0.3<span class="token punctuation">)</span>: <span class="token number">56</span> data bytes
<span class="token number">64</span> bytes from <span class="token number">172.19</span>.0.3: <span class="token assign-left variable">seq</span><span class="token operator">=</span><span class="token number">0</span> <span class="token assign-left variable">ttl</span><span class="token operator">=</span><span class="token number">64</span> <span class="token assign-left variable">time</span><span class="token operator">=</span><span class="token number">0.072</span> ms
<span class="token number">64</span> bytes from <span class="token number">172.19</span>.0.3: <span class="token assign-left variable">seq</span><span class="token operator">=</span><span class="token number">1</span> <span class="token assign-left variable">ttl</span><span class="token operator">=</span><span class="token number">64</span> <span class="token assign-left variable">time</span><span class="token operator">=</span><span class="token number">0.118</span> ms</code></pre>

<p>用 ping 来测试连接 <code>busybox2</code> 容器，它会解析成 <code>172.19.0.3</code>。</p>
<p>同理在 <code>busybox2</code> 容器执行 <code>ping busybox1</code>，也会成功连接到。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">/ <span class="token comment"># ping busybox1</span>
PING busybox1 <span class="token punctuation">(</span><span class="token number">172.19</span>.0.2<span class="token punctuation">)</span>: <span class="token number">56</span> data bytes
<span class="token number">64</span> bytes from <span class="token number">172.19</span>.0.2: <span class="token assign-left variable">seq</span><span class="token operator">=</span><span class="token number">0</span> <span class="token assign-left variable">ttl</span><span class="token operator">=</span><span class="token number">64</span> <span class="token assign-left variable">time</span><span class="token operator">=</span><span class="token number">0.064</span> ms
<span class="token number">64</span> bytes from <span class="token number">172.19</span>.0.2: <span class="token assign-left variable">seq</span><span class="token operator">=</span><span class="token number">1</span> <span class="token assign-left variable">ttl</span><span class="token operator">=</span><span class="token number">64</span> <span class="token assign-left variable">time</span><span class="token operator">=</span><span class="token number">0.143</span> ms</code></pre>

<p>这样，<code>busybox1</code> 容器和 <code>busybox2</code> 容器建立了互联关系。</p>
<p><strong>如果你有多个容器之间需要互相连接，推荐使用 <a href="../compose">Docker Compose</a>。</strong></p>
<h2 id="配置-DNS"><a href="#配置-DNS" class="headerlink" title="配置 DNS"></a>配置 DNS</h2><p>如何自定义配置容器的主机名和 DNS 呢？秘诀就是 Docker 利用虚拟文件来挂载容器的 3 个相关配置文件。</p>
<p>在容器中使用 <code>mount</code> 命令可以看到挂载信息：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">mount</span>
/dev/disk/by-uuid/1fec<span class="token punctuation">..</span>.ebdf on /etc/hostname <span class="token builtin class-name">type</span> ext4 <span class="token punctuation">..</span>.
/dev/disk/by-uuid/1fec<span class="token punctuation">..</span>.ebdf on /etc/hosts <span class="token builtin class-name">type</span> ext4 <span class="token punctuation">..</span>.
tmpfs on /etc/resolv.conf <span class="token builtin class-name">type</span> tmpfs <span class="token punctuation">..</span>.</code></pre>

<p>这种机制可以让宿主主机 DNS 信息发生更新后，所有 Docker 容器的 DNS 配置通过 <code>/etc/resolv.conf</code> 文件立刻得到更新。</p>
<p>配置全部容器的 DNS ，也可以在 <code>/etc/docker/daemon.json</code> 文件中增加以下内容来设置。</p>
<pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>
  <span class="token property">"dns"</span> <span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token string">"114.114.114.114"</span><span class="token punctuation">,</span>
    <span class="token string">"8.8.8.8"</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>这样每次启动的容器 DNS 自动配置为 <code>114.114.114.114</code> 和 <code>8.8.8.8</code>。使用以下命令来证明其已经生效：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">docker</span> run -it --rm ubuntu:18.04  <span class="token function">cat</span> etc/resolv.conf
nameserver <span class="token number">114.114</span>.114.114
nameserver <span class="token number">8.8</span>.8.8</code></pre>

<p>如果用户想要手动指定容器的配置，可以在使用 <code>docker run</code> 命令启动容器时加入如下参数：</p>
<ul>
<li><p><code>-h HOSTNAME</code> 或者 <code>--hostname=HOSTNAME</code> 设定容器的主机名，它会被写到容器内的 <code>/etc/hostname</code> 和 <code>/etc/hosts</code>。但它在容器外部看不到，既不会在 <code>docker container ls</code> 中显示，也不会在其他的容器的 <code>/etc/hosts</code> 看到。</p>
</li>
<li><p><code>--dns=IP_ADDRESS</code> 添加 DNS 服务器到容器的 <code>/etc/resolv.conf</code> 中，让容器用这个服务器来解析所有不在 <code>/etc/hosts</code> 中的主机名。</p>
</li>
<li><p><code>--dns-search=DOMAIN</code> 设定容器的搜索域，当设定搜索域为 <code>.example.com</code> 时，在搜索一个名为 host 的主机时，DNS 不仅搜索 host，还会搜索 <code>host.example.com</code>。</p>
</li>
</ul>
<blockquote>
<p>注意：如果在容器启动时没有指定最后两个参数，Docker 会默认用主机上的 <code>/etc/resolv.conf</code> 来配置容器。</p>
</blockquote>
<h1 id="高级网络配置"><a href="#高级网络配置" class="headerlink" title="高级网络配置"></a>高级网络配置</h1><p>本章将介绍 Docker 的一些高级网络配置和选项。</p>
<p>当 Docker 启动时，会自动在主机上创建一个 <code>docker0</code> 虚拟网桥，实际上是 Linux 的一个 bridge，可以理解为一个软件交换机。它会在挂载到它的网口之间进行转发。</p>
<p>同时，Docker 随机分配一个本地未占用的私有网段（在 <a href="https://datatracker.ietf.org/doc/html/rfc1918">RFC1918</a> 中定义）中的一个地址给 <code>docker0</code> 接口。比如典型的 <code>172.17.42.1</code>，掩码为 <code>255.255.0.0</code>。此后启动的容器内的网口也会自动分配一个同一网段（<code>172.17.0.0/16</code>）的地址。</p>
<p>当创建一个 Docker 容器的时候，同时会创建了一对 <code>veth pair</code> 接口（当数据包发送到一个接口时，另外一个接口也可以收到相同的数据包）。这对接口一端在容器内，即 <code>eth0</code>；另一端在本地并被挂载到 <code>docker0</code> 网桥，名称以 <code>veth</code> 开头（例如 <code>vethAQI2QT</code>）。通过这种方式，主机可以跟容器通信，容器之间也可以相互通信。Docker 就创建了在主机和所有容器之间一个虚拟共享网络。</p>
<p><img src="/2022/docker_practice/network.png" alt="Docker 网络"></p>
<p>接下来的部分将介绍在一些场景中，Docker 所有的网络定制配置。以及通过 Linux 命令来调整、补充、甚至替换 Docker 默认的网络配置。</p>
<h2 id="快速配置指南"><a href="#快速配置指南" class="headerlink" title="快速配置指南"></a>快速配置指南</h2><p><code>dockerd</code>命令可以设置Docker网络相关的配置。</p>
<p>以下选项只有在 Docker 服务启动的时候才能配置，而且不能马上生效：</p>
<ul>
<li><code>-b BRIDGE</code> 或 <code>--bridge=BRIDGE</code> 指定容器挂载的网桥</li>
<li><code>--bip=CIDR</code> 定制 docker0 的掩码</li>
<li><code>-H SOCKET...</code> 或 <code>--host=SOCKET...</code> Docker 服务端接收命令的通道</li>
<li><code>--icc=true|false</code> 是否支持容器之间进行通信</li>
<li><code>--ip-forward=true|false</code> 请看下文容器之间的通信</li>
<li><code>--iptables=true|false</code> 是否允许 Docker 添加 iptables 规则</li>
<li><code>--mtu=BYTES</code> 容器网络中的 MTU</li>
</ul>
<p>下面2个命令选项既可以在启动服务时指定，也可以在启动容器时指定。在 Docker 服务启动的时候指定则会成为默认值，后面执行 <code>docker run</code> 时可以覆盖设置的默认值。</p>
<ul>
<li><code>--dns=IP_ADDRESS...</code> 使用指定的DNS服务器</li>
<li><code>--dns-search=DOMAIN...</code> 指定DNS搜索域</li>
</ul>
<p>以下这些选项只有在 <code>docker run</code> 执行时使用，因为它是针对容器的特性内容。</p>
<ul>
<li><code>-h HOSTNAME</code> 或 <code>--hostname=HOSTNAME</code> 配置容器主机名</li>
<li><code>--link=CONTAINER_NAME:ALIAS</code> 添加到另一个容器的连接</li>
<li><code>--net=bridge|none|container:NAME_or_ID|host</code> 配置容器的桥接模式</li>
<li><code>-p SPEC</code> 或 <code>--publish=SPEC</code> 映射容器端口到宿主主机</li>
<li><code>-P or --publish-all=true|false</code> 映射容器所有端口到宿主主机</li>
</ul>
<h2 id="容器访问控制"><a href="#容器访问控制" class="headerlink" title="容器访问控制"></a>容器访问控制</h2><p>容器的访问控制，主要通过 Linux 上的 <code>iptables</code> 防火墙来进行管理和实现。<code>iptables</code> 是 Linux 上默认的防火墙软件，在大部分发行版中都自带。</p>
<h3 id="容器访问外部网络"><a href="#容器访问外部网络" class="headerlink" title="容器访问外部网络"></a>容器访问外部网络</h3><p>容器要想访问外部网络，需要本地系统的转发支持。在Linux 系统中，检查转发是否打开。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token variable">$sysctl</span> net.ipv4.ip_forward
net.ipv4.ip_forward <span class="token operator">=</span> <span class="token number">1</span></code></pre>
<p>如果为 0，说明没有开启转发，则需要手动打开。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token variable">$sysctl</span> -w net.ipv4.ip_forward<span class="token operator">=</span><span class="token number">1</span></code></pre>
<p>如果在启动 Docker 服务的时候设定 <code>--ip-forward=true</code>, Docker 就会自动设定系统的 <code>ip_forward</code> 参数为 1。</p>
<h3 id="容器之间访问"><a href="#容器之间访问" class="headerlink" title="容器之间访问"></a>容器之间访问</h3><p>容器之间相互访问，需要两方面的支持：</p>
<ul>
<li>容器的网络拓扑是否已经互联。默认情况下，所有容器都会被连接到 <code>docker0</code> 网桥上。</li>
<li>本地系统的防火墙软件 – <code>iptables</code> 是否允许通过。</li>
</ul>
<h4 id="访问所有端口"><a href="#访问所有端口" class="headerlink" title="访问所有端口"></a>访问所有端口</h4><p>当启动 Docker 服务（即 dockerd）的时候，默认会添加一条转发策略到本地主机 iptables 的 FORWARD 链上。策略为通过（<code>ACCEPT</code>）还是禁止（<code>DROP</code>）取决于配置<code>--icc=true</code>（缺省值）还是 <code>--icc=false</code>。当然，如果手动指定 <code>--iptables=false</code> 则不会添加 <code>iptables</code> 规则。</p>
<p>可见，默认情况下，不同容器之间是允许网络互通的。如果为了安全考虑，可以在 <code>/etc/docker/daemon.json</code> 文件中配置 <code>&#123;&quot;icc&quot;: false&#125;</code> 来禁止它。</p>
<h4 id="访问指定端口"><a href="#访问指定端口" class="headerlink" title="访问指定端口"></a>访问指定端口</h4><p>在通过 <code>-icc=false</code> 关闭网络访问后，还可以通过 <code>--link=CONTAINER_NAME:ALIAS</code> 选项来访问容器的开放端口。</p>
<p>例如，在启动 Docker 服务时，可以同时使用 <code>icc=false --iptables=true</code> 参数来关闭允许相互的网络访问，并让 Docker 可以修改系统中的 <code>iptables</code> 规则。</p>
<p>此时，系统中的 <code>iptables</code> 规则可能是类似</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> iptables -nL
<span class="token punctuation">..</span>.
Chain FORWARD <span class="token punctuation">(</span>policy ACCEPT<span class="token punctuation">)</span>
target     prot opt <span class="token builtin class-name">source</span>               destination
DROP       all  --  <span class="token number">0.0</span>.0.0/0            <span class="token number">0.0</span>.0.0/0
<span class="token punctuation">..</span>.</code></pre>

<p>之后，启动容器（<code>docker run</code>）时使用 <code>--link=CONTAINER_NAME:ALIAS</code> 选项。Docker 会在 <code>iptables</code> 中为 两个容器分别添加一条 <code>ACCEPT</code> 规则，允许相互访问开放的端口（取决于 <code>Dockerfile</code> 中的 <code>EXPOSE</code> 指令）。</p>
<p>当添加了 <code>--link=CONTAINER_NAME:ALIAS</code> 选项后，添加了 <code>iptables</code> 规则。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> iptables -nL
<span class="token punctuation">..</span>.
Chain FORWARD <span class="token punctuation">(</span>policy ACCEPT<span class="token punctuation">)</span>
target     prot opt <span class="token builtin class-name">source</span>               destination
ACCEPT     tcp  --  <span class="token number">172.17</span>.0.2           <span class="token number">172.17</span>.0.3           tcp spt:80
ACCEPT     tcp  --  <span class="token number">172.17</span>.0.3           <span class="token number">172.17</span>.0.2           tcp dpt:80
DROP       all  --  <span class="token number">0.0</span>.0.0/0            <span class="token number">0.0</span>.0.0/0</code></pre>

<p>注意：<code>--link=CONTAINER_NAME:ALIAS</code> 中的 <code>CONTAINER_NAME</code> 目前必须是 Docker 分配的名字，或使用 <code>--name</code> 参数指定的名字。主机名则不会被识别。</p>
<h2 id="映射容器端口到宿主主机"><a href="#映射容器端口到宿主主机" class="headerlink" title="映射容器端口到宿主主机"></a>映射容器端口到宿主主机</h2><p>默认情况下，容器可以主动访问到外部网络的连接，但是外部网络无法访问到容器。</p>
<h3 id="容器访问外部实现"><a href="#容器访问外部实现" class="headerlink" title="容器访问外部实现"></a>容器访问外部实现</h3><p>容器所有到外部网络的连接，源地址都会被 NAT 成本地系统的 IP 地址。这是使用 <code>iptables</code> 的源地址伪装实现的。</p>
<p>查看主机的 NAT 规则。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> iptables -t nat -nL
<span class="token punctuation">..</span>.
Chain POSTROUTING <span class="token punctuation">(</span>policy ACCEPT<span class="token punctuation">)</span>
target     prot opt <span class="token builtin class-name">source</span>               destination
MASQUERADE  all  --  <span class="token number">172.17</span>.0.0/16       <span class="token operator">!</span><span class="token number">172.17</span>.0.0/16
<span class="token punctuation">..</span>.</code></pre>

<p>其中，上述规则将所有源地址在 <code>172.17.0.0/16</code> 网段，目标地址为其他网段（外部网络）的流量动态伪装为从系统网卡发出。MASQUERADE 跟传统 SNAT 的好处是它能动态从网卡获取地址。</p>
<h3 id="外部访问容器实现"><a href="#外部访问容器实现" class="headerlink" title="外部访问容器实现"></a>外部访问容器实现</h3><p>容器允许外部访问，可以在 <code>docker run</code> 时候通过 <code>-p</code> 或 <code>-P</code> 参数来启用。不管用那种办法，其实也是在本地的 <code>iptable</code> 的 nat 表中添加相应的规则。</p>
<p>使用 <code>-P</code> 时：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ iptables -t nat -nL
<span class="token punctuation">..</span>.
Chain DOCKER <span class="token punctuation">(</span><span class="token number">2</span> references<span class="token punctuation">)</span>
target     prot opt <span class="token builtin class-name">source</span>               destination
DNAT       tcp  --  <span class="token number">0.0</span>.0.0/0            <span class="token number">0.0</span>.0.0/0            tcp dpt:49153 to:172.17.0.2:80</code></pre>

<p>使用 <code>-p 80:80</code> 时：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ iptables -t nat -nL
Chain DOCKER <span class="token punctuation">(</span><span class="token number">2</span> references<span class="token punctuation">)</span>
target     prot opt <span class="token builtin class-name">source</span>               destination
DNAT       tcp  --  <span class="token number">0.0</span>.0.0/0            <span class="token number">0.0</span>.0.0/0            tcp dpt:80 to:172.17.0.2:80</code></pre>

<p>注意：</p>
<ul>
<li><p>这里的规则映射了 <code>0.0.0.0</code>，意味着将接受主机来自所有接口的流量。用户可以通过 <code>-p IP:host_port:container_port</code> 或 <code>-p IP::port</code> 来指定允许访问容器的主机上的 IP、接口等，以制定更严格的规则。</p>
</li>
<li><p>如果希望永久绑定到某个固定的 IP 地址，可以在 Docker 配置文件 <code>/etc/docker/daemon.json</code> 中添加如下内容。</p>
</li>
</ul>
<pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>
  <span class="token property">"ip"</span><span class="token operator">:</span> <span class="token string">"0.0.0.0"</span>
<span class="token punctuation">&#125;</span></code></pre>

<h2 id="配置-docker0-网桥"><a href="#配置-docker0-网桥" class="headerlink" title="配置 docker0 网桥"></a>配置 <code>docker0</code> 网桥</h2><p>Docker 服务默认会创建一个 <code>docker0</code> 网桥（其上有一个 <code>docker0</code> 内部接口），它在内核层连通了其他的物理或虚拟网卡，这就将所有容器和本地主机都放到同一个物理网络。</p>
<p>Docker 默认指定了 <code>docker0</code> 接口 的 IP 地址、子网掩码、MTU、默认路由，让主机和容器之间可以通过网桥相互通信。<strong>这些值都可以在服务启动的时候进行配置：</strong></p>
<ul>
<li><code>--bip=CIDR</code> IP 地址加掩码格式，例如 192.168.1.5&#x2F;24</li>
<li><code>--mtu=BYTES</code> 覆盖默认的 Docker mtu 配置</li>
</ul>
<p><strong>也可以在配置文件中配置 DOCKER_OPTS，然后重启服务。</strong></p>
<p>由于目前 Docker 网桥是 Linux 网桥，用户可以使用 <code>brctl show</code> 来查看网桥和端口连接信息。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> brctl show
bridge name     bridge <span class="token function">id</span>               STP enabled     interfaces
docker0         <span class="token number">8000</span>.3a1d7362b4ee       no              veth65f9
                                             vethdda6</code></pre>
<p>*注：<code>brctl</code> 命令在 Debian、Ubuntu 中可以使用 <code>sudo apt-get install bridge-utils</code> 来安装。</p>
<p>每次创建一个新容器的时候，Docker 从可用的地址段中选择一个空闲的 IP 地址分配给容器的 eth0 端口。使用本地主机上 <code>docker0</code> 接口的 IP 作为所有容器的默认网关。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">docker</span> run -i -t --rm base /bin/bash
$ <span class="token function">ip</span> addr show eth0
<span class="token number">24</span>: eth0: <span class="token operator">&lt;</span>BROADCAST,UP,LOWER_UP<span class="token operator">></span> mtu <span class="token number">1500</span> qdisc pfifo_fast state UP group default qlen <span class="token number">1000</span>
    link/ether <span class="token number">32</span>:6f:e0:35:57:91 brd ff:ff:ff:ff:ff:ff
    inet <span class="token number">172.17</span>.0.3/16 scope global eth0
       valid_lft forever preferred_lft forever
    inet6 fe80::306f:e0ff:fe35:5791/64 scope <span class="token function">link</span>
       valid_lft forever preferred_lft forever
$ <span class="token function">ip</span> route
default via <span class="token number">172.17</span>.42.1 dev eth0
<span class="token number">172.17</span>.0.0/16 dev eth0  proto kernel  scope <span class="token function">link</span>  src <span class="token number">172.17</span>.0.3</code></pre>


<h2 id="自定义网桥"><a href="#自定义网桥" class="headerlink" title="自定义网桥"></a>自定义网桥</h2><p>除了默认的 <code>docker0</code> 网桥，用户也可以指定网桥来连接各个容器。</p>
<p>在启动 Docker 服务的时候，使用 <code>-b BRIDGE</code>或<code>--bridge=BRIDGE</code> 来指定使用的网桥。</p>
<p>如果服务已经运行，那需要先停止服务，并删除旧的网桥。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> systemctl stop <span class="token function">docker</span>
$ <span class="token function">sudo</span> <span class="token function">ip</span> <span class="token function">link</span> <span class="token builtin class-name">set</span> dev docker0 down
$ <span class="token function">sudo</span> brctl delbr docker0</code></pre>

<p>然后创建一个网桥 <code>bridge0</code>。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> brctl addbr bridge0
$ <span class="token function">sudo</span> <span class="token function">ip</span> addr <span class="token function">add</span> <span class="token number">192.168</span>.5.1/24 dev bridge0
$ <span class="token function">sudo</span> <span class="token function">ip</span> <span class="token function">link</span> <span class="token builtin class-name">set</span> dev bridge0 up</code></pre>

<p>查看确认网桥创建并启动。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">ip</span> addr show bridge0
<span class="token number">4</span>: bridge0: <span class="token operator">&lt;</span>BROADCAST,MULTICAST<span class="token operator">></span> mtu <span class="token number">1500</span> qdisc noop state UP group default
    link/ether <span class="token number">66</span>:38:d0:0d:76:18 brd ff:ff:ff:ff:ff:ff
    inet <span class="token number">192.168</span>.5.1/24 scope global bridge0
       valid_lft forever preferred_lft forever</code></pre>

<p>在 Docker 配置文件 <code>/etc/docker/daemon.json</code> 中添加如下内容，即可将 Docker 默认桥接到创建的网桥上。</p>
<pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>
  <span class="token property">"bridge"</span><span class="token operator">:</span> <span class="token string">"bridge0"</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>启动 Docker 服务。</p>
<p>新建一个容器，可以看到它已经桥接到了 <code>bridge0</code> 上。</p>
<p>可以继续用 <code>brctl show</code> 命令查看桥接的信息。另外，在容器中可以使用 <code>ip addr</code> 和 <code>ip route</code> 命令来查看 IP 地址配置和路由信息。</p>
<h2 id="工具和示例"><a href="#工具和示例" class="headerlink" title="工具和示例"></a>工具和示例</h2><p>在介绍自定义网络拓扑之前，你可能会对一些外部工具和例子感兴趣：</p>
<h3 id="pipework"><a href="#pipework" class="headerlink" title="pipework"></a>pipework</h3><p>Jérôme Petazzoni 编写了一个叫 <a href="https://github.com/jpetazzo/pipework">pipework</a> 的 shell 脚本，可以帮助用户在比较复杂的场景中完成容器的连接。</p>
<h3 id="playground"><a href="#playground" class="headerlink" title="playground"></a>playground</h3><p>Brandon Rhodes 创建了一个提供完整的 Docker 容器网络拓扑管理的 <a href="https://github.com/brandon-rhodes/fopnp/tree/m/playground">Python库</a>，包括路由、NAT 防火墙；以及一些提供 <code>HTTP</code> <code>SMTP</code> <code>POP</code> <code>IMAP</code> <code>Telnet</code> <code>SSH</code> <code>FTP</code> 的服务器。</p>
<h2 id="编辑网络配置文件"><a href="#编辑网络配置文件" class="headerlink" title="编辑网络配置文件"></a>编辑网络配置文件</h2><p>Docker 1.2.0 开始支持在运行中的容器里编辑 <code>/etc/hosts</code>, <code>/etc/hostname</code> 和 <code>/etc/resolv.conf</code> 文件。</p>
<p><strong>但是这些修改是临时的，只在运行的容器中保留，容器终止或重启后并不会被保存下来，也不会被 <code>docker commit</code> 提交。</strong></p>
<h2 id="示例：创建一个点到点连接"><a href="#示例：创建一个点到点连接" class="headerlink" title="示例：创建一个点到点连接"></a>示例：创建一个点到点连接</h2><p>默认情况下，Docker 会将所有容器连接到由 <code>docker0</code> 提供的虚拟子网中。</p>
<p>用户有时候需要两个容器之间可以直连通信，而不用通过主机网桥进行桥接。</p>
<p>解决办法很简单：创建一对 <code>peer</code> 接口，分别放到两个容器中，配置成点到点链路类型即可。</p>
<p>首先启动 2 个容器：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">docker</span> run -i -t --rm --net<span class="token operator">=</span>none base /bin/bash
root@1f1f4c1f931a:/<span class="token comment">#</span>
$ <span class="token function">docker</span> run -i -t --rm --net<span class="token operator">=</span>none base /bin/bash
root@12e343489d2f:/<span class="token comment">#</span></code></pre>

<p>找到进程号，然后创建网络命名空间的跟踪文件。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">docker</span> inspect -f <span class="token string">'&#123;&#123;.State.Pid&#125;&#125;'</span> 1f1f4c1f931a
<span class="token number">2989</span>
$ <span class="token function">docker</span> inspect -f <span class="token string">'&#123;&#123;.State.Pid&#125;&#125;'</span> 12e343489d2f
<span class="token number">3004</span>
$ <span class="token function">sudo</span> <span class="token function">mkdir</span> -p /var/run/netns
$ <span class="token function">sudo</span> <span class="token function">ln</span> -s /proc/2989/ns/net /var/run/netns/2989
$ <span class="token function">sudo</span> <span class="token function">ln</span> -s /proc/3004/ns/net /var/run/netns/3004</code></pre>

<p>创建一对 <code>peer</code> 接口，然后配置路由</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">ip</span> <span class="token function">link</span> <span class="token function">add</span> A <span class="token builtin class-name">type</span> veth peer name B
$ <span class="token function">sudo</span> <span class="token function">ip</span> <span class="token function">link</span> <span class="token builtin class-name">set</span> A netns <span class="token number">2989</span>
$ <span class="token function">sudo</span> <span class="token function">ip</span> netns <span class="token builtin class-name">exec</span> <span class="token number">2989</span> <span class="token function">ip</span> addr <span class="token function">add</span> <span class="token number">10.1</span>.1.1/32 dev A
$ <span class="token function">sudo</span> <span class="token function">ip</span> netns <span class="token builtin class-name">exec</span> <span class="token number">2989</span> <span class="token function">ip</span> <span class="token function">link</span> <span class="token builtin class-name">set</span> A up
$ <span class="token function">sudo</span> <span class="token function">ip</span> netns <span class="token builtin class-name">exec</span> <span class="token number">2989</span> <span class="token function">ip</span> route <span class="token function">add</span> <span class="token number">10.1</span>.1.2/32 dev A
$ <span class="token function">sudo</span> <span class="token function">ip</span> <span class="token function">link</span> <span class="token builtin class-name">set</span> B netns <span class="token number">3004</span>
$ <span class="token function">sudo</span> <span class="token function">ip</span> netns <span class="token builtin class-name">exec</span> <span class="token number">3004</span> <span class="token function">ip</span> addr <span class="token function">add</span> <span class="token number">10.1</span>.1.2/32 dev B
$ <span class="token function">sudo</span> <span class="token function">ip</span> netns <span class="token builtin class-name">exec</span> <span class="token number">3004</span> <span class="token function">ip</span> <span class="token function">link</span> <span class="token builtin class-name">set</span> B up
$ <span class="token function">sudo</span> <span class="token function">ip</span> netns <span class="token builtin class-name">exec</span> <span class="token number">3004</span> <span class="token function">ip</span> route <span class="token function">add</span> <span class="token number">10.1</span>.1.1/32 dev B</code></pre>
<p>现在这 2 个容器就可以相互 ping 通，并成功建立连接。点到点链路不需要子网和子网掩码。</p>
<p>此外，也可以不指定 <code>--net=none</code> 来创建点到点链路。这样容器还可以通过原先的网络来通信。</p>
<p>利用类似的办法，可以创建一个只跟主机通信的容器。但是一般情况下，更推荐使用 <code>--icc=false</code> 来关闭容器之间的通信。</p>
<h1 id="Docker-Compose-项目"><a href="#Docker-Compose-项目" class="headerlink" title="Docker Compose 项目"></a>Docker Compose 项目</h1><p><code>Docker Compose</code> 是 Docker 官方编排（Orchestration）项目之一，负责快速的部署分布式应用。</p>
<p>本章将介绍 <code>Compose</code> 项目情况以及安装和使用。</p>
<h2 id="Compose-简介"><a href="#Compose-简介" class="headerlink" title="Compose 简介"></a>Compose 简介</h2><p><code>Compose</code> 项目是 Docker 官方的开源项目，负责实现对 Docker 容器集群的快速编排。从功能上看，跟 <code>OpenStack</code> 中的 <code>Heat</code> 十分类似。</p>
<p>其代码目前在 <a href="https://github.com/docker/compose">https://github.com/docker/compose</a> 上开源。</p>
<p><code>Compose</code> 定位是 「定义和运行多个 Docker 容器的应用（Defining and running multi-container Docker applications）」，其前身是开源项目 Fig。</p>
<p>通过第一部分中的介绍，我们知道使用一个 <code>Dockerfile</code> 模板文件，可以让用户很方便的定义一个单独的应用容器。然而，在日常工作中，经常会碰到需要多个容器相互配合来完成某项任务的情况。例如要实现一个 Web 项目，除了 Web 服务容器本身，往往还需要再加上后端的数据库服务容器，甚至还包括负载均衡容器等。</p>
<p><code>Compose</code> 恰好满足了这样的需求。它允许用户通过一个单独的 <code>docker-compose.yml</code> 模板文件（YAML 格式）来定义一组相关联的应用容器为一个项目（project）。</p>
<p><code>Compose</code> 中有两个重要的概念：</p>
<ul>
<li><p>服务 (<code>service</code>)：一个应用的容器，实际上可以包括若干运行相同镜像的容器实例。</p>
</li>
<li><p>项目 (<code>project</code>)：由一组关联的应用容器组成的一个完整业务单元，在 <code>docker-compose.yml</code> 文件中定义。</p>
</li>
</ul>
<p><code>Compose</code> 的默认管理对象是项目，通过子命令对项目中的一组容器进行便捷地生命周期管理。</p>
<p><code>Compose</code> 项目由 Python 编写，实现上调用了 Docker 服务提供的 API 来对容器进行管理。因此，只要所操作的平台支持 Docker API，就可以在其上利用 <code>Compose</code> 来进行编排管理。</p>
<h2 id="Compose-V2"><a href="#Compose-V2" class="headerlink" title="Compose V2"></a>Compose V2</h2><p>目前 Docker 官方用 GO 语言 <a href="https://github.com/docker/compose-cli">重写</a> 了 Docker Compose，并将其作为了 docker cli 的子命令，称为 <code>Compose V2</code>。你可以参照官方文档安装，然后将熟悉的 <code>docker-compose</code> 命令替换为 <code>docker compose</code>，即可使用 Docker Compose。</p>
<h3 id="官方文档"><a href="#官方文档" class="headerlink" title="官方文档"></a>官方文档</h3><ul>
<li><a href="https://docs.docker.com/compose/cli-command/">Compose V2 beta</a></li>
<li><a href="https://github.com/docker/compose">https://github.com/docker/compose</a></li>
</ul>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="术语"><a href="#术语" class="headerlink" title="术语"></a>术语</h3><p>首先介绍几个术语。</p>
<ul>
<li><p>服务 (<code>service</code>)：一个应用容器，实际上可以运行多个相同镜像的实例。</p>
</li>
<li><p>项目 (<code>project</code>)：由一组关联的应用容器组成的一个完整业务单元。</p>
</li>
</ul>
<p>可见，一个项目可以由多个服务（容器）关联而成，<code>Compose</code> 面向项目进行管理。</p>
<h3 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h3><p>最常见的项目是 web 网站，该项目应该包含 web 应用和缓存。</p>
<p>下面我们用 <code>Python</code> 来建立一个能够记录页面访问次数的 web 网站。</p>
<h4 id="web-应用"><a href="#web-应用" class="headerlink" title="web 应用"></a>web 应用</h4><p>新建文件夹，在该目录中编写 <code>app.py</code> 文件</p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask
<span class="token keyword">from</span> redis <span class="token keyword">import</span> Redis
app <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>
redis <span class="token operator">=</span> Redis<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'redis'</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">6379</span><span class="token punctuation">)</span>
<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    count <span class="token operator">=</span> redis<span class="token punctuation">.</span>incr<span class="token punctuation">(</span><span class="token string">'hits'</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token string">'Hello World! 该页面已被访问 &#123;&#125; 次。\n'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span>
<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>
    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">"0.0.0.0"</span><span class="token punctuation">,</span> debug<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span></code></pre>

<h4 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h4><p>编写 <code>Dockerfile</code> 文件，内容为</p>
<pre class="language-docker" data-language="docker"><code class="language-docker"><span class="token instruction"><span class="token keyword">FROM</span> python:3.6-alpine</span>
<span class="token instruction"><span class="token keyword">ADD</span> . /code</span>
<span class="token instruction"><span class="token keyword">WORKDIR</span> /code</span>
<span class="token instruction"><span class="token keyword">RUN</span> pip install redis flask</span>
<span class="token instruction"><span class="token keyword">CMD</span> [<span class="token string">"python"</span>, <span class="token string">"app.py"</span>]</span></code></pre>

<h4 id="docker-compose-yml"><a href="#docker-compose-yml" class="headerlink" title="docker-compose.yml"></a>docker-compose.yml</h4><p>编写 <code>docker-compose.yml</code> 文件，这个是 Compose 使用的主模板文件。</p>
<pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">'3'</span>
<span class="token key atrule">services</span><span class="token punctuation">:</span>
  <span class="token key atrule">web</span><span class="token punctuation">:</span>
    <span class="token key atrule">build</span><span class="token punctuation">:</span> .
    <span class="token key atrule">ports</span><span class="token punctuation">:</span>
     <span class="token punctuation">-</span> <span class="token string">"5000:5000"</span>
  <span class="token key atrule">redis</span><span class="token punctuation">:</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> <span class="token string">"redis:alpine"</span></code></pre>

<h4 id="运行-compose-项目"><a href="#运行-compose-项目" class="headerlink" title="运行 compose 项目"></a>运行 compose 项目</h4><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">docker-compose</span> up</code></pre>

<p>此时访问本地 <code>5000</code> 端口，每次刷新页面，计数就会加 1。</p>
<h2 id="Compose-命令说明"><a href="#Compose-命令说明" class="headerlink" title="Compose 命令说明"></a>Compose 命令说明</h2><h3 id="命令对象与格式"><a href="#命令对象与格式" class="headerlink" title="命令对象与格式"></a>命令对象与格式</h3><p>对于 Compose 来说，大部分命令的对象既可以是项目本身，也可以指定为项目中的服务或者容器。如果没有特别的说明，命令对象将是项目，这意味着项目中所有的服务都会受到命令影响。</p>
<p>执行 <code>docker-compose [COMMAND] --help</code> 或者 <code>docker-compose help [COMMAND]</code> 可以查看具体某个命令的使用格式。</p>
<p><code>docker-compose</code> 命令的基本的使用格式是</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker-compose</span> <span class="token punctuation">[</span>-f<span class="token operator">=</span><span class="token operator">&lt;</span>arg<span class="token operator">></span><span class="token punctuation">..</span>.<span class="token punctuation">]</span> <span class="token punctuation">[</span>options<span class="token punctuation">]</span> <span class="token punctuation">[</span>COMMAND<span class="token punctuation">]</span> <span class="token punctuation">[</span>ARGS<span class="token punctuation">..</span>.<span class="token punctuation">]</span></code></pre>

<h3 id="命令选项"><a href="#命令选项" class="headerlink" title="命令选项"></a>命令选项</h3><ul>
<li><p><code>-f, --file FILE</code> 指定使用的 Compose 模板文件，默认为 <code>docker-compose.yml</code>，可以多次指定。</p>
</li>
<li><p><code>-p, --project-name NAME</code> 指定项目名称，默认将使用所在目录名称作为项目名。</p>
</li>
<li><p><code>--verbose</code> 输出更多调试信息。</p>
</li>
<li><p><code>-v, --version</code> 打印版本并退出。</p>
</li>
</ul>
<h3 id="命令使用说明"><a href="#命令使用说明" class="headerlink" title="命令使用说明"></a>命令使用说明</h3><h4 id="build"><a href="#build" class="headerlink" title="build"></a><code>build</code></h4><p>格式为 <code>docker-compose build [options] [SERVICE...]</code>。</p>
<p>构建（重新构建）项目中的服务容器。</p>
<p>服务容器一旦构建后，将会带上一个标记名，例如对于 web 项目中的一个 db 容器，可能是 web_db。</p>
<p>可以随时在项目目录下运行 <code>docker-compose build</code> 来重新构建服务。</p>
<p>选项包括：</p>
<ul>
<li><p><code>--force-rm</code> 删除构建过程中的临时容器。</p>
</li>
<li><p><code>--no-cache</code> 构建镜像过程中不使用 cache（这将加长构建过程）。</p>
</li>
<li><p><code>--pull</code> 始终尝试通过 pull 来获取更新版本的镜像。</p>
</li>
</ul>
<h4 id="config"><a href="#config" class="headerlink" title="config"></a><code>config</code></h4><p>验证 Compose 文件格式是否正确，若正确则显示配置，若格式错误显示错误原因。</p>
<h4 id="down"><a href="#down" class="headerlink" title="down"></a><code>down</code></h4><p>此命令将会停止 <code>up</code> 命令所启动的容器，并移除网络</p>
<h4 id="exec"><a href="#exec" class="headerlink" title="exec"></a><code>exec</code></h4><p>进入指定的容器。</p>
<h4 id="help"><a href="#help" class="headerlink" title="help"></a><code>help</code></h4><p>获得一个命令的帮助。</p>
<h4 id="images"><a href="#images" class="headerlink" title="images"></a><code>images</code></h4><p>列出 Compose 文件中包含的镜像。</p>
<h4 id="kill"><a href="#kill" class="headerlink" title="kill"></a><code>kill</code></h4><p>格式为 <code>docker-compose kill [options] [SERVICE...]</code>。</p>
<p>通过发送 <code>SIGKILL</code> 信号来强制停止服务容器。</p>
<p>支持通过 <code>-s</code> 参数来指定发送的信号，例如通过如下指令发送 <code>SIGINT</code> 信号。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">docker-compose</span> <span class="token function">kill</span> -s SIGINT</code></pre>

<h4 id="logs"><a href="#logs" class="headerlink" title="logs"></a><code>logs</code></h4><p>格式为 <code>docker-compose logs [options] [SERVICE...]</code>。</p>
<p>查看服务容器的输出。默认情况下，docker-compose 将对不同的服务输出使用不同的颜色来区分。可以通过 <code>--no-color</code> 来关闭颜色。</p>
<p>该命令在调试问题的时候十分有用。</p>
<h4 id="pause"><a href="#pause" class="headerlink" title="pause"></a><code>pause</code></h4><p>格式为 <code>docker-compose pause [SERVICE...]</code>。</p>
<p>暂停一个服务容器。</p>
<h4 id="port"><a href="#port" class="headerlink" title="port"></a><code>port</code></h4><p>格式为 <code>docker-compose port [options] SERVICE PRIVATE_PORT</code>。</p>
<p>打印某个容器端口所映射的公共端口。</p>
<p>选项：</p>
<ul>
<li><p><code>--protocol=proto</code> 指定端口协议，tcp（默认值）或者 udp。</p>
</li>
<li><p><code>--index=index</code> 如果同一服务存在多个容器，指定命令对象容器的序号（默认为 1）。</p>
</li>
</ul>
<h4 id="ps"><a href="#ps" class="headerlink" title="ps"></a><code>ps</code></h4><p>格式为 <code>docker-compose ps [options] [SERVICE...]</code>。</p>
<p>列出项目中目前的所有容器。</p>
<p>选项：</p>
<ul>
<li><code>-q</code> 只打印容器的 ID 信息。</li>
</ul>
<h4 id="pull"><a href="#pull" class="headerlink" title="pull"></a><code>pull</code></h4><p>格式为 <code>docker-compose pull [options] [SERVICE...]</code>。</p>
<p>拉取服务依赖的镜像。</p>
<p>选项：</p>
<ul>
<li><code>--ignore-pull-failures</code> 忽略拉取镜像过程中的错误。</li>
</ul>
<h4 id="push"><a href="#push" class="headerlink" title="push"></a><code>push</code></h4><p>推送服务依赖的镜像到 Docker 镜像仓库。</p>
<h4 id="restart"><a href="#restart" class="headerlink" title="restart"></a><code>restart</code></h4><p>格式为 <code>docker-compose restart [options] [SERVICE...]</code>。</p>
<p>重启项目中的服务。</p>
<p>选项：</p>
<ul>
<li><code>-t, --timeout TIMEOUT</code> 指定重启前停止容器的超时（默认为 10 秒）。</li>
</ul>
<h4 id="rm"><a href="#rm" class="headerlink" title="rm"></a><code>rm</code></h4><p>格式为 <code>docker-compose rm [options] [SERVICE...]</code>。</p>
<p>删除所有（停止状态的）服务容器。推荐先执行 <code>docker-compose stop</code> 命令来停止容器。</p>
<p>选项：</p>
<ul>
<li><p><code>-f, --force</code> 强制直接删除，包括非停止状态的容器。一般尽量不要使用该选项。</p>
</li>
<li><p><code>-v</code> 删除容器所挂载的数据卷。</p>
</li>
</ul>
<h4 id="run"><a href="#run" class="headerlink" title="run"></a><code>run</code></h4><p>格式为 <code>docker-compose run [options] [-p PORT...] [-e KEY=VAL...] SERVICE [COMMAND] [ARGS...]</code>。</p>
<p>在指定服务上执行一个命令。</p>
<p>例如：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">docker-compose</span> run ubuntu <span class="token function">ping</span> docker.com</code></pre>

<p>将会启动一个 ubuntu 服务容器，并执行 <code>ping docker.com</code> 命令。</p>
<p>默认情况下，如果存在关联，则所有关联的服务将会自动被启动，除非这些服务已经在运行中。</p>
<p>该命令类似启动容器后运行指定的命令，相关卷、链接等等都将会按照配置自动创建。</p>
<p>两个不同点：</p>
<ul>
<li><p>给定命令将会覆盖原有的自动运行命令；</p>
</li>
<li><p>不会自动创建端口，以避免冲突。</p>
</li>
</ul>
<p>如果不希望自动启动关联的容器，可以使用 <code>--no-deps</code> 选项，例如</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">docker-compose</span> run --no-deps web python manage.py shell</code></pre>

<p>将不会启动 web 容器所关联的其它容器。</p>
<p>选项：</p>
<ul>
<li><p><code>-d</code> 后台运行容器。</p>
</li>
<li><p><code>--name NAME</code> 为容器指定一个名字。</p>
</li>
<li><p><code>--entrypoint CMD</code> 覆盖默认的容器启动指令。</p>
</li>
<li><p><code>-e KEY=VAL</code> 设置环境变量值，可多次使用选项来设置多个环境变量。</p>
</li>
<li><p><code>-u, --user=&quot;&quot;</code> 指定运行容器的用户名或者 uid。</p>
</li>
<li><p><code>--no-deps</code> 不自动启动关联的服务容器。</p>
</li>
<li><p><code>--rm</code> 运行命令后自动删除容器，<code>d</code> 模式下将忽略。</p>
</li>
<li><p><code>-p, --publish=[]</code> 映射容器端口到本地主机。</p>
</li>
<li><p><code>--service-ports</code> 配置服务端口并映射到本地主机。</p>
</li>
<li><p><code>-T</code> 不分配伪 tty，意味着依赖 tty 的指令将无法运行。</p>
</li>
</ul>
<h4 id="scale"><a href="#scale" class="headerlink" title="scale"></a><code>scale</code></h4><blockquote>
<p><strong>Deprecated in docker-compose v2 (use <code>compose up --scale</code> instead)</strong></p>
</blockquote>
<p>格式为 <code>docker-compose scale [options] [SERVICE=NUM...]</code>。</p>
<p>设置指定服务运行的容器个数。</p>
<p>通过 <code>service=num</code> 的参数来设置数量。例如：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">docker-compose</span> scale <span class="token assign-left variable">web</span><span class="token operator">=</span><span class="token number">3</span> <span class="token assign-left variable">db</span><span class="token operator">=</span><span class="token number">2</span></code></pre>

<p>将启动 3 个容器运行 web 服务，2 个容器运行 db 服务。</p>
<p>一般的，当指定数目多于该服务当前实际运行容器，将新创建并启动容器；反之，将停止容器。</p>
<p>选项：</p>
<ul>
<li><code>-t, --timeout TIMEOUT</code> 停止容器时候的超时（默认为 10 秒）。</li>
</ul>
<h4 id="start"><a href="#start" class="headerlink" title="start"></a><code>start</code></h4><p>格式为 <code>docker-compose start [SERVICE...]</code>。</p>
<p>启动已经存在的服务容器。</p>
<h4 id="stop"><a href="#stop" class="headerlink" title="stop"></a><code>stop</code></h4><p>格式为 <code>docker-compose stop [options] [SERVICE...]</code>。</p>
<p>停止已经处于运行状态的容器，但不删除它。通过 <code>docker-compose start</code> 可以再次启动这些容器。</p>
<p>选项：</p>
<ul>
<li><code>-t, --timeout TIMEOUT</code> 停止容器时候的超时（默认为 10 秒）。</li>
</ul>
<h4 id="top"><a href="#top" class="headerlink" title="top"></a><code>top</code></h4><p>查看各个服务容器内运行的进程。</p>
<h4 id="unpause"><a href="#unpause" class="headerlink" title="unpause"></a><code>unpause</code></h4><p>格式为 <code>docker-compose unpause [SERVICE...]</code>。</p>
<p>恢复处于暂停状态中的服务。</p>
<h4 id="up"><a href="#up" class="headerlink" title="up"></a><code>up</code></h4><p>格式为 <code>docker-compose up [options] [SERVICE...]</code>。</p>
<p>该命令十分强大，它将尝试自动完成包括构建镜像，（重新）创建服务，启动服务，并关联服务相关容器的一系列操作。</p>
<p>链接的服务都将会被自动启动，除非已经处于运行状态。</p>
<p>可以说，大部分时候都可以直接通过该命令来启动一个项目。</p>
<p>默认情况，<code>docker-compose up</code> 启动的容器都在前台，控制台将会同时打印所有容器的输出信息，可以很方便进行调试。</p>
<p>当通过 <code>Ctrl-C</code> 停止命令时，所有容器将会停止。</p>
<p>如果使用 <code>docker-compose up -d</code>，将会在后台启动并运行所有的容器。一般推荐生产环境下使用该选项。</p>
<p>默认情况，如果服务容器已经存在，<code>docker-compose up</code> 将会尝试停止容器，然后重新创建（保持使用 <code>volumes-from</code> 挂载的卷），以保证新启动的服务匹配 <code>docker-compose.yml</code> 文件的最新内容。如果用户不希望容器被停止并重新创建，可以使用 <code>docker-compose up --no-recreate</code>。这样将只会启动处于停止状态的容器，而忽略已经运行的服务。如果用户只想重新部署某个服务，可以使用 <code>docker-compose up --no-deps -d &lt;SERVICE_NAME&gt;</code> 来重新创建服务并后台停止旧服务，启动新服务，并不会影响到其所依赖的服务。</p>
<p>选项：</p>
<ul>
<li><p><code>-d</code> 在后台运行服务容器。</p>
</li>
<li><p><code>--no-color</code> 不使用颜色来区分不同的服务的控制台输出。</p>
</li>
<li><p><code>--no-deps</code> 不启动服务所链接的容器。</p>
</li>
<li><p><code>--force-recreate</code> 强制重新创建容器，不能与 <code>--no-recreate</code> 同时使用。</p>
</li>
<li><p><code>--no-recreate</code> 如果容器已经存在了，则不重新创建，不能与 <code>--force-recreate</code> 同时使用。</p>
</li>
<li><p><code>--no-build</code> 不自动构建缺失的服务镜像。</p>
</li>
<li><p><code>-t, --timeout TIMEOUT</code> 停止容器时候的超时（默认为 10 秒）。</p>
</li>
</ul>
<h4 id="version"><a href="#version" class="headerlink" title="version"></a><code>version</code></h4><p>格式为 <code>docker-compose version</code>。</p>
<p>打印版本信息。</p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul>
<li><a href="https://docs.docker.com/compose/reference/overview/">官方文档</a></li>
</ul>
<h2 id="Compose-模板文件"><a href="#Compose-模板文件" class="headerlink" title="Compose 模板文件"></a>Compose 模板文件</h2><p>模板文件是使用 <code>Compose</code> 的核心，涉及到的指令关键字也比较多。但大家不用担心，这里面大部分指令跟 <code>docker run</code> 相关参数的含义都是类似的。</p>
<p>默认的模板文件名称为 <code>docker-compose.yml</code>，格式为 YAML 格式。</p>
<pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">"3"</span>
<span class="token key atrule">services</span><span class="token punctuation">:</span>
  <span class="token key atrule">webapp</span><span class="token punctuation">:</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> examples/web
    <span class="token key atrule">ports</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token string">"80:80"</span>
    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token string">"/data"</span></code></pre>

<p>注意每个服务都必须通过 <code>image</code> 指令指定镜像或 <code>build</code> 指令（需要 Dockerfile）等来自动构建生成镜像。</p>
<p>如果使用 <code>build</code> 指令，在 <code>Dockerfile</code> 中设置的选项(例如：<code>CMD</code>, <code>EXPOSE</code>, <code>VOLUME</code>, <code>ENV</code> 等) 将会自动被获取，无需在 <code>docker-compose.yml</code> 中重复设置。</p>
<p>下面分别介绍各个指令的用法。</p>
<h3 id="build-1"><a href="#build-1" class="headerlink" title="build"></a><code>build</code></h3><p>指定 <code>Dockerfile</code> 所在文件夹的路径（可以是绝对路径，或者相对 docker-compose.yml 文件的路径）。 <code>Compose</code> 将会利用它自动构建这个镜像，然后使用这个镜像。</p>
<pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">'3'</span>
<span class="token key atrule">services</span><span class="token punctuation">:</span>
  <span class="token key atrule">webapp</span><span class="token punctuation">:</span>
    <span class="token key atrule">build</span><span class="token punctuation">:</span> ./dir</code></pre>

<p>你也可以使用 <code>context</code> 指令指定 <code>Dockerfile</code> 所在文件夹的路径。</p>
<p>使用 <code>dockerfile</code> 指令指定 <code>Dockerfile</code> 文件名。</p>
<p>使用 <code>arg</code> 指令指定构建镜像时的变量。</p>
<pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">'3'</span>
<span class="token key atrule">services</span><span class="token punctuation">:</span>
  <span class="token key atrule">webapp</span><span class="token punctuation">:</span>
    <span class="token key atrule">build</span><span class="token punctuation">:</span>
      <span class="token key atrule">context</span><span class="token punctuation">:</span> ./dir
      <span class="token key atrule">dockerfile</span><span class="token punctuation">:</span> Dockerfile<span class="token punctuation">-</span>alternate
      <span class="token key atrule">args</span><span class="token punctuation">:</span>
        <span class="token key atrule">buildno</span><span class="token punctuation">:</span> <span class="token number">1</span></code></pre>

<p>使用 <code>cache_from</code> 指定构建镜像的缓存</p>
<pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">build</span><span class="token punctuation">:</span>
  <span class="token key atrule">context</span><span class="token punctuation">:</span> .
  <span class="token key atrule">cache_from</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> alpine<span class="token punctuation">:</span>latest
    <span class="token punctuation">-</span> corp/web_app<span class="token punctuation">:</span><span class="token number">3.14</span></code></pre>

<h3 id="cap-add-cap-drop"><a href="#cap-add-cap-drop" class="headerlink" title="cap_add, cap_drop"></a><code>cap_add, cap_drop</code></h3><p>指定容器的内核能力（capacity）分配。</p>
<p>例如，让容器拥有所有能力可以指定为：</p>
<pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">cap_add</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> ALL</code></pre>

<p>去掉 NET_ADMIN 能力可以指定为：</p>
<pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">cap_drop</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> NET_ADMIN</code></pre>

<h3 id="command"><a href="#command" class="headerlink" title="command"></a><code>command</code></h3><p>覆盖容器启动后默认执行的命令。</p>
<pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">command</span><span class="token punctuation">:</span> echo "hello world"</code></pre>

<h3 id="configs"><a href="#configs" class="headerlink" title="configs"></a><code>configs</code></h3><p>仅用于 <code>Swarm mode</code>，详细内容请查看 <a href="../swarm_mode/"><code>Swarm mode</code></a> 一节。</p>
<h3 id="cgroup-parent"><a href="#cgroup-parent" class="headerlink" title="cgroup_parent"></a><code>cgroup_parent</code></h3><p>指定父 <code>cgroup</code> 组，意味着将继承该组的资源限制。</p>
<p>例如，创建了一个 cgroup 组名称为 <code>cgroups_1</code>。</p>
<pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">cgroup_parent</span><span class="token punctuation">:</span> cgroups_1</code></pre>

<h3 id="container-name"><a href="#container-name" class="headerlink" title="container_name"></a><code>container_name</code></h3><p>指定容器名称。默认将会使用 <code>项目名称_服务名称_序号</code> 这样的格式。</p>
<pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">container_name</span><span class="token punctuation">:</span> docker<span class="token punctuation">-</span>web<span class="token punctuation">-</span>container</code></pre>

<blockquote>
<p>注意: 指定容器名称后，该服务将无法进行扩展（scale），因为 Docker 不允许多个容器具有相同的名称。</p>
</blockquote>
<h3 id="deploy"><a href="#deploy" class="headerlink" title="deploy"></a><code>deploy</code></h3><p>仅用于 <code>Swarm mode</code>，详细内容请查看 <a href="../swarm_mode/"><code>Swarm mode</code></a> 一节</p>
<h3 id="devices"><a href="#devices" class="headerlink" title="devices"></a><code>devices</code></h3><p>指定设备映射关系。</p>
<pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">devices</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> <span class="token string">"/dev/ttyUSB1:/dev/ttyUSB0"</span></code></pre>

<h3 id="depends-on"><a href="#depends-on" class="headerlink" title="depends_on"></a><code>depends_on</code></h3><p>解决容器的依赖、启动先后的问题。以下例子中会先启动 <code>redis</code> <code>db</code> 再启动 <code>web</code></p>
<pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">'3'</span>
<span class="token key atrule">services</span><span class="token punctuation">:</span>
  <span class="token key atrule">web</span><span class="token punctuation">:</span>
    <span class="token key atrule">build</span><span class="token punctuation">:</span> .
    <span class="token key atrule">depends_on</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> db
      <span class="token punctuation">-</span> redis
  <span class="token key atrule">redis</span><span class="token punctuation">:</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> redis
  <span class="token key atrule">db</span><span class="token punctuation">:</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> postgres</code></pre>

<blockquote>
<p>注意：<code>web</code> 服务不会等待 <code>redis</code> <code>db</code> 「完全启动」之后才启动。</p>
</blockquote>
<h3 id="dns"><a href="#dns" class="headerlink" title="dns"></a><code>dns</code></h3><p>自定义 <code>DNS</code> 服务器。可以是一个值，也可以是一个列表。</p>
<pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">dns</span><span class="token punctuation">:</span> 8.8.8.8
<span class="token key atrule">dns</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> 8.8.8.8
  <span class="token punctuation">-</span> 114.114.114.114</code></pre>

<h3 id="dns-search"><a href="#dns-search" class="headerlink" title="dns_search"></a><code>dns_search</code></h3><p>配置 <code>DNS</code> 搜索域。可以是一个值，也可以是一个列表。</p>
<pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">dns_search</span><span class="token punctuation">:</span> example.com
<span class="token key atrule">dns_search</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> domain1.example.com
  <span class="token punctuation">-</span> domain2.example.com</code></pre>

<h3 id="tmpfs-1"><a href="#tmpfs-1" class="headerlink" title="tmpfs"></a><code>tmpfs</code></h3><p>挂载一个 tmpfs 文件系统到容器。</p>
<pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">tmpfs</span><span class="token punctuation">:</span> /run
<span class="token key atrule">tmpfs</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> /run
  <span class="token punctuation">-</span> /tmp</code></pre>

<h3 id="env-file"><a href="#env-file" class="headerlink" title="env_file"></a><code>env_file</code></h3><p>从文件中获取环境变量，可以为单独的文件路径或列表。</p>
<p>如果通过 <code>docker-compose -f FILE</code> 方式来指定 Compose 模板文件，则 <code>env_file</code> 中变量的路径会基于模板文件路径。</p>
<p>如果有变量名称与 <code>environment</code> 指令冲突，则按照惯例，以后者为准。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">env_file: .env
env_file:
  - ./common.env
  - ./apps/web.env
  - /opt/secrets.env</code></pre>

<p>环境变量文件中每一行必须符合格式，支持 <code>#</code> 开头的注释行。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># common.env: Set development environment</span>
<span class="token assign-left variable">PROG_ENV</span><span class="token operator">=</span>development</code></pre>

<h3 id="environment"><a href="#environment" class="headerlink" title="environment"></a><code>environment</code></h3><p>设置环境变量。你可以使用数组或字典两种格式。</p>
<p>只给定名称的变量会自动获取运行 Compose 主机上对应变量的值，可以用来防止泄露不必要的数据。</p>
<pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">environment</span><span class="token punctuation">:</span>
  <span class="token key atrule">RACK_ENV</span><span class="token punctuation">:</span> development
  <span class="token key atrule">SESSION_SECRET</span><span class="token punctuation">:</span>
<span class="token key atrule">environment</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> RACK_ENV=development
  <span class="token punctuation">-</span> SESSION_SECRET</code></pre>

<p>如果变量名称或者值中用到 <code>true|false，yes|no</code> 等表达 <a href="https://yaml.org/type/bool.html">布尔</a> 含义的词汇，最好放到引号里，避免 YAML 自动解析某些内容为对应的布尔语义。这些特定词汇，包括</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">y<span class="token operator">|</span>Y<span class="token operator">|</span><span class="token function">yes</span><span class="token operator">|</span>Yes<span class="token operator">|</span>YES<span class="token operator">|</span>n<span class="token operator">|</span>N<span class="token operator">|</span>no<span class="token operator">|</span>No<span class="token operator">|</span>NO<span class="token operator">|</span><span class="token boolean">true</span><span class="token operator">|</span>True<span class="token operator">|</span>TRUE<span class="token operator">|</span><span class="token boolean">false</span><span class="token operator">|</span>False<span class="token operator">|</span>FALSE<span class="token operator">|</span>on<span class="token operator">|</span>On<span class="token operator">|</span>ON<span class="token operator">|</span>off<span class="token operator">|</span>Off<span class="token operator">|</span>OFF</code></pre>

<h3 id="expose"><a href="#expose" class="headerlink" title="expose"></a><code>expose</code></h3><p>暴露端口，但不映射到宿主机，只被连接的服务访问。</p>
<p>仅可以指定内部端口为参数</p>
<pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">expose</span><span class="token punctuation">:</span>
 <span class="token punctuation">-</span> <span class="token string">"3000"</span>
 <span class="token punctuation">-</span> <span class="token string">"8000"</span></code></pre>

<h3 id="external-links"><a href="#external-links" class="headerlink" title="external_links"></a><code>external_links</code></h3><blockquote>
<p>注意：不建议使用该指令。</p>
</blockquote>
<p>链接到 <code>docker-compose.yml</code> 外部的容器，甚至并非 <code>Compose</code> 管理的外部容器。</p>
<pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">external_links</span><span class="token punctuation">:</span>
 <span class="token punctuation">-</span> redis_1
 <span class="token punctuation">-</span> project_db_1<span class="token punctuation">:</span>mysql
 <span class="token punctuation">-</span> project_db_1<span class="token punctuation">:</span>postgresql</code></pre>

<h3 id="extra-hosts"><a href="#extra-hosts" class="headerlink" title="extra_hosts"></a><code>extra_hosts</code></h3><p>类似 Docker 中的 <code>--add-host</code> 参数，指定额外的 host 名称映射信息。</p>
<pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">extra_hosts</span><span class="token punctuation">:</span>
 <span class="token punctuation">-</span> <span class="token string">"googledns:8.8.8.8"</span>
 <span class="token punctuation">-</span> <span class="token string">"dockerhub:52.1.157.61"</span></code></pre>

<p>会在启动后的服务容器中 <code>/etc/hosts</code> 文件中添加如下两条条目。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token number">8.8</span>.8.8 googledns
<span class="token number">52.1</span>.157.61 dockerhub</code></pre>

<h3 id="healthcheck"><a href="#healthcheck" class="headerlink" title="healthcheck"></a><code>healthcheck</code></h3><p>通过命令检查容器是否健康运行。</p>
<pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">healthcheck</span><span class="token punctuation">:</span>
  <span class="token key atrule">test</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"CMD"</span><span class="token punctuation">,</span> <span class="token string">"curl"</span><span class="token punctuation">,</span> <span class="token string">"-f"</span><span class="token punctuation">,</span> <span class="token string">"http://localhost"</span><span class="token punctuation">]</span>
  <span class="token key atrule">interval</span><span class="token punctuation">:</span> 1m30s
  <span class="token key atrule">timeout</span><span class="token punctuation">:</span> 10s
  <span class="token key atrule">retries</span><span class="token punctuation">:</span> <span class="token number">3</span></code></pre>

<h3 id="image"><a href="#image" class="headerlink" title="image"></a><code>image</code></h3><p>指定为镜像名称或镜像 ID。如果镜像在本地不存在，<code>Compose</code> 将会尝试拉取这个镜像。</p>
<pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">image</span><span class="token punctuation">:</span> ubuntu
<span class="token key atrule">image</span><span class="token punctuation">:</span> orchardup/postgresql
<span class="token key atrule">image</span><span class="token punctuation">:</span> a4bc65fd</code></pre>

<h3 id="labels"><a href="#labels" class="headerlink" title="labels"></a><code>labels</code></h3><p>为容器添加 Docker 元数据（metadata）信息。例如可以为容器添加辅助说明信息。</p>
<pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">labels</span><span class="token punctuation">:</span>
  <span class="token key atrule">com.startupteam.description</span><span class="token punctuation">:</span> <span class="token string">"webapp for a startup team"</span>
  <span class="token key atrule">com.startupteam.department</span><span class="token punctuation">:</span> <span class="token string">"devops department"</span>
  <span class="token key atrule">com.startupteam.release</span><span class="token punctuation">:</span> <span class="token string">"rc3 for v1.0"</span></code></pre>

<h3 id="links"><a href="#links" class="headerlink" title="links"></a><code>links</code></h3><blockquote>
<p>注意：不推荐使用该指令。</p>
</blockquote>
<h3 id="logging"><a href="#logging" class="headerlink" title="logging"></a><code>logging</code></h3><p>配置日志选项。</p>
<pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">logging</span><span class="token punctuation">:</span>
  <span class="token key atrule">driver</span><span class="token punctuation">:</span> syslog
  <span class="token key atrule">options</span><span class="token punctuation">:</span>
    <span class="token key atrule">syslog-address</span><span class="token punctuation">:</span> <span class="token string">"tcp://192.168.0.42:123"</span></code></pre>

<p>目前支持三种日志驱动类型。</p>
<pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">driver</span><span class="token punctuation">:</span> <span class="token string">"json-file"</span>
<span class="token key atrule">driver</span><span class="token punctuation">:</span> <span class="token string">"syslog"</span>
<span class="token key atrule">driver</span><span class="token punctuation">:</span> <span class="token string">"none"</span></code></pre>

<p><code>options</code> 配置日志驱动的相关参数。</p>
<pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">options</span><span class="token punctuation">:</span>
  <span class="token key atrule">max-size</span><span class="token punctuation">:</span> <span class="token string">"200k"</span>
  <span class="token key atrule">max-file</span><span class="token punctuation">:</span> <span class="token string">"10"</span></code></pre>

<h3 id="network-mode"><a href="#network-mode" class="headerlink" title="network_mode"></a><code>network_mode</code></h3><p>设置网络模式。使用和 <code>docker run</code> 的 <code>--network</code> 参数一样的值。</p>
<pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">network_mode</span><span class="token punctuation">:</span> <span class="token string">"bridge"</span>
<span class="token key atrule">network_mode</span><span class="token punctuation">:</span> <span class="token string">"host"</span>
<span class="token key atrule">network_mode</span><span class="token punctuation">:</span> <span class="token string">"none"</span>
<span class="token key atrule">network_mode</span><span class="token punctuation">:</span> <span class="token string">"service:[service name]"</span>
<span class="token key atrule">network_mode</span><span class="token punctuation">:</span> <span class="token string">"container:[container name/id]"</span></code></pre>

<h3 id="networks"><a href="#networks" class="headerlink" title="networks"></a><code>networks</code></h3><p>配置容器连接的网络。</p>
<pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">"3"</span>
<span class="token key atrule">services</span><span class="token punctuation">:</span>
  <span class="token key atrule">some-service</span><span class="token punctuation">:</span>
    <span class="token key atrule">networks</span><span class="token punctuation">:</span>
     <span class="token punctuation">-</span> some<span class="token punctuation">-</span>network
     <span class="token punctuation">-</span> other<span class="token punctuation">-</span>network
<span class="token key atrule">networks</span><span class="token punctuation">:</span>
  <span class="token key atrule">some-network</span><span class="token punctuation">:</span>
  other<span class="token punctuation">-</span>network<span class="token punctuation">:</span></code></pre>

<h3 id="pid"><a href="#pid" class="headerlink" title="pid"></a><code>pid</code></h3><p>跟主机系统共享进程命名空间。打开该选项的容器之间，以及容器和宿主机系统之间可以通过进程 ID 来相互访问和操作。</p>
<pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">pid</span><span class="token punctuation">:</span> <span class="token string">"host"</span></code></pre>

<h3 id="ports"><a href="#ports" class="headerlink" title="ports"></a><code>ports</code></h3><p>暴露端口信息。</p>
<p>使用宿主端口：容器端口 <code>(HOST:CONTAINER)</code> 格式，或者仅仅指定容器的端口（宿主将会随机选择端口）都可以。</p>
<pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">ports</span><span class="token punctuation">:</span>
 <span class="token punctuation">-</span> <span class="token string">"3000"</span>
 <span class="token punctuation">-</span> <span class="token string">"8000:8000"</span>
 <span class="token punctuation">-</span> <span class="token string">"49100:22"</span>
 <span class="token punctuation">-</span> <span class="token string">"127.0.0.1:8001:8001"</span></code></pre>

<p><em>注意：当使用 <code>HOST:CONTAINER</code> 格式来映射端口时，如果你使用的容器端口小于 60 并且没放到引号里，可能会得到错误结果，因为 <code>YAML</code> 会自动解析 <code>xx:yy</code> 这种数字格式为 60 进制。为避免出现这种问题，建议数字串都采用引号包括起来的字符串格式。</em></p>
<h3 id="secrets"><a href="#secrets" class="headerlink" title="secrets"></a><code>secrets</code></h3><p>存储敏感数据，例如 <code>mysql</code> 服务密码。</p>
<pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">"3.1"</span>
<span class="token key atrule">services</span><span class="token punctuation">:</span>
<span class="token key atrule">mysql</span><span class="token punctuation">:</span>
  <span class="token key atrule">image</span><span class="token punctuation">:</span> mysql
  <span class="token key atrule">environment</span><span class="token punctuation">:</span>
    <span class="token key atrule">MYSQL_ROOT_PASSWORD_FILE</span><span class="token punctuation">:</span> /run/secrets/db_root_password
  <span class="token key atrule">secrets</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> db_root_password
    <span class="token punctuation">-</span> my_other_secret
<span class="token key atrule">secrets</span><span class="token punctuation">:</span>
  <span class="token key atrule">my_secret</span><span class="token punctuation">:</span>
    <span class="token key atrule">file</span><span class="token punctuation">:</span> ./my_secret.txt
  <span class="token key atrule">my_other_secret</span><span class="token punctuation">:</span>
    <span class="token key atrule">external</span><span class="token punctuation">:</span> <span class="token boolean important">true</span></code></pre>

<h3 id="security-opt"><a href="#security-opt" class="headerlink" title="security_opt"></a><code>security_opt</code></h3><p>指定容器模板标签（label）机制的默认属性（用户、角色、类型、级别等）。例如配置标签的用户名和角色名。</p>
<pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">security_opt</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> label<span class="token punctuation">:</span>user<span class="token punctuation">:</span>USER
    <span class="token punctuation">-</span> label<span class="token punctuation">:</span>role<span class="token punctuation">:</span>ROLE</code></pre>

<h3 id="stop-signal"><a href="#stop-signal" class="headerlink" title="stop_signal"></a><code>stop_signal</code></h3><p>设置另一个信号来停止容器。在默认情况下使用的是 SIGTERM 停止容器。</p>
<pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">stop_signal</span><span class="token punctuation">:</span> SIGUSR1</code></pre>

<h3 id="sysctls"><a href="#sysctls" class="headerlink" title="sysctls"></a><code>sysctls</code></h3><p>配置容器内核参数。</p>
<pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">sysctls</span><span class="token punctuation">:</span>
  <span class="token key atrule">net.core.somaxconn</span><span class="token punctuation">:</span> <span class="token number">1024</span>
  <span class="token key atrule">net.ipv4.tcp_syncookies</span><span class="token punctuation">:</span> <span class="token number">0</span>
<span class="token key atrule">sysctls</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> net.core.somaxconn=1024
  <span class="token punctuation">-</span> net.ipv4.tcp_syncookies=0</code></pre>

<h3 id="ulimits"><a href="#ulimits" class="headerlink" title="ulimits"></a><code>ulimits</code></h3><p>指定容器的 ulimits 限制值。</p>
<p>例如，指定最大进程数为 65535，指定文件句柄数为 20000（软限制，应用可以随时修改，不能超过硬限制） 和 40000（系统硬限制，只能 root 用户提高）。</p>
<pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">ulimits</span><span class="token punctuation">:</span>
  <span class="token key atrule">nproc</span><span class="token punctuation">:</span> <span class="token number">65535</span>
  <span class="token key atrule">nofile</span><span class="token punctuation">:</span>
    <span class="token key atrule">soft</span><span class="token punctuation">:</span> <span class="token number">20000</span>
    <span class="token key atrule">hard</span><span class="token punctuation">:</span> <span class="token number">40000</span></code></pre>

<h3 id="volumes"><a href="#volumes" class="headerlink" title="volumes"></a><code>volumes</code></h3><p>数据卷所挂载路径设置。可以设置为宿主机路径(<code>HOST:CONTAINER</code>)或者数据卷名称(<code>VOLUME:CONTAINER</code>)，并且可以设置访问模式 （<code>HOST:CONTAINER:ro</code>）。</p>
<p>该指令中路径支持相对路径。</p>
<pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">volumes</span><span class="token punctuation">:</span>
 <span class="token punctuation">-</span> /var/lib/mysql
 <span class="token punctuation">-</span> cache/<span class="token punctuation">:</span>/tmp/cache
 <span class="token punctuation">-</span> ~/configs<span class="token punctuation">:</span>/etc/configs/<span class="token punctuation">:</span>ro</code></pre>

<p>如果路径为数据卷名称，必须在文件中配置数据卷。</p>
<pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">"3"</span>
<span class="token key atrule">services</span><span class="token punctuation">:</span>
  <span class="token key atrule">my_src</span><span class="token punctuation">:</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> mysql<span class="token punctuation">:</span><span class="token number">8.0</span>
    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> mysql_data<span class="token punctuation">:</span>/var/lib/mysql
<span class="token key atrule">volumes</span><span class="token punctuation">:</span>
  <span class="token key atrule">mysql_data</span><span class="token punctuation">:</span>  </code></pre>

<h3 id="其它指令"><a href="#其它指令" class="headerlink" title="其它指令"></a>其它指令</h3><p>此外，还有包括 <code>domainname, entrypoint, hostname, ipc, mac_address, privileged, read_only, shm_size, restart, stdin_open, tty, user, working_dir</code> 等指令，基本跟 <code>docker run</code> 中对应参数的功能一致。</p>
<p>指定服务容器启动后执行的入口文件。</p>
<pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">entrypoint</span><span class="token punctuation">:</span> /code/entrypoint.sh</code></pre>

<p>指定容器中运行应用的用户名。</p>
<pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">user</span><span class="token punctuation">:</span> nginx</code></pre>

<p>指定容器中工作目录。</p>
<pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">working_dir</span><span class="token punctuation">:</span> /code</code></pre>

<p>指定容器中搜索域名、主机名、mac 地址等。</p>
<pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">domainname</span><span class="token punctuation">:</span> your_website.com
<span class="token key atrule">hostname</span><span class="token punctuation">:</span> test
<span class="token key atrule">mac_address</span><span class="token punctuation">:</span> 08<span class="token punctuation">-</span>00<span class="token punctuation">-</span>27<span class="token punctuation">-</span>00<span class="token punctuation">-</span>0C<span class="token punctuation">-</span>0A</code></pre>

<p>允许容器中运行一些特权命令。</p>
<pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">privileged</span><span class="token punctuation">:</span> <span class="token boolean important">true</span></code></pre>

<p>指定容器退出后的重启策略为始终重启。该命令对保持服务始终运行十分有效，在生产环境中推荐配置为 <code>always</code> 或者 <code>unless-stopped</code>。</p>
<pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">restart</span><span class="token punctuation">:</span> always</code></pre>

<p>以只读模式挂载容器的 root 文件系统，意味着不能对容器内容进行修改。</p>
<pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">read_only</span><span class="token punctuation">:</span> <span class="token boolean important">true</span></code></pre>

<p>打开标准输入，可以接受外部输入。</p>
<pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">stdin_open</span><span class="token punctuation">:</span> <span class="token boolean important">true</span></code></pre>

<p>模拟一个伪终端。</p>
<pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">tty</span><span class="token punctuation">:</span> <span class="token boolean important">true</span></code></pre>

<h3 id="读取变量"><a href="#读取变量" class="headerlink" title="读取变量"></a>读取变量</h3><p>Compose 模板文件支持动态读取主机的系统环境变量和当前目录下的 <code>.env</code> 文件中的变量。</p>
<p>例如，下面的 Compose 文件将从运行它的环境中读取变量 <code>$&#123;MONGO_VERSION&#125;</code> 的值，并写入执行的指令中。</p>
<pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">"3"</span>
<span class="token key atrule">services</span><span class="token punctuation">:</span>
<span class="token key atrule">db</span><span class="token punctuation">:</span>
  <span class="token key atrule">image</span><span class="token punctuation">:</span> <span class="token string">"mongo:$&#123;MONGO_VERSION&#125;"</span></code></pre>

<p>如果执行 <code>MONGO_VERSION=3.2 docker-compose up</code> 则会启动一个 <code>mongo:3.2</code> 镜像的容器；如果执行 <code>MONGO_VERSION=2.8 docker-compose up</code> 则会启动一个 <code>mongo:2.8</code> 镜像的容器。</p>
<p>若当前目录存在 <code>.env</code> 文件，执行 <code>docker-compose</code> 命令时将从该文件中读取变量。</p>
<p>在当前目录新建 <code>.env</code> 文件并写入以下内容。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 支持 # 号注释</span>
<span class="token assign-left variable">MONGO_VERSION</span><span class="token operator">=</span><span class="token number">3.6</span></code></pre>

<p>执行 <code>docker-compose up</code> 则会启动一个 <code>mongo:3.6</code> 镜像的容器。</p>
<h3 id="参考资料-1"><a href="#参考资料-1" class="headerlink" title="参考资料"></a>参考资料</h3><ul>
<li><a href="https://docs.docker.com/compose/compose-file/">官方文档</a></li>
<li><a href="https://github.com/docker/awesome-compose">awesome-compose</a></li>
</ul>
<h2 id="使用-Django"><a href="#使用-Django" class="headerlink" title="使用 Django"></a>使用 Django</h2><blockquote>
<p>本小节内容适合 <code>Python</code> 开发人员阅读。</p>
</blockquote>
<p>我们现在将使用 <code>Docker Compose</code> 配置并运行一个 <code>Django/PostgreSQL</code> 应用。</p>
<p>在一切工作开始前，需要先编辑好三个必要的文件。</p>
<p>第一步，因为应用将要运行在一个满足所有环境依赖的 Docker 容器里面，那么我们可以通过编辑 <code>Dockerfile</code> 文件来指定 Docker 容器要安装内容。内容如下：</p>
<pre class="language-docker" data-language="docker"><code class="language-docker"><span class="token instruction"><span class="token keyword">FROM</span> python:3</span>
<span class="token instruction"><span class="token keyword">ENV</span> PYTHONUNBUFFERED 1</span>
<span class="token instruction"><span class="token keyword">RUN</span> mkdir /code</span>
<span class="token instruction"><span class="token keyword">WORKDIR</span> /code</span>
<span class="token instruction"><span class="token keyword">COPY</span> requirements.txt /code/</span>
<span class="token instruction"><span class="token keyword">RUN</span> pip install -r requirements.txt</span>
<span class="token instruction"><span class="token keyword">COPY</span> . /code/</span></code></pre>

<p>以上内容指定应用将使用安装了 Python 以及必要依赖包的镜像。更多关于如何编写 <code>Dockerfile</code> 文件的信息可以查看 <a href="../image/dockerfile/README.md"> Dockerfile 使用</a>。</p>
<p>第二步，在 <code>requirements.txt</code> 文件里面写明需要安装的具体依赖包名。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">Django<span class="token operator">>=</span><span class="token number">2.0</span>,<span class="token operator">&lt;</span><span class="token number">3.0</span>
psycopg<span class="token operator"><span class="token file-descriptor important">2</span>></span><span class="token operator">=</span><span class="token number">2.7</span>,<span class="token operator">&lt;</span><span class="token number">3.0</span></code></pre>

<p>第三步，<code>docker-compose.yml</code> 文件将把所有的东西关联起来。它描述了应用的构成（一个 web 服务和一个数据库）、使用的 Docker 镜像、镜像之间的连接、挂载到容器的卷，以及服务开放的端口。</p>
<pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">"3"</span>
<span class="token key atrule">services</span><span class="token punctuation">:</span>
  <span class="token key atrule">db</span><span class="token punctuation">:</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> postgres
    <span class="token key atrule">environment</span><span class="token punctuation">:</span>
      <span class="token key atrule">POSTGRES_PASSWORD</span><span class="token punctuation">:</span> <span class="token string">'postgres'</span>
  <span class="token key atrule">web</span><span class="token punctuation">:</span>
    <span class="token key atrule">build</span><span class="token punctuation">:</span> .
    <span class="token key atrule">command</span><span class="token punctuation">:</span> python manage.py runserver 0.0.0.0<span class="token punctuation">:</span><span class="token number">8000</span>
    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> .<span class="token punctuation">:</span>/code
    <span class="token key atrule">ports</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token string">"8000:8000"</span></code></pre>

<p>查看 <a href="compose_file.md"><code>docker-compose.yml</code> 章节</a> 了解更多详细的工作机制。</p>
<p>现在我们就可以使用 <code>docker-compose run</code> 命令启动一个 <code>Django</code> 应用了。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">docker-compose</span> run web django-admin startproject django_example <span class="token builtin class-name">.</span></code></pre>

<p>由于 web 服务所使用的镜像并不存在，所以 Compose 会首先使用 <code>Dockerfile</code> 为 web 服务构建一个镜像，接着使用这个镜像在容器里运行 <code>django-admin startproject django_example</code> 指令。</p>
<p>这将在当前目录生成一个 <code>Django</code> 应用。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">ls</span>
Dockerfile       docker-compose.yml          django_example       manage.py       requirements.txt</code></pre>

<p>如果你的系统是 Linux,记得更改文件权限。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">chown</span> -R <span class="token environment constant">$USER</span><span class="token builtin class-name">:</span><span class="token environment constant">$USER</span> <span class="token builtin class-name">.</span></code></pre>

<p>首先，我们要为应用设置好数据库的连接信息。用以下内容替换 <code>django_example/settings.py</code> 文件中 <code>DATABASES = ...</code> 定义的节点内容。</p>
<pre class="language-python" data-language="python"><code class="language-python">DATABASES <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    <span class="token string">'default'</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>
        <span class="token string">'ENGINE'</span><span class="token punctuation">:</span> <span class="token string">'django.db.backends.postgresql'</span><span class="token punctuation">,</span>
        <span class="token string">'NAME'</span><span class="token punctuation">:</span> <span class="token string">'postgres'</span><span class="token punctuation">,</span>
        <span class="token string">'USER'</span><span class="token punctuation">:</span> <span class="token string">'postgres'</span><span class="token punctuation">,</span>
        <span class="token string">'HOST'</span><span class="token punctuation">:</span> <span class="token string">'db'</span><span class="token punctuation">,</span>
        <span class="token string">'PORT'</span><span class="token punctuation">:</span> <span class="token number">5432</span><span class="token punctuation">,</span>
        <span class="token string">'PASSWORD'</span><span class="token punctuation">:</span> <span class="token string">'postgres'</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>这些信息是在 <a href="https://hub.docker.com/_/postgres/">postgres</a> 镜像固定设置好的。然后，运行 <code>docker-compose up</code> ：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">docker-compose</span> up
django_db_1 is up-to-date
Creating django_web_1 <span class="token punctuation">..</span>.
Creating django_web_1 <span class="token punctuation">..</span>. <span class="token keyword">done</span>
Attaching to django_db_1, django_web_1
db_1   <span class="token operator">|</span> The files belonging to this database system will be owned by user <span class="token string">"postgres"</span><span class="token builtin class-name">.</span>
db_1   <span class="token operator">|</span> This user must also own the server process.
db_1   <span class="token operator">|</span>
db_1   <span class="token operator">|</span> The database cluster will be initialized with locale <span class="token string">"en_US.utf8"</span><span class="token builtin class-name">.</span>
db_1   <span class="token operator">|</span> The default database encoding has accordingly been <span class="token builtin class-name">set</span> to <span class="token string">"UTF8"</span><span class="token builtin class-name">.</span>
db_1   <span class="token operator">|</span> The default text search configuration will be <span class="token builtin class-name">set</span> to <span class="token string">"english"</span><span class="token builtin class-name">.</span>
web_1  <span class="token operator">|</span> Performing system checks<span class="token punctuation">..</span>.
web_1  <span class="token operator">|</span>
web_1  <span class="token operator">|</span> System check identified no issues <span class="token punctuation">(</span><span class="token number">0</span> silenced<span class="token punctuation">)</span>.
web_1  <span class="token operator">|</span>
web_1  <span class="token operator">|</span> November <span class="token number">23</span>, <span class="token number">2017</span> - 06:21:19
web_1  <span class="token operator">|</span> Django version <span class="token number">1.11</span>.7, using settings <span class="token string">'django_example.settings'</span>
web_1  <span class="token operator">|</span> Starting development server at http://0.0.0.0:8000/
web_1  <span class="token operator">|</span> Quit the server with CONTROL-C.</code></pre>

<p>这个 <code>Django</code> 应用已经开始在你的 Docker 守护进程里监听着 <code>8000</code> 端口了。打开 <code>127.0.0.1:8000</code> 即可看到 <code>Django</code> 欢迎页面。</p>
<p>你还可以在 Docker 上运行其它的管理命令，例如对于同步数据库结构这种事，在运行完 <code>docker-compose up</code> 后，在另外一个终端进入文件夹运行以下命令即可：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">docker-compose</span> run web python manage.py syncdb</code></pre>

<h2 id="使用-Rails"><a href="#使用-Rails" class="headerlink" title="使用 Rails"></a>使用 Rails</h2><blockquote>
<p>本小节内容适合 <code>Ruby</code> 开发人员阅读。</p>
</blockquote>
<p>我们现在将使用 <code>Compose</code> 配置并运行一个 <code>Rails/PostgreSQL</code> 应用。</p>
<p>在一切工作开始前，需要先设置好三个必要的文件。</p>
<p>首先，因为应用将要运行在一个满足所有环境依赖的 Docker 容器里面，那么我们可以通过编辑 <code>Dockerfile</code> 文件来指定 Docker 容器要安装内容。内容如下：</p>
<pre class="language-docker" data-language="docker"><code class="language-docker"><span class="token instruction"><span class="token keyword">FROM</span> ruby</span>
<span class="token instruction"><span class="token keyword">RUN</span> apt-get update -qq &amp;&amp; apt-get install -y build-essential libpq-dev</span>
<span class="token instruction"><span class="token keyword">RUN</span> mkdir /myapp</span>
<span class="token instruction"><span class="token keyword">WORKDIR</span> /myapp</span>
<span class="token instruction"><span class="token keyword">ADD</span> Gemfile /myapp/Gemfile</span>
<span class="token instruction"><span class="token keyword">RUN</span> bundle install</span>
<span class="token instruction"><span class="token keyword">ADD</span> . /myapp</span></code></pre>

<p>以上内容指定应用将使用安装了 Ruby、Bundler 以及其依赖件的镜像。更多关于如何编写 Dockerfile 文件的信息可以查看 <a href="../image/dockerfile/README.md">Dockerfile 使用</a>。</p>
<p>下一步，我们需要一个引导加载 Rails 的文件 <code>Gemfile</code> 。 等一会儿它还会被 <code>rails new</code> 命令覆盖重写。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">source</span> <span class="token string">'https://rubygems.org'</span>
gem <span class="token string">'rails'</span>, <span class="token string">'4.0.2'</span></code></pre>

<p>最后，<code>docker-compose.yml</code> 文件才是最神奇的地方。 <code>docker-compose.yml</code> 文件将把所有的东西关联起来。它描述了应用的构成（一个 web 服务和一个数据库）、每个镜像的来源（数据库运行在使用预定义的 PostgreSQL 镜像，web 应用侧将从本地目录创建）、镜像之间的连接，以及服务开放的端口。</p>
<pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">"3"</span>
<span class="token key atrule">services</span><span class="token punctuation">:</span>
  <span class="token key atrule">db</span><span class="token punctuation">:</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> postgres
    <span class="token key atrule">ports</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token string">"5432"</span>
  <span class="token key atrule">web</span><span class="token punctuation">:</span>
    <span class="token key atrule">build</span><span class="token punctuation">:</span> .
    <span class="token key atrule">command</span><span class="token punctuation">:</span> bundle exec rackup <span class="token punctuation">-</span>p 3000
    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> .<span class="token punctuation">:</span>/myapp
    <span class="token key atrule">ports</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token string">"3000:3000"</span></code></pre>

<p>所有文件就绪后，我们就可以通过使用 <code>docker-compose run</code> 命令生成应用的骨架了。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">docker-compose</span> run web rails new <span class="token builtin class-name">.</span> --force --database<span class="token operator">=</span>postgresql --skip-bundle</code></pre>

<p><code>Compose</code> 会先使用 <code>Dockerfile</code> 为 web 服务创建一个镜像，接着使用这个镜像在容器里运行 <code>rails new </code> 和它之后的命令。一旦这个命令运行完后，应该就可以看一个崭新的应用已经生成了。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">ls</span>
Dockerfile   app          docker-compose.yml      tmp
Gemfile      bin          lib          vendor
Gemfile.lock condocker-compose       log
README.rdoc  condocker-compose.ru    public
Rakefile     db           <span class="token builtin class-name">test</span></code></pre>

<p>在新的 <code>Gemfile</code> 文件去掉加载 <code>therubyracer</code> 的行的注释，这样我们便可以使用 Javascript 运行环境：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">gem <span class="token string">'therubyracer'</span>, platforms: :ruby</code></pre>

<p>现在我们已经有一个新的 <code>Gemfile</code> 文件，需要再重新创建镜像。（这个会步骤会改变 Dockerfile 文件本身，所以需要重建一次）。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">docker-compose</span> build</code></pre>

<p>应用现在就可以启动了，但配置还未完成。Rails 默认读取的数据库目标是 <code>localhost</code> ，我们需要手动指定容器的 <code>db</code> 。同样的，还需要把用户名修改成和 postgres 镜像预定的一致。<br>打开最新生成的 <code>database.yml</code> 文件。用以下内容替换：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">development: <span class="token operator">&amp;</span>default
  adapter: postgresql
  encoding: unicode
  database: postgres
  pool: <span class="token number">5</span>
  username: postgres
  password:
  host: db
test:
  <span class="token operator">&lt;&lt;</span>: *default
  database: myapp_test</code></pre>

<p>现在就可以启动应用了。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">docker-compose</span> up</code></pre>

<p>如果一切正常，你应该可以看到 PostgreSQL 的输出，几秒后可以看到这样的重复信息：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">myapp_web_1 <span class="token operator">|</span> <span class="token punctuation">[</span><span class="token number">2014</span>-01-17 <span class="token number">17</span>:16:29<span class="token punctuation">]</span> INFO  WEBrick <span class="token number">1.3</span>.1
myapp_web_1 <span class="token operator">|</span> <span class="token punctuation">[</span><span class="token number">2014</span>-01-17 <span class="token number">17</span>:16:29<span class="token punctuation">]</span> INFO  ruby <span class="token number">2.0</span>.0 <span class="token punctuation">(</span><span class="token number">2013</span>-11-22<span class="token punctuation">)</span> <span class="token punctuation">[</span>x86_64-linux-gnu<span class="token punctuation">]</span>
myapp_web_1 <span class="token operator">|</span> <span class="token punctuation">[</span><span class="token number">2014</span>-01-17 <span class="token number">17</span>:16:29<span class="token punctuation">]</span> INFO  WEBrick::HTTPServer<span class="token comment">#start: pid=1 port=3000</span></code></pre>

<p>最后， 我们需要做的是创建数据库，打开另一个终端，运行：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">docker-compose</span> run web rake db:create</code></pre>

<p>这个 web 应用已经开始在你的 docker 守护进程里面监听着 3000 端口了。</p>
<h2 id="使用-WordPress"><a href="#使用-WordPress" class="headerlink" title="使用 WordPress"></a>使用 WordPress</h2><blockquote>
<p>本小节内容适合 <code>PHP</code> 开发人员阅读。</p>
</blockquote>
<p><code>Compose</code> 可以很便捷的让 <code>Wordpress</code> 运行在一个独立的环境中。</p>
<h3 id="创建空文件夹"><a href="#创建空文件夹" class="headerlink" title="创建空文件夹"></a>创建空文件夹</h3><p>假设新建一个名为 <code>wordpress</code> 的文件夹，然后进入这个文件夹。</p>
<h3 id="创建-docker-compose-yml-文件"><a href="#创建-docker-compose-yml-文件" class="headerlink" title="创建 docker-compose.yml 文件"></a>创建 <code>docker-compose.yml</code> 文件</h3><p><a href="https://github.com/yeasy/blob/master/compose/demo/wordpress/docker-compose.yml"><code>docker-compose.yml</code></a> 文件将开启一个 <code>wordpress</code> 服务和一个独立的 <code>MySQL</code> 实例：</p>
<pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">"3"</span>
<span class="token key atrule">services</span><span class="token punctuation">:</span>
   <span class="token key atrule">db</span><span class="token punctuation">:</span>
     <span class="token key atrule">image</span><span class="token punctuation">:</span> mysql<span class="token punctuation">:</span><span class="token number">8.0</span>
     <span class="token key atrule">command</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token punctuation">-</span><span class="token punctuation">-</span>default_authentication_plugin=mysql_native_password
      <span class="token punctuation">-</span> <span class="token punctuation">-</span><span class="token punctuation">-</span>character<span class="token punctuation">-</span>set<span class="token punctuation">-</span>server=utf8mb4
      <span class="token punctuation">-</span> <span class="token punctuation">-</span><span class="token punctuation">-</span>collation<span class="token punctuation">-</span>server=utf8mb4_unicode_ci     
     <span class="token key atrule">volumes</span><span class="token punctuation">:</span>
       <span class="token punctuation">-</span> db_data<span class="token punctuation">:</span>/var/lib/mysql
     <span class="token key atrule">restart</span><span class="token punctuation">:</span> always
     <span class="token key atrule">environment</span><span class="token punctuation">:</span>
       <span class="token key atrule">MYSQL_ROOT_PASSWORD</span><span class="token punctuation">:</span> somewordpress
       <span class="token key atrule">MYSQL_DATABASE</span><span class="token punctuation">:</span> wordpress
       <span class="token key atrule">MYSQL_USER</span><span class="token punctuation">:</span> wordpress
       <span class="token key atrule">MYSQL_PASSWORD</span><span class="token punctuation">:</span> wordpress
   <span class="token key atrule">wordpress</span><span class="token punctuation">:</span>
     <span class="token key atrule">depends_on</span><span class="token punctuation">:</span>
       <span class="token punctuation">-</span> db
     <span class="token key atrule">image</span><span class="token punctuation">:</span> wordpress<span class="token punctuation">:</span>latest
     <span class="token key atrule">ports</span><span class="token punctuation">:</span>
       <span class="token punctuation">-</span> <span class="token string">"8000:80"</span>
     <span class="token key atrule">restart</span><span class="token punctuation">:</span> always
     <span class="token key atrule">environment</span><span class="token punctuation">:</span>
       <span class="token key atrule">WORDPRESS_DB_HOST</span><span class="token punctuation">:</span> db<span class="token punctuation">:</span><span class="token number">3306</span>
       <span class="token key atrule">WORDPRESS_DB_USER</span><span class="token punctuation">:</span> wordpress
       <span class="token key atrule">WORDPRESS_DB_PASSWORD</span><span class="token punctuation">:</span> wordpress
<span class="token key atrule">volumes</span><span class="token punctuation">:</span>
  db_data<span class="token punctuation">:</span></code></pre>

<h3 id="构建并运行项目"><a href="#构建并运行项目" class="headerlink" title="构建并运行项目"></a>构建并运行项目</h3><p>运行 <code>docker-compose up -d</code> Compose 就会拉取镜像再创建我们所需要的镜像，然后启动 <code>wordpress</code> 和数据库容器。 接着浏览器访问 <code>127.0.0.1:8000</code> 端口就能看到 <code>WordPress</code> 安装界面了。</p>
<h2 id="使用-compose-搭建-LNMP-环境"><a href="#使用-compose-搭建-LNMP-环境" class="headerlink" title="使用 compose 搭建 LNMP 环境"></a>使用 compose 搭建 LNMP 环境</h2><p>本项目的维护者 <a href="https://github.com/khs1994">khs1994</a> 的开源项目 <a href="https://github.com/khs1994-docker/lnmp">khs1994-docker&#x2F;lnmp</a> 使用 Docker Compose 搭建了一套 LNMP 环境，各位开发者可以参考该项目在 Docker 或 Kubernetes 中运行 LNMP。</p>
<h1 id="Swarm-mode"><a href="#Swarm-mode" class="headerlink" title="Swarm mode"></a>Swarm mode</h1><p>Docker 1.12 Swarm mode 已经内嵌入 Docker 引擎，成为了 docker 子命令 docker swarm。请注意与旧的 Docker Swarm 区分开来。</p>
<p>Swarm mode 内置 kv 存储功能，提供了众多的新特性，比如：具有容错能力的去中心化设计、内置服务发现、负载均衡、路由网格、动态伸缩、滚动更新、安全传输等。使得 Docker 原生的 Swarm 集群具备与 Mesos、Kubernetes 竞争的实力。</p>
<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p><code>Swarm</code> 是使用 <a href="https://github.com/docker/swarmkit/"><code>SwarmKit</code></a> 构建的 Docker 引擎内置（原生）的集群管理和编排工具。</p>
<p> 使用 <code>Swarm</code> 集群之前需要了解以下几个概念。</p>
<h3 id="节点"><a href="#节点" class="headerlink" title="节点"></a>节点</h3><p>运行 Docker 的主机可以主动初始化一个 <code>Swarm</code> 集群或者加入一个已存在的 <code>Swarm</code> 集群，这样这个运行 Docker 的主机就成为一个 <code>Swarm</code> 集群的节点 (<code>node</code>) 。</p>
<p>节点分为 <em><strong>管理 (<code>manager</code>) 节点</strong></em> 和 <em><strong>工作 (<code>worker</code>) 节点</strong></em>。</p>
<p>管理节点用于 <code>Swarm</code> 集群的管理，<code>docker swarm</code> 命令基本只能在管理节点执行（节点退出集群命令 <code>docker swarm leave</code> 可以在工作节点执行）。一个 <code>Swarm</code> 集群可以有多个管理节点，但只有一个管理节点可以成为 <code>leader</code>，<code>leader</code> 通过 <code>raft</code> 协议实现。</p>
<p>工作节点是任务执行节点，管理节点将服务 (<code>service</code>) 下发至工作节点执行。管理节点默认也作为工作节点。你也可以通过配置让服务只运行在管理节点。</p>
<p>来自 Docker 官网的这张图片形象的展示了集群中管理节点与工作节点的关系。</p>
<p><img src="/2022/docker_practice/swarm-diagram.png"></p>
<h3 id="服务和任务"><a href="#服务和任务" class="headerlink" title="服务和任务"></a>服务和任务</h3><p><em><strong>任务 （<code>Task</code>）</strong></em>是 <code>Swarm</code> 中的最小的调度单位，目前来说就是一个单一的容器。</p>
<p><em><strong>服务 （<code>Services</code>）</strong></em> 是指一组任务的集合，服务定义了任务的属性。服务有2种模式：</p>
<ul>
<li><p><code>replicated services</code> 按照一定规则在各个工作节点上运行指定个数的任务。</p>
</li>
<li><p><code>global services</code> 每个工作节点上运行一个任务</p>
</li>
</ul>
<p>2种模式通过 <code>docker service create</code> 的 <code>--mode</code> 参数指定。</p>
<p>来自 Docker 官网的这张图片形象的展示了容器、任务、服务的关系。</p>
<p><img src="/2022/docker_practice/services-diagram-16509012472675.png"></p>
<h2 id="创建-Swarm-集群"><a href="#创建-Swarm-集群" class="headerlink" title="创建 Swarm 集群"></a>创建 Swarm 集群</h2><p>阅读 <a href="overview.md">基本概念</a> 一节我们知道 <code>Swarm</code> 集群由 <strong>管理节点</strong> 和 <strong>工作节点</strong> 组成。本节我们来创建一个包含一个管理节点和两个工作节点的最小 <code>Swarm</code> 集群。</p>
<h3 id="初始化集群"><a href="#初始化集群" class="headerlink" title="初始化集群"></a>初始化集群</h3><p>在已经安装好 Docker 的主机上执行如下命令：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">docker</span> swarm init --advertise-addr <span class="token number">192.168</span>.99.100
Swarm initialized: current <span class="token function">node</span> <span class="token punctuation">(</span>dxn1zf6l61qsb1josjja83ngz<span class="token punctuation">)</span> is now a manager.
To <span class="token function">add</span> a worker to this swarm, run the following command:
    <span class="token function">docker</span> swarm <span class="token function">join</span> <span class="token punctuation">\</span>
    --token SWMTKN-1-49nj1cmql0jkz5s954yi3oex3nedyz0fb0xx14ie39trti4wxv-8vxv8rssmk743ojnwacrr2e7c <span class="token punctuation">\</span>
    <span class="token number">192.168</span>.99.100:2377
To <span class="token function">add</span> a manager to this swarm, run <span class="token string">'docker swarm join-token manager'</span> and follow the instructions.</code></pre>

<p>如果你的 Docker 主机有多个网卡，拥有多个 IP，必须使用 <code>--advertise-addr</code> 指定 IP。</p>
<blockquote>
<p>执行 <code>docker swarm init</code> 命令的节点自动成为管理节点。</p>
</blockquote>
<h3 id="增加工作节点"><a href="#增加工作节点" class="headerlink" title="增加工作节点"></a>增加工作节点</h3><p>上一步我们初始化了一个 <code>Swarm</code> 集群，拥有了一个管理节点，下面我们继续在两个 Docker 主机中分别执行如下命令，创建工作节点并加入到集群中。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">docker</span> swarm <span class="token function">join</span> <span class="token punctuation">\</span>
    --token SWMTKN-1-49nj1cmql0jkz5s954yi3oex3nedyz0fb0xx14ie39trti4wxv-8vxv8rssmk743ojnwacrr2e7c <span class="token punctuation">\</span>
    <span class="token number">192.168</span>.99.100:2377
This <span class="token function">node</span> joined a swarm as a worker.</code></pre>

<h3 id="查看集群"><a href="#查看集群" class="headerlink" title="查看集群"></a>查看集群</h3><p>经过上边的两步，我们已经拥有了一个最小的 <code>Swarm</code> 集群，包含一个管理节点和两个工作节点。</p>
<p>在管理节点使用 <code>docker node ls</code> 查看集群。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">docker</span> <span class="token function">node</span> <span class="token function">ls</span>
ID                           <span class="token environment constant">HOSTNAME</span>  STATUS  AVAILABILITY  MANAGER STATUS
03g1y59jwfg7cf99w4lt0f662    worker2   Ready   Active
9j68exjopxe7wfl6yuxml7a7j    worker1   Ready   Active
dxn1zf6l61qsb1josjja83ngz *  manager   Ready   Active        Leader</code></pre>

<h2 id="部署服务"><a href="#部署服务" class="headerlink" title="部署服务"></a>部署服务</h2><p>我们使用 <code>docker service</code> 命令来管理 <code>Swarm</code> 集群中的服务，该命令只能在管理节点运行。</p>
<h3 id="新建服务"><a href="#新建服务" class="headerlink" title="新建服务"></a>新建服务</h3><p>现在我们在上一节创建的 <code>Swarm</code> 集群中运行一个名为 <code>nginx</code> 服务。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">docker</span> <span class="token function">service</span> create --replicas <span class="token number">3</span> -p <span class="token number">80</span>:80 --name nginx nginx:1.13.7-alpine</code></pre>

<p>现在我们使用浏览器，输入任意节点 IP ，即可看到 nginx 默认页面。</p>
<h3 id="查看服务"><a href="#查看服务" class="headerlink" title="查看服务"></a>查看服务</h3><p>使用 <code>docker service ls</code> 来查看当前 <code>Swarm</code> 集群运行的服务。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">docker</span> <span class="token function">service</span> <span class="token function">ls</span>
ID                  NAME                MODE                REPLICAS            IMAGE                 PORTS
kc57xffvhul5        nginx               replicated          <span class="token number">3</span>/3                 nginx:1.13.7-alpine   *:80-<span class="token operator">></span><span class="token number">80</span>/tcp</code></pre>

<p>使用 <code>docker service ps</code> 来查看某个服务的详情。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">docker</span> <span class="token function">service</span> <span class="token function">ps</span> nginx
ID                  NAME                IMAGE                 NODE                DESIRED STATE       CURRENT STATE                ERROR               PORTS
pjfzd39buzlt        nginx.1             nginx:1.13.7-alpine   swarm2              Running             Running about a minute ago
hy9eeivdxlaa        nginx.2             nginx:1.13.7-alpine   swarm1              Running             Running about a minute ago
36wmpiv7gmfo        nginx.3             nginx:1.13.7-alpine   swarm3              Running             Running about a minute ago</code></pre>

<p>使用 <code>docker service logs</code> 来查看某个服务的日志。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">docker</span> <span class="token function">service</span> logs nginx
nginx.3.36wmpiv7gmfo@swarm3    <span class="token operator">|</span> <span class="token number">10.255</span>.0.4 - - <span class="token punctuation">[</span><span class="token number">25</span>/Nov/2017:02:10:30 +0000<span class="token punctuation">]</span> <span class="token string">"GET / HTTP/1.1"</span> <span class="token number">200</span> <span class="token number">612</span> <span class="token string">"-"</span> <span class="token string">"Mozilla/5.0 (Macintosh; Intel Mac OS X 10.13; rv:58.0) Gecko/20100101 Firefox/58.0"</span> <span class="token string">"-"</span>
nginx.3.36wmpiv7gmfo@swarm3    <span class="token operator">|</span> <span class="token number">10.255</span>.0.4 - - <span class="token punctuation">[</span><span class="token number">25</span>/Nov/2017:02:10:30 +0000<span class="token punctuation">]</span> <span class="token string">"GET /favicon.ico HTTP/1.1"</span> <span class="token number">404</span> <span class="token number">169</span> <span class="token string">"-"</span> <span class="token string">"Mozilla/5.0 (Macintosh; Intel Mac OS X 10.13; rv:58.0) Gecko/20100101 Firefox/58.0"</span> <span class="token string">"-"</span>
nginx.3.36wmpiv7gmfo@swarm3    <span class="token operator">|</span> <span class="token number">2017</span>/11/25 02:10:30 <span class="token punctuation">[</span>error<span class="token punctuation">]</span> <span class="token number">5</span><span class="token comment">#5: *1 open() "/usr/share/nginx/html/favicon.ico" failed (2: No such file or directory), client: 10.255.0.4, server: localhost, request: "GET /favicon.ico HTTP/1.1", host: "192.168.99.102"</span>
nginx.1.pjfzd39buzlt@swarm2    <span class="token operator">|</span> <span class="token number">10.255</span>.0.2 - - <span class="token punctuation">[</span><span class="token number">25</span>/Nov/2017:02:10:26 +0000<span class="token punctuation">]</span> <span class="token string">"GET / HTTP/1.1"</span> <span class="token number">200</span> <span class="token number">612</span> <span class="token string">"-"</span> <span class="token string">"Mozilla/5.0 (Macintosh; Intel Mac OS X 10.13; rv:58.0) Gecko/20100101 Firefox/58.0"</span> <span class="token string">"-"</span>
nginx.1.pjfzd39buzlt@swarm2    <span class="token operator">|</span> <span class="token number">10.255</span>.0.2 - - <span class="token punctuation">[</span><span class="token number">25</span>/Nov/2017:02:10:27 +0000<span class="token punctuation">]</span> <span class="token string">"GET /favicon.ico HTTP/1.1"</span> <span class="token number">404</span> <span class="token number">169</span> <span class="token string">"-"</span> <span class="token string">"Mozilla/5.0 (Macintosh; Intel Mac OS X 10.13; rv:58.0) Gecko/20100101 Firefox/58.0"</span> <span class="token string">"-"</span>
nginx.1.pjfzd39buzlt@swarm2    <span class="token operator">|</span> <span class="token number">2017</span>/11/25 02:10:27 <span class="token punctuation">[</span>error<span class="token punctuation">]</span> <span class="token number">5</span><span class="token comment">#5: *1 open() "/usr/share/nginx/html/favicon.ico" failed (2: No such file or directory), client: 10.255.0.2, server: localhost, request: "GET /favicon.ico HTTP/1.1", host: "192.168.99.101"</span></code></pre>

<h3 id="服务伸缩"><a href="#服务伸缩" class="headerlink" title="服务伸缩"></a>服务伸缩</h3><p>我们可以使用 <code>docker service scale</code> 对一个服务运行的容器数量进行伸缩。</p>
<p>当业务处于高峰期时，我们需要扩展服务运行的容器数量。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">docker</span> <span class="token function">service</span> scale <span class="token assign-left variable">nginx</span><span class="token operator">=</span><span class="token number">5</span></code></pre>

<p>当业务平稳时，我们需要减少服务运行的容器数量。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">docker</span> <span class="token function">service</span> scale <span class="token assign-left variable">nginx</span><span class="token operator">=</span><span class="token number">2</span></code></pre>

<h3 id="删除服务"><a href="#删除服务" class="headerlink" title="删除服务"></a>删除服务</h3><p>使用 <code>docker service rm</code> 来从 <code>Swarm</code> 集群移除某个服务。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">docker</span> <span class="token function">service</span> <span class="token function">rm</span> nginx</code></pre>

<h2 id="在-Swarm-集群中使用-compose-文件"><a href="#在-Swarm-集群中使用-compose-文件" class="headerlink" title="在 Swarm 集群中使用 compose 文件"></a>在 Swarm 集群中使用 compose 文件</h2><p>正如之前使用 <code>docker-compose.yml</code> 来一次配置、启动多个容器，在 <code>Swarm</code> 集群中也可以使用 <code>compose</code> 文件 （<code>docker-compose.yml</code>） 来配置、启动多个服务。</p>
<p>上一节中，我们使用 <code>docker service create</code> 一次只能部署一个服务，使用 <code>docker-compose.yml</code> 我们可以一次启动多个关联的服务。</p>
<p>我们以在 <code>Swarm</code> 集群中部署 <code>WordPress</code> 为例进行说明。</p>
<pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">"3"</span>
<span class="token key atrule">services</span><span class="token punctuation">:</span>
  <span class="token key atrule">wordpress</span><span class="token punctuation">:</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> wordpress
    <span class="token key atrule">ports</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token datetime number">80:80</span>
    <span class="token key atrule">networks</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> overlay
    <span class="token key atrule">environment</span><span class="token punctuation">:</span>
      <span class="token key atrule">WORDPRESS_DB_HOST</span><span class="token punctuation">:</span> db<span class="token punctuation">:</span><span class="token number">3306</span>
      <span class="token key atrule">WORDPRESS_DB_USER</span><span class="token punctuation">:</span> wordpress
      <span class="token key atrule">WORDPRESS_DB_PASSWORD</span><span class="token punctuation">:</span> wordpress
    <span class="token key atrule">deploy</span><span class="token punctuation">:</span>
      <span class="token key atrule">mode</span><span class="token punctuation">:</span> replicated
      <span class="token key atrule">replicas</span><span class="token punctuation">:</span> <span class="token number">3</span>
  <span class="token key atrule">db</span><span class="token punctuation">:</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> mysql
    <span class="token key atrule">networks</span><span class="token punctuation">:</span>
       <span class="token punctuation">-</span> overlay
    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> db<span class="token punctuation">-</span>data<span class="token punctuation">:</span>/var/lib/mysql
    <span class="token key atrule">environment</span><span class="token punctuation">:</span>
      <span class="token key atrule">MYSQL_ROOT_PASSWORD</span><span class="token punctuation">:</span> somewordpress
      <span class="token key atrule">MYSQL_DATABASE</span><span class="token punctuation">:</span> wordpress
      <span class="token key atrule">MYSQL_USER</span><span class="token punctuation">:</span> wordpress
      <span class="token key atrule">MYSQL_PASSWORD</span><span class="token punctuation">:</span> wordpress
    <span class="token key atrule">deploy</span><span class="token punctuation">:</span>
      <span class="token key atrule">placement</span><span class="token punctuation">:</span>
        <span class="token key atrule">constraints</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>node.role == manager<span class="token punctuation">]</span>
  <span class="token key atrule">visualizer</span><span class="token punctuation">:</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> dockersamples/visualizer<span class="token punctuation">:</span>stable
    <span class="token key atrule">ports</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token string">"8080:8080"</span>
    <span class="token key atrule">stop_grace_period</span><span class="token punctuation">:</span> 1m30s
    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token string">"/var/run/docker.sock:/var/run/docker.sock"</span>
    <span class="token key atrule">deploy</span><span class="token punctuation">:</span>
      <span class="token key atrule">placement</span><span class="token punctuation">:</span>
        <span class="token key atrule">constraints</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>node.role == manager<span class="token punctuation">]</span>
<span class="token key atrule">volumes</span><span class="token punctuation">:</span>
  <span class="token key atrule">db-data</span><span class="token punctuation">:</span>
<span class="token key atrule">networks</span><span class="token punctuation">:</span>
  overlay<span class="token punctuation">:</span></code></pre>

<p>在 <code>Swarm</code> 集群管理节点新建该文件，其中的 <code>visualizer</code> 服务提供一个可视化页面，我们可以从浏览器中很直观的查看集群中各个服务的运行节点。</p>
<p>在 <code>Swarm</code> 集群中使用 <code>docker-compose.yml</code> 我们用 <code>docker stack</code> 命令，下面我们对该命令进行详细讲解。</p>
<h3 id="部署服务-1"><a href="#部署服务-1" class="headerlink" title="部署服务"></a>部署服务</h3><p>部署服务使用 <code>docker stack deploy</code>，其中 <code>-c</code> 参数指定 compose 文件名。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">docker</span> stack deploy -c docker-compose.yml wordpress</code></pre>

<p>现在我们打开浏览器输入 <code>任一节点IP:8080</code> 即可看到各节点运行状态。如下图所示：</p>
<p><img src="/2022/docker_practice/wordpress.png" alt="img"></p>
<p>在浏览器新的标签页输入 <code>任一节点IP</code> 即可看到 <code>WordPress</code> 安装界面，安装完成之后，输入 <code>任一节点IP</code> 即可看到 <code>WordPress</code> 页面。</p>
<h3 id="查看服务-1"><a href="#查看服务-1" class="headerlink" title="查看服务"></a>查看服务</h3><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">docker</span> stack <span class="token function">ls</span>
NAME                SERVICES
wordpress           <span class="token number">3</span></code></pre>

<h3 id="移除服务"><a href="#移除服务" class="headerlink" title="移除服务"></a>移除服务</h3><p>要移除服务，使用 <code>docker stack down</code></p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">docker</span> stack down wordpress
Removing <span class="token function">service</span> wordpress_db
Removing <span class="token function">service</span> wordpress_visualizer
Removing <span class="token function">service</span> wordpress_wordpress
Removing network wordpress_overlay
Removing network wordpress_default</code></pre>

<p>该命令不会移除服务所使用的 <code>数据卷</code>，如果你想移除数据卷请使用 <code>docker volume rm</code></p>
<h2 id="在-Swarm-集群中管理敏感数据"><a href="#在-Swarm-集群中管理敏感数据" class="headerlink" title="在 Swarm 集群中管理敏感数据"></a>在 Swarm 集群中管理敏感数据</h2><p>在动态的、大规模的分布式集群上，管理和分发 <code>密码</code>、<code>证书</code> 等敏感信息是极其重要的工作。传统的密钥分发方式（如密钥放入镜像中，设置环境变量，volume 动态挂载等）都存在着潜在的巨大的安全风险。</p>
<p>Docker 目前已经提供了 <code>secrets</code> 管理功能，用户可以在 Swarm 集群中安全地管理密码、密钥证书等敏感数据，并允许在多个 Docker 容器实例之间共享访问指定的敏感数据。</p>
<blockquote>
<p>注意： <code>secret</code> 也可以在 <code>Docker Compose</code> 中使用。</p>
</blockquote>
<p>我们可以用 <code>docker secret</code> 命令来管理敏感信息。接下来我们在上面章节中创建好的 Swarm 集群中介绍该命令的使用。</p>
<p>这里我们以在 Swarm 集群中部署 <code>mysql</code> 和 <code>wordpress</code> 服务为例。</p>
<h3 id="创建-secret"><a href="#创建-secret" class="headerlink" title="创建 secret"></a>创建 secret</h3><p>我们使用 <code>docker secret create</code> 命令以管道符的形式创建 <code>secret</code></p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ openssl rand -base64 <span class="token number">20</span> <span class="token operator">|</span> <span class="token function">docker</span> secret create mysql_password -
$ openssl rand -base64 <span class="token number">20</span> <span class="token operator">|</span> <span class="token function">docker</span> secret create mysql_root_password -</code></pre>

<h3 id="查看-secret"><a href="#查看-secret" class="headerlink" title="查看 secret"></a>查看 secret</h3><p>使用 <code>docker secret ls</code> 命令来查看 <code>secret</code></p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">docker</span> secret <span class="token function">ls</span>
ID                          NAME                  CREATED             UPDATED
l1vinzevzhj4goakjap5ya409   mysql_password        <span class="token number">41</span> seconds ago      <span class="token number">41</span> seconds ago
yvsczlx9votfw3l0nz5rlidig   mysql_root_password   <span class="token number">12</span> seconds ago      <span class="token number">12</span> seconds ago</code></pre>

<h3 id="创建-MySQL-服务"><a href="#创建-MySQL-服务" class="headerlink" title="创建 MySQL 服务"></a>创建 MySQL 服务</h3><p>创建服务相关命令已经在前边章节进行了介绍，这里直接列出命令。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">docker</span> network create -d overlay mysql_private
$ <span class="token function">docker</span> <span class="token function">service</span> create <span class="token punctuation">\</span>
     --name mysql <span class="token punctuation">\</span>
     --replicas <span class="token number">1</span> <span class="token punctuation">\</span>
     --network mysql_private <span class="token punctuation">\</span>
     --mount <span class="token assign-left variable">type</span><span class="token operator">=</span>volume,source<span class="token operator">=</span>mydata,destination<span class="token operator">=</span>/var/lib/mysql <span class="token punctuation">\</span>
     --secret <span class="token assign-left variable">source</span><span class="token operator">=</span>mysql_root_password,target<span class="token operator">=</span>mysql_root_password <span class="token punctuation">\</span>
     --secret <span class="token assign-left variable">source</span><span class="token operator">=</span>mysql_password,target<span class="token operator">=</span>mysql_password <span class="token punctuation">\</span>
     -e <span class="token assign-left variable">MYSQL_ROOT_PASSWORD_FILE</span><span class="token operator">=</span><span class="token string">"/run/secrets/mysql_root_password"</span> <span class="token punctuation">\</span>
     -e <span class="token assign-left variable">MYSQL_PASSWORD_FILE</span><span class="token operator">=</span><span class="token string">"/run/secrets/mysql_password"</span> <span class="token punctuation">\</span>
     -e <span class="token assign-left variable">MYSQL_USER</span><span class="token operator">=</span><span class="token string">"wordpress"</span> <span class="token punctuation">\</span>
     -e <span class="token assign-left variable">MYSQL_DATABASE</span><span class="token operator">=</span><span class="token string">"wordpress"</span> <span class="token punctuation">\</span>
     mysql:latest</code></pre>

<p>如果你没有在 <code>target</code> 中显式的指定路径时，<code>secret</code> 默认通过 <code>tmpfs</code> 文件系统挂载到容器的 <code>/run/secrets</code> 目录中。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">docker</span> <span class="token function">service</span> create <span class="token punctuation">\</span>
     --name wordpress <span class="token punctuation">\</span>
     --replicas <span class="token number">1</span> <span class="token punctuation">\</span>
     --network mysql_private <span class="token punctuation">\</span>
     --publish <span class="token assign-left variable">target</span><span class="token operator">=</span><span class="token number">30000</span>,port<span class="token operator">=</span><span class="token number">80</span> <span class="token punctuation">\</span>
     --mount <span class="token assign-left variable">type</span><span class="token operator">=</span>volume,source<span class="token operator">=</span>wpdata,destination<span class="token operator">=</span>/var/www/html <span class="token punctuation">\</span>
     --secret <span class="token assign-left variable">source</span><span class="token operator">=</span>mysql_password,target<span class="token operator">=</span>wp_db_password,mode<span class="token operator">=</span>0444 <span class="token punctuation">\</span>
     -e <span class="token assign-left variable">WORDPRESS_DB_USER</span><span class="token operator">=</span><span class="token string">"wordpress"</span> <span class="token punctuation">\</span>
     -e <span class="token assign-left variable">WORDPRESS_DB_PASSWORD_FILE</span><span class="token operator">=</span><span class="token string">"/run/secrets/wp_db_password"</span> <span class="token punctuation">\</span>
     -e <span class="token assign-left variable">WORDPRESS_DB_HOST</span><span class="token operator">=</span><span class="token string">"mysql:3306"</span> <span class="token punctuation">\</span>
     -e <span class="token assign-left variable">WORDPRESS_DB_NAME</span><span class="token operator">=</span><span class="token string">"wordpress"</span> <span class="token punctuation">\</span>
     wordpress:latest</code></pre>

<p>查看服务</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">docker</span> <span class="token function">service</span> <span class="token function">ls</span>
ID            NAME   MODE        REPLICAS  IMAGE
wvnh0siktqr3  mysql      replicated  <span class="token number">1</span>/1       mysql:latest
nzt5xzae4n62  wordpress  replicated  <span class="token number">1</span>/1       wordpress:latest</code></pre>

<p>现在浏览器访问 <code>IP:30000</code>，即可开始 <code>WordPress</code> 的安装与使用。</p>
<p>通过以上方法，我们没有像以前通过设置环境变量来设置 MySQL 密码， 而是采用 <code>docker secret</code> 来设置密码，防范了密码泄露的风险。</p>
<h2 id="在-Swarm-集群中管理配置数据"><a href="#在-Swarm-集群中管理配置数据" class="headerlink" title="在 Swarm 集群中管理配置数据"></a>在 Swarm 集群中管理配置数据</h2><p>在动态的、大规模的分布式集群上，管理和分发配置文件也是很重要的工作。传统的配置文件分发方式（如配置文件放入镜像中，设置环境变量，volume 动态挂载等）都降低了镜像的通用性。</p>
<p>在 Docker 17.06 以上版本中，Docker 新增了 <code>docker config</code> 子命令来管理集群中的配置信息，以后你无需将配置文件放入镜像或挂载到容器中就可实现对服务的配置。</p>
<blockquote>
<p>注意：<code>config</code> 仅能在 Swarm 集群中使用。</p>
</blockquote>
<p>这里我们以在 Swarm 集群中部署 <code>redis</code> 服务为例。</p>
<h3 id="创建-config"><a href="#创建-config" class="headerlink" title="创建 config"></a>创建 config</h3><p>新建 <code>redis.conf</code> 文件</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">port <span class="token number">6380</span></code></pre>

<p>此项配置 Redis 监听 <code>6380</code> 端口</p>
<p>我们使用 <code>docker config create</code> 命令创建 <code>config</code></p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">docker</span> config create redis.conf redis.conf</code></pre>

<h3 id="查看-config"><a href="#查看-config" class="headerlink" title="查看 config"></a>查看 config</h3><p>使用 <code>docker config ls</code> 命令来查看 <code>config</code></p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">docker</span> config <span class="token function">ls</span>
ID                          NAME                CREATED             UPDATED
yod8fx8iiqtoo84jgwadp86yk   redis.conf          <span class="token number">4</span> seconds ago       <span class="token number">4</span> seconds ago</code></pre>

<h3 id="创建-redis-服务"><a href="#创建-redis-服务" class="headerlink" title="创建 redis 服务"></a>创建 redis 服务</h3><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">docker</span> <span class="token function">service</span> create <span class="token punctuation">\</span>
     --name redis <span class="token punctuation">\</span>
     <span class="token comment"># --config source=redis.conf,target=/etc/redis.conf \</span>
     --config redis.conf <span class="token punctuation">\</span>
     -p <span class="token number">6379</span>:6380 <span class="token punctuation">\</span>
     redis:latest <span class="token punctuation">\</span>
     redis-server /redis.conf</code></pre>

<p>如果你没有在 <code>target</code> 中显式的指定路径时，默认的 <code>redis.conf</code> 以 <code>tmpfs</code> 文件系统挂载到容器的 <code>/config.conf</code>。</p>
<p>经过测试，redis 可以正常使用。</p>
<p>以前我们通过监听主机目录来配置 Redis，就需要在集群的每个节点放置该文件，如果采用 <code>docker config</code> 来管理服务的配置信息，我们只需在集群中的管理节点创建 <code>config</code>，当部署服务时，集群会自动的将配置文件分发到运行服务的各个节点中，大大降低了配置信息的管理和分发难度。</p>
<h2 id="Swarm-mode-与滚动升级"><a href="#Swarm-mode-与滚动升级" class="headerlink" title="Swarm mode 与滚动升级"></a>Swarm mode 与滚动升级</h2><p>在 <a href="deploy.md">部署服务</a> 一节中我们使用 <code>nginx:1.13.7-alpine</code> 镜像部署了一个名为 <code>nginx</code> 的服务。</p>
<p>现在我们想要将 <code>NGINX</code> 版本升级到 <code>1.13.12</code>，那么在 Swarm mode 中如何升级服务呢？</p>
<p>你可能会想到，先停止原来的服务，再使用新镜像部署一个服务，不就完成服务的 “升级” 了吗。</p>
<p>这样做的弊端很明显，如果新部署的服务出现问题，原来的服务删除之后，很难恢复，那么在 Swarm mode 中到底该如何对服务进行滚动升级呢？</p>
<p>答案就是使用 <code>docker service update</code> 命令。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">docker</span> <span class="token function">service</span> update <span class="token punctuation">\</span>
    --image nginx:1.13.12-alpine <span class="token punctuation">\</span>
    nginx</code></pre>

<p>以上命令使用 <code>--image</code> 选项更新了服务的镜像。当然我们也可以使用 <code>docker service update</code> 更新任意的配置。</p>
<p><code>--secret-add</code> 选项可以增加一个密钥</p>
<p><code>--secret-rm</code> 选项可以删除一个密钥</p>
<p>更多选项可以通过 <code>docker service update -h</code> 命令查看。</p>
<h3 id="服务回退"><a href="#服务回退" class="headerlink" title="服务回退"></a>服务回退</h3><p>现在假设我们发现 <code>nginx</code> 服务的镜像升级到 <code>nginx:1.13.12-alpine</code> 出现了一些问题，我们可以使用命令一键回退。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">docker</span> <span class="token function">service</span> rollback nginx</code></pre>

<p>现在使用 <code>docker service ps</code> 命令查看 <code>nginx</code> 服务详情。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">docker</span> <span class="token function">service</span> <span class="token function">ps</span> nginx
ID                  NAME                IMAGE                  NODE                DESIRED STATE       CURRENT STATE                ERROR               PORTS
rt677gop9d4x        nginx.1             nginx:1.13.7-alpine   VM-20-83-debian     Running             Running about a minute ago
d9pw13v59d00         <span class="token punctuation">\</span>_ nginx.1         nginx:1.13.12-alpine  VM-20-83-debian     Shutdown            Shutdown <span class="token number">2</span> minutes ago
i7ynkbg6ybq5         <span class="token punctuation">\</span>_ nginx.1         nginx:1.13.7-alpine   VM-20-83-debian     Shutdown            Shutdown <span class="token number">2</span> minutes ago</code></pre>

<p>结果的输出详细记录了服务的部署、滚动升级、回退的过程。</p>
<h1 id="安全"><a href="#安全" class="headerlink" title="安全"></a>安全</h1><p>评估 Docker 的安全性时，主要考虑三个方面:</p>
<ul>
<li>由内核的命名空间和控制组机制提供的容器内在安全</li>
<li>Docker 程序（特别是服务端）本身的抗攻击性</li>
<li>内核安全性的加强机制对容器安全性的影响</li>
</ul>
<h2 id="命名空间（Namespaces）"><a href="#命名空间（Namespaces）" class="headerlink" title="命名空间（Namespaces）"></a>命名空间（Namespaces）</h2><p>Docker 容器和 LXC 容器很相似，所提供的安全特性也差不多。当用 <code>docker run</code> 启动一个容器时，在后台 Docker 为容器创建了一个独立的命名空间和控制组集合。</p>
<p><em>命名空间</em> 提供了最基础也是最直接的隔离，在容器中运行的进程不会被运行在主机上的进程和其它容器发现和作用。</p>
<p>每个容器都有自己独有的网络栈，意味着它们不能访问其他容器的 sockets 或接口。不过，如果主机系统上做了相应的设置，容器可以像跟主机交互一样的和其他容器交互。当指定公共端口或使用 links 来连接 2 个容器时，容器就可以相互通信了（可以根据配置来限制通信的策略）。</p>
<p>从网络架构的角度来看，所有的容器通过本地主机的网桥接口相互通信，就像物理机器通过物理交换机通信一样。</p>
<p>那么，内核中实现命名空间和私有网络的代码是否足够成熟？</p>
<p>内核命名空间从 2.6.15 版本（2008 年 7 月发布）之后被引入，数年间，这些机制的可靠性在诸多大型生产系统中被实践验证。</p>
<p>实际上，命名空间的想法和设计提出的时间要更早，最初是为了在内核中引入一种机制来实现 <a href="https://en.wikipedia.org/wiki/OpenVZ">OpenVZ</a> 的特性。<br>而 OpenVZ 项目早在 2005 年就发布了，其设计和实现都已经十分成熟。</p>
<h2 id="控制组（Control-groups）"><a href="#控制组（Control-groups）" class="headerlink" title="控制组（Control groups）"></a>控制组（Control groups）</h2><p>控制组是 Linux 容器机制的另外一个关键组件，负责实现资源的审计和限制。</p>
<p>它提供了很多有用的特性；以及确保各个容器可以公平地分享主机的内存、CPU、磁盘 IO 等资源；当然，更重要的是，控制组确保了当容器内的资源使用产生压力时不会连累主机系统。</p>
<p>尽管控制组不负责隔离容器之间相互访问、处理数据和进程，它在防止拒绝服务（DDOS）攻击方面是必不可少的。尤其是在多用户的平台（比如公有或私有的 PaaS）上，控制组十分重要。例如，当某些应用程序表现异常的时候，可以保证一致地正常运行和性能。</p>
<p>控制组机制始于 2006 年，内核从 2.6.24 版本开始被引入。</p>
<h2 id="Docker服务端的防护"><a href="#Docker服务端的防护" class="headerlink" title="Docker服务端的防护"></a>Docker服务端的防护</h2><p>运行一个容器或应用程序的核心是通过 Docker 服务端。Docker 服务的运行目前需要 root 权限，因此其安全性十分关键。</p>
<p>首先，确保只有可信的用户才可以访问 Docker 服务。Docker 允许用户在主机和容器间共享文件夹，同时不需要限制容器的访问权限，这就容易让容器突破资源限制。例如，恶意用户启动容器的时候将主机的根目录<code>/</code>映射到容器的 <code>/host</code> 目录中，那么容器理论上就可以对主机的文件系统进行任意修改了。这听起来很疯狂？但是事实上几乎所有虚拟化系统都允许类似的资源共享，而没法禁止用户共享主机根文件系统到虚拟机系统。</p>
<p>这将会造成很严重的安全后果。因此，当提供容器创建服务时（例如通过一个 web 服务器），要更加注意进行参数的安全检查，防止恶意的用户用特定参数来创建一些破坏性的容器。</p>
<p>为了加强对服务端的保护，Docker 的 REST API（客户端用来跟服务端通信）在 0.5.2 之后使用本地的 Unix 套接字机制替代了原先绑定在 127.0.0.1 上的 TCP 套接字，因为后者容易遭受跨站脚本攻击。现在用户使用 Unix 权限检查来加强套接字的访问安全。</p>
<p>用户仍可以利用 HTTP 提供 REST API 访问。建议使用安全机制，确保只有可信的网络或 VPN，或证书保护机制（例如受保护的 stunnel 和 ssl 认证）下的访问可以进行。此外，还可以使用 <a href="https://docs.docker.com/engine/security/https/"> HTTPS 和证书</a> 来加强保护。</p>
<p>最近改进的 Linux 命名空间机制将可以实现使用非 root 用户来运行全功能的容器。这将从根本上解决了容器和主机之间共享文件系统而引起的安全问题。</p>
<p>终极目标是改进 2 个重要的安全特性：</p>
<ul>
<li>将容器的 root 用户 <a href="https://docs.docker.com/engine/security/userns-remap/">映射到本地主机上的非 root 用户</a>，减轻容器和主机之间因权限提升而引起的安全问题；</li>
<li>允许 Docker 服务端在 <a href="https://docs.docker.com/engine/security/rootless/">非 root 权限(rootless 模式)</a> 下运行，利用安全可靠的子进程来代理执行需要特权权限的操作。这些子进程将只允许在限定范围内进行操作，例如仅仅负责虚拟网络设定或文件系统管理、配置操作等。</li>
</ul>
<p>最后，建议采用专用的服务器来运行 Docker 和相关的管理服务（例如管理服务比如 ssh 监控和进程监控、管理工具 nrpe、collectd 等）。其它的业务服务都放到容器中去运行。</p>
<h2 id="内核能力机制"><a href="#内核能力机制" class="headerlink" title="内核能力机制"></a>内核能力机制</h2><p><a href="https://man7.org/linux/man-pages/man7/capabilities.7.html">能力机制（Capability）</a> 是 Linux 内核一个强大的特性，可以提供细粒度的权限访问控制。<br>Linux 内核自 2.2 版本起就支持能力机制，它将权限划分为更加细粒度的操作能力，既可以作用在进程上，也可以作用在文件上。</p>
<p>例如，一个 Web 服务进程只需要绑定一个低于 1024 的端口的权限，并不需要 root 权限。那么它只需要被授权 <code>net_bind_service</code> 能力即可。此外，还有很多其他的类似能力来避免进程获取 root 权限。</p>
<p>默认情况下，Docker 启动的容器被严格限制只允许使用内核的一部分能力。</p>
<p>使用能力机制对加强 Docker 容器的安全有很多好处。通常，在服务器上会运行一堆需要特权权限的进程，包括有 ssh、cron、syslogd、硬件管理工具模块（例如负载模块）、网络配置工具等等。容器跟这些进程是不同的，因为几乎所有的特权进程都由容器以外的支持系统来进行管理。</p>
<ul>
<li>ssh 访问被主机上ssh服务来管理；</li>
<li>cron 通常应该作为用户进程执行，权限交给使用它服务的应用来处理；</li>
<li>日志系统可由 Docker 或第三方服务管理；</li>
<li>硬件管理无关紧要，容器中也就无需执行 udevd 以及类似服务；</li>
<li>网络管理也都在主机上设置，除非特殊需求，容器不需要对网络进行配置。</li>
</ul>
<p>从上面的例子可以看出，大部分情况下，容器并不需要“真正的” root 权限，容器只需要少数的能力即可。为了加强安全，容器可以禁用一些没必要的权限。</p>
<ul>
<li>完全禁止任何 mount 操作；</li>
<li>禁止直接访问本地主机的套接字；</li>
<li>禁止访问一些文件系统的操作，比如创建新的设备、修改文件属性等；</li>
<li>禁止模块加载。</li>
</ul>
<p>这样，就算攻击者在容器中取得了 root 权限，也不能获得本地主机的较高权限，能进行的破坏也有限。</p>
<p>默认情况下，Docker采用 <a href="https://github.com/moby/moby/blob/master/oci/caps/defaults.go">白名单</a> 机制，禁用必需功能之外的其它权限。<br>当然，用户也可以根据自身需求来为 Docker 容器启用额外的权限。</p>
<h2 id="其它安全特性"><a href="#其它安全特性" class="headerlink" title="其它安全特性"></a>其它安全特性</h2><p>除了能力机制之外，还可以利用一些现有的安全机制来增强使用 Docker 的安全性，例如 TOMOYO, AppArmor, Seccomp, SELinux, GRSEC 等。</p>
<p>Docker 当前默认只启用了能力机制。用户可以采用多种方案来加强 Docker 主机的安全，例如：</p>
<ul>
<li>在内核中启用 GRSEC 和 PAX，这将增加很多编译和运行时的安全检查；通过地址随机化避免恶意探测等。并且，启用该特性不需要 Docker 进行任何配置。</li>
<li>使用一些有增强安全特性的容器模板，比如带 AppArmor 的模板和 Redhat 带 SELinux 策略的模板。这些模板提供了额外的安全特性。</li>
<li>用户可以自定义访问控制机制来定制安全策略。</li>
</ul>
<p>跟其它添加到 Docker 容器的第三方工具一样（比如网络拓扑和文件系统共享），有很多类似的机制，在不改变 Docker 内核情况下就可以加固现有的容器。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>总体来看，Docker 容器还是十分安全的，特别是在容器内不使用 root 权限来运行进程的话。</p>
<p>另外，用户可以使用现有工具，比如 <a href="https://docs.docker.com/engine/security/apparmor/">Apparmor</a>, <a href="https://docs.docker.com/engine/security/seccomp/">Seccomp</a>, SELinux, GRSEC 来增强安全性；甚至自己在内核中实现更复杂的安全机制。</p>
<h1 id="底层实现"><a href="#底层实现" class="headerlink" title="底层实现"></a>底层实现</h1><p>Docker 底层的核心技术包括 Linux 上的命名空间（Namespaces）、控制组（Control groups）、Union 文件系统（Union file systems）和容器格式（Container format）。</p>
<p>我们知道，传统的虚拟机通过在宿主主机中运行 hypervisor 来模拟一整套完整的硬件环境提供给虚拟机的操作系统。虚拟机系统看到的环境是可限制的，也是彼此隔离的。 这种直接的做法实现了对资源最完整的封装，但很多时候往往意味着系统资源的浪费。 例如，以宿主机和虚拟机系统都为 Linux 系统为例，虚拟机中运行的应用其实可以利用宿主机系统中的运行环境。</p>
<p>我们知道，在操作系统中，包括内核、文件系统、网络、PID、UID、IPC、内存、硬盘、CPU 等等，所有的资源都是应用进程直接共享的。 要想实现虚拟化，除了要实现对内存、CPU、网络IO、硬盘IO、存储空间等的限制外，还要实现文件系统、网络、PID、UID、IPC等等的相互隔离。 前者相对容易实现一些，后者则需要宿主机系统的深入支持。</p>
<p>随着 Linux 系统对于命名空间功能的完善实现，程序员已经可以实现上面的所有需求，让某些进程在彼此隔离的命名空间中运行。大家虽然都共用一个内核和某些运行时环境（例如一些系统命令和系统库），但是彼此却看不到，都以为系统中只有自己的存在。<strong>这种机制就是容器（Container），利用命名空间来做权限的隔离控制，利用 cgroups 来做资源分配。</strong></p>
<h2 id="基本架构"><a href="#基本架构" class="headerlink" title="基本架构"></a>基本架构</h2><p>Docker 采用了 <code>C/S</code> 架构，包括客户端和服务端。Docker 守护进程 （<code>Daemon</code>）作为服务端接受来自客户端的请求，并处理这些请求（创建、运行、分发容器）。</p>
<p>客户端和服务端既可以运行在一个机器上，也可通过 <code>socket</code> 或者 <code>RESTful API</code> 来进行通信。</p>
<p>Docker 守护进程一般在宿主主机后台运行，等待接收来自客户端的消息。</p>
<p>Docker 客户端则为用户提供一系列可执行命令，用户用这些命令实现跟 Docker 守护进程交互。</p>
<h2 id="命名空间（Namespaces）-1"><a href="#命名空间（Namespaces）-1" class="headerlink" title="命名空间（Namespaces）"></a>命名空间（Namespaces）</h2><p>命名空间是 Linux 内核一个强大的特性。每个容器都有自己单独的命名空间，运行在其中的应用都像是在独立的操作系统中运行一样。命名空间保证了容器之间彼此互不影响。</p>
<h3 id="pid-命名空间"><a href="#pid-命名空间" class="headerlink" title="pid 命名空间"></a>pid 命名空间</h3><p>不同用户的进程就是通过 pid 命名空间隔离开的，且不同命名空间中可以有相同 pid。所有的 LXC 进程在 Docker 中的父进程为 Docker 进程，每个 LXC 进程具有不同的命名空间。同时由于允许嵌套，因此可以很方便的实现嵌套的 Docker 容器。</p>
<h3 id="net-命名空间"><a href="#net-命名空间" class="headerlink" title="net 命名空间"></a>net 命名空间</h3><p>有了 pid 命名空间，每个命名空间中的 pid 能够相互隔离，但是网络端口还是共享 host 的端口。网络隔离是通过 net 命名空间实现的， 每个 net 命名空间有独立的 网络设备，IP 地址，路由表，<code>/proc/net</code> 目录。这样每个容器的网络就能隔离开来。Docker 默认采用 veth 的方式，将容器中的虚拟网卡同 host 上的一 个Docker 网桥 docker0 连接在一起。</p>
<h3 id="ipc-命名空间"><a href="#ipc-命名空间" class="headerlink" title="ipc 命名空间"></a>ipc 命名空间</h3><p>容器中进程交互还是采用了 Linux 常见的进程间交互方法(interprocess communication - IPC)， 包括信号量、消息队列和共享内存等。然而与 VM 不同的是，容器的进程间交互实际上还是 host 上具有相同 pid 命名空间中的进程间交互，因此需要在 IPC 资源申请时加入命名空间信息，每个 IPC 资源有一个唯一的 32 位 id。</p>
<h3 id="mnt-命名空间"><a href="#mnt-命名空间" class="headerlink" title="mnt 命名空间"></a>mnt 命名空间</h3><p>类似 chroot，将一个进程放到一个特定的目录执行。mnt 命名空间允许不同命名空间的进程看到的文件结构不同，这样每个命名空间 中的进程所看到的文件目录就被隔离开了。与 chroot 不同，每个命名空间中的容器在 <code>/proc/mounts</code> 的信息只包含所在命名空间的 mount point。</p>
<h3 id="uts-命名空间"><a href="#uts-命名空间" class="headerlink" title="uts 命名空间"></a>uts 命名空间</h3><p>UTS(“UNIX Time-sharing System”) 命名空间允许每个容器拥有独立的 hostname 和 domain name， 使其在网络上可以被视作一个独立的节点而非 主机上的一个进程。</p>
<h3 id="user-命名空间"><a href="#user-命名空间" class="headerlink" title="user 命名空间"></a>user 命名空间</h3><p>每个容器可以有不同的用户和组 id， 也就是说可以在容器内用容器内部的用户执行程序而非主机上的用户。</p>
<p>*注：更多关于 Linux 上命名空间的信息，请阅读 <a href="https://blog.scottlowe.org/2013/09/04/introducing-linux-network-namespaces/">这篇文章</a>。</p>
<h2 id="控制组"><a href="#控制组" class="headerlink" title="控制组"></a>控制组</h2><p>控制组（<a href="https://en.wikipedia.org/wiki/Cgroups">cgroups</a>）是 Linux 内核的一个特性，主要用来对共享资源进行隔离、限制、审计等。只有能控制分配到容器的资源，才能避免当多个容器同时运行时的对系统资源的竞争。</p>
<p>控制组技术最早是由 Google 的程序员在 2006 年提出，Linux 内核自 2.6.24 开始支持。</p>
<p>控制组可以提供对容器的内存、CPU、磁盘 IO 等资源的限制和审计管理。</p>
<h2 id="联合文件系统"><a href="#联合文件系统" class="headerlink" title="联合文件系统"></a>联合文件系统</h2><p>联合文件系统（<a href="https://en.wikipedia.org/wiki/UnionFS">UnionFS</a>）是一种分层、轻量级并且高性能的文件系统，它支持对文件系统的修改作为一次提交来一层层的叠加，同时可以将不同目录挂载到同一个虚拟文件系统下(unite several directories into a single virtual filesystem)。</p>
<p>联合文件系统是 Docker 镜像的基础。镜像可以通过分层来进行继承，基于基础镜像（没有父镜像），可以制作各种具体的应用镜像。</p>
<p>另外，不同 Docker 容器就可以共享一些基础的文件系统层，同时再加上自己独有的改动层，大大提高了存储的效率。</p>
<p>Docker 中使用的 AUFS（Advanced Multi-Layered Unification Filesystem）就是一种联合文件系统。 <code>AUFS</code> 支持为每一个成员目录（类似 Git 的分支）设定只读（readonly）、读写（readwrite）和写出（whiteout-able）权限, 同时 <code>AUFS</code> 里有一个类似分层的概念, 对只读权限的分支可以逻辑上进行增量地修改(不影响只读部分的)。</p>
<p>Docker 目前支持的联合文件系统包括 <code>OverlayFS</code>, <code>AUFS</code>, <code>Btrfs</code>, <code>VFS</code>, <code>ZFS</code> 和 <code>Device Mapper</code>。</p>
<p>各 Linux 发行版 Docker 推荐使用的存储驱动如下表。</p>
<table>
<thead>
<tr>
<th align="left">Linux 发行版</th>
<th align="left">Docker 推荐使用的存储驱动</th>
</tr>
</thead>
<tbody><tr>
<td align="left">Docker on Ubuntu</td>
<td align="left"><code>overlay2</code> (16.04 +)</td>
</tr>
<tr>
<td align="left">Docker on Debian</td>
<td align="left"><code>overlay2</code> (Debian Stretch), <code>aufs</code>, <code>devicemapper</code></td>
</tr>
<tr>
<td align="left">Docker on CentOS</td>
<td align="left"><code>overlay2</code></td>
</tr>
<tr>
<td align="left">Docker on Fedora</td>
<td align="left"><code>overlay2</code></td>
</tr>
</tbody></table>
<p><strong>在可能的情况下，<a href="https://docs.docker.com/storage/storagedriver/select-storage-driver/">推荐</a> 使用 <code>overlay2</code> 存储驱动，<code>overlay2</code> 是目前 Docker 默认的存储驱动，以前则是 <code>aufs</code>。</strong>你可以通过配置来使用以上提到的其他类型的存储驱动。</p>
<h2 id="容器格式"><a href="#容器格式" class="headerlink" title="容器格式"></a>容器格式</h2><p><strong>最初，Docker 采用了 <code>LXC</code> 中的容器格式。从 0.7 版本以后开始去除 LXC，转而使用自行开发的 <a href="https://github.com/docker/libcontainer">libcontainer</a>，从 1.11 开始，则进一步演进为使用 <a href="https://github.com/opencontainers/runc">runC</a> 和 <a href="https://github.com/containerd/containerd">containerd</a>。</strong></p>
<h2 id="Docker-网络实现"><a href="#Docker-网络实现" class="headerlink" title="Docker 网络实现"></a>Docker 网络实现</h2><p>Docker 的网络实现其实就是利用了 Linux 上的 <em>网络命名空间</em> 和 <em>虚拟网络设备</em>（特别是 veth pair）。</p>
<p>首先，要实现网络通信，机器需要至少一个网络接口（物理接口或虚拟接口）来收发数据包；此外，如果不同子网之间要进行通信，需要路由机制。</p>
<p>Docker 中的网络接口默认都是虚拟的接口。虚拟接口的优势之一是转发效率较高。<br>Linux 通过在内核中进行数据复制来实现虚拟接口之间的数据转发，发送接口的发送缓存中的数据包被直接复制到接收接口的接收缓存中。对于本地系统和容器内系统看来就像是一个正常的以太网卡，只是它不需要真正同外部网络设备通信，速度要快很多。</p>
<p>Docker 容器网络就利用了这项技术。它在本地主机和容器内分别创建一个虚拟接口，并让它们彼此连通（这样的一对接口叫做 <code>veth pair</code>）。</p>
<h3 id="创建网络参数"><a href="#创建网络参数" class="headerlink" title="创建网络参数"></a>创建网络参数</h3><p>Docker 创建一个容器的时候，会执行如下操作：</p>
<ul>
<li>创建一对虚拟接口，分别放到本地主机和新容器中；</li>
<li>本地主机一端桥接到默认的 docker0 或指定网桥上，并具有一个唯一的名字，如 veth65f9；</li>
<li>容器一端放到新容器中，并修改名字作为 eth0，这个接口只在容器的命名空间可见；</li>
<li>从网桥可用地址段中获取一个空闲地址分配给容器的 eth0，并配置默认路由到桥接网卡 veth65f9。</li>
</ul>
<p>完成这些之后，容器就可以使用 eth0 虚拟网卡来连接其他容器和其他网络。</p>
<p>可以在 <code>docker run</code> 的时候通过 <code>--net</code> 参数来指定容器的网络配置，有4个可选值：</p>
<ul>
<li><code>--net=bridge</code> 这个是默认值，连接到默认的网桥。</li>
<li><code>--net=host</code> 告诉 Docker 不要将容器网络放到隔离的命名空间中，即不要容器化容器内的网络。此时容器使用本地主机的网络，它拥有完全的本地主机接口访问权限。容器进程可以跟主机其它 root 进程一样可以打开低范围的端口，可以访问本地网络服务比如 D-bus，还可以让容器做一些影响整个主机系统的事情，比如重启主机。因此使用这个选项的时候要非常小心。<strong>如果进一步的使用 <code>--privileged=true</code>，容器会被允许直接配置主机的网络堆栈。</strong></li>
<li><code>--net=container:NAME_or_ID</code> 让 Docker 将新建容器的进程放到一个已存在容器的网络栈中，新容器进程有自己的文件系统、进程列表和资源限制，但会和已存在的容器共享 IP 地址和端口等网络资源，两者进程可以直接通过 <code>lo</code> 环回接口通信。</li>
<li><code>--net=none</code> 让 Docker 将新容器放到隔离的网络栈中，但是不进行网络配置。之后，用户可以自己进行配置。</li>
</ul>
<h3 id="网络配置细节"><a href="#网络配置细节" class="headerlink" title="网络配置细节"></a>网络配置细节</h3><p>用户使用 <code>--net=none</code> 后，可以自行配置网络，让容器达到跟平常一样具有访问网络的权限。通过这个过程，可以了解 Docker 配置网络的细节。</p>
<p>首先，启动一个 <code>/bin/bash</code> 容器，指定 <code>--net=none</code> 参数。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">docker</span> run -i -t --rm --net<span class="token operator">=</span>none base /bin/bash
root@63f36fc01b5f:/<span class="token comment">#</span></code></pre>
<p>在本地主机查找容器的进程 id，并为它创建网络命名空间。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">docker</span> inspect -f <span class="token string">'&#123;&#123;.State.Pid&#125;&#125;'</span> 63f36fc01b5f
<span class="token number">2778</span>
$ <span class="token assign-left variable">pid</span><span class="token operator">=</span><span class="token number">2778</span>
$ <span class="token function">sudo</span> <span class="token function">mkdir</span> -p /var/run/netns
$ <span class="token function">sudo</span> <span class="token function">ln</span> -s /proc/<span class="token variable">$pid</span>/ns/net /var/run/netns/<span class="token variable">$pid</span></code></pre>
<p>检查桥接网卡的 IP 和子网掩码信息。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">ip</span> addr show docker0
<span class="token number">21</span>: docker0: <span class="token punctuation">..</span>.
inet <span class="token number">172.17</span>.42.1/16 scope global docker0
<span class="token punctuation">..</span>.</code></pre>
<p>创建一对 “veth pair” 接口 A 和 B，绑定 A 到网桥 <code>docker0</code>，并启用它</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">ip</span> <span class="token function">link</span> <span class="token function">add</span> A <span class="token builtin class-name">type</span> veth peer name B
$ <span class="token function">sudo</span> brctl addif docker0 A
$ <span class="token function">sudo</span> <span class="token function">ip</span> <span class="token function">link</span> <span class="token builtin class-name">set</span> A up</code></pre>
<p>将B放到容器的网络命名空间，命名为 eth0，启动它并配置一个可用 IP（桥接网段）和默认网关。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">ip</span> <span class="token function">link</span> <span class="token builtin class-name">set</span> B netns <span class="token variable">$pid</span>
$ <span class="token function">sudo</span> <span class="token function">ip</span> netns <span class="token builtin class-name">exec</span> <span class="token variable">$pid</span> <span class="token function">ip</span> <span class="token function">link</span> <span class="token builtin class-name">set</span> dev B name eth0
$ <span class="token function">sudo</span> <span class="token function">ip</span> netns <span class="token builtin class-name">exec</span> <span class="token variable">$pid</span> <span class="token function">ip</span> <span class="token function">link</span> <span class="token builtin class-name">set</span> eth0 up
$ <span class="token function">sudo</span> <span class="token function">ip</span> netns <span class="token builtin class-name">exec</span> <span class="token variable">$pid</span> <span class="token function">ip</span> addr <span class="token function">add</span> <span class="token number">172.17</span>.42.99/16 dev eth0
$ <span class="token function">sudo</span> <span class="token function">ip</span> netns <span class="token builtin class-name">exec</span> <span class="token variable">$pid</span> <span class="token function">ip</span> route <span class="token function">add</span> default via <span class="token number">172.17</span>.42.1</code></pre>
<p>以上，就是 Docker 配置网络的具体过程。</p>
<p>当容器结束后，Docker 会清空容器，容器内的 eth0 会随网络命名空间一起被清除，A 接口也被自动从 <code>docker0</code> 卸载。</p>
<p>此外，用户可以使用 <code>ip netns exec</code> 命令来在指定网络命名空间中进行配置，从而配置容器内的网络。</p>
<h1 id="Docker-Buildx"><a href="#Docker-Buildx" class="headerlink" title="Docker Buildx"></a>Docker Buildx</h1><p>Docker Buildx 是一个 docker CLI 插件，其扩展了 docker 命令，支持 Moby BuildKit 提供的功能。提供了与 docker build 相同的用户体验，并增加了许多新功能。</p>
<blockquote>
<p>该功能仅适用于 Docker v19.03+ 版本</p>
</blockquote>
<h2 id="使用-BuildKit-构建镜像"><a href="#使用-BuildKit-构建镜像" class="headerlink" title="使用 BuildKit 构建镜像"></a>使用 <code>BuildKit</code> 构建镜像</h2><p><strong>BuildKit</strong> 是下一代的镜像构建组件，在 <a href="https://github.com/moby/buildkit">https://github.com/moby/buildkit</a> 开源。</p>
<blockquote>
<p>注意：如果您的镜像构建使用的是云服务商提供的镜像构建服务（腾讯云容器服务、阿里云容器服务等），由于上述服务提供商的 Docker 版本低于 18.09，BuildKit 无法使用，将造成镜像构建失败。建议使用 BuildKit 构建镜像时使用一个新的 Dockerfile 文件（例如 Dockerfile.buildkit）</p>
</blockquote>
<p>目前，Docker Hub 自动构建已经支持 buildkit，具体请参考 <a href="https://github.com/docker-practice/docker-hub-buildx">https://github.com/docker-practice/docker-hub-buildx</a></p>
<h3 id="Dockerfile-新增指令详解"><a href="#Dockerfile-新增指令详解" class="headerlink" title="Dockerfile 新增指令详解"></a><code>Dockerfile</code> 新增指令详解</h3><p>启用 <code>BuildKit</code> 之后，我们可以使用下面几个新的 <code>Dockerfile</code> 指令来加快镜像构建。</p>
<h4 id="RUN-mount-type-cache"><a href="#RUN-mount-type-cache" class="headerlink" title="RUN --mount=type=cache"></a><code>RUN --mount=type=cache</code></h4><p>目前，几乎所有的程序都会使用依赖管理工具，例如 <code>Go</code> 中的 <code>go mod</code>、<code>Node.js</code> 中的 <code>npm</code> 等等，当我们构建一个镜像时，往往会重复的从互联网中获取依赖包，难以缓存，大大降低了镜像的构建效率。</p>
<p>例如一个前端工程需要用到 <code>npm</code>：</p>
<pre class="language-docker" data-language="docker"><code class="language-docker"><span class="token instruction"><span class="token keyword">FROM</span> node:alpine <span class="token keyword">as</span> builder</span>
<span class="token instruction"><span class="token keyword">WORKDIR</span> /app</span>
<span class="token instruction"><span class="token keyword">COPY</span> package.json /app/</span>
<span class="token instruction"><span class="token keyword">RUN</span> npm i --registry=https://registry.npm.taobao.org <span class="token operator">\</span>
        &amp;&amp; rm -rf ~/.npm</span>
<span class="token instruction"><span class="token keyword">COPY</span> src /app/src</span>
<span class="token instruction"><span class="token keyword">RUN</span> npm run build</span>
<span class="token instruction"><span class="token keyword">FROM</span> nginx:alpine</span>
<span class="token instruction"><span class="token keyword">COPY</span> <span class="token options"><span class="token property">--from</span><span class="token punctuation">=</span><span class="token string">builder</span></span> /app/dist /app/dist</span></code></pre>

<p>使用多阶段构建，构建的镜像中只包含了目标文件夹 <code>dist</code>，但仍然存在一些问题，当 <code>package.json</code> 文件变动时，<code>RUN npm i &amp;&amp; rm -rf ~/.npm</code> 这一层会重新执行，变更多次后，生成了大量的中间层镜像。</p>
<p>为解决这个问题，进一步的我们可以设想一个类似 <strong>数据卷</strong> 的功能，在镜像构建时把 <code>node_modules</code> 文件夹挂载上去，在构建完成后，这个 <code>node_modules</code> 文件夹会自动卸载，实际的镜像中并不包含 <code>node_modules</code> 这个文件夹，这样我们就省去了每次获取依赖的时间，大大增加了镜像构建效率，同时也避免了生成了大量的中间层镜像。</p>
<p><code>BuildKit</code> 提供了 <code>RUN --mount=type=cache</code> 指令，可以实现上边的设想。</p>
<pre class="language-docker" data-language="docker"><code class="language-docker"><span class="token comment"># syntax = docker/dockerfile:experimental</span>
<span class="token instruction"><span class="token keyword">FROM</span> node:alpine <span class="token keyword">as</span> builder</span>
<span class="token instruction"><span class="token keyword">WORKDIR</span> /app</span>
<span class="token instruction"><span class="token keyword">COPY</span> package.json /app/</span>
<span class="token instruction"><span class="token keyword">RUN</span> <span class="token options"><span class="token property">--mount</span><span class="token punctuation">=</span><span class="token string">type=cache,target=/app/node_modules,id=my_app_npm_module,sharing=locked</span> <span class="token operator">\</span>
    <span class="token property">--mount</span><span class="token punctuation">=</span><span class="token string">type=cache,target=/root/.npm,id=npm_cache</span></span> <span class="token operator">\</span>
        npm i --registry=https://registry.npm.taobao.org</span>
<span class="token instruction"><span class="token keyword">COPY</span> src /app/src</span>
<span class="token instruction"><span class="token keyword">RUN</span> <span class="token options"><span class="token property">--mount</span><span class="token punctuation">=</span><span class="token string">type=cache,target=/app/node_modules,id=my_app_npm_module,sharing=locked</span></span> <span class="token operator">\</span>
<span class="token comment"># --mount=type=cache,target=/app/dist,id=my_app_dist,sharing=locked \</span>
        npm run build</span>
<span class="token instruction"><span class="token keyword">FROM</span> nginx:alpine</span>
<span class="token comment"># COPY --from=builder /app/dist /app/dist</span>
<span class="token comment"># 为了更直观的说明 from 和 source 指令，这里使用 RUN 指令</span>
<span class="token instruction"><span class="token keyword">RUN</span> <span class="token options"><span class="token property">--mount</span><span class="token punctuation">=</span><span class="token string">type=cache,target=/tmp/dist,from=builder,source=/app/dist</span></span> <span class="token operator">\</span>
    <span class="token comment"># --mount=type=cache,target/tmp/dist,from=my_app_dist,sharing=locked \</span>
    mkdir -p /app/dist &amp;&amp; cp -r /tmp/dist/* /app/dist</span></code></pre>

<p><strong>由于 <code>BuildKit</code> 为实验特性，每个 <code>Dockerfile</code> 文件开头都必须加上如下指令</strong></p>
<pre class="language-docker" data-language="docker"><code class="language-docker"><span class="token comment"># syntax = docker/dockerfile:experimental</span></code></pre>

<p>第一个 <code>RUN</code> 指令执行后，<code>id</code> 为 <code>my_app_npm_module</code> 的缓存文件夹挂载到了 <code>/app/node_modules</code> 文件夹中。多次执行也不会产生多个中间层镜像。</p>
<p>第二个 <code>RUN</code> 指令执行时需要用到 <code>node_modules</code> 文件夹，<code>node_modules</code> 已经挂载，命令也可以正确执行。</p>
<p>第三个 <code>RUN</code> 指令将上一阶段产生的文件复制到指定位置，<code>from</code> 指明缓存的来源，这里 <code>builder</code> 表示缓存来源于构建的第一阶段，<code>source</code> 指明缓存来源的文件夹。</p>
<p>上面的 <code>Dockerfile</code> 中 <code>--mount=type=cache,...</code> 中指令作用如下：</p>
<table>
<thead>
<tr>
<th>Option</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td><code>id</code></td>
<td><code>id</code> 设置一个标志，以便区分缓存。</td>
</tr>
<tr>
<td><code>target</code> (必填项)</td>
<td>缓存的挂载目标文件夹。</td>
</tr>
<tr>
<td><code>ro</code>,<code>readonly</code></td>
<td>只读，缓存文件夹不能被写入。</td>
</tr>
<tr>
<td><code>sharing</code></td>
<td>有 <code>shared</code> <code>private</code> <code>locked</code> 值可供选择。<code>sharing</code> 设置当一个缓存被多次使用时的表现，由于 <code>BuildKit</code> 支持并行构建，当多个步骤使用同一缓存时（同一 <code>id</code>）会发生冲突。<code>shared</code> 表示多个步骤可以同时读写，<code>private</code> 表示当多个步骤使用同一缓存时，每个步骤使用不同的缓存，<code>locked</code> 表示当一个步骤完成释放缓存后，后一个步骤才能继续使用该缓存。</td>
</tr>
<tr>
<td><code>from</code></td>
<td>缓存来源（构建阶段），不填写时为空文件夹。</td>
</tr>
<tr>
<td><code>source</code></td>
<td>来源的文件夹路径。</td>
</tr>
</tbody></table>
<h4 id="RUN-mount-type-bind"><a href="#RUN-mount-type-bind" class="headerlink" title="RUN --mount=type=bind"></a><code>RUN --mount=type=bind</code></h4><p>该指令可以将一个镜像（或上一构建阶段）的文件挂载到指定位置。</p>
<pre class="language-docker" data-language="docker"><code class="language-docker"><span class="token comment"># syntax = docker/dockerfile:experimental</span>
<span class="token instruction"><span class="token keyword">RUN</span> <span class="token options"><span class="token property">--mount</span><span class="token punctuation">=</span><span class="token string">type=bind,from=php:alpine,source=/usr/local/bin/docker-php-entrypoint,target=/docker-php-entrypoint</span></span> <span class="token operator">\</span>
        cat /docker-php-entrypoint</span></code></pre>

<h4 id="RUN-mount-type-tmpfs"><a href="#RUN-mount-type-tmpfs" class="headerlink" title="RUN --mount=type=tmpfs"></a><code>RUN --mount=type=tmpfs</code></h4><p>该指令可以将一个 <code>tmpfs</code> 文件系统挂载到指定位置。</p>
<pre class="language-docker" data-language="docker"><code class="language-docker"><span class="token comment"># syntax = docker/dockerfile:experimental</span>
<span class="token instruction"><span class="token keyword">RUN</span> <span class="token options"><span class="token property">--mount</span><span class="token punctuation">=</span><span class="token string">type=tmpfs,target=/temp</span></span> <span class="token operator">\</span>
        mount | grep /temp</span></code></pre>

<h4 id="RUN-mount-type-secret"><a href="#RUN-mount-type-secret" class="headerlink" title="RUN --mount=type=secret"></a><code>RUN --mount=type=secret</code></h4><p>该指令可以将一个文件(例如密钥)挂载到指定位置。</p>
<pre class="language-docker" data-language="docker"><code class="language-docker"><span class="token comment"># syntax = docker/dockerfile:experimental</span>
<span class="token instruction"><span class="token keyword">RUN</span> <span class="token options"><span class="token property">--mount</span><span class="token punctuation">=</span><span class="token string">type=secret,id=aws,target=/root/.aws/credentials</span></span> <span class="token operator">\</span>
        cat /root/.aws/credentials</span></code></pre>

<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">docker</span> build -t <span class="token builtin class-name">test</span> --secret <span class="token assign-left variable">id</span><span class="token operator">=</span>aws,src<span class="token operator">=</span><span class="token environment constant">$HOME</span>/.aws/credentials <span class="token builtin class-name">.</span></code></pre>

<h4 id="RUN-mount-type-ssh"><a href="#RUN-mount-type-ssh" class="headerlink" title="RUN --mount=type=ssh"></a><code>RUN --mount=type=ssh</code></h4><p>该指令可以挂载 <code>ssh</code> 密钥。</p>
<pre class="language-docker" data-language="docker"><code class="language-docker"><span class="token comment"># syntax = docker/dockerfile:experimental</span>
<span class="token instruction"><span class="token keyword">FROM</span> alpine</span>
<span class="token instruction"><span class="token keyword">RUN</span> apk add --no-cache openssh-client</span>
<span class="token instruction"><span class="token keyword">RUN</span> mkdir -p -m 0700 ~/.ssh &amp;&amp; ssh-keyscan gitlab.com >> ~/.ssh/known_hosts</span>
<span class="token instruction"><span class="token keyword">RUN</span> <span class="token options"><span class="token property">--mount</span><span class="token punctuation">=</span><span class="token string">type=ssh</span></span> ssh git@gitlab.com | tee /hello</span></code></pre>

<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token builtin class-name">eval</span> <span class="token variable"><span class="token variable">$(</span>ssh-agent<span class="token variable">)</span></span>
$ ssh-add ~/.ssh/id_rsa
<span class="token punctuation">(</span>Input your passphrase here<span class="token punctuation">)</span>
$ <span class="token function">docker</span> build -t <span class="token builtin class-name">test</span> --ssh <span class="token assign-left variable">default</span><span class="token operator">=</span><span class="token environment constant">$SSH_AUTH_SOCK</span> <span class="token builtin class-name">.</span></code></pre>

<h3 id="docker-compose-build-使用-Buildkit"><a href="#docker-compose-build-使用-Buildkit" class="headerlink" title="docker-compose build 使用 Buildkit"></a>docker-compose build 使用 Buildkit</h3><p>设置 <code>COMPOSE_DOCKER_CLI_BUILD=1</code> 环境变量即可使用。</p>
<h3 id="官方文档-1"><a href="#官方文档-1" class="headerlink" title="官方文档"></a>官方文档</h3><ul>
<li><a href="https://github.com/moby/buildkit/blob/master/frontend/dockerfile/docs/experimental.md">https://github.com/moby/buildkit/blob/master/frontend/dockerfile/docs/experimental.md</a></li>
</ul>
<h2 id="使用-Buildx-构建镜像"><a href="#使用-Buildx-构建镜像" class="headerlink" title="使用 Buildx 构建镜像"></a>使用 Buildx 构建镜像</h2><h3 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h3><p>你可以直接使用 <code>docker buildx build</code> 命令构建镜像。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">docker</span> buildx build <span class="token builtin class-name">.</span>
<span class="token punctuation">[</span>+<span class="token punctuation">]</span> Building <span class="token number">8</span>.4s <span class="token punctuation">(</span><span class="token number">23</span>/32<span class="token punctuation">)</span>
 <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">..</span>.</code></pre>

<p>Buildx 使用 <a href="buildkit.md">BuildKit 引擎</a> 进行构建，支持许多新的功能，具体参考 <a href="buildkit.md">Buildkit</a> 一节。</p>
<h3 id="官方文档-2"><a href="#官方文档-2" class="headerlink" title="官方文档"></a>官方文档</h3><ul>
<li><a href="https://docs.docker.com/engine/reference/commandline/buildx/">https://docs.docker.com/engine/reference/commandline/buildx/</a></li>
</ul>
<h2 id="使用-buildx-构建多种系统架构支持的-Docker-镜像"><a href="#使用-buildx-构建多种系统架构支持的-Docker-镜像" class="headerlink" title="使用 buildx 构建多种系统架构支持的 Docker 镜像"></a>使用 buildx 构建多种系统架构支持的 Docker 镜像</h2><p>在之前的版本中构建多种系统架构支持的 Docker 镜像，要想使用统一的名字必须使用 <a href="../image/manifest.md"><code>$ docker manifest</code></a> 命令。</p>
<p>在 Docker 19.03+ 版本中可以使用 <code>$ docker buildx build</code> 命令使用 <code>BuildKit</code> 构建镜像。该命令支持 <code>--platform</code> 参数可以同时构建支持多种系统架构的 Docker 镜像，大大简化了构建步骤。</p>
<h3 id="新建-builder-实例"><a href="#新建-builder-实例" class="headerlink" title="新建 builder 实例"></a>新建 <code>builder</code> 实例</h3><p>Docker for Linux 不支持构建 <code>arm</code> 架构镜像，我们可以运行一个新的容器让其支持该特性，Docker 桌面版无需进行此项设置。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">docker</span> run --rm --privileged tonistiigi/binfmt:latest --install all</code></pre>

<p>由于 Docker 默认的 <code>builder</code> 实例不支持同时指定多个 <code>--platform</code>，我们必须首先创建一个新的 <code>builder</code> 实例。同时由于国内拉取镜像较缓慢，我们可以使用配置了 <a href="https://github.com/moby/buildkit/blob/master/docs/buildkitd.toml.md">镜像加速地址</a>  的 <a href="https://github.com/docker-practice/buildx"><code>dockerpracticesig/buildkit:master</code></a> 镜像替换官方镜像。</p>
<blockquote>
<p>如果你有私有的镜像加速器，可以基于 <a href="https://github.com/docker-practice/buildx">https://github.com/docker-practice/buildx</a> 构建自己的 buildkit 镜像并使用它。</p>
</blockquote>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 适用于国内环境</span>
$ <span class="token function">docker</span> buildx create --use --name<span class="token operator">=</span>mybuilder-cn --driver docker-container --driver-opt <span class="token assign-left variable">image</span><span class="token operator">=</span>dockerpracticesig/buildkit:master
<span class="token comment"># 适用于腾讯云环境(腾讯云主机、coding.net 持续集成)</span>
$ <span class="token function">docker</span> buildx create --use --name<span class="token operator">=</span>mybuilder-cn --driver docker-container --driver-opt <span class="token assign-left variable">image</span><span class="token operator">=</span>dockerpracticesig/buildkit:master-tencent
<span class="token comment"># $ docker buildx create --name mybuilder --driver docker-container</span>
$ <span class="token function">docker</span> buildx use mybuilder</code></pre>

<h3 id="构建镜像-2"><a href="#构建镜像-2" class="headerlink" title="构建镜像"></a>构建镜像</h3><p>新建 Dockerfile 文件。</p>
<pre class="language-docker" data-language="docker"><code class="language-docker"><span class="token instruction"><span class="token keyword">FROM</span> <span class="token options"><span class="token property">--platform</span><span class="token punctuation">=</span><span class="token string">$TARGETPLATFORM</span></span> alpine</span>
<span class="token instruction"><span class="token keyword">RUN</span> uname -a > /os.txt</span>
<span class="token instruction"><span class="token keyword">CMD</span> cat /os.txt</span></code></pre>

<p>使用 <code>$ docker buildx build</code> 命令构建镜像，注意将 <code>myusername</code> 替换为自己的 Docker Hub 用户名。</p>
<p><code>--push</code> 参数表示将构建好的镜像推送到 Docker 仓库。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">docker</span> buildx build --platform linux/arm,linux/arm64,linux/amd64 -t myusername/hello <span class="token builtin class-name">.</span> --push
<span class="token comment"># 查看镜像信息</span>
$ <span class="token function">docker</span> buildx imagetools inspect myusername/hello</code></pre>

<p>在不同架构运行该镜像，可以得到该架构的信息。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># arm</span>
$ <span class="token function">docker</span> run -it --rm myusername/hello
Linux buildkitsandbox <span class="token number">4.9</span>.125-linuxkit <span class="token comment">#1 SMP Fri Sep 7 08:20:28 UTC 2018 armv7l Linux</span>
<span class="token comment"># arm64</span>
$ <span class="token function">docker</span> run -it --rm myusername/hello
Linux buildkitsandbox <span class="token number">4.9</span>.125-linuxkit <span class="token comment">#1 SMP Fri Sep 7 08:20:28 UTC 2018 aarch64 Linux</span>
<span class="token comment"># amd64</span>
$ <span class="token function">docker</span> run -it --rm myusername/hello
Linux buildkitsandbox <span class="token number">4.9</span>.125-linuxkit <span class="token comment">#1 SMP Fri Sep 7 08:20:28 UTC 2018 x86_64 Linux</span></code></pre>

<h3 id="架构相关变量"><a href="#架构相关变量" class="headerlink" title="架构相关变量"></a>架构相关变量</h3><p><code>Dockerfile</code> 支持如下架构相关的变量</p>
<p><strong>TARGETPLATFORM</strong> </p>
<p>构建镜像的目标平台，例如 <code>linux/amd64</code>, <code>linux/arm/v7</code>, <code>windows/amd64</code>。</p>
<p><strong>TARGETOS</strong> </p>
<p><code>TARGETPLATFORM</code> 的 OS 类型，例如 <code>linux</code>, <code>windows</code></p>
<p><strong>TARGETARCH</strong> </p>
<p><code>TARGETPLATFORM</code> 的架构类型，例如 <code>amd64</code>, <code>arm</code></p>
<p><strong>TARGETVARIANT</strong></p>
<p><code>TARGETPLATFORM</code> 的变种，该变量可能为空，例如 <code>v7</code></p>
<p><strong>BUILDPLATFORM</strong></p>
<p>构建镜像主机平台，例如 <code>linux/amd64</code></p>
<p><strong>BUILDOS</strong> </p>
<p><code>BUILDPLATFORM</code> 的 OS 类型，例如 <code>linux</code></p>
<p><strong>BUILDARCH</strong> </p>
<p><code>BUILDPLATFORM</code> 的架构类型，例如 <code>amd64</code></p>
<p><strong>BUILDVARIANT</strong> </p>
<p><code>BUILDPLATFORM</code> 的变种，该变量可能为空，例如 <code>v7</code></p>
<h4 id="使用举例"><a href="#使用举例" class="headerlink" title="使用举例"></a>使用举例</h4><p>例如我们要构建支持 <code>linux/arm/v7</code> 和 <code>linux/amd64</code> 两种架构的镜像。假设已经生成了两个平台对应的二进制文件：</p>
<ul>
<li><code>bin/dist-linux-arm</code></li>
<li><code>bin/dist-linux-amd64</code></li>
</ul>
<p>那么 <code>Dockerfile</code> 可以这样书写：</p>
<pre class="language-docker" data-language="docker"><code class="language-docker"><span class="token instruction"><span class="token keyword">FROM</span> scratch</span>
<span class="token comment"># 使用变量必须申明</span>
<span class="token instruction"><span class="token keyword">ARG</span> TARGETOS</span>
<span class="token instruction"><span class="token keyword">ARG</span> TARGETARCH</span>
<span class="token instruction"><span class="token keyword">COPY</span> bin/dist-<span class="token variable">$&#123;TARGETOS&#125;</span>-<span class="token variable">$&#123;TARGETARCH&#125;</span> /dist</span>
<span class="token instruction"><span class="token keyword">ENTRYPOINT</span> [<span class="token string">"dist"</span>]</span></code></pre>



<h1 id="etcd"><a href="#etcd" class="headerlink" title="etcd"></a>etcd</h1><p><code>etcd</code> 是 <code>CoreOS</code> 团队发起的一个管理配置信息和服务发现（<code>Service Discovery</code>）的项目，在这一章里面，我们将基于 <code>etcd 3.x</code> 版本介绍该项目的目标，安装和使用，以及实现的技术。</p>
<h2 id="什么是-etcd"><a href="#什么是-etcd" class="headerlink" title="什么是 etcd"></a>什么是 etcd</h2><p><code>etcd</code> 是 <code>CoreOS</code> 团队于 2013 年 6 月发起的开源项目，它的目标是构建一个高可用的分布式键值（<code>key-value</code>）数据库，基于 <code>Go</code> 语言实现。我们知道，在分布式系统中，各种服务的配置信息的管理分享，服务的发现是一个很基本同时也是很重要的问题。<code>CoreOS</code> 项目就希望基于 <code>etcd</code> 来解决这一问题。</p>
<p><code>etcd</code> 目前在 <a href="https://github.com/etcd-io/etcd">github.com&#x2F;etcd-io&#x2F;etcd</a> 进行维护。</p>
<p>受到 <a href="https://zookeeper.apache.org/">Apache ZooKeeper</a> 项目和 <a href="https://github.com/ha/doozerd">doozer</a> 项目的启发，<code>etcd</code> 在设计的时候重点考虑了下面四个要素：</p>
<ul>
<li><p>简单：具有定义良好、面向用户的 <code>API</code> (<a href="https://github.com/grpc/grpc">gRPC</a>)</p>
</li>
<li><p>安全：支持 <code>HTTPS</code> 方式的访问</p>
</li>
<li><p>快速：支持并发 <code>10 k/s</code> 的写操作</p>
</li>
<li><p>可靠：支持分布式结构，基于 <code>Raft</code> 的一致性算法</p>
</li>
</ul>
<p><em>Apache ZooKeeper 是一套知名的分布式系统中进行同步和一致性管理的工具。</em></p>
<p><em>doozer 是一个一致性分布式数据库。</em></p>
<p><em><a href="https://raft.github.io/">Raft</a> 是一套通过选举主节点来实现分布式系统一致性的算法，相比于大名鼎鼎的 Paxos 算法，它的过程更容易被人理解，由 Stanford 大学的 Diego Ongaro 和 John Ousterhout 提出。更多细节可以参考 <a href="http://raftconsensus.github.io/">raftconsensus.github.io</a>。</em></p>
<p>一般情况下，用户使用 <code>etcd</code> 可以在多个节点上启动多个实例，并添加它们为一个集群。同一个集群中的 <code>etcd</code> 实例将会保持彼此信息的一致性。</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p><code>etcd</code> 基于 <code>Go</code> 语言实现，因此，用户可以从 <a href="https://github.com/etcd-io/etcd">项目主页</a> 下载源代码自行编译，也可以下载编译好的二进制文件，甚至直接使用制作好的 <code>Docker</code> 镜像文件来体验。</p>
<blockquote>
<p>注意：本章节内容基于 etcd <code>3.4.x</code> 版本</p>
</blockquote>
<h3 id="二进制文件方式下载"><a href="#二进制文件方式下载" class="headerlink" title="二进制文件方式下载"></a>二进制文件方式下载</h3><p>编译好的二进制文件都在 <a href="https://github.com/etcd-io/etcd/releases/">github.com&#x2F;etcd-io&#x2F;etcd&#x2F;releases</a> 页面，用户可以选择需要的版本，或通过下载工具下载。</p>
<p>例如，使用 <code>curl</code> 工具下载压缩包，并解压。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">curl</span> -L https://github.com/etcd-io/etcd/releases/download/v3.4.0/etcd-v3.4.0-linux-amd64.tar.gz -o etcd-v3.4.0-linux-amd64.tar.gz
<span class="token comment"># 国内用户可以使用以下方式加快下载</span>
$ <span class="token function">curl</span> -L https://download.fastgit.org/etcd-io/etcd/releases/download/v3.4.0/etcd-v3.4.0-linux-amd64.tar.gz -o etcd-v3.4.0-linux-amd64.tar.gz
$ <span class="token function">tar</span> xzvf etcd-v3.4.0-linux-amd64.tar.gz
$ <span class="token builtin class-name">cd</span> etcd-v3.4.0-linux-amd64</code></pre>

<p>解压后，可以看到文件包括</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">ls</span>
Documentation README-etcdctl.md README.md READMEv2-etcdctl.md etcd etcdctl</code></pre>

<p>其中 <code>etcd</code> 是服务主文件，<code>etcdctl</code> 是提供给用户的命令客户端，其他文件是支持文档。</p>
<p>下面将 <code>etcd</code> <code>etcdctl</code> 文件放到系统可执行目录（例如 <code>/usr/local/bin/</code>）。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">cp</span> etcd* /usr/local/bin/</code></pre>

<p>默认 <code>2379</code> 端口处理客户端的请求，<code>2380</code> 端口用于集群各成员间的通信。启动 <code>etcd</code> 显示类似如下的信息：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ etcd
<span class="token punctuation">..</span>.
<span class="token number">2017</span>-12-03 <span class="token number">11</span>:18:34.411579 I <span class="token operator">|</span> embed: listening <span class="token keyword">for</span> peers on http://localhost:2380
<span class="token number">2017</span>-12-03 <span class="token number">11</span>:18:34.411938 I <span class="token operator">|</span> embed: listening <span class="token keyword">for</span> client requests on localhost:2379</code></pre>

<p>此时，可以使用 <code>etcdctl</code> 命令进行测试，设置和获取键值 <code>testkey: &quot;hello world&quot;</code>，检查 <code>etcd</code> 服务是否启动成功：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token assign-left variable">ETCDCTL_API</span><span class="token operator">=</span><span class="token number">3</span> etcdctl member list
8e9e05c52164694d, started, default, http://localhost:2380, http://localhost:2379
$ <span class="token assign-left variable">ETCDCTL_API</span><span class="token operator">=</span><span class="token number">3</span> etcdctl put testkey <span class="token string">"hello world"</span>
OK
$ etcdctl get testkey
testkey
hello world</code></pre>

<p>说明 etcd 服务已经成功启动了。</p>
<h3 id="Docker-镜像方式运行"><a href="#Docker-镜像方式运行" class="headerlink" title="Docker 镜像方式运行"></a>Docker 镜像方式运行</h3><p>镜像名称为 <code>quay.io/coreos/etcd</code>，可以通过下面的命令启动 <code>etcd</code> 服务监听到 <code>2379</code> 和 <code>2380</code> 端口。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">docker</span> run <span class="token punctuation">\</span>
-p <span class="token number">2379</span>:2379 <span class="token punctuation">\</span>
-p <span class="token number">2380</span>:2380 <span class="token punctuation">\</span>
--mount <span class="token assign-left variable">type</span><span class="token operator">=</span>bind,source<span class="token operator">=</span>/tmp/etcd-data.tmp,destination<span class="token operator">=</span>/etcd-data <span class="token punctuation">\</span>
--name etcd-gcr-v3.4.0 <span class="token punctuation">\</span>
quay.io/coreos/etcd:v3.4.0 <span class="token punctuation">\</span>
/usr/local/bin/etcd <span class="token punctuation">\</span>
--name s1 <span class="token punctuation">\</span>
--data-dir /etcd-data <span class="token punctuation">\</span>
--listen-client-urls http://0.0.0.0:2379 <span class="token punctuation">\</span>
--advertise-client-urls http://0.0.0.0:2379 <span class="token punctuation">\</span>
--listen-peer-urls http://0.0.0.0:2380 <span class="token punctuation">\</span>
--initial-advertise-peer-urls http://0.0.0.0:2380 <span class="token punctuation">\</span>
--initial-cluster <span class="token assign-left variable">s1</span><span class="token operator">=</span>http://0.0.0.0:2380 <span class="token punctuation">\</span>
--initial-cluster-token tkn <span class="token punctuation">\</span>
--initial-cluster-state new <span class="token punctuation">\</span>
--log-level info <span class="token punctuation">\</span>
--logger zap <span class="token punctuation">\</span>
--log-outputs stderr</code></pre>

<p>打开新的终端按照上一步的方法测试 <code>etcd</code> 是否成功启动。</p>
<h3 id="macOS-中运行"><a href="#macOS-中运行" class="headerlink" title="macOS 中运行"></a>macOS 中运行</h3><pre class="language-bash" data-language="bash"><code class="language-bash">$ brew <span class="token function">install</span> etcd
$ etcd
$ etcdctl member list</code></pre>

<h2 id="etcd-集群"><a href="#etcd-集群" class="headerlink" title="etcd 集群"></a>etcd 集群</h2><p>下面我们使用 <a href="../compose/">Docker Compose</a> 模拟启动一个 3 节点的 <code>etcd</code> 集群。</p>
<p>编辑 <code>docker-compose.yml</code> 文件</p>
<pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">"3.6"</span>
<span class="token key atrule">services</span><span class="token punctuation">:</span>
  <span class="token key atrule">node1</span><span class="token punctuation">:</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> quay.io/coreos/etcd<span class="token punctuation">:</span>v3.4.0
    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> node1<span class="token punctuation">-</span>data<span class="token punctuation">:</span>/etcd<span class="token punctuation">-</span>data
    <span class="token key atrule">expose</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token number">2379</span>
      <span class="token punctuation">-</span> <span class="token number">2380</span>
    <span class="token key atrule">networks</span><span class="token punctuation">:</span>
      <span class="token key atrule">cluster_net</span><span class="token punctuation">:</span>
        <span class="token key atrule">ipv4_address</span><span class="token punctuation">:</span> 172.16.238.100
    <span class="token key atrule">environment</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> ETCDCTL_API=3
    <span class="token key atrule">command</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> /usr/local/bin/etcd
      <span class="token punctuation">-</span> <span class="token punctuation">-</span><span class="token punctuation">-</span>data<span class="token punctuation">-</span>dir=/etcd<span class="token punctuation">-</span>data
      <span class="token punctuation">-</span> <span class="token punctuation">-</span><span class="token punctuation">-</span>name
      <span class="token punctuation">-</span> node1
      <span class="token punctuation">-</span> <span class="token punctuation">-</span><span class="token punctuation">-</span>initial<span class="token punctuation">-</span>advertise<span class="token punctuation">-</span>peer<span class="token punctuation">-</span>urls
      <span class="token punctuation">-</span> http<span class="token punctuation">:</span>//172.16.238.100<span class="token punctuation">:</span><span class="token number">2380</span>
      <span class="token punctuation">-</span> <span class="token punctuation">-</span><span class="token punctuation">-</span>listen<span class="token punctuation">-</span>peer<span class="token punctuation">-</span>urls
      <span class="token punctuation">-</span> http<span class="token punctuation">:</span>//0.0.0.0<span class="token punctuation">:</span><span class="token number">2380</span>
      <span class="token punctuation">-</span> <span class="token punctuation">-</span><span class="token punctuation">-</span>advertise<span class="token punctuation">-</span>client<span class="token punctuation">-</span>urls
      <span class="token punctuation">-</span> http<span class="token punctuation">:</span>//172.16.238.100<span class="token punctuation">:</span><span class="token number">2379</span>
      <span class="token punctuation">-</span> <span class="token punctuation">-</span><span class="token punctuation">-</span>listen<span class="token punctuation">-</span>client<span class="token punctuation">-</span>urls
      <span class="token punctuation">-</span> http<span class="token punctuation">:</span>//0.0.0.0<span class="token punctuation">:</span><span class="token number">2379</span>
      <span class="token punctuation">-</span> <span class="token punctuation">-</span><span class="token punctuation">-</span>initial<span class="token punctuation">-</span>cluster
      <span class="token punctuation">-</span> node1=http<span class="token punctuation">:</span>//172.16.238.100<span class="token punctuation">:</span><span class="token number">2380</span><span class="token punctuation">,</span>node2=http<span class="token punctuation">:</span>//172.16.238.101<span class="token punctuation">:</span><span class="token number">2380</span><span class="token punctuation">,</span>node3=http<span class="token punctuation">:</span>//172.16.238.102<span class="token punctuation">:</span><span class="token number">2380</span>
      <span class="token punctuation">-</span> <span class="token punctuation">-</span><span class="token punctuation">-</span>initial<span class="token punctuation">-</span>cluster<span class="token punctuation">-</span>state
      <span class="token punctuation">-</span> new
      <span class="token punctuation">-</span> <span class="token punctuation">-</span><span class="token punctuation">-</span>initial<span class="token punctuation">-</span>cluster<span class="token punctuation">-</span>token
      <span class="token punctuation">-</span> docker<span class="token punctuation">-</span>etcd
  <span class="token key atrule">node2</span><span class="token punctuation">:</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> quay.io/coreos/etcd<span class="token punctuation">:</span>v3.4.0
    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> node2<span class="token punctuation">-</span>data<span class="token punctuation">:</span>/etcd<span class="token punctuation">-</span>data
    <span class="token key atrule">networks</span><span class="token punctuation">:</span>
      <span class="token key atrule">cluster_net</span><span class="token punctuation">:</span>
        <span class="token key atrule">ipv4_address</span><span class="token punctuation">:</span> 172.16.238.101
    <span class="token key atrule">environment</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> ETCDCTL_API=3
    <span class="token key atrule">expose</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token number">2379</span>
      <span class="token punctuation">-</span> <span class="token number">2380</span>
    <span class="token key atrule">command</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> /usr/local/bin/etcd
      <span class="token punctuation">-</span> <span class="token punctuation">-</span><span class="token punctuation">-</span>data<span class="token punctuation">-</span>dir=/etcd<span class="token punctuation">-</span>data
      <span class="token punctuation">-</span> <span class="token punctuation">-</span><span class="token punctuation">-</span>name
      <span class="token punctuation">-</span> node2
      <span class="token punctuation">-</span> <span class="token punctuation">-</span><span class="token punctuation">-</span>initial<span class="token punctuation">-</span>advertise<span class="token punctuation">-</span>peer<span class="token punctuation">-</span>urls
      <span class="token punctuation">-</span> http<span class="token punctuation">:</span>//172.16.238.101<span class="token punctuation">:</span><span class="token number">2380</span>
      <span class="token punctuation">-</span> <span class="token punctuation">-</span><span class="token punctuation">-</span>listen<span class="token punctuation">-</span>peer<span class="token punctuation">-</span>urls
      <span class="token punctuation">-</span> http<span class="token punctuation">:</span>//0.0.0.0<span class="token punctuation">:</span><span class="token number">2380</span>
      <span class="token punctuation">-</span> <span class="token punctuation">-</span><span class="token punctuation">-</span>advertise<span class="token punctuation">-</span>client<span class="token punctuation">-</span>urls
      <span class="token punctuation">-</span> http<span class="token punctuation">:</span>//172.16.238.101<span class="token punctuation">:</span><span class="token number">2379</span>
      <span class="token punctuation">-</span> <span class="token punctuation">-</span><span class="token punctuation">-</span>listen<span class="token punctuation">-</span>client<span class="token punctuation">-</span>urls
      <span class="token punctuation">-</span> http<span class="token punctuation">:</span>//0.0.0.0<span class="token punctuation">:</span><span class="token number">2379</span>
      <span class="token punctuation">-</span> <span class="token punctuation">-</span><span class="token punctuation">-</span>initial<span class="token punctuation">-</span>cluster
      <span class="token punctuation">-</span> node1=http<span class="token punctuation">:</span>//172.16.238.100<span class="token punctuation">:</span><span class="token number">2380</span><span class="token punctuation">,</span>node2=http<span class="token punctuation">:</span>//172.16.238.101<span class="token punctuation">:</span><span class="token number">2380</span><span class="token punctuation">,</span>node3=http<span class="token punctuation">:</span>//172.16.238.102<span class="token punctuation">:</span><span class="token number">2380</span>
      <span class="token punctuation">-</span> <span class="token punctuation">-</span><span class="token punctuation">-</span>initial<span class="token punctuation">-</span>cluster<span class="token punctuation">-</span>state
      <span class="token punctuation">-</span> new
      <span class="token punctuation">-</span> <span class="token punctuation">-</span><span class="token punctuation">-</span>initial<span class="token punctuation">-</span>cluster<span class="token punctuation">-</span>token
      <span class="token punctuation">-</span> docker<span class="token punctuation">-</span>etcd
  <span class="token key atrule">node3</span><span class="token punctuation">:</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> quay.io/coreos/etcd<span class="token punctuation">:</span>v3.4.0
    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> node3<span class="token punctuation">-</span>data<span class="token punctuation">:</span>/etcd<span class="token punctuation">-</span>data
    <span class="token key atrule">networks</span><span class="token punctuation">:</span>
      <span class="token key atrule">cluster_net</span><span class="token punctuation">:</span>
        <span class="token key atrule">ipv4_address</span><span class="token punctuation">:</span> 172.16.238.102
    <span class="token key atrule">environment</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> ETCDCTL_API=3
    <span class="token key atrule">expose</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token number">2379</span>
      <span class="token punctuation">-</span> <span class="token number">2380</span>
    <span class="token key atrule">command</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> /usr/local/bin/etcd
      <span class="token punctuation">-</span> <span class="token punctuation">-</span><span class="token punctuation">-</span>data<span class="token punctuation">-</span>dir=/etcd<span class="token punctuation">-</span>data
      <span class="token punctuation">-</span> <span class="token punctuation">-</span><span class="token punctuation">-</span>name
      <span class="token punctuation">-</span> node3
      <span class="token punctuation">-</span> <span class="token punctuation">-</span><span class="token punctuation">-</span>initial<span class="token punctuation">-</span>advertise<span class="token punctuation">-</span>peer<span class="token punctuation">-</span>urls
      <span class="token punctuation">-</span> http<span class="token punctuation">:</span>//172.16.238.102<span class="token punctuation">:</span><span class="token number">2380</span>
      <span class="token punctuation">-</span> <span class="token punctuation">-</span><span class="token punctuation">-</span>listen<span class="token punctuation">-</span>peer<span class="token punctuation">-</span>urls
      <span class="token punctuation">-</span> http<span class="token punctuation">:</span>//0.0.0.0<span class="token punctuation">:</span><span class="token number">2380</span>
      <span class="token punctuation">-</span> <span class="token punctuation">-</span><span class="token punctuation">-</span>advertise<span class="token punctuation">-</span>client<span class="token punctuation">-</span>urls
      <span class="token punctuation">-</span> http<span class="token punctuation">:</span>//172.16.238.102<span class="token punctuation">:</span><span class="token number">2379</span>
      <span class="token punctuation">-</span> <span class="token punctuation">-</span><span class="token punctuation">-</span>listen<span class="token punctuation">-</span>client<span class="token punctuation">-</span>urls
      <span class="token punctuation">-</span> http<span class="token punctuation">:</span>//0.0.0.0<span class="token punctuation">:</span><span class="token number">2379</span>
      <span class="token punctuation">-</span> <span class="token punctuation">-</span><span class="token punctuation">-</span>initial<span class="token punctuation">-</span>cluster
      <span class="token punctuation">-</span> node1=http<span class="token punctuation">:</span>//172.16.238.100<span class="token punctuation">:</span><span class="token number">2380</span><span class="token punctuation">,</span>node2=http<span class="token punctuation">:</span>//172.16.238.101<span class="token punctuation">:</span><span class="token number">2380</span><span class="token punctuation">,</span>node3=http<span class="token punctuation">:</span>//172.16.238.102<span class="token punctuation">:</span><span class="token number">2380</span>
      <span class="token punctuation">-</span> <span class="token punctuation">-</span><span class="token punctuation">-</span>initial<span class="token punctuation">-</span>cluster<span class="token punctuation">-</span>state
      <span class="token punctuation">-</span> new
      <span class="token punctuation">-</span> <span class="token punctuation">-</span><span class="token punctuation">-</span>initial<span class="token punctuation">-</span>cluster<span class="token punctuation">-</span>token
      <span class="token punctuation">-</span> docker<span class="token punctuation">-</span>etcd
<span class="token key atrule">volumes</span><span class="token punctuation">:</span>
  <span class="token key atrule">node1-data</span><span class="token punctuation">:</span>
  <span class="token key atrule">node2-data</span><span class="token punctuation">:</span>
  <span class="token key atrule">node3-data</span><span class="token punctuation">:</span>
<span class="token key atrule">networks</span><span class="token punctuation">:</span>
  <span class="token key atrule">cluster_net</span><span class="token punctuation">:</span>
    <span class="token key atrule">driver</span><span class="token punctuation">:</span> bridge
    <span class="token key atrule">ipam</span><span class="token punctuation">:</span>
      <span class="token key atrule">driver</span><span class="token punctuation">:</span> default
      <span class="token key atrule">config</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span>
        <span class="token key atrule">subnet</span><span class="token punctuation">:</span> 172.16.238.0/24</code></pre>

<p>使用 <code>docker-compose up</code> 启动集群之后使用 <code>docker exec</code> 命令登录到任一节点测试 <code>etcd</code> 集群。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">/ <span class="token comment"># etcdctl member list</span>
daf3fd52e3583ff, started, node3, http://172.16.238.102:2380, http://172.16.238.102:2379
422a74f03b622fef, started, node1, http://172.16.238.100:2380, http://172.16.238.100:2379
ed635d2a2dbef43d, started, node2, http://172.16.238.101:2380, http://172.16.238.101:2379</code></pre>

<h2 id="使用-etcdctl"><a href="#使用-etcdctl" class="headerlink" title="使用 etcdctl"></a>使用 etcdctl</h2><p><code>etcdctl</code> 是一个命令行客户端，它能提供一些简洁的命令，供用户直接跟 <code>etcd</code> 服务打交道，而无需基于 <code>HTTP API</code> 方式。这在某些情况下将很方便，例如用户对服务进行测试或者手动修改数据库内容。我们也推荐在刚接触 <code>etcd</code> 时通过 <code>etcdctl</code> 命令来熟悉相关的操作，这些操作跟 <code>HTTP API</code> 实际上是对应的。</p>
<p><code>etcd</code> 项目二进制发行包中已经包含了 <code>etcdctl</code> 工具，没有的话，可以从 <a href="https://github.com/etcd-io/etcd/releases">github.com&#x2F;etcd-io&#x2F;etcd&#x2F;releases</a> 下载。</p>
<p><code>etcdctl</code> 支持如下的命令，大体上分为数据库操作和非数据库操作两类，后面将分别进行解释。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">NAME:
	etcdctl - A simple <span class="token builtin class-name">command</span> line client <span class="token keyword">for</span> etcd3.
USAGE:
	etcdctl
VERSION:
	<span class="token number">3.4</span>.0
API VERSION:
	<span class="token number">3.4</span>
COMMANDS:
	get			Gets the key or a range of keys
	put			Puts the given key into the store
	del			Removes the specified key or range of keys <span class="token punctuation">[</span>key, range_end<span class="token punctuation">)</span>
	txn			Txn processes all the requests <span class="token keyword">in</span> one transaction
	compaction		Compacts the event <span class="token function">history</span> <span class="token keyword">in</span> etcd
	alarm disarm		Disarms all alarms
	alarm list		Lists all alarms
	defrag			Defragments the storage of the etcd members with given endpoints
	endpoint health		Checks the healthiness of endpoints specified <span class="token keyword">in</span> <span class="token variable"><span class="token variable">`</span>--endpoints<span class="token variable">`</span></span> flag
	endpoint status		Prints out the status of endpoints specified <span class="token keyword">in</span> <span class="token variable"><span class="token variable">`</span>--endpoints<span class="token variable">`</span></span> flag
	<span class="token function">watch</span>			Watches events stream on keys or prefixes
	version			Prints the version of etcdctl
	lease grant		Creates leases
	lease revoke		Revokes leases
	lease timetolive	Get lease information
	lease keep-alive	Keeps leases alive <span class="token punctuation">(</span>renew<span class="token punctuation">)</span>
	member <span class="token function">add</span>		Adds a member into the cluster
	member remove		Removes a member from the cluster
	member update		Updates a member <span class="token keyword">in</span> the cluster
	member list		Lists all members <span class="token keyword">in</span> the cluster
	snapshot save		Stores an etcd <span class="token function">node</span> backend snapshot to a given <span class="token function">file</span>
	snapshot restore	Restores an etcd member snapshot to an etcd directory
	snapshot status		Gets backend snapshot status of a given <span class="token function">file</span>
	make-mirror		Makes a mirror at the destination etcd cluster
	migrate			Migrates keys <span class="token keyword">in</span> a v2 store to a mvcc store
	lock			Acquires a named lock
	elect			Observes and participates <span class="token keyword">in</span> leader election
	auth <span class="token builtin class-name">enable</span>		Enables authentication
	auth disable		Disables authentication
	user <span class="token function">add</span>		Adds a new user
	user delete		Deletes a user
	user get		Gets detailed information of a user
	user list		Lists all <span class="token function">users</span>
	user <span class="token function">passwd</span>		Changes password of user
	user grant-role		Grants a role to a user
	user revoke-role	Revokes a role from a user
	role <span class="token function">add</span>		Adds a new role
	role delete		Deletes a role
	role get		Gets detailed information of a role
	role list		Lists all roles
	role grant-permission	Grants a key to a role
	role revoke-permission	Revokes a key from a role
	check perf		Check the performance of the etcd cluster
	<span class="token builtin class-name">help</span>			Help about any <span class="token builtin class-name">command</span>
OPTIONS:
      --cacert<span class="token operator">=</span><span class="token string">""</span>				verify certificates of TLS-enabled secure servers using this CA bundle
      --cert<span class="token operator">=</span><span class="token string">""</span>					identify secure client using this TLS certificate <span class="token function">file</span>
      --command-timeout<span class="token operator">=</span>5s			<span class="token function">timeout</span> <span class="token keyword">for</span> short running <span class="token builtin class-name">command</span> <span class="token punctuation">(</span>excluding dial <span class="token function">timeout</span><span class="token punctuation">)</span>
      --debug<span class="token punctuation">[</span><span class="token operator">=</span>false<span class="token punctuation">]</span>				<span class="token builtin class-name">enable</span> client-side debug logging
      --dial-timeout<span class="token operator">=</span>2s				dial <span class="token function">timeout</span> <span class="token keyword">for</span> client connections
      --endpoints<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">127.0</span>.0.1:2379<span class="token punctuation">]</span>		gRPC endpoints
      --hex<span class="token punctuation">[</span><span class="token operator">=</span>false<span class="token punctuation">]</span>				print byte strings as hex encoded strings
      --insecure-skip-tls-verify<span class="token punctuation">[</span><span class="token operator">=</span>false<span class="token punctuation">]</span>	skip server certificate verification
      --insecure-transport<span class="token punctuation">[</span><span class="token operator">=</span>true<span class="token punctuation">]</span>		disable transport security <span class="token keyword">for</span> client connections
      --key<span class="token operator">=</span><span class="token string">""</span>					identify secure client using this TLS key <span class="token function">file</span>
      --user<span class="token operator">=</span><span class="token string">""</span>					username<span class="token punctuation">[</span>:password<span class="token punctuation">]</span> <span class="token keyword">for</span> authentication <span class="token punctuation">(</span>prompt <span class="token keyword">if</span> password is not supplied<span class="token punctuation">)</span>
  -w, --write-out<span class="token operator">=</span><span class="token string">"simple"</span>			<span class="token builtin class-name">set</span> the output <span class="token function">format</span> <span class="token punctuation">(</span>fields, json, protobuf, simple, table<span class="token punctuation">)</span></code></pre>

<h3 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h3><p>数据库操作围绕对键值和目录的 CRUD （符合 REST 风格的一套操作：Create）完整生命周期的管理。</p>
<p>etcd 在键的组织上采用了层次化的空间结构（类似于文件系统中目录的概念），用户指定的键可以为单独的名字，如 <code>testkey</code>，此时实际上放在根目录 <code>/</code> 下面，也可以为指定目录结构，如 <code>cluster1/node2/testkey</code>，则将创建相应的目录结构。</p>
<blockquote>
<p>注：CRUD 即 Create, Read, Update, Delete，是符合 REST 风格的一套 API 操作。</p>
</blockquote>
<h4 id="put"><a href="#put" class="headerlink" title="put"></a>put</h4><pre class="language-bash" data-language="bash"><code class="language-bash">$ etcdctl put /testdir/testkey <span class="token string">"Hello world"</span>
OK</code></pre>

<h4 id="get"><a href="#get" class="headerlink" title="get"></a>get</h4><p>获取指定键的值。例如</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ etcdctl put testkey hello
OK
$ etcdctl get testkey
testkey
hello</code></pre>

<p>支持的选项为</p>
<p><code>--sort</code>	对结果进行排序</p>
<p><code>--consistent</code> 将请求发给主节点，保证获取内容的一致性</p>
<h4 id="del"><a href="#del" class="headerlink" title="del"></a>del</h4><p>删除某个键值。例如</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ etcdctl del testkey
<span class="token number">1</span></code></pre>

<h3 id="非数据库操作"><a href="#非数据库操作" class="headerlink" title="非数据库操作"></a>非数据库操作</h3><h4 id="watch"><a href="#watch" class="headerlink" title="watch"></a>watch</h4><p>监测一个键值的变化，一旦键值发生更新，就会输出最新的值。</p>
<p>例如，用户更新 <code>testkey</code> 键值为 <code>Hello world</code>。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ etcdctl <span class="token function">watch</span> testkey
PUT
testkey
<span class="token number">2</span></code></pre>

<h4 id="member"><a href="#member" class="headerlink" title="member"></a>member</h4><p>通过 <code>list</code>、<code>add</code>、<code>update</code>、<code>remove</code> 命令列出、添加、更新、删除 etcd 实例到 etcd 集群中。</p>
<p>例如本地启动一个 <code>etcd</code> 服务实例后，可以用如下命令进行查看。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ etcdctl member list
422a74f03b622fef, started, node1, http://172.16.238.100:2380, http://172.16.238.100:23</code></pre>

<h1 id="Fedora-CoreOS"><a href="#Fedora-CoreOS" class="headerlink" title="Fedora CoreOS"></a>Fedora CoreOS</h1><p>CoreOS 是一个专门为安全和大规模运行容器化工作负载而构建的新 Fedora 版本，它继承了 Fedora Atomic Host 和 CoreOS Container Linux 的优势。</p>
<p>CoreOS 的安装文件和运行依赖非常小，它提供了精简的 Linux 系统。它使用 Linux 容器在更高的抽象层来管理你的服务，而不是通过常规的包管理工具 yum 或 apt 来安装包。</p>
<p>同时，CoreOS 几乎可以运行在任何平台：VirtualBox Amazon EC2 QEMU&#x2F;KVM VMware Bare Metal 和 OpenStack 等 。</p>
<h2 id="Fedora-CoreOS-介绍"><a href="#Fedora-CoreOS-介绍" class="headerlink" title="Fedora CoreOS 介绍"></a>Fedora CoreOS 介绍</h2><p><a href="https://getfedora.org/coreos/">Fedora CoreOS</a> 是一个自动更新的，最小的，整体的，以容器为中心的操作系统，不仅适用于集群，而且可独立运行，并针对运行 Kubernetes 进行了优化。它旨在结合 CoreOS Container Linux 和 Fedora Atomic Host 的优点，将 Container Linux 中的 <a href="https://github.com/coreos/ignition">Ignition</a> 与 <a href="https://github.com/coreos/rpm-ostree">rpm-ostree</a> 和 Project Atomic 中的 SELinux 强化等技术相集成。其目标是提供最佳的容器主机，以安全，大规模地运行容器化的工作负载。</p>
<h3 id="FCOS-特性"><a href="#FCOS-特性" class="headerlink" title="FCOS 特性"></a>FCOS 特性</h3><h4 id="一个最小化操作系统"><a href="#一个最小化操作系统" class="headerlink" title="一个最小化操作系统"></a>一个最小化操作系统</h4><p>FCOS 被设计成一个基于容器的最小化的现代操作系统。它比现有的 Linux 安装平均节省 40% 的 RAM（大约 114M ）并允许从 PXE 或 iPXE 非常快速的启动。</p>
<h4 id="系统初始化"><a href="#系统初始化" class="headerlink" title="系统初始化"></a>系统初始化</h4><p>Ignition 是一种配置实用程序，可读取配置文件（JSON 格式）并根据该配置配置 FCOS 系统。可配置的组件包括存储，文件系统，systemd 和用户。</p>
<p>Ignition 在系统首次启动期间（在 initramfs 中）仅运行一次。由于 Ignition 在启动过程中的早期运行，因此它可以在用户空间开始启动之前重新对磁盘分区，格式化文件系统，创建用户并写入文件。当 systemd 启动时，systemd 服务已被写入磁盘，从而加快了启动时间。</p>
<h4 id="自动更新"><a href="#自动更新" class="headerlink" title="自动更新"></a>自动更新</h4><p>FCOS 使用 rpm-ostree 系统进行事务性升级。无需像 yum 升级那样升级单个软件包，而是 rpm-ostree 将 OS 升级作为一个原子单元进行。新的 OS 部署在升级期间进行，并在下次重新引导时生效。如果升级出现问题，则一次回滚和重新启动会使系统返回到先前的状态。确保了系统升级对群集容量的影响降到最小。</p>
<h4 id="容器工具"><a href="#容器工具" class="headerlink" title="容器工具"></a>容器工具</h4><p>对于诸如构建，复制和其他管理容器的任务，FCOS 用一组容器工具代替了 <strong>Docker CLI</strong>。<strong>podman CLI</strong> 工具支持许多容器运行时功能，例如运行，启动，停止，列出和删除容器和镜像。<strong>skopeo CLI</strong> 工具可以复制，认证和签名镜像。您还可以使用 <strong>crictl CLI</strong> 工具来处理 CRI-O 容器引擎中的容器和镜像。</p>
<h3 id="参考文档-1"><a href="#参考文档-1" class="headerlink" title="参考文档"></a>参考文档</h3><ul>
<li><a href="https://docs.fedoraproject.org/en-US/fedora-coreos/">官方文档</a></li>
<li><a href="https://docs.openshift.com/container-platform/4.3/architecture/architecture-rhcos.html">openshift 官方文档</a></li>
</ul>
<h1 id="podman"><a href="#podman" class="headerlink" title="podman"></a>podman</h1><p><a href="https://github.com/containers/podman"><code>podman</code></a> 是一个无守护程序与 docker 命令兼容的下一代 Linux 容器工具。</p>
<h2 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h2><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> yum -y <span class="token function">install</span> <span class="token function">podman</span></code></pre>

<h2 id="使用-2"><a href="#使用-2" class="headerlink" title="使用"></a>使用</h2><p><code>podman</code> 与 docker 命令完全兼容，只需将 <code>docker</code> 替换为 <code>podman</code> 即可，例如运行一个容器：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># $ docker run -d -p 80:80 nginx:alpine</span>
$ <span class="token function">podman</span> run -d -p <span class="token number">80</span>:80 nginx:alpine</code></pre>

<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://developers.redhat.com/blog/2019/02/21/podman-and-buildah-for-docker-users/">https://developers.redhat.com/blog/2019/02/21/podman-and-buildah-for-docker-users/</a></li>
</ul>
<h1 id="常见问题总结"><a href="#常见问题总结" class="headerlink" title="常见问题总结"></a>常见问题总结</h1><h2 id="镜像相关"><a href="#镜像相关" class="headerlink" title="镜像相关"></a>镜像相关</h2><h3 id="如何批量清理临时镜像文件？"><a href="#如何批量清理临时镜像文件？" class="headerlink" title="如何批量清理临时镜像文件？"></a>如何批量清理临时镜像文件？</h3><p>答：可以使用 <code>docker image prune</code> 命令。</p>
<h3 id="如何查看镜像支持的环境变量？"><a href="#如何查看镜像支持的环境变量？" class="headerlink" title="如何查看镜像支持的环境变量？"></a>如何查看镜像支持的环境变量？</h3><p>答：可以使用 <code>docker run IMAGE env</code> 命令。</p>
<h3 id="本地的镜像文件都存放在哪里？"><a href="#本地的镜像文件都存放在哪里？" class="headerlink" title="本地的镜像文件都存放在哪里？"></a>本地的镜像文件都存放在哪里？</h3><p>答：与 Docker 相关的本地资源默认存放在 <code>/var/lib/docker/</code> 目录下，以 <code>overlay2</code> 文件系统为例，其中 <code>containers</code> 目录存放容器信息，<code>image</code> 目录存放镜像信息，<code>overlay2</code> 目录下存放具体的镜像层文件。</p>
<h3 id="构建-Docker-镜像应该遵循哪些原则？"><a href="#构建-Docker-镜像应该遵循哪些原则？" class="headerlink" title="构建 Docker 镜像应该遵循哪些原则？"></a>构建 Docker 镜像应该遵循哪些原则？</h3><p>答：整体原则上，尽量保持镜像功能的明确和内容的精简，要点包括</p>
<ul>
<li><p>尽量选取满足需求但较小的基础系统镜像，例如大部分时候可以选择 <code>alpine</code> 镜像，仅有不足六兆大小；</p>
</li>
<li><p>清理编译生成文件、安装包的缓存等临时文件；</p>
</li>
<li><p>安装各个软件时候要指定准确的版本号，并避免引入不需要的依赖；</p>
</li>
<li><p>从安全角度考虑，应用要尽量使用系统的库和依赖；</p>
</li>
<li><p>如果安装应用时候需要配置一些特殊的环境变量，在安装后要还原不需要保持的变量值；</p>
</li>
<li><p>使用 Dockerfile 创建镜像时候要添加 .dockerignore 文件或使用干净的工作目录。</p>
</li>
</ul>
<p>更多内容请查看 <a href="../best_practices.md">Dockerfile 最佳实践</a></p>
<h3 id="碰到网络问题，无法-pull-镜像，命令行指定-http-proxy-无效？"><a href="#碰到网络问题，无法-pull-镜像，命令行指定-http-proxy-无效？" class="headerlink" title="碰到网络问题，无法 pull 镜像，命令行指定 http_proxy 无效？"></a>碰到网络问题，无法 pull 镜像，命令行指定 http_proxy 无效？</h3><p>答：在 Docker 配置文件中添加 <code>export http_proxy=&quot;http://&lt;PROXY_HOST&gt;:&lt;PROXY_PORT&gt;&quot;</code>，之后重启 Docker 服务即可。</p>
<h2 id="容器相关"><a href="#容器相关" class="headerlink" title="容器相关"></a>容器相关</h2><h3 id="容器退出后，通过-docker-container-ls-命令查看不到，数据会丢失么？"><a href="#容器退出后，通过-docker-container-ls-命令查看不到，数据会丢失么？" class="headerlink" title="容器退出后，通过 docker container ls 命令查看不到，数据会丢失么？"></a>容器退出后，通过 docker container ls 命令查看不到，数据会丢失么？</h3><p>答：容器退出后会处于终止（exited）状态，此时可以通过 <code>docker container ls -a</code> 查看。其中的数据也不会丢失，还可以通过 <code>docker start</code> 命令来启动它。只有删除掉容器才会清除所有数据。</p>
<h3 id="如何停止所有正在运行的容器？"><a href="#如何停止所有正在运行的容器？" class="headerlink" title="如何停止所有正在运行的容器？"></a>如何停止所有正在运行的容器？</h3><p>答：可以使用 <code>docker stop $(docker container ls -q)</code> 命令。</p>
<h3 id="如何批量清理已经停止的容器？"><a href="#如何批量清理已经停止的容器？" class="headerlink" title="如何批量清理已经停止的容器？"></a>如何批量清理已经停止的容器？</h3><p>答：可以使用 <code>docker container prune</code> 命令。</p>
<h3 id="如何获取某个容器的-PID-信息？"><a href="#如何获取某个容器的-PID-信息？" class="headerlink" title="如何获取某个容器的 PID 信息？"></a>如何获取某个容器的 PID 信息？</h3><p>答：可以使用</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> inspect --format <span class="token string">'&#123;&#123; .State.Pid &#125;&#125;'</span> <span class="token operator">&lt;</span>CONTAINER ID or NAME<span class="token operator">></span></code></pre>

<h3 id="如何获取某个容器的-IP-地址？"><a href="#如何获取某个容器的-IP-地址？" class="headerlink" title="如何获取某个容器的 IP 地址？"></a>如何获取某个容器的 IP 地址？</h3><p>答：可以使用</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> inspect --format <span class="token string">'&#123;&#123; .NetworkSettings.IPAddress &#125;&#125;'</span> <span class="token operator">&lt;</span>CONTAINER ID or NAME<span class="token operator">></span></code></pre>

<h3 id="如何给容器指定一个固定-IP-地址，而不是每次重启容器-IP-地址都会变？"><a href="#如何给容器指定一个固定-IP-地址，而不是每次重启容器-IP-地址都会变？" class="headerlink" title="如何给容器指定一个固定 IP 地址，而不是每次重启容器 IP 地址都会变？"></a>如何给容器指定一个固定 IP 地址，而不是每次重启容器 IP 地址都会变？</h3><p>答：使用以下命令启动容器可以使容器 IP 固定不变</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">docker</span> network create -d bridge --subnet <span class="token number">172.25</span>.0.0/16 my-net
$ <span class="token function">docker</span> run --network<span class="token operator">=</span>my-net --ip<span class="token operator">=</span><span class="token number">172.25</span>.3.3 -itd --name<span class="token operator">=</span>my-container busybox</code></pre>

<h3 id="如何临时退出一个正在交互的容器的终端，而不终止它？"><a href="#如何临时退出一个正在交互的容器的终端，而不终止它？" class="headerlink" title="如何临时退出一个正在交互的容器的终端，而不终止它？"></a>如何临时退出一个正在交互的容器的终端，而不终止它？</h3><p>答：按 <code>Ctrl-p Ctrl-q</code>。如果按 <code>Ctrl-c</code> 往往会让容器内应用进程终止，进而会终止容器。</p>
<h3 id="使用-docker-port-命令映射容器的端口时，系统报错“Error-No-public-port-‘80’-published-for-xxx”？"><a href="#使用-docker-port-命令映射容器的端口时，系统报错“Error-No-public-port-‘80’-published-for-xxx”？" class="headerlink" title="使用 docker port 命令映射容器的端口时，系统报错“Error: No public port ‘80’ published for xxx”？"></a>使用 <code>docker port</code> 命令映射容器的端口时，系统报错“Error: No public port ‘80’ published for xxx”？</h3><p>答：</p>
<ul>
<li><p>创建镜像时 <code>Dockerfile</code> 要通过 <code>EXPOSE</code> 指定正确的开放端口；</p>
</li>
<li><p>容器启动时指定 <code>PublishAllPort = true</code>。</p>
</li>
</ul>
<h3 id="可以在一个容器中同时运行多个应用进程么？"><a href="#可以在一个容器中同时运行多个应用进程么？" class="headerlink" title="可以在一个容器中同时运行多个应用进程么？"></a>可以在一个容器中同时运行多个应用进程么？</h3><p>答：一般并不推荐在同一个容器内运行多个应用进程。如果有类似需求，可以通过一些额外的进程管理机制，比如 <code>supervisord</code> 来管理所运行的进程。可以参考 <a href="https://docs.docker.com/config/containers/multi-service_container/">https://docs.docker.com/config/containers/multi-service_container/</a> 。</p>
<h3 id="如何控制容器占用系统资源（CPU、内存）的份额？"><a href="#如何控制容器占用系统资源（CPU、内存）的份额？" class="headerlink" title="如何控制容器占用系统资源（CPU、内存）的份额？"></a>如何控制容器占用系统资源（CPU、内存）的份额？</h3><p>答：在使用 <code>docker create</code> 命令创建容器或使用 <code>docker run</code> 创建并启动容器的时候，可以使用 <code>-c|--cpu-shares[=0]</code> 参数来调整容器使用 CPU 的权重；使用 <code>-m|--memory[=MEMORY]</code> 参数来调整容器使用内存的大小。</p>
<h2 id="仓库相关"><a href="#仓库相关" class="headerlink" title="仓库相关"></a>仓库相关</h2><h3 id="仓库（Repository）、注册服务器（Registry）、注册索引（Index）-有何关系？"><a href="#仓库（Repository）、注册服务器（Registry）、注册索引（Index）-有何关系？" class="headerlink" title="仓库（Repository）、注册服务器（Registry）、注册索引（Index） 有何关系？"></a>仓库（Repository）、注册服务器（Registry）、注册索引（Index） 有何关系？</h3><p>首先，仓库是存放一组关联镜像的集合，比如同一个应用的不同版本的镜像。</p>
<p>注册服务器是存放实际的镜像文件的地方。注册索引则负责维护用户的账号、权限、搜索、标签等的管理。因此，注册服务器利用注册索引来实现认证等管理。</p>
<h2 id="配置相关"><a href="#配置相关" class="headerlink" title="配置相关"></a>配置相关</h2><h3 id="Docker-的配置文件放在哪里，如何修改配置？"><a href="#Docker-的配置文件放在哪里，如何修改配置？" class="headerlink" title="Docker 的配置文件放在哪里，如何修改配置？"></a>Docker 的配置文件放在哪里，如何修改配置？</h3><p>答：使用 <code>systemd</code> 的系统（如 Ubuntu 16.04、Centos 等）的配置文件在 <code>/etc/docker/daemon.json</code>。</p>
<h3 id="如何更改-Docker-的默认存储位置？"><a href="#如何更改-Docker-的默认存储位置？" class="headerlink" title="如何更改 Docker 的默认存储位置？"></a>如何更改 Docker 的默认存储位置？</h3><p>答：Docker 的默认存储位置是 <code>/var/lib/docker</code>，如果希望将 Docker 的本地文件存储到其他分区，可以使用 Linux 软连接的方式来完成，或者在启动 daemon 时通过 <code>-g</code> 参数指定，或者修改配置文件 <code>/etc/docker/daemon.json</code> 的 “data-root” 项 。可以使用 <code>docker system info | grep &quot;Root Dir&quot;</code> 查看当前使用的存储位置。</p>
<p>例如，如下操作将默认存储位置迁移到 &#x2F;storage&#x2F;docker。</p>
<pre class="language-sh" data-language="sh"><code class="language-sh">[root@s26 ~]# df -h
Filesystem                    Size  Used Avail Use% Mounted on
&#x2F;dev&#x2F;mapper&#x2F;VolGroup-lv_root   50G  5.3G   42G  12% &#x2F;
tmpfs                          48G  228K   48G   1% &#x2F;dev&#x2F;shm
&#x2F;dev&#x2F;sda1                     485M   40M  420M   9% &#x2F;boot
&#x2F;dev&#x2F;mapper&#x2F;VolGroup-lv_home  222G  188M  210G   1% &#x2F;home
&#x2F;dev&#x2F;sdb2                     2.7T  323G  2.3T  13% &#x2F;storage
[root@s26 ~]# service docker stop
[root@s26 ~]# cd &#x2F;var&#x2F;lib&#x2F;
[root@s26 lib]# mv docker &#x2F;storage&#x2F;
[root@s26 lib]# ln -s &#x2F;storage&#x2F;docker&#x2F; docker
[root@s26 lib]# ls -la docker
lrwxrwxrwx. 1 root root 15 11月 17 13:43 docker -&gt; &#x2F;storage&#x2F;docker
[root@s26 lib]# service docker start</code></pre>

<h3 id="使用内存和-swap-限制启动容器时候报警告：”WARNING-Your-kernel-does-not-support-cgroup-swap-limit-WARNING-Your-kernel-does-not-support-swap-limit-capabilities-Limitation-discarded-”？"><a href="#使用内存和-swap-限制启动容器时候报警告：”WARNING-Your-kernel-does-not-support-cgroup-swap-limit-WARNING-Your-kernel-does-not-support-swap-limit-capabilities-Limitation-discarded-”？" class="headerlink" title="使用内存和 swap 限制启动容器时候报警告：”WARNING: Your kernel does not support cgroup swap limit. WARNING: Your kernel does not support swap limit capabilities. Limitation discarded.”？"></a>使用内存和 swap 限制启动容器时候报警告：”WARNING: Your kernel does not support cgroup swap limit. WARNING: Your kernel does not support swap limit capabilities. Limitation discarded.”？</h3><p>答：这是因为系统默认没有开启对内存和 swap 使用的统计功能，引入该功能会带来性能的下降。要开启该功能，可以采取如下操作：</p>
<ul>
<li><p>编辑 <code>/etc/default/grub</code> 文件（Ubuntu 系统为例），配置 <code>GRUB_CMDLINE_LINUX=&quot;cgroup_enable=memory swapaccount=1&quot;</code></p>
</li>
<li><p>更新 grub：<code>$ sudo update-grub</code></p>
</li>
<li><p>重启系统，即可。</p>
</li>
</ul>
<h2 id="Docker-与虚拟化"><a href="#Docker-与虚拟化" class="headerlink" title="Docker 与虚拟化"></a>Docker 与虚拟化</h2><h3 id="Docker-与-LXC（Linux-Container）有何不同？"><a href="#Docker-与-LXC（Linux-Container）有何不同？" class="headerlink" title="Docker 与 LXC（Linux Container）有何不同？"></a>Docker 与 LXC（Linux Container）有何不同？</h3><p>答：LXC 利用 Linux 上相关技术实现了容器。Docker 则在如下的几个方面进行了改进：</p>
<ul>
<li>移植性：通过抽象容器配置，容器可以实现从一个平台移植到另一个平台；</li>
<li>镜像系统：基于 OverlayFS 的镜像系统为容器的分发带来了很多的便利，同时共同的镜像层只需要存储一份，实现高效率的存储；</li>
<li>版本管理：类似于Git的版本管理理念，用户可以更方便的创建、管理镜像文件；</li>
<li>仓库系统：仓库系统大大降低了镜像的分发和管理的成本；</li>
<li>周边工具：各种现有工具（配置管理、云平台）对 Docker 的支持，以及基于 Docker的 PaaS、CI 等系统，让 Docker 的应用更加方便和多样化。</li>
</ul>
<h3 id="Docker-与-Vagrant-有何不同？"><a href="#Docker-与-Vagrant-有何不同？" class="headerlink" title="Docker 与 Vagrant 有何不同？"></a>Docker 与 Vagrant 有何不同？</h3><p>答：两者的定位完全不同。</p>
<ul>
<li><p>Vagrant 类似 Boot2Docker（一款运行 Docker 的最小内核），是一套虚拟机的管理环境。Vagrant 可以在多种系统上和虚拟机软件中运行，可以在 Windows，Mac 等非 Linux 平台上为 Docker 提供支持，自身具有较好的包装性和移植性。</p>
</li>
<li><p>原生的 Docker 自身只能运行在 Linux 平台上，但启动和运行的性能都比虚拟机要快，往往更适合快速开发和部署应用的场景。</p>
</li>
</ul>
<p>简单说：Vagrant 适合用来管理虚拟机，而 Docker 适合用来管理应用环境。</p>
<h3 id="开发环境中-Docker-和-Vagrant-该如何选择？"><a href="#开发环境中-Docker-和-Vagrant-该如何选择？" class="headerlink" title="开发环境中 Docker 和 Vagrant 该如何选择？"></a>开发环境中 Docker 和 Vagrant 该如何选择？</h3><p>答：Docker 不是虚拟机，而是进程隔离，对于资源的消耗很少，但是目前需要 Linux 环境支持。Vagrant 是虚拟机上做的封装，虚拟机本身会消耗资源。</p>
<p>如果本地使用的 Linux 环境，推荐都使用 Docker。</p>
<p>如果本地使用的是 macOS 或者 Windows 环境，那就需要开虚拟机，单一开发环境下 Vagrant 更简单；多环境开发下推荐在 Vagrant 里面再使用 Docker 进行环境隔离。</p>
<h2 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h2><h3 id="Docker-能在非-Linux-平台（比如-Windows-或-macOS-）上运行么？"><a href="#Docker-能在非-Linux-平台（比如-Windows-或-macOS-）上运行么？" class="headerlink" title="Docker 能在非 Linux 平台（比如 Windows 或 macOS ）上运行么？"></a>Docker 能在非 Linux 平台（比如 Windows 或 macOS ）上运行么？</h3><p>答：完全可以。安装方法请查看 <a href="../../install/">安装 Docker</a> 一节</p>
<h3 id="如何将一台宿主主机的-Docker-环境迁移到另外一台宿主主机？"><a href="#如何将一台宿主主机的-Docker-环境迁移到另外一台宿主主机？" class="headerlink" title="如何将一台宿主主机的 Docker 环境迁移到另外一台宿主主机？"></a>如何将一台宿主主机的 Docker 环境迁移到另外一台宿主主机？</h3><p>答：停止 Docker 服务。将整个 Docker 存储文件夹复制到另外一台宿主主机，然后调整另外一台宿主主机的配置即可。</p>
<h3 id="如何进入-Docker-容器的网络命名空间？"><a href="#如何进入-Docker-容器的网络命名空间？" class="headerlink" title="如何进入 Docker 容器的网络命名空间？"></a>如何进入 Docker 容器的网络命名空间？</h3><p>答：Docker 在创建容器后，删除了宿主主机上 <code>/var/run/netns</code> 目录中的相关的网络命名空间文件。因此，在宿主主机上是无法看到或访问容器的网络命名空间的。</p>
<p>用户可以通过如下方法来手动恢复它。</p>
<p>首先，使用下面的命令查看容器进程信息，比如这里的 1234。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">docker</span> inspect --format<span class="token operator">=</span><span class="token string">'&#123;&#123;.State.Pid&#125;&#125; '</span> <span class="token variable">$container_id</span>
<span class="token number">1234</span></code></pre>

<p>接下来，在 <code>/proc</code> 目录下，把对应的网络命名空间文件链接到 <code>/var/run/netns</code> 目录。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">ln</span> -s /proc/1234/ns/net /var/run/netns/</code></pre>

<p>然后，在宿主主机上就可以看到容器的网络命名空间信息。例如</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">ip</span> netns show
<span class="token number">1234</span></code></pre>

<p>此时，用户可以通过正常的系统命令来查看或操作容器的命名空间了。例如修改容器的 IP 地址信息为 <code>172.17.0.100/16</code>。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">ip</span> netns <span class="token builtin class-name">exec</span> <span class="token number">1234</span> <span class="token function">ifconfig</span> eth0 <span class="token number">172.17</span>.0.100/16</code></pre>

<h3 id="如何获取容器绑定到本地那个-veth-接口上？"><a href="#如何获取容器绑定到本地那个-veth-接口上？" class="headerlink" title="如何获取容器绑定到本地那个 veth 接口上？"></a>如何获取容器绑定到本地那个 veth 接口上？</h3><p>答：Docker 容器启动后，会通过 veth 接口对连接到本地网桥，veth 接口命名跟容器命名毫无关系，十分难以找到对应关系。</p>
<p>最简单的一种方式是通过查看接口的索引号，在容器中执行 <code>ip a</code> 命令，查看到本地接口最前面的接口索引号，如 <code>205</code>，将此值加上 1，即 <code>206</code>，然后在本地主机执行 <code>ip a</code> 命令，查找接口索引号为 <code>206</code> 的接口，两者即为连接的 veth 接口对。</p>
<h1 id="Docker-命令查询"><a href="#Docker-命令查询" class="headerlink" title="Docker 命令查询"></a>Docker 命令查询</h1><h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><p>Docker 命令有两大类，客户端命令和服务端命令。前者是主要的操作接口，后者用来启动 Docker Daemon。</p>
<ul>
<li><p>客户端命令：基本命令格式为 <code>docker [OPTIONS] COMMAND [arg...]</code>；</p>
</li>
<li><p>服务端命令：基本命令格式为 <code>dockerd [OPTIONS]</code>。</p>
</li>
</ul>
<p>可以通过 <code>man docker</code> 或 <code>docker help</code> 来查看这些命令。</p>
<p>接下来的小节对这两个命令进行介绍。</p>
<h2 id="客户端命令-docker"><a href="#客户端命令-docker" class="headerlink" title="客户端命令(docker)"></a>客户端命令(docker)</h2><h3 id="客户端命令选项"><a href="#客户端命令选项" class="headerlink" title="客户端命令选项"></a>客户端命令选项</h3><ul>
<li><code>--config=&quot;&quot;</code>：指定客户端配置文件，默认为 <code>~/.docker</code>；</li>
<li><code>-D=true|false</code>：是否使用 debug 模式。默认不开启；</li>
<li><code>-H, --host=[]</code>：指定命令对应 Docker 守护进程的监听接口，可以为 unix 套接字 <code>unix:///path/to/socket</code>，文件句柄 <code>fd://socketfd</code> 或 tcp 套接字 <code>tcp://[host[:port]]</code>，默认为 <code>unix:///var/run/docker.sock</code>；</li>
<li><code>-l, --log-level=&quot;debug|info|warn|error|fatal&quot;</code>：指定日志输出级别；</li>
<li><code>--tls=true|false</code>：是否对 Docker 守护进程启用 TLS 安全机制，默认为否；</li>
<li><code>--tlscacert=/.docker/ca.pem</code>：TLS CA 签名的可信证书文件路径；</li>
<li><code>--tlscert=/.docker/cert.pem</code>：TLS 可信证书文件路径；</li>
<li><code>--tlscert=/.docker/key.pem</code>：TLS 密钥文件路径；</li>
<li><code>--tlsverify=true|false</code>：启用 TLS 校验，默认为否。</li>
</ul>
<h3 id="客户端命令"><a href="#客户端命令" class="headerlink" title="客户端命令"></a>客户端命令</h3><p>可以通过 <code>docker COMMAND --help</code> 来查看这些命令的具体用法。</p>
<ul>
<li><code>attach</code>：依附到一个正在运行的容器中；</li>
<li><code>build</code>：从一个 Dockerfile 创建一个镜像；</li>
<li><code>commit</code>：从一个容器的修改中创建一个新的镜像；</li>
<li><code>cp</code>：在容器和本地宿主系统之间复制文件中；</li>
<li><code>create</code>：创建一个新容器，但并不运行它；</li>
<li><code>diff</code>：检查一个容器内文件系统的修改，包括修改和增加；</li>
<li><code>events</code>：从服务端获取实时的事件；</li>
<li><code>exec</code>：在运行的容器内执行命令；</li>
<li><code>export</code>：导出容器内容为一个 <code>tar</code> 包；</li>
<li><code>history</code>：显示一个镜像的历史信息；</li>
<li><code>images</code>：列出存在的镜像；</li>
<li><code>import</code>：导入一个文件（典型为 <code>tar</code> 包）路径或目录来创建一个本地镜像；</li>
<li><code>info</code>：显示一些相关的系统信息；</li>
<li><code>inspect</code>：显示一个容器的具体配置信息；</li>
<li><code>kill</code>：关闭一个运行中的容器 (包括进程和所有相关资源)；</li>
<li><code>load</code>：从一个 tar 包中加载一个镜像；</li>
<li><code>login</code>：注册或登录到一个 Docker 的仓库服务器；</li>
<li><code>logout</code>：从 Docker 的仓库服务器登出；</li>
<li><code>logs</code>：获取容器的 log 信息；</li>
<li><code>network</code>：管理 Docker 的网络，包括查看、创建、删除、挂载、卸载等；</li>
<li><code>node</code>：管理 swarm 集群中的节点，包括查看、更新、删除、提升&#x2F;取消管理节点等；</li>
<li><code>pause</code>：暂停一个容器中的所有进程；</li>
<li><code>port</code>：查找一个 nat 到一个私有网口的公共口；</li>
<li><code>ps</code>：列出主机上的容器；</li>
<li><code>pull</code>：从一个Docker的仓库服务器下拉一个镜像或仓库；</li>
<li><code>push</code>：将一个镜像或者仓库推送到一个 Docker 的注册服务器；</li>
<li><code>rename</code>：重命名一个容器；</li>
<li><code>restart</code>：重启一个运行中的容器；</li>
<li><code>rm</code>：删除给定的若干个容器；</li>
<li><code>rmi</code>：删除给定的若干个镜像；</li>
<li><code>run</code>：创建一个新容器，并在其中运行给定命令；</li>
<li><code>save</code>：保存一个镜像为 tar 包文件；</li>
<li><code>search</code>：在 Docker index 中搜索一个镜像；</li>
<li><code>service</code>：管理 Docker 所启动的应用服务，包括创建、更新、删除等；</li>
<li><code>start</code>：启动一个容器；</li>
<li><code>stats</code>：输出（一个或多个）容器的资源使用统计信息；</li>
<li><code>stop</code>：终止一个运行中的容器；</li>
<li><code>swarm</code>：管理 Docker swarm 集群，包括创建、加入、退出、更新等；</li>
<li><code>tag</code>：为一个镜像打标签；</li>
<li><code>top</code>：查看一个容器中的正在运行的进程信息；</li>
<li><code>unpause</code>：将一个容器内所有的进程从暂停状态中恢复；</li>
<li><code>update</code>：更新指定的若干容器的配置信息；</li>
<li><code>version</code>：输出 Docker 的版本信息；</li>
<li><code>volume</code>：管理 Docker volume，包括查看、创建、删除等；</li>
<li><code>wait</code>：阻塞直到一个容器终止，然后输出它的退出符。</li>
</ul>
<h3 id="一张图总结-Docker-的命令"><a href="#一张图总结-Docker-的命令" class="headerlink" title="一张图总结 Docker 的命令"></a>一张图总结 Docker 的命令</h3><p><img src="/2022/docker_practice/cmd_logic.png" alt="Docker 命令总结"></p>
<h3 id="参考-1"><a href="#参考-1" class="headerlink" title="参考"></a>参考</h3><ul>
<li><a href="https://docs.docker.com/engine/reference/commandline/cli/">官方文档</a></li>
</ul>
<h2 id="服务端命令-dockerd"><a href="#服务端命令-dockerd" class="headerlink" title="服务端命令(dockerd)"></a>服务端命令(dockerd)</h2><h3 id="dockerd-命令选项"><a href="#dockerd-命令选项" class="headerlink" title="dockerd 命令选项"></a>dockerd 命令选项</h3><ul>
<li><code>--api-cors-header=&quot;&quot;</code>：CORS 头部域，默认不允许 CORS，要允许任意的跨域访问，可以指定为 “*”；</li>
<li><code>--authorization-plugin=&quot;&quot;</code>：载入认证的插件；</li>
<li><code>-b=&quot;&quot;</code>：将容器挂载到一个已存在的网桥上。指定为 <code>none</code> 时则禁用容器的网络，与 <code>--bip</code> 选项互斥；</li>
<li><code>--bip=&quot;&quot;</code>：让动态创建的 <code>docker0</code> 网桥采用给定的 CIDR 地址; 与 <code>-b</code> 选项互斥；</li>
<li><code>--cgroup-parent=&quot;&quot;</code>：指定 cgroup 的父组，默认 fs cgroup 驱动为 <code>/docker</code>，systemd cgroup 驱动为 <code>system.slice</code>；</li>
<li><code>--cluster-store=&quot;&quot;</code>：构成集群（如 <code>Swarm</code>）时，集群键值数据库服务地址；</li>
<li><code>--cluster-advertise=&quot;&quot;</code>：构成集群时，自身的被访问地址，可以为 <code>host:port</code> 或 <code>interface:port</code>；</li>
<li><code>--cluster-store-opt=&quot;&quot;</code>：构成集群时，键值数据库的配置选项；</li>
<li><code>--config-file=&quot;/etc/docker/daemon.json&quot;</code>：daemon 配置文件路径；</li>
<li><code>--containerd=&quot;&quot;</code>：containerd 文件的路径；</li>
<li><code>-D, --debug=true|false</code>：是否使用 Debug 模式。缺省为 false；</li>
<li><code>--default-gateway=&quot;&quot;</code>：容器的 IPv4 网关地址，必须在网桥的子网段内；</li>
<li><code>--default-gateway-v6=&quot;&quot;</code>：容器的 IPv6 网关地址；</li>
<li><code>--default-ulimit=[]</code>：默认的 ulimit 值；</li>
<li><code>--disable-legacy-registry=true|false</code>：是否允许访问旧版本的镜像仓库服务器；</li>
<li><code>--dns=&quot;&quot;</code>：指定容器使用的 DNS 服务器地址；</li>
<li><code>--dns-opt=&quot;&quot;</code>：DNS 选项；</li>
<li><code>--dns-search=[]</code>：DNS 搜索域；</li>
<li><code>--exec-opt=[]</code>：运行时的执行选项；</li>
<li><code>--exec-root=&quot;&quot;</code>：容器执行状态文件的根路径，默认为 <code>/var/run/docker</code>；</li>
<li><code>--fixed-cidr=&quot;&quot;</code>：限定分配 IPv4 地址范围；</li>
<li><code>--fixed-cidr-v6=&quot;&quot;</code>：限定分配 IPv6 地址范围；</li>
<li><code>-G, --group=&quot;&quot;</code>：分配给 unix 套接字的组，默认为 <code>docker</code>；</li>
<li><code>-g, --graph=&quot;&quot;</code>：Docker 运行时的根路径，默认为 <code>/var/lib/docker</code>；</li>
<li><code>-H, --host=[]</code>：指定命令对应 Docker daemon 的监听接口，可以为 unix 套接字 <code>unix:///path/to/socket</code>，文件句柄 <code>fd://socketfd</code> 或 tcp 套接字 <code>tcp://[host[:port]]</code>，默认为 <code>unix:///var/run/docker.sock</code>；</li>
<li><code>--icc=true|false</code>：是否启用容器间以及跟 daemon 所在主机的通信。默认为 true。</li>
<li><code>--insecure-registry=[]</code>：允许访问给定的非安全仓库服务；</li>
<li><code>--ip=&quot;&quot;</code>：绑定容器端口时候的默认 IP 地址。缺省为 <code>0.0.0.0</code>；</li>
<li><code>--ip-forward=true|false</code>：是否检查启动在 Docker 主机上的启用 IP 转发服务，默认开启。注意关闭该选项将不对系统转发能力进行任何检查修改；</li>
<li><code>--ip-masq=true|false</code>：是否进行地址伪装，用于容器访问外部网络，默认开启；</li>
<li><code>--iptables=true|false</code>：是否允许 Docker 添加 iptables 规则。缺省为 true；</li>
<li><code>--ipv6=true|false</code>：是否启用 IPv6 支持，默认关闭；</li>
<li><code>-l, --log-level=&quot;debug|info|warn|error|fatal&quot;</code>：指定日志输出级别；</li>
<li><code>--label=&quot;[]&quot;</code>：添加指定的键值对标注；</li>
<li><code>--log-driver=&quot;json-file|syslog|journald|gelf|fluentd|awslogs|splunk|etwlogs|gcplogs|none&quot;</code>：指定日志后端驱动，默认为 <code>json-file</code>；</li>
<li><code>--log-opt=[]</code>：日志后端的选项；</li>
<li><code>--mtu=VALUE</code>：指定容器网络的 <code>mtu</code>；</li>
<li><code>-p=&quot;&quot;</code>：指定 daemon 的 PID 文件路径。缺省为 <code>/var/run/docker.pid</code>；</li>
<li><code>--raw-logs</code>：输出原始，未加色彩的日志信息；</li>
<li><code>--registry-mirror=&lt;scheme&gt;://&lt;host&gt;</code>：指定 <code>docker pull</code> 时使用的注册服务器镜像地址；</li>
<li><code>-s, --storage-driver=&quot;&quot;</code>：指定使用给定的存储后端；</li>
<li><code>--selinux-enabled=true|false</code>：是否启用 SELinux 支持。缺省值为 false。SELinux 目前尚不支持 overlay 存储驱动；</li>
<li><code>--storage-opt=[]</code>：驱动后端选项；</li>
<li><code>--tls=true|false</code>：是否对 Docker daemon 启用 TLS 安全机制，默认为否；</li>
<li><code>--tlscacert=/.docker/ca.pem</code>：TLS CA 签名的可信证书文件路径；</li>
<li><code>--tlscert=/.docker/cert.pem</code>：TLS 可信证书文件路径；</li>
<li><code>--tlscert=/.docker/key.pem</code>：TLS 密钥文件路径；</li>
<li><code>--tlsverify=true|false</code>：启用 TLS 校验，默认为否；</li>
<li><code>--userland-proxy=true|false</code>：是否使用用户态代理来实现容器间和出容器的回环通信，默认为 true；</li>
<li><code>--userns-remap=default|uid:gid|user:group|user|uid</code>：指定容器的用户命名空间，默认是创建新的 UID 和 GID 映射到容器内进程。</li>
</ul>
<h3 id="参考-2"><a href="#参考-2" class="headerlink" title="参考"></a>参考</h3><ul>
<li><a href="https://docs.docker.com/engine/reference/commandline/dockerd/">官方文档</a></li>
</ul>
<h1 id="Dockerfile-最佳实践"><a href="#Dockerfile-最佳实践" class="headerlink" title="Dockerfile 最佳实践"></a>Dockerfile 最佳实践</h1><p>本附录是笔者对 Docker 官方文档中 <a href="https://docs.docker.com/develop/develop-images/dockerfile_best-practices/">Best practices for writing Dockerfiles</a> 的理解与翻译。</p>
<h2 id="一般性的指南和建议"><a href="#一般性的指南和建议" class="headerlink" title="一般性的指南和建议"></a>一般性的指南和建议</h2><h3 id="容器应该是短暂的"><a href="#容器应该是短暂的" class="headerlink" title="容器应该是短暂的"></a>容器应该是短暂的</h3><p>通过 <code>Dockerfile</code> 构建的镜像所启动的容器应该尽可能短暂（生命周期短）。「短暂」意味着可以停止和销毁容器，并且创建一个新容器并部署好所需的设置和配置工作量应该是极小的。</p>
<h3 id="使用-dockerignore-文件"><a href="#使用-dockerignore-文件" class="headerlink" title="使用 .dockerignore 文件"></a>使用 <code>.dockerignore</code> 文件</h3><p>使用 <code>Dockerfile</code> 构建镜像时最好是将 <code>Dockerfile</code> 放置在一个新建的空目录下。然后将构建镜像所需要的文件添加到该目录中。为了提高构建镜像的效率，你可以在目录下新建一个 <code>.dockerignore</code> 文件来指定要忽略的文件和目录。<code>.dockerignore</code> 文件的排除模式语法和 Git 的 <code>.gitignore</code> 文件相似。</p>
<h3 id="使用多阶段构建"><a href="#使用多阶段构建" class="headerlink" title="使用多阶段构建"></a>使用多阶段构建</h3><p>在 <code>Docker 17.05</code> 以上版本中，你可以使用 <a href="../image/multistage-builds.md">多阶段构建</a> 来减少所构建镜像的大小。</p>
<h3 id="避免安装不必要的包"><a href="#避免安装不必要的包" class="headerlink" title="避免安装不必要的包"></a>避免安装不必要的包</h3><p>为了降低复杂性、减少依赖、减小文件大小、节约构建时间，你应该避免安装任何不必要的包。例如，不要在数据库镜像中包含一个文本编辑器。</p>
<h3 id="一个容器只运行一个进程"><a href="#一个容器只运行一个进程" class="headerlink" title="一个容器只运行一个进程"></a>一个容器只运行一个进程</h3><p>应该保证在一个容器中只运行一个进程。将多个应用解耦到不同容器中，保证了容器的横向扩展和复用。例如 web 应用应该包含三个容器：web应用、数据库、缓存。</p>
<p>如果容器互相依赖，你可以使用 <a href="../network/linking.md">Docker 自定义网络</a> 来把这些容器连接起来。</p>
<h3 id="镜像层数尽可能少"><a href="#镜像层数尽可能少" class="headerlink" title="镜像层数尽可能少"></a>镜像层数尽可能少</h3><p>你需要在 <code>Dockerfile</code> 可读性（也包括长期的可维护性）和减少层数之间做一个平衡。</p>
<h3 id="将多行参数排序"><a href="#将多行参数排序" class="headerlink" title="将多行参数排序"></a>将多行参数排序</h3><p>将多行参数按字母顺序排序（比如要安装多个包时）。这可以帮助你避免重复包含同一个包，更新包列表时也更容易。也便于 <code>PRs</code> 阅读和审查。建议在反斜杠符号 <code>\</code> 之前添加一个空格，以增加可读性。</p>
<p>下面是来自 <code>buildpack-deps</code> 镜像的例子：</p>
<pre class="language-docker" data-language="docker"><code class="language-docker"><span class="token instruction"><span class="token keyword">RUN</span> apt-get update &amp;&amp; apt-get install -y <span class="token operator">\</span>
  bzr <span class="token operator">\</span>
  cvs <span class="token operator">\</span>
  git <span class="token operator">\</span>
  mercurial <span class="token operator">\</span>
  subversion</span></code></pre>

<h3 id="构建缓存"><a href="#构建缓存" class="headerlink" title="构建缓存"></a>构建缓存</h3><p>在镜像的构建过程中，Docker 会遍历 <code>Dockerfile</code> 文件中的指令，然后按顺序执行。在执行每条指令之前，Docker 都会在缓存中查找是否已经存在可重用的镜像，如果有就使用现存的镜像，不再重复创建。如果你不想在构建过程中使用缓存，你可以在 <code>docker build</code> 命令中使用 <code>--no-cache=true</code> 选项。</p>
<p>但是，如果你想在构建的过程中使用缓存，你得明白什么时候会，什么时候不会找到匹配的镜像，遵循的基本规则如下：</p>
<ul>
<li>从一个基础镜像开始（<code>FROM</code> 指令指定），下一条指令将和该基础镜像的所有子镜像进行匹配，检查这些子镜像被创建时使用的指令是否和被检查的指令完全一样。如果不是，则缓存失效。</li>
<li>在大多数情况下，只需要简单地对比 <code>Dockerfile</code> 中的指令和子镜像。然而，有些指令需要更多的检查和解释。</li>
<li>对于 <code>ADD</code> 和 <code>COPY</code> 指令，镜像中对应文件的内容也会被检查，每个文件都会计算出一个校验和。文件的最后修改时间和最后访问时间不会纳入校验。在缓存的查找过程中，会将这些校验和和已存在镜像中的文件校验和进行对比。如果文件有任何改变，比如内容和元数据，则缓存失效。</li>
<li>除了 <code>ADD</code> 和 <code>COPY</code> 指令，缓存匹配过程不会查看临时容器中的文件来决定缓存是否匹配。例如，当执行完 <code>RUN apt-get -y update</code> 指令后，容器中一些文件被更新，但 Docker 不会检查这些文件。这种情况下，只有指令字符串本身被用来匹配缓存。</li>
</ul>
<p>一旦缓存失效，所有后续的 <code>Dockerfile</code> 指令都将产生新的镜像，缓存不会被使用。</p>
<h2 id="Dockerfile-指令"><a href="#Dockerfile-指令" class="headerlink" title="Dockerfile 指令"></a>Dockerfile 指令</h2><p>下面针对 <code>Dockerfile</code> 中各种指令的最佳编写方式给出建议。</p>
<h3 id="FROM"><a href="#FROM" class="headerlink" title="FROM"></a>FROM</h3><p>尽可能使用当前官方仓库作为你构建镜像的基础。推荐使用 <a href="https://hub.docker.com/_/alpine/">Alpine</a> 镜像，因为它被严格控制并保持最小尺寸（目前小于 5 MB），但它仍然是一个完整的发行版。</p>
<h3 id="LABEL"><a href="#LABEL" class="headerlink" title="LABEL"></a>LABEL</h3><p>你可以给镜像添加标签来帮助组织镜像、记录许可信息、辅助自动化构建等。每个标签一行，由 <code>LABEL</code> 开头加上一个或多个标签对。下面的示例展示了各种不同的可能格式。<code>#</code> 开头的行是注释内容。</p>
<blockquote>
<p>注意：如果你的字符串中包含空格，必须将字符串放入引号中或者对空格使用转义。如果字符串内容本身就包含引号，必须对引号使用转义。</p>
</blockquote>
<pre class="language-docker" data-language="docker"><code class="language-docker"><span class="token comment"># Set one or more individual labels</span>
<span class="token instruction"><span class="token keyword">LABEL</span> com.example.version=<span class="token string">"0.0.1-beta"</span></span>
<span class="token instruction"><span class="token keyword">LABEL</span> vendor=<span class="token string">"ACME Incorporated"</span></span>
<span class="token instruction"><span class="token keyword">LABEL</span> com.example.release-date=<span class="token string">"2015-02-12"</span></span>
<span class="token instruction"><span class="token keyword">LABEL</span> com.example.version.is-production=<span class="token string">""</span></span></code></pre>

<p>一个镜像可以包含多个标签，但建议将多个标签放入到一个 <code>LABEL</code> 指令中。</p>
<pre class="language-docker" data-language="docker"><code class="language-docker"><span class="token comment"># Set multiple labels at once, using line-continuation characters to break long lines</span>
<span class="token instruction"><span class="token keyword">LABEL</span> vendor=ACME\ Incorporated <span class="token operator">\</span>
      com.example.is-beta= <span class="token operator">\</span>
      com.example.is-production=<span class="token string">""</span> <span class="token operator">\</span>
      com.example.version=<span class="token string">"0.0.1-beta"</span> <span class="token operator">\</span>
      com.example.release-date=<span class="token string">"2015-02-12"</span></span></code></pre>

<p>关于标签可以接受的键值对，参考 <a href="https://docs.docker.com/config/labels-custom-metadata/">Understanding object labels</a>。关于查询标签信息，参考 <a href="https://docs.docker.com/config/labels-custom-metadata/">Managing labels on objects</a>。</p>
<h3 id="RUN"><a href="#RUN" class="headerlink" title="RUN"></a>RUN</h3><p>为了保持 <code>Dockerfile</code> 文件的可读性，可理解性，以及可维护性，建议将长的或复杂的 <code>RUN</code> 指令用反斜杠 <code>\</code> 分割成多行。</p>
<h4 id="apt-get"><a href="#apt-get" class="headerlink" title="apt-get"></a>apt-get</h4><p><code>RUN</code> 指令最常见的用法是安装包用的 <code>apt-get</code>。因为 <code>RUN apt-get</code> 指令会安装包，所以有几个问题需要注意。</p>
<p>不要使用 <code>RUN apt-get upgrade</code> 或 <code>dist-upgrade</code>，因为许多基础镜像中的「必须」包不会在一个非特权容器中升级。如果基础镜像中的某个包过时了，你应该联系它的维护者。如果你确定某个特定的包，比如 <code>foo</code>，需要升级，使用 <code>apt-get install -y foo</code> 就行，该指令会自动升级 <code>foo</code> 包。</p>
<p>永远将 <code>RUN apt-get update</code> 和 <code>apt-get install</code> 组合成一条 <code>RUN</code> 声明，例如：</p>
<pre class="language-docker" data-language="docker"><code class="language-docker"><span class="token instruction"><span class="token keyword">RUN</span> apt-get update &amp;&amp; apt-get install -y <span class="token operator">\</span>
        package-bar <span class="token operator">\</span>
        package-baz <span class="token operator">\</span>
        package-foo</span></code></pre>

<p>将 <code>apt-get update</code> 放在一条单独的 <code>RUN</code> 声明中会导致缓存问题以及后续的 <code>apt-get install</code> 失败。比如，假设你有一个 <code>Dockerfile</code> 文件：</p>
<pre class="language-docker" data-language="docker"><code class="language-docker"><span class="token instruction"><span class="token keyword">FROM</span> ubuntu:18.04</span>
<span class="token instruction"><span class="token keyword">RUN</span> apt-get update</span>
<span class="token instruction"><span class="token keyword">RUN</span> apt-get install -y curl</span></code></pre>

<p>构建镜像后，所有的层都在 Docker 的缓存中。假设你后来又修改了其中的 <code>apt-get install</code> 添加了一个包：</p>
<pre class="language-docker" data-language="docker"><code class="language-docker"><span class="token instruction"><span class="token keyword">FROM</span> ubuntu:18.04</span>
<span class="token instruction"><span class="token keyword">RUN</span> apt-get update</span>
<span class="token instruction"><span class="token keyword">RUN</span> apt-get install -y curl nginx</span></code></pre>

<p>Docker 发现修改后的 <code>RUN apt-get update</code> 指令和之前的完全一样。所以，<code>apt-get update</code> 不会执行，而是使用之前的缓存镜像。因为 <code>apt-get update</code> 没有运行，后面的 <code>apt-get install</code> 可能安装的是过时的 <code>curl</code> 和 <code>nginx</code> 版本。</p>
<p>使用 <code>RUN apt-get update &amp;&amp; apt-get install -y</code> 可以确保你的 Dockerfiles 每次安装的都是包的最新的版本，而且这个过程不需要进一步的编码或额外干预。这项技术叫作 <code>cache busting</code>。你也可以显示指定一个包的版本号来达到 <code>cache-busting</code>，这就是所谓的固定版本，例如：</p>
<pre class="language-docker" data-language="docker"><code class="language-docker"><span class="token instruction"><span class="token keyword">RUN</span> apt-get update &amp;&amp; apt-get install -y <span class="token operator">\</span>
    package-bar <span class="token operator">\</span>
    package-baz <span class="token operator">\</span>
    package-foo=1.3.*</span></code></pre>

<p>固定版本会迫使构建过程检索特定的版本，而不管缓存中有什么。这项技术也可以减少因所需包中未预料到的变化而导致的失败。</p>
<p>下面是一个 <code>RUN</code> 指令的示例模板，展示了所有关于 <code>apt-get</code> 的建议。</p>
<pre class="language-docker" data-language="docker"><code class="language-docker"><span class="token instruction"><span class="token keyword">RUN</span> apt-get update &amp;&amp; apt-get install -y <span class="token operator">\</span>
    aufs-tools <span class="token operator">\</span>
    automake <span class="token operator">\</span>
    build-essential <span class="token operator">\</span>
    curl <span class="token operator">\</span>
    dpkg-sig <span class="token operator">\</span>
    libcap-dev <span class="token operator">\</span>
    libsqlite3-dev <span class="token operator">\</span>
    mercurial <span class="token operator">\</span>
    reprepro <span class="token operator">\</span>
    ruby1.9.1 <span class="token operator">\</span>
    ruby1.9.1-dev <span class="token operator">\</span>
    s3cmd=1.1.* <span class="token operator">\</span>
 &amp;&amp; rm -rf /var/lib/apt/lists/*</span></code></pre>

<p>其中 <code>s3cmd</code> 指令指定了一个版本号 <code>1.1.*</code>。如果之前的镜像使用的是更旧的版本，指定新的版本会导致 <code>apt-get udpate</code> 缓存失效并确保安装的是新版本。</p>
<p>另外，清理掉 apt 缓存 <code>var/lib/apt/lists</code> 可以减小镜像大小。因为 <code>RUN</code> 指令的开头为 <code>apt-get udpate</code>，包缓存总是会在 <code>apt-get install</code> 之前刷新。</p>
<blockquote>
<p>注意：官方的 Debian 和 Ubuntu 镜像会自动运行 apt-get clean，所以不需要显式的调用 apt-get clean。</p>
</blockquote>
<h3 id="CMD"><a href="#CMD" class="headerlink" title="CMD"></a>CMD</h3><p><code>CMD</code> 指令用于执行目标镜像中包含的软件，可以包含参数。<code>CMD</code> 大多数情况下都应该以 <code>CMD [&quot;executable&quot;, &quot;param1&quot;, &quot;param2&quot;...]</code> 的形式使用。因此，如果创建镜像的目的是为了部署某个服务(比如 <code>Apache</code>)，你可能会执行类似于 <code>CMD [&quot;apache2&quot;, &quot;-DFOREGROUND&quot;]</code> 形式的命令。我们建议任何服务镜像都使用这种形式的命令。</p>
<p>多数情况下，<code>CMD</code> 都需要一个交互式的 <code>shell</code> (bash, Python, perl 等)，例如 <code>CMD [&quot;perl&quot;, &quot;-de0&quot;]</code>，或者 <code>CMD [&quot;PHP&quot;, &quot;-a&quot;]</code>。使用这种形式意味着，当你执行类似 <code>docker run -it python</code> 时，你会进入一个准备好的 <code>shell</code> 中。<code>CMD</code> 应该在极少的情况下才能以 <code>CMD [&quot;param&quot;, &quot;param&quot;]</code> 的形式与 <code>ENTRYPOINT</code> 协同使用，除非你和你的镜像使用者都对 <code>ENTRYPOINT</code> 的工作方式十分熟悉。</p>
<h3 id="EXPOSE"><a href="#EXPOSE" class="headerlink" title="EXPOSE"></a>EXPOSE</h3><p><code>EXPOSE</code> 指令用于指定容器将要监听的端口。因此，你应该为你的应用程序使用常见的端口。例如，提供 <code>Apache</code> web 服务的镜像应该使用 <code>EXPOSE 80</code>，而提供 <code>MongoDB</code> 服务的镜像使用 <code>EXPOSE 27017</code>。</p>
<p>对于外部访问，用户可以在执行 <code>docker run</code> 时使用一个标志来指示如何将指定的端口映射到所选择的端口。</p>
<h3 id="ENV"><a href="#ENV" class="headerlink" title="ENV"></a>ENV</h3><p>为了方便新程序运行，你可以使用 <code>ENV</code> 来为容器中安装的程序更新 <code>PATH</code> 环境变量。例如使用 <code>ENV PATH /usr/local/nginx/bin:$PATH</code> 来确保 <code>CMD [&quot;nginx&quot;]</code> 能正确运行。</p>
<p><code>ENV</code> 指令也可用于为你想要容器化的服务提供必要的环境变量，比如 Postgres 需要的 <code>PGDATA</code>。</p>
<p>最后，<code>ENV</code> 也能用于设置常见的版本号，比如下面的示例：</p>
<pre class="language-docker" data-language="docker"><code class="language-docker"><span class="token instruction"><span class="token keyword">ENV</span> PG_MAJOR 9.3</span>
<span class="token instruction"><span class="token keyword">ENV</span> PG_VERSION 9.3.4</span>
<span class="token instruction"><span class="token keyword">RUN</span> curl -SL http://example.com/postgres-<span class="token variable">$PG_VERSION</span>.tar.xz | tar -xJC /usr/src/postgress &amp;&amp; …</span>
<span class="token instruction"><span class="token keyword">ENV</span> PATH /usr/local/postgres-<span class="token variable">$PG_MAJOR</span>/bin:<span class="token variable">$PATH</span></span></code></pre>

<p>类似于程序中的常量，这种方法可以让你只需改变 <code>ENV</code> 指令来自动的改变容器中的软件版本。</p>
<h3 id="ADD-和-COPY"><a href="#ADD-和-COPY" class="headerlink" title="ADD 和 COPY"></a>ADD 和 COPY</h3><p>虽然 <code>ADD</code> 和 <code>COPY</code> 功能类似，但一般优先使用 <code>COPY</code>。因为它比 <code>ADD</code> 更透明。<code>COPY</code> 只支持简单将本地文件拷贝到容器中，而 <code>ADD</code> 有一些并不明显的功能（比如本地 tar 提取和远程 URL 支持）。因此，<code>ADD</code> 的最佳用例是将本地 tar 文件自动提取到镜像中，例如 <code>ADD rootfs.tar.xz</code>。</p>
<p>如果你的 <code>Dockerfile</code> 有多个步骤需要使用上下文中不同的文件。单独 <code>COPY</code> 每个文件，而不是一次性的 <code>COPY</code> 所有文件，这将保证每个步骤的构建缓存只在特定的文件变化时失效。例如：</p>
<pre class="language-docker" data-language="docker"><code class="language-docker"><span class="token instruction"><span class="token keyword">COPY</span> requirements.txt /tmp/</span>
<span class="token instruction"><span class="token keyword">RUN</span> pip install --requirement /tmp/requirements.txt</span>
<span class="token instruction"><span class="token keyword">COPY</span> . /tmp/</span></code></pre>

<p>如果将 <code>COPY . /tmp/</code> 放置在 <code>RUN</code> 指令之前，只要 <code>.</code> 目录中任何一个文件变化，都会导致后续指令的缓存失效。</p>
<p>为了让镜像尽量小，最好不要使用 <code>ADD</code> 指令从远程 URL 获取包，而是使用 <code>curl</code> 和 <code>wget</code>。这样你可以在文件提取完之后删掉不再需要的文件来避免在镜像中额外添加一层。比如尽量避免下面的用法：</p>
<pre class="language-docker" data-language="docker"><code class="language-docker"><span class="token instruction"><span class="token keyword">ADD</span> http://example.com/big.tar.xz /usr/src/things/</span>
<span class="token instruction"><span class="token keyword">RUN</span> tar -xJf /usr/src/things/big.tar.xz -C /usr/src/things</span>
<span class="token instruction"><span class="token keyword">RUN</span> make -C /usr/src/things all</span></code></pre>

<p>而是应该使用下面这种方法：</p>
<pre class="language-docker" data-language="docker"><code class="language-docker"><span class="token instruction"><span class="token keyword">RUN</span> mkdir -p /usr/src/things <span class="token operator">\</span>
    &amp;&amp; curl -SL http://example.com/big.tar.xz <span class="token operator">\</span>
    | tar -xJC /usr/src/things <span class="token operator">\</span>
    &amp;&amp; make -C /usr/src/things all</span></code></pre>

<p>上面使用的管道操作，所以没有中间文件需要删除。</p>
<p>对于其他不需要 <code>ADD</code> 的自动提取功能的文件或目录，你应该使用 <code>COPY</code>。</p>
<h3 id="ENTRYPOINT"><a href="#ENTRYPOINT" class="headerlink" title="ENTRYPOINT"></a>ENTRYPOINT</h3><p><code>ENTRYPOINT</code> 的最佳用处是设置镜像的主命令，允许将镜像当成命令本身来运行（用 <code>CMD</code> 提供默认选项）。</p>
<p>例如，下面的示例镜像提供了命令行工具 <code>s3cmd</code>:</p>
<pre class="language-docker" data-language="docker"><code class="language-docker"><span class="token instruction"><span class="token keyword">ENTRYPOINT</span> [<span class="token string">"s3cmd"</span>]</span>
<span class="token instruction"><span class="token keyword">CMD</span> [<span class="token string">"--help"</span>]</span></code></pre>

<p>现在直接运行该镜像创建的容器会显示命令帮助：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">docker</span> run s3cmd</code></pre>

<p>或者提供正确的参数来执行某个命令：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">docker</span> run s3cmd <span class="token function">ls</span> s3://mybucket</code></pre>

<p>这样镜像名可以当成命令行的参考。</p>
<p><code>ENTRYPOINT</code> 指令也可以结合一个辅助脚本使用，和前面命令行风格类似，即使启动工具需要不止一个步骤。</p>
<p>例如，<code>Postgres</code> 官方镜像使用下面的脚本作为 <code>ENTRYPOINT</code>：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span>
<span class="token builtin class-name">set</span> -e
<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$1</span>"</span> <span class="token operator">=</span> <span class="token string">'postgres'</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
    <span class="token function">chown</span> -R postgres <span class="token string">"<span class="token variable">$PGDATA</span>"</span>
    <span class="token keyword">if</span> <span class="token punctuation">[</span> -z <span class="token string">"<span class="token variable"><span class="token variable">$(</span><span class="token function">ls</span> -A <span class="token string">"<span class="token variable">$PGDATA</span>"</span><span class="token variable">)</span></span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
        gosu postgres initdb
    <span class="token keyword">fi</span>
    <span class="token builtin class-name">exec</span> gosu postgres <span class="token string">"<span class="token variable">$@</span>"</span>
<span class="token keyword">fi</span>
<span class="token builtin class-name">exec</span> <span class="token string">"<span class="token variable">$@</span>"</span></code></pre>

<blockquote>
<p>注意：该脚本使用了 Bash 的内置命令 exec，所以最后运行的进程就是容器的 PID 为 1 的进程。这样，进程就可以接收到任何发送给容器的 Unix 信号了。</p>
</blockquote>
<p>该辅助脚本被拷贝到容器，并在容器启动时通过 <code>ENTRYPOINT</code> 执行：</p>
<pre class="language-docker" data-language="docker"><code class="language-docker"><span class="token instruction"><span class="token keyword">COPY</span> ./docker-entrypoint.sh /</span>
<span class="token instruction"><span class="token keyword">ENTRYPOINT</span> [<span class="token string">"/docker-entrypoint.sh"</span>]</span></code></pre>

<p>该脚本可以让用户用几种不同的方式和 <code>Postgres</code> 交互。</p>
<p>你可以很简单地启动 <code>Postgres</code>：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">docker</span> run postgres</code></pre>

<p>也可以执行 <code>Postgres</code> 并传递参数：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">docker</span> run postgres postgres --help</code></pre>

<p>最后，你还可以启动另外一个完全不同的工具，比如 <code>Bash</code>：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">docker</span> run --rm -it postgres <span class="token function">bash</span></code></pre>

<h3 id="VOLUME"><a href="#VOLUME" class="headerlink" title="VOLUME"></a>VOLUME</h3><p><code>VOLUME</code> 指令用于暴露任何数据库存储文件，配置文件，或容器创建的文件和目录。强烈建议使用 <code>VOLUME</code> 来管理镜像中的可变部分和用户可以改变的部分。</p>
<h3 id="USER"><a href="#USER" class="headerlink" title="USER"></a>USER</h3><p>如果某个服务不需要特权执行，建议使用 <code>USER</code> 指令切换到非 root 用户。先在 <code>Dockerfile</code> 中使用类似 <code>RUN groupadd -r postgres &amp;&amp; useradd -r -g postgres postgres</code> 的指令创建用户和用户组。</p>
<blockquote>
<p>注意：在镜像中，用户和用户组每次被分配的 UID&#x2F;GID 都是不确定的，下次重新构建镜像时被分配到的 UID&#x2F;GID 可能会不一样。如果要依赖确定的 UID&#x2F;GID，你应该显式的指定一个 UID&#x2F;GID。</p>
</blockquote>
<p>你应该避免使用 <code>sudo</code>，因为它不可预期的 TTY 和信号转发行为可能造成的问题比它能解决的问题还多。如果你真的需要和 <code>sudo</code> 类似的功能（例如，以 root 权限初始化某个守护进程，以非 root 权限执行它），你可以使用 <a href="https://github.com/tianon/gosu">gosu</a>。</p>
<p>最后，为了减少层数和复杂度，避免频繁地使用 <code>USER</code> 来回切换用户。</p>
<h3 id="WORKDIR"><a href="#WORKDIR" class="headerlink" title="WORKDIR"></a>WORKDIR</h3><p>为了清晰性和可靠性，你应该总是在 <code>WORKDIR</code> 中使用绝对路径。另外，你应该使用 <code>WORKDIR</code> 来替代类似于 <code>RUN cd ... &amp;&amp; do-something</code> 的指令，后者难以阅读、排错和维护。</p>
<h2 id="官方镜像示例"><a href="#官方镜像示例" class="headerlink" title="官方镜像示例"></a>官方镜像示例</h2><p>这些官方镜像的 Dockerfile 都是参考典范：<a href="https://github.com/docker-library/docs">https://github.com/docker-library/docs</a></p>
<h1 id="如何调试-Docker"><a href="#如何调试-Docker" class="headerlink" title="如何调试 Docker"></a>如何调试 Docker</h1><h2 id="开启-Debug-模式"><a href="#开启-Debug-模式" class="headerlink" title="开启 Debug 模式"></a>开启 Debug 模式</h2><p>在 dockerd 配置文件 daemon.json（默认位于 &#x2F;etc&#x2F;docker&#x2F;）中添加</p>
<pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>
  <span class="token property">"debug"</span><span class="token operator">:</span> <span class="token boolean">true</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>重启守护进程。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">kill</span> -SIGHUP <span class="token variable"><span class="token variable">$(</span>pidof dockerd<span class="token variable">)</span></span></code></pre>

<p>此时 dockerd 会在日志中输入更多信息供分析。</p>
<h2 id="检查内核日志"><a href="#检查内核日志" class="headerlink" title="检查内核日志"></a>检查内核日志</h2><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">dmesg</span> <span class="token operator">|</span><span class="token function">grep</span> dockerd
$ <span class="token function">sudo</span> <span class="token function">dmesg</span> <span class="token operator">|</span><span class="token function">grep</span> runc</code></pre>

<h2 id="Docker-不响应时处理"><a href="#Docker-不响应时处理" class="headerlink" title="Docker 不响应时处理"></a>Docker 不响应时处理</h2><p>可以杀死 dockerd 进程查看其堆栈调用情况。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">kill</span> -SIGUSR1 <span class="token variable"><span class="token variable">$(</span>pidof dockerd<span class="token variable">)</span></span></code></pre>

<h2 id="重置-Docker-本地数据"><a href="#重置-Docker-本地数据" class="headerlink" title="重置 Docker 本地数据"></a>重置 Docker 本地数据</h2><p><em>注意，本操作会移除所有的 Docker 本地数据，包括镜像和容器等。</em></p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">rm</span> -rf /var/lib/docker</code></pre>

<h1 id="资源链接"><a href="#资源链接" class="headerlink" title="资源链接"></a>资源链接</h1><h2 id="官方网站"><a href="#官方网站" class="headerlink" title="官方网站"></a>官方网站</h2><ul>
<li>Docker 官方主页：<a href="https://www.docker.com/">https://www.docker.com</a></li>
<li>Docker 官方博客：<a href="https://www.docker.com/blog/">https://www.docker.com/blog/</a></li>
<li>Docker 官方文档：<a href="https://docs.docker.com/">https://docs.docker.com/</a></li>
<li>Docker Hub：<a href="https://hub.docker.com/">https://hub.docker.com</a></li>
<li>Docker 的源代码仓库：<a href="https://github.com/moby/moby">https://github.com/moby/moby</a></li>
<li>Docker 路线图 <a href="https://github.com/docker/roadmap/projects">https://github.com/docker/roadmap/projects</a></li>
<li>Docker 发布版本历史：<a href="https://docs.docker.com/release-notes/">https://docs.docker.com/release-notes/</a></li>
<li>Docker 常见问题：<a href="https://docs.docker.com/engine/faq/">https://docs.docker.com/engine/faq/</a></li>
<li>Docker 远端应用 API：<a href="https://docs.docker.com/develop/sdk/">https://docs.docker.com/develop/sdk/</a></li>
</ul>
<h2 id="实践参考"><a href="#实践参考" class="headerlink" title="实践参考"></a>实践参考</h2><ul>
<li>Dockerfile 参考：<a href="https://docs.docker.com/engine/reference/builder/">https://docs.docker.com/engine/reference/builder/</a></li>
<li>Dockerfile 最佳实践：<a href="https://docs.docker.com/engine/userguide/eng-image/dockerfile_best-practices/">https://docs.docker.com/engine/userguide/eng-image/dockerfile_best-practices/</a></li>
</ul>
<h2 id="技术交流"><a href="#技术交流" class="headerlink" title="技术交流"></a>技术交流</h2><ul>
<li>Docker 邮件列表： <a href="https://groups.google.com/forum/#!forum/docker-user">https://groups.google.com/forum/#!forum/docker-user</a></li>
<li>Docker 的 IRC 频道：<a href="https://chat.freenode.net/#docker">https://chat.freenode.net#docker</a></li>
<li>Docker 的 Twitter 主页：<a href="https://twitter.com/docker">https://twitter.com/docker</a></li>
</ul>
<h2 id="其它-1"><a href="#其它-1" class="headerlink" title="其它"></a>其它</h2><ul>
<li>Docker 的 StackOverflow 问答主页：<a href="https://stackoverflow.com/search?q=docker">https://stackoverflow.com/search?q=docker</a></li>
</ul>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>CNCF</tag>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>从《A Tour of Go》到《Effective Go》</title>
    <url>/2022/from_A-Tour-of-Go_to_Effective-Go/</url>
    <content><![CDATA[<blockquote>
<p>本文是Golang的学习笔记，内容涵盖 <a href="https://go.dev/tour/">A Tour of Go</a> 官方文档 <a href="https://go.dev/doc/effective_go">Effective Go</a> 以及 <a href="https://go-zh.org/doc/effective_go.html">官方翻译</a></p>
</blockquote>
<span id="more"></span>

<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><h1 id="格式化"><a href="#格式化" class="headerlink" title="格式化"></a>格式化</h1><h1 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h1><h1 id="命名"><a href="#命名" class="headerlink" title="命名"></a>命名</h1><h2 id="包名"><a href="#包名" class="headerlink" title="包名"></a>包名</h2><h2 id="获取器"><a href="#获取器" class="headerlink" title="获取器"></a>获取器</h2><h2 id="接口名"><a href="#接口名" class="headerlink" title="接口名"></a>接口名</h2><h2 id="驼峰记法"><a href="#驼峰记法" class="headerlink" title="驼峰记法"></a>驼峰记法</h2><h1 id="分号"><a href="#分号" class="headerlink" title="分号"></a>分号</h1><h1 id="控制结构"><a href="#控制结构" class="headerlink" title="控制结构"></a>控制结构</h1><h2 id="if-条件语句"><a href="#if-条件语句" class="headerlink" title="if 条件语句"></a>if 条件语句</h2><h2 id="重新生命与再次赋值"><a href="#重新生命与再次赋值" class="headerlink" title="重新生命与再次赋值"></a>重新生命与再次赋值</h2><h2 id="for-循环"><a href="#for-循环" class="headerlink" title="for 循环"></a>for 循环</h2><h2 id="switch"><a href="#switch" class="headerlink" title="switch"></a>switch</h2><h2 id="类型选择"><a href="#类型选择" class="headerlink" title="类型选择"></a>类型选择</h2><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><h2 id="多返回值-Multiple-return-values"><a href="#多返回值-Multiple-return-values" class="headerlink" title="多返回值 (Multiple return values)"></a>多返回值 (<a href="https://go.dev/doc/effective_go#multiple-returns">Multiple return values</a>)</h2><h2 id="可命名结果形参-Named-result-parameters"><a href="#可命名结果形参-Named-result-parameters" class="headerlink" title="可命名结果形参 (Named result parameters)"></a>可命名结果形参 (<a href="https://go.dev/doc/effective_go#named-results">Named result parameters</a>)</h2><h2 id="Defer"><a href="#Defer" class="headerlink" title="Defer"></a><a href="https://go.dev/doc/effective_go#defer">Defer</a></h2><h1 id="数据"><a href="#数据" class="headerlink" title="数据"></a>数据</h1><h2 id="零值-The-zero-value"><a href="#零值-The-zero-value" class="headerlink" title="零值 (The zero value)"></a>零值 (<a href="https://go.dev/ref/spec#The_zero_value">The zero value</a>)</h2><p>When storage is allocated for a <a href="https://go.dev/ref/spec#Variables">variable</a>, either through a declaration or a call of <code>new</code>, or when a new value is created, either through a composite literal or a call of <code>make</code>, and no explicit initialization is provided, the variable or value is given a default value. Each element of such a variable or value is set to the <em>zero value</em> for its type: <code>false</code> for booleans, <code>0</code> for numeric types, <code>&quot;&quot;</code> for strings, and <code>nil</code> for pointers, functions, interfaces, slices, channels, and maps. This initialization is done recursively, so for instance each element of an array of structs will have its fields zeroed if no value is specified.</p>
<p>当通过声明或 new 调用为变量分配存储空间时，或通过复合文字或 make 调用创建新值时，且未提供显式初始化，则变量或值会被给定一个默认值。变量或值的每个元素都被设置为其类型的零值：对于布尔值，其零值是<code>false</code>；对于数值类型，其零值是<code>0</code>；对于字符串，其零值是<code>&quot;&quot;</code>；对于指针、函数、接口、切片、信道 (channels)和映射，其零值是<code>nil</code>。初始化操作是递归完成的。例如，如果没有指定，则结构体数组的每个元素都被置为其字段的零值。</p>
<p>以下两种声明是等价的：</p>
<pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> i <span class="token builtin">int</span>
<span class="token keyword">var</span> i <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">0</span></code></pre>

<p>例如，下面<code>i1</code>虽然声明时未赋值，但自动被赋零值。</p>
<pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> i1 <span class="token builtin">int</span>
<span class="token keyword">var</span> i2 <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">0</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>i1 <span class="token operator">==</span> i2<span class="token punctuation">)</span> <span class="token comment">// true</span></code></pre>

<p>又或者下面这个结构体T，通过调用<code>new</code>声明变量t：</p>
<pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> T <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span> i <span class="token builtin">int</span><span class="token punctuation">;</span> f <span class="token builtin">float64</span><span class="token punctuation">;</span> next <span class="token operator">*</span>T <span class="token punctuation">&#125;</span>
t <span class="token operator">:=</span> <span class="token function">new</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span></code></pre>

<p>这个结构体变量<code>t</code>的成员字段零值如下：</p>
<pre class="language-go" data-language="go"><code class="language-go">t<span class="token punctuation">.</span>i <span class="token operator">==</span> <span class="token number">0</span> <span class="token comment">// true</span>
t<span class="token punctuation">.</span>f <span class="token operator">==</span> <span class="token number">0.0</span> <span class="token comment">// true</span>
t<span class="token punctuation">.</span>next <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token comment">// true</span></code></pre>

<p>直接声明结构体T的变量<code>t</code>也是同样的：</p>
<pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> t T
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">// true</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>f <span class="token operator">==</span> <span class="token number">0.0</span><span class="token punctuation">)</span> <span class="token comment">// true</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>next <span class="token operator">==</span> <span class="token boolean">nil</span><span class="token punctuation">)</span> <span class="token comment">// true</span></code></pre>

<h2 id="new-分配"><a href="#new-分配" class="headerlink" title="new 分配"></a><code>new</code> 分配</h2><p> <code>new</code>是个用来分配内存的内建函数， 但与其它语言中的同名函数不同，它不会<strong>初始化</strong>内存，只会将内存<strong>置零</strong>。 也就是说，<code>new(T)</code> 会为类型为 <code>T</code> 的新项分配已置零的内存空间， 并返回它的地址，也就是一个类型为 <code>*T</code> 的值。用Go的术语来说，它返回一个指针， 该指针指向新分配的，类型为 <code>T</code> 的零值。</p>
<p>Since the memory returned by <code>new</code> is zeroed, it’s helpful to arrange when designing your data structures that the zero value of each type can be used without further initialization. This means a user of the data structure can create one with <code>new</code> and get right to work. For example, the documentation for <code>bytes.Buffer</code> states that “the zero value for <code>Buffer</code> is an empty buffer ready to use.” Similarly, <code>sync.Mutex</code> does not have an explicit constructor or <code>Init</code> method. Instead, the zero value for a <code>sync.Mutex</code> is defined to be an unlocked mutex.</p>
<p>既然 <code>new</code> 返回的内存已置零，那么每种类型的零值不必进一步初始化就可以使用了。这在设计数据结构时是非常有用的。这意味着该数据结构的使用者只需用 <code>new</code> 创建一个新的对象就能正常工作。例如，<code>bytes.Buffer</code> 的文档中提到“零值的 <code>Buffer</code> 就是已准备就绪的缓冲区。” 同样，<code>sync.Mutex</code> 并没有显式的构造函数或 <code>Init</code> 方法， 而是零值的 <code>sync.Mutex</code> 就已经被定义为已解锁的互斥锁了。</p>
<p>The zero-value-is-useful property works transitively. Consider this type declaration.</p>
<pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> SyncedBuffer <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
	lock    sync<span class="token punctuation">.</span>Mutex
	buffer  bytes<span class="token punctuation">.</span>Buffer
<span class="token punctuation">&#125;</span></code></pre>

<p>Values of type <code>SyncedBuffer</code> are also ready to use immediately upon allocation or just declaration. In the next snippet, both <code>p</code> and <code>v</code> will work correctly without further arrangement.</p>
<pre class="language-go" data-language="go"><code class="language-go">p <span class="token operator">:=</span> <span class="token function">new</span><span class="token punctuation">(</span>SyncedBuffer<span class="token punctuation">)</span>  <span class="token comment">// type *SyncedBuffer</span>
<span class="token keyword">var</span> v SyncedBuffer      <span class="token comment">// type  SyncedBuffer</span></code></pre>

<h2 id="构造函数与复合字面量-Constructors-and-composite-literals"><a href="#构造函数与复合字面量-Constructors-and-composite-literals" class="headerlink" title="构造函数与复合字面量 (Constructors and composite literals)"></a>构造函数与复合字面量 (<a href="https://go.dev/doc/effective_go#constructors_and_composite_literals">Constructors and composite literals</a>)</h2><p>有时零值还不够好，这时就需要一个初始化构造函数，如来自 <code>os</code> 包中的这段代码所示。</p>
<pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">NewFile</span><span class="token punctuation">(</span>fd <span class="token builtin">int</span><span class="token punctuation">,</span> name <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">*</span>File <span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> fd <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> <span class="token boolean">nil</span>
	<span class="token punctuation">&#125;</span>
	f <span class="token operator">:=</span> <span class="token function">new</span><span class="token punctuation">(</span>File<span class="token punctuation">)</span>
	f<span class="token punctuation">.</span>fd <span class="token operator">=</span> fd
	f<span class="token punctuation">.</span>name <span class="token operator">=</span> name
	f<span class="token punctuation">.</span>dirinfo <span class="token operator">=</span> <span class="token boolean">nil</span>
	f<span class="token punctuation">.</span>nepipe <span class="token operator">=</span> <span class="token number">0</span>
	<span class="token keyword">return</span> f
<span class="token punctuation">&#125;</span></code></pre>

<p>这里显得代码过于冗长。我们可通过<strong>复合字面量</strong>来简化它， 该表达式在每次求值时都会创建新的实例。</p>
<pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">NewFile</span><span class="token punctuation">(</span>fd <span class="token builtin">int</span><span class="token punctuation">,</span> name <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">*</span>File <span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> fd <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> <span class="token boolean">nil</span>
	<span class="token punctuation">&#125;</span>
	f <span class="token operator">:=</span> File<span class="token punctuation">&#123;</span>fd<span class="token punctuation">,</span> name<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">&#125;</span>
	<span class="token keyword">return</span> <span class="token operator">&amp;</span>f
<span class="token punctuation">&#125;</span></code></pre>

<p>每当获取一个复合字面的地址时，都将为一个新的实例分配内存， 因此我们可以将上面的最后两行代码合并：</p>
<pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">return</span> <span class="token operator">&amp;</span>File<span class="token punctuation">&#123;</span>fd<span class="token punctuation">,</span> name<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">&#125;</span></code></pre>

<p>复合字面的字段必须按顺序全部列出。但如果以 <strong>字段</strong><code>:</code><strong>值</strong> 对的形式明确地标出元素，初始化字段时就可以按任何顺序出现，未给出的字段值将赋予零值。 因此，我们可以用如下形式：</p>
<pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">return</span> <span class="token operator">&amp;</span>File<span class="token punctuation">&#123;</span>fd<span class="token punctuation">:</span> fd<span class="token punctuation">,</span> name<span class="token punctuation">:</span> name<span class="token punctuation">&#125;</span></code></pre>

<p>As a limiting case, if a composite literal contains no fields at all, it creates a zero value for the type. The expressions <code>new(File)</code> and <code>&amp;File&#123;&#125;</code> are equivalent.</p>
<p>作为一种极端情况，若复合字面不包括任何字段，它将创建该类型的零值。表达式 <code>new(File)</code> 和 <code>&amp;File&#123;&#125;</code> 是等价的。</p>
<h2 id="make-分配"><a href="#make-分配" class="headerlink" title="make 分配"></a><code>make</code> 分配</h2><p>内建函数 <code>make(T, args)</code> 的目的不同于 <code>new(T)</code>。它只用于创建切片、映射和信道 (Channel)，并返回类型为 <code>T</code>（而非 <code>*T</code>）的一个<strong>已初始化</strong> （而非<strong>置零</strong>）的值。出现这种用差异的原因在于，这三种类型本质上为引用数据类型，它们在使用前必须初始化。 例如，切片是一个具有三项内容的描述符，包含一个指向（数组内部）数据的指针、长度以及容量， 在这三项被初始化之前，该切片为 <code>nil</code>。对于切片、映射和信道，<code>make</code> 用于初始化其内部的数据结构并准备好将要使用的值。例如，</p>
<pre class="language-go" data-language="go"><code class="language-go"><span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span></code></pre>

<p>会分配一个具有100个 <code>int</code> 的数组空间，接着创建一个长度为10， 容量为100并指向该数组中前10个元素的切片结构。（生成切片时，其容量可以省略，更多信息见切片一节。） 与此相反，<code>new([]int)</code> 会返回一个指向新分配的，已置零的切片结构， 即一个指向 <code>nil</code> 切片值的指针。</p>
<p>下面的例子阐明了 <code>new</code> 和 <code>make</code> 之间的区别：</p>
<pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> p <span class="token operator">*</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token operator">=</span> <span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span>       <span class="token comment">// 分配切片结构；*p == nil；几乎没什么用</span>
<span class="token keyword">var</span> v  <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token comment">// 切片 v 现在引用了一个具有 100 个 int 元素的新数组</span>

<span class="token comment">// 没必要的复杂：</span>
<span class="token keyword">var</span> p <span class="token operator">*</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token operator">=</span> <span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span>
<span class="token operator">*</span>p <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span>

<span class="token comment">// 习惯用法：</span>
v <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span></code></pre>

<p>请记住，<code>make</code> 只适用于映射、切片和信道且不返回指针。若要获得明确的指针， 请使用 <code>new</code> 分配内存。</p>
<h2 id="new和make的区别"><a href="#new和make的区别" class="headerlink" title="new和make的区别"></a>new和make的区别</h2><p><code>new</code> 的特点：</p>
<ul>
<li>分配内存空间</li>
<li>对变量和值置零值</li>
<li>返回指针</li>
<li><code>new(Type)</code> 等价于 <code>&amp;File&#123;Type&#125;</code></li>
</ul>
<p><code>make</code> 的特点：</p>
<ul>
<li>只用于创建切片、映射和信道 (Channel)</li>
<li>对变量和值初始化</li>
<li>返回值</li>
</ul>
<pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> a <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>        <span class="token comment">// []</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>a <span class="token operator">==</span> <span class="token boolean">nil</span><span class="token punctuation">)</span> <span class="token comment">// true</span>

b <span class="token operator">:=</span> <span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>         <span class="token comment">// &amp;[]</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>b <span class="token operator">==</span> <span class="token boolean">nil</span><span class="token punctuation">)</span>  <span class="token comment">// false</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token operator">*</span>b <span class="token operator">==</span> <span class="token boolean">nil</span><span class="token punctuation">)</span> <span class="token comment">// true</span>

c <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>        <span class="token comment">// [0 0 0]</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token boolean">nil</span><span class="token punctuation">)</span> <span class="token comment">// false</span>

fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%T %T %T"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span> <span class="token comment">// []int *[]int []int</span></code></pre>



<h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p>类型 <code>[n]T</code> 表示拥有 <code>n</code> 个 <code>T</code> 类型的值的数组。</p>
<p>表达式：</p>
<pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> a <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token builtin">int</span></code></pre>

<p>会将变量 <code>a</code> 声明为拥有 10 个整数的数组。</p>
<p>这是一个数组字面量 (literal)：</p>
<pre class="language-go" data-language="go"><code class="language-go"><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">bool</span><span class="token punctuation">&#123;</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">&#125;</span></code></pre>

<p>在详细规划内存布局时，数组是非常有用的，有时还能避免过多的内存分配， 但它们主要用作切片的构件。</p>
<p>以下为数组在Go和C中的主要区别。在Go中，</p>
<ul>
<li>数组是值。将一个数组赋予另一个数组会复制其所有元素。</li>
<li>特别地，若将某个数组传入某个函数，它将接收到该数组的一份<strong>副本</strong>而非指针。</li>
<li>数组的大小是其类型的一部分，因此数组不能改变大小。类型 <code>[10]int</code> 和 <code>[20]int</code> 是不同的。</li>
</ul>
<p>The value property can be useful but also expensive; if you want C-like behavior and efficiency, you can pass a pointer to the array.</p>
<p>数组为值的属性很有用，但代价高昂；若你想要C那样的行为和效率，你可以传递一个指向该数组的指针。</p>
<pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">Sum</span><span class="token punctuation">(</span>a <span class="token operator">*</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">float64</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>sum <span class="token builtin">float64</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> <span class="token operator">*</span>a <span class="token punctuation">&#123;</span>
		sum <span class="token operator">+=</span> v
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">return</span>
<span class="token punctuation">&#125;</span>

array <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token builtin">float64</span><span class="token punctuation">&#123;</span><span class="token number">7.0</span><span class="token punctuation">,</span> <span class="token number">8.5</span><span class="token punctuation">,</span> <span class="token number">9.1</span><span class="token punctuation">&#125;</span>
x <span class="token operator">:=</span> <span class="token function">Sum</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>array<span class="token punctuation">)</span>  <span class="token comment">// 注意显式的取址操作</span></code></pre>

<p>但这并不是Go的习惯用法。使用切片，而不是数组。</p>
<h2 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h2><p>每个数组的大小都是固定的。切片通过对数组进行封装，为数据序列提供了更通用、强大而方便的接口。 除了矩阵变换这类需要明确维度的情况外，Go中的大部分数组编程都是通过切片来完成的。</p>
<p>类型 <code>[]T</code> 表示一个元素类型为 <code>T</code> 的切片。</p>
<p>切片通过两个下标来界定，即一个上界和一个下界，二者以冒号分隔：</p>
<pre class="language-go" data-language="go"><code class="language-go">a<span class="token punctuation">[</span>low <span class="token punctuation">:</span> high<span class="token punctuation">]</span></code></pre>

<p>它会选择一个半开区间，包括第一个元素，但排除最后一个元素。</p>
<p>以下表达式创建了一个切片，它包含 <code>a</code> 中下标从 1 到 3 的元素：</p>
<pre class="language-go" data-language="go"><code class="language-go">a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span></code></pre>

<p>切片保存了对底层数组的引用，若你将某个切片赋予另一个切片，它们会引用同一个数组。 更改切片的元素会修改其底层数组中对应的元素。与它共享底层数组的切片都会观测到这些修改。</p>
<pre class="language-go" data-language="go"><code class="language-go">names <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">&#123;</span>
    <span class="token string">"John"</span><span class="token punctuation">,</span>
    <span class="token string">"Paul"</span><span class="token punctuation">,</span>
    <span class="token string">"George"</span><span class="token punctuation">,</span>
    <span class="token string">"Ringo"</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>names<span class="token punctuation">)</span> <span class="token comment">// [John Paul George Ringo]</span>

a <span class="token operator">:=</span> names<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span>
b <span class="token operator">:=</span> names<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token comment">// [John Paul] [Paul George]</span>

b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"XXX"</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token comment">// [John XXX] [XXX George]</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>names<span class="token punctuation">)</span> <span class="token comment">// [John XXX George Ringo]</span></code></pre>

<h3 id="切片的零值"><a href="#切片的零值" class="headerlink" title="切片的零值"></a>切片的零值</h3><p>切片的零值是 <code>nil</code>。<code>nil</code> 切片的长度和容量为 0 且没有底层数组。</p>
<h3 id="切片字面量-Slice-Literals"><a href="#切片字面量-Slice-Literals" class="headerlink" title="切片字面量 (Slice Literals)"></a>切片字面量 (Slice Literals)</h3><p>切片字面量类似于没有长度的数组文法。下面这样则会创建一个和上面相同的数组，然后构建一个引用了它的切片：</p>
<pre class="language-go" data-language="go"><code class="language-go"><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">bool</span><span class="token punctuation">&#123;</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">&#125;</span></code></pre>

<h3 id="用-make-创建切片"><a href="#用-make-创建切片" class="headerlink" title="用 make 创建切片"></a>用 make 创建切片</h3><p>切片可以用内建函数 <code>make</code> 来创建，这也是你创建动态数组的方式。</p>
<p><code>make</code> 函数会分配一个元素为零值的数组并返回一个引用了它的切片：</p>
<pre class="language-go" data-language="go"><code class="language-go">a <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>  <span class="token comment">// len(a)=5</span></code></pre>

<p>要指定它的容量，需向 <code>make</code> 传入第三个参数：</p>
<pre class="language-go" data-language="go"><code class="language-go">b <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token comment">// len(b)=0, cap(b)=5</span>

b <span class="token operator">=</span> b<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token function">cap</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token comment">// len(b)=5, cap(b)=5</span>
b <span class="token operator">=</span> b<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span>      <span class="token comment">// len(b)=4, cap(b)=4</span></code></pre>

<h3 id="切片的默认上下界"><a href="#切片的默认上下界" class="headerlink" title="切片的默认上下界"></a>切片的默认上下界</h3><p>切片下界的默认值为 <code>0</code>，上界则是该切片的长度。</p>
<p>对于数组</p>
<pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> a <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token builtin">int</span></code></pre>

<p>来说，以下切片是等价的：</p>
<pre class="language-go" data-language="go"><code class="language-go">a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">10</span><span class="token punctuation">]</span>
a<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">10</span><span class="token punctuation">]</span>
a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token punctuation">]</span>
a<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span></code></pre>

<h3 id="切片作为函数参数"><a href="#切片作为函数参数" class="headerlink" title="切片作为函数参数"></a>切片作为函数参数</h3><p>若某个函数将一个切片作为参数传入，则它对该切片元素的修改对调用者而言同样可见， 这可以理解为传递了底层数组的指针。因此，<code>Read</code> 函数可接受一个切片实参 而非一个指针和一个计数；切片的长度决定了可读取数据的上限。以下为 <code>os</code> 包中 <code>File</code> 类型的 <code>Read</code> 方法签名:</p>
<pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>file <span class="token operator">*</span>File<span class="token punctuation">)</span> <span class="token function">Read</span><span class="token punctuation">(</span>buf <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>n <span class="token builtin">int</span><span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span></code></pre>

<p>该方法返回读取的字节数和一个错误值（若有的话）。若要从更大的缓冲区 <code>buf</code> 中读取前32个字节，只需对其进行<strong>切片</strong>即可。</p>
<pre class="language-go" data-language="go"><code class="language-go">n<span class="token punctuation">,</span> err <span class="token operator">:=</span> f<span class="token punctuation">.</span><span class="token function">Read</span><span class="token punctuation">(</span>buf<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre>

<p>这种切片的方法常用且高效。</p>
<h3 id="切片的长度与容量"><a href="#切片的长度与容量" class="headerlink" title="切片的长度与容量"></a>切片的长度与容量</h3><p>切片拥有 <strong>长度</strong> 和 <strong>容量</strong>。切片的<strong>长度</strong>就是它所包含的元素个数。切片的<strong>容量</strong>是从它的第一个元素开始数，到其底层数组元素末尾的个数。</p>
<p>切片 <code>s</code> 的长度和容量可通过内建函数 <code>len(s)</code> 和 <code>cap(s)</code> 来获取。</p>
<p>你可以通过重新切片来扩展一个切片，给它提供足够的容量。</p>
<pre class="language-go" data-language="go"><code class="language-go">s <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">&#125;</span>
fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"len=%d cap=%d %v\n"</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span> <span class="token comment">// len=6 cap=6 [2 3 5 7 11 13]</span>

<span class="token comment">// 截取切片使其长度为 0</span>
s <span class="token operator">=</span> s<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span>
fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"len=%d cap=%d %v\n"</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span> <span class="token comment">// len=0 cap=6 []</span>

<span class="token comment">// 拓展其长度</span>
s <span class="token operator">=</span> s<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span>
fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"len=%d cap=%d %v\n"</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span> <span class="token comment">// len=4 cap=6 [2 3 5 7]</span>

<span class="token comment">// 舍弃前两个值</span>
s <span class="token operator">=</span> s<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span>
fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"len=%d cap=%d %v\n"</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span> <span class="token comment">// len=2 cap=4 [5 7]</span></code></pre>

<p>只要切片不超出底层数组的限制，它的长度就是可变的，只需将它赋给其自身的切片即可。  以下是将数据追加到切片的函数。若数据超出其容量，则会重新分配该切片。返回值即为所得的切片。 该函数中所使用的 <code>len</code> 和 <code>cap</code> 在应用于 <code>nil</code> 切片时是合法的，它会返回0.</p>
<pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">Append</span><span class="token punctuation">(</span>slice<span class="token punctuation">,</span> data <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span> <span class="token punctuation">&#123;</span>
	l <span class="token operator">:=</span> <span class="token function">len</span><span class="token punctuation">(</span>slice<span class="token punctuation">)</span>
	<span class="token keyword">if</span> l <span class="token operator">+</span> <span class="token function">len</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token function">cap</span><span class="token punctuation">(</span>slice<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 重新分配</span>
		<span class="token comment">// 为了未来的增长，分配双倍。</span>
		newSlice <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>l<span class="token operator">+</span><span class="token function">len</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span>
		<span class="token comment">// copy 函数是预声明的，且可用于任何切片类型。</span>
		<span class="token function">copy</span><span class="token punctuation">(</span>newSlice<span class="token punctuation">,</span> slice<span class="token punctuation">)</span>
		slice <span class="token operator">=</span> newSlice
	<span class="token punctuation">&#125;</span>
	slice <span class="token operator">=</span> slice<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span>l<span class="token operator">+</span><span class="token function">len</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">]</span>
	<span class="token keyword">for</span> i<span class="token punctuation">,</span> c <span class="token operator">:=</span> <span class="token keyword">range</span> data <span class="token punctuation">&#123;</span>
		slice<span class="token punctuation">[</span>l<span class="token operator">+</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> c
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">return</span> slice
<span class="token punctuation">&#125;</span></code></pre>

<p>最终我们必须返回切片，因为尽管 <code>Append</code> 可修改 <code>slice</code> 的元素，但切片自身（其运行时数据结构包含指针、长度和容量）是通过值传递的。</p>
<p>为切片追加新的元素是种常用的操作，因此有专门的内建函数 <code>append</code>：</p>
<ul>
<li><code>append</code> 的第一个参数 <code>s</code> 是一个元素类型为 <code>T</code> 的切片，其余类型为 <code>T</code> 的值将会追加到该切片的末尾。</li>
<li><code>append</code> 的结果是一个包含原切片所有元素加上新添加元素的切片。</li>
</ul>
<pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">append</span><span class="token punctuation">(</span>s <span class="token punctuation">[</span><span class="token punctuation">]</span>T<span class="token punctuation">,</span> vs <span class="token operator">...</span>T<span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>T</code></pre>

<p>当 <code>s</code> 的底层数组太小，不足以容纳所有给定的值时，它就会分配一个更大的数组。返回的切片会指向这个新分配的数组。</p>
<h2 id="二维切片"><a href="#二维切片" class="headerlink" title="二维切片"></a>二维切片</h2><p>Go的数组和切片都是一维的。要创建等价的二维数组或切片，就必须定义一个数组的数组， 或切片的切片，就像这样：</p>
<pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> Transform <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">float64</span>  <span class="token comment">// 一个 3x3 的数组，其实是包含多个数组的一个数组。</span>
<span class="token keyword">type</span> LinesOfText <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span>     <span class="token comment">// 包含多个字节切片的一个切片。</span></code></pre>

<p>由于切片长度是可变的，因此其内部可能拥有多个不同长度的切片。在我们的 <code>LinesOfText</code> 例子中，这是种常见的情况：每行都有其自己的长度。</p>
<pre class="language-go" data-language="go"><code class="language-go">text <span class="token operator">:=</span> LinesOfText<span class="token punctuation">&#123;</span>
	<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">"Now is the time"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
	<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">"for all good gophers"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
	<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">"to bring some fun to the party."</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>有时必须分配一个二维数组，例如在处理像素的扫描行时，这种情况就会发生。 我们有两种方式来达到这个目的。一种就是独立地分配每一个切片；而另一种就是只分配一个数组， 将各个切片都指向它。采用哪种方式取决于你的应用。若切片会增长或收缩， 就应该通过独立分配来避免覆盖下一行；若不会，用单次分配来构造对象会更加高效。 以下是这两种方法的大概代码，仅供参考。首先是一次一行的：</p>
<pre class="language-go" data-language="go"><code class="language-go"><span class="token comment">// 分配顶层切片。</span>
picture <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">uint8</span><span class="token punctuation">,</span> YSize<span class="token punctuation">)</span> <span class="token comment">// 每 y 个单元一行。</span>
<span class="token comment">// 遍历行，为每一行都分配切片</span>
<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token keyword">range</span> picture <span class="token punctuation">&#123;</span>
	picture<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">uint8</span><span class="token punctuation">,</span> XSize<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>现在是一次分配，对行进行切片：</p>
<pre class="language-go" data-language="go"><code class="language-go"><span class="token comment">// 分配顶层切片，和前面一样。</span>
picture <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">uint8</span><span class="token punctuation">,</span> YSize<span class="token punctuation">)</span> <span class="token comment">// 每 y 个单元一行。</span>
<span class="token comment">// 分配一个大的切片来保存所有像素</span>
pixels <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">uint8</span><span class="token punctuation">,</span> XSize<span class="token operator">*</span>YSize<span class="token punctuation">)</span> <span class="token comment">// 拥有类型 []uint8，尽管图片是 [][]uint8.</span>
<span class="token comment">// 遍历行，从剩余像素切片的前面切出每行来。</span>
<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token keyword">range</span> picture <span class="token punctuation">&#123;</span>
	picture<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> pixels <span class="token operator">=</span> pixels<span class="token punctuation">[</span><span class="token punctuation">:</span>XSize<span class="token punctuation">]</span><span class="token punctuation">,</span> pixels<span class="token punctuation">[</span>XSize<span class="token punctuation">:</span><span class="token punctuation">]</span>
<span class="token punctuation">&#125;</span></code></pre>

<h2 id="映射"><a href="#映射" class="headerlink" title="映射"></a>映射</h2><p>映射是方便而强大的内建数据结构，它可以关联不同类型的值。其键可以是任何相等性操作符支持的类型， 如整数、浮点数、复数、字符串、指针、接口（只要其动态类型支持相等性判断）、结构以及数组。 切片不能用作映射键，因为它们的相等性是未定义。与切片一样，映射也是引用类型。 若将映射传入函数中，并更改了该映射的内容，则此修改对调用者同样可见。</p>
<p>映射的零值为 <code>nil</code> 。<code>nil</code> 映射既没有键，也不能添加键。</p>
<p><code>make</code> 函数可以返回给定类型的映射，并将其初始化。</p>
<p>映射可使用一般的复合字面语法进行构建，其键-值对使用逗号分隔，因此可在初始化时很容易构建它们。</p>
<pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> timeZone <span class="token operator">=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span>
	<span class="token string">"UTC"</span><span class="token punctuation">:</span>  <span class="token number">0</span><span class="token operator">*</span><span class="token number">60</span><span class="token operator">*</span><span class="token number">60</span><span class="token punctuation">,</span>
	<span class="token string">"EST"</span><span class="token punctuation">:</span> <span class="token operator">-</span><span class="token number">5</span><span class="token operator">*</span><span class="token number">60</span><span class="token operator">*</span><span class="token number">60</span><span class="token punctuation">,</span>
	<span class="token string">"CST"</span><span class="token punctuation">:</span> <span class="token operator">-</span><span class="token number">6</span><span class="token operator">*</span><span class="token number">60</span><span class="token operator">*</span><span class="token number">60</span><span class="token punctuation">,</span>
	<span class="token string">"MST"</span><span class="token punctuation">:</span> <span class="token operator">-</span><span class="token number">7</span><span class="token operator">*</span><span class="token number">60</span><span class="token operator">*</span><span class="token number">60</span><span class="token punctuation">,</span>
	<span class="token string">"PST"</span><span class="token punctuation">:</span> <span class="token operator">-</span><span class="token number">8</span><span class="token operator">*</span><span class="token number">60</span><span class="token operator">*</span><span class="token number">60</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>赋值和获取映射值的语法类似于数组，不同的是映射的索引不必为整数。</p>
<pre class="language-go" data-language="go"><code class="language-go">offset <span class="token operator">:=</span> timeZone<span class="token punctuation">[</span><span class="token string">"EST"</span><span class="token punctuation">]</span></code></pre>

<p>若试图通过映射中不存在的键来取值，就会返回与该映射中项的类型对应的零值。 例如，若某个映射包含整数，当查找一个不存在的键时会返回 <code>0</code>。 </p>
<p>可以通过一个值类型为 <code>bool</code> 的映射来实现<strong>集合</strong>。将该映射中的项置为 <code>true</code> 可将该值放入集合中，此后通过简单的索引操作即可判断是否存在。</p>
<pre class="language-go" data-language="go"><code class="language-go">attended <span class="token operator">:=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">bool</span><span class="token punctuation">&#123;</span>
	<span class="token string">"Ann"</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
	<span class="token string">"Joe"</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
	<span class="token operator">...</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">if</span> attended<span class="token punctuation">[</span>person<span class="token punctuation">]</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 若某人不在此映射中，则为 false</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>person<span class="token punctuation">,</span> <span class="token string">"正在开会"</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>有时你需要区分某项是不存在还是其值为零值。如对于一个值本应为零的 <code>&quot;UTC&quot;</code> 条目，也可能是由于不存在该项而得到零值。你可以使用多重赋值的形式来分辨这种情况。</p>
<pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> seconds <span class="token builtin">int</span>
<span class="token keyword">var</span> ok <span class="token builtin">bool</span>
seconds<span class="token punctuation">,</span> ok <span class="token operator">=</span> timeZone<span class="token punctuation">[</span>tz<span class="token punctuation">]</span></code></pre>

<p>显然，我们可称之为“逗号 ok”惯用法。在下面的例子中，若 <code>tz</code> 存在， <code>seconds</code> 就会被赋予适当的值，且 <code>ok</code> 会被置为 <code>true</code>； 若不存在，<code>seconds</code> 则会被置为零，而 <code>ok</code> 会被置为 <code>false</code>。</p>
<pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">offset</span><span class="token punctuation">(</span>tz <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> seconds<span class="token punctuation">,</span> ok <span class="token operator">:=</span> timeZone<span class="token punctuation">[</span>tz<span class="token punctuation">]</span><span class="token punctuation">;</span> ok <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> seconds
	<span class="token punctuation">&#125;</span>
	log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"unknown time zone:"</span><span class="token punctuation">,</span> tz<span class="token punctuation">)</span>
	<span class="token keyword">return</span> <span class="token number">0</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>若仅需判断映射中是否存在某项而不关心实际的值，可使用<a href="https://go-zh.org/doc/effective_go.html#%E7%A9%BA%E7%99%BD">空白标识符</a> （<code>_</code>）来代替该值的一般变量。</p>
<pre class="language-go" data-language="go"><code class="language-go"><span class="token boolean">_</span><span class="token punctuation">,</span> present <span class="token operator">:=</span> timeZone<span class="token punctuation">[</span>tz<span class="token punctuation">]</span></code></pre>

<p>要删除映射中的某项，可使用内建函数 <code>delete</code>，它以映射及要被删除的键为实参。 即便对应的键不在该映射中，此操作也是安全的。</p>
<pre class="language-go" data-language="go"><code class="language-go"><span class="token function">delete</span><span class="token punctuation">(</span>timeZone<span class="token punctuation">,</span> <span class="token string">"PDT"</span><span class="token punctuation">)</span>  <span class="token comment">// 现在用标准时间</span></code></pre>

<p>映射的值可以是结构体：</p>
<pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> Vertex <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
	Lat<span class="token punctuation">,</span> Long <span class="token builtin">float64</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">var</span> m <span class="token operator">=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span>Vertex<span class="token punctuation">&#123;</span>
	<span class="token string">"Bell Labs"</span><span class="token punctuation">:</span> Vertex<span class="token punctuation">&#123;</span>
		<span class="token number">40.68433</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">74.39967</span><span class="token punctuation">,</span>
	<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
	<span class="token string">"Google"</span><span class="token punctuation">:</span> Vertex<span class="token punctuation">&#123;</span>
		<span class="token number">37.42202</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">122.08408</span><span class="token punctuation">,</span>
	<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>若顶级类型只是一个类型名，你可以在字面量的元素中省略它：</p>
<pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> Vertex <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
	Lat<span class="token punctuation">,</span> Long <span class="token builtin">float64</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">var</span> m <span class="token operator">=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span>Vertex<span class="token punctuation">&#123;</span>
	<span class="token string">"Bell Labs"</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token number">40.68433</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">74.39967</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
	<span class="token string">"Google"</span><span class="token punctuation">:</span>    <span class="token punctuation">&#123;</span><span class="token number">37.42202</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">122.08408</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span></code></pre>

<h2 id="打印"><a href="#打印" class="headerlink" title="打印"></a>打印</h2><p>Go采用的格式化打印风格和C的 <code>printf</code> 族类似，但却更加丰富而通用。 这些函数位于 <code>fmt</code> 包中，且函数名首字母均为大写：如 <code>fmt.Printf</code>、<code>fmt.Fprintf</code>，<code>fmt.Sprintf</code> 等。 字符串函数（<code>Sprintf</code> 等）会返回一个字符串，而非填充给定的缓冲区。</p>
<p>你无需提供一个格式字符串。每个 <code>Printf</code>、<code>Fprintf</code> 和 <code>Sprintf</code> 都分别对应另外的函数，如 <code>Print</code> 与 <code>Println</code>。 这些函数并不接受格式字符串，而是为每个实参生成一种默认格式。<code>Println</code> 系列的函数还会在实参中插入空格，并在输出时追加一个换行符，而 <code>Print</code> 版本仅在操作数两侧都没有字符串时才添加空白。以下示例中各行产生的输出都是一样的。</p>
<pre class="language-go" data-language="go"><code class="language-go">fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"Hello %d\n"</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">)</span>
fmt<span class="token punctuation">.</span><span class="token function">Fprint</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>Stdout<span class="token punctuation">,</span> <span class="token string">"Hello "</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token string">"\n"</span><span class="token punctuation">)</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">)</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>fmt<span class="token punctuation">.</span><span class="token function">Sprint</span><span class="token punctuation">(</span><span class="token string">"Hello "</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre>

<p><code>fmt.Fprint</code> 一类的格式化打印函数可接受任何实现了 <code>io.Writer</code> 接口的对象作为第一个实参；变量<code>os.Stdout</code> 与 <code>os.Stderr</code> 都是人们熟知的例子。</p>
<p>从这里开始，就与C有些不同了。首先，像 <code>%d</code> 这样的数值格式并不接受表示符号或大小的标记， 打印例程会根据实参的类型来决定这些属性。</p>
<pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> x <span class="token builtin">uint64</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token number">64</span> <span class="token operator">-</span> <span class="token number">1</span>
fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%d %x; %d %x\n"</span><span class="token punctuation">,</span> x<span class="token punctuation">,</span> x<span class="token punctuation">,</span> <span class="token function">int64</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">int64</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre>

<p>将打印</p>
<pre class="language-go" data-language="go"><code class="language-go"><span class="token number">18446744073709551615</span> ffffffffffffffff<span class="token punctuation">;</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">-</span><span class="token number">1</span></code></pre>

<p>若你只想要默认的转换，如使用十进制的整数，你可以使用通用的格式 <code>%v</code>（对应“值”）；其结果与 <code>Print</code> 和 <code>Println</code> 的输出完全相同。此外，这种格式还能打印<strong>任意</strong>值，甚至包括数组、结构体和映射。 以下是打印上一节中定义的时区映射的语句。</p>
<pre class="language-go" data-language="go"><code class="language-go">fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%v\n"</span><span class="token punctuation">,</span> timeZone<span class="token punctuation">)</span>  <span class="token comment">// 或只用 fmt.Println(timeZone)</span></code></pre>

<p>这会输出</p>
<pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">map</span><span class="token punctuation">[</span>CST<span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">21600</span> PST<span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">28800</span> EST<span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">18000</span> UTC<span class="token punctuation">:</span><span class="token number">0</span> MST<span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">25200</span><span class="token punctuation">]</span></code></pre>

<p>当然，映射中的键可能按任意顺序输出。当打印结构体时，改进的格式 <code>%+v</code> 会为结构体的每个字段添上字段名，而另一种格式 <code>%#v</code> 将完全按照Go的语法打印值。</p>
<pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> T <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
	a <span class="token builtin">int</span>
	b <span class="token builtin">float64</span>
	c <span class="token builtin">string</span>
<span class="token punctuation">&#125;</span>
t <span class="token operator">:=</span> <span class="token operator">&amp;</span>T<span class="token punctuation">&#123;</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2.35</span><span class="token punctuation">,</span> <span class="token string">"abc\tdef"</span> <span class="token punctuation">&#125;</span>
fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%v\n"</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span>
fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%+v\n"</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span>
fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%#v\n"</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span>
fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%#v\n"</span><span class="token punctuation">,</span> timeZone<span class="token punctuation">)</span></code></pre>

<p>将打印</p>
<pre class="language-go" data-language="go"><code class="language-go"><span class="token operator">&amp;</span><span class="token punctuation">&#123;</span><span class="token number">7</span> <span class="token operator">-</span><span class="token number">2.35</span> abc   def<span class="token punctuation">&#125;</span>
<span class="token operator">&amp;</span><span class="token punctuation">&#123;</span>a<span class="token punctuation">:</span><span class="token number">7</span> b<span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">2.35</span> c<span class="token punctuation">:</span>abc     def<span class="token punctuation">&#125;</span>
<span class="token operator">&amp;</span>main<span class="token punctuation">.</span>T<span class="token punctuation">&#123;</span>a<span class="token punctuation">:</span><span class="token number">7</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">2.35</span><span class="token punctuation">,</span> c<span class="token punctuation">:</span><span class="token string">"abc\tdef"</span><span class="token punctuation">&#125;</span>
<span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span> <span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token string">"CST"</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">21600</span><span class="token punctuation">,</span> <span class="token string">"PST"</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">28800</span><span class="token punctuation">,</span> <span class="token string">"EST"</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">18000</span><span class="token punctuation">,</span> <span class="token string">"UTC"</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"MST"</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">25200</span><span class="token punctuation">&#125;</span></code></pre>

<p>（请注意其中的&amp;符号）当遇到 <code>string</code> 或 <code>[]byte</code> 值时， 可使用 <code>%q</code> 产生带引号的字符串；而格式 <code>%#q</code> 会尽可能使用反引号。 （<code>%q</code> 格式也可用于整数和符文，它会产生一个带单引号的符文常量。） 此外，<code>%x</code> 还可用于字符串、字节数组以及整数，并生成一个很长的十六进制字符串， 而带空格的格式（<code>% x</code>）还会在字节之间插入空格。</p>
<p>另一种实用的格式是 <code>%T</code>，它会打印某个值的<strong>类型</strong>.</p>
<pre class="language-go" data-language="go"><code class="language-go">fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%T\n"</span><span class="token punctuation">,</span> timeZone<span class="token punctuation">)</span></code></pre>

<p>会打印</p>
<pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span> <span class="token builtin">int</span></code></pre>

<p>若你想控制自定义类型的默认格式，只需为该类型定义一个具有 <code>String() string</code> 签名的方法。对于我们简单的类型 <code>T</code>，可进行如下操作。</p>
<pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>t <span class="token operator">*</span>T<span class="token punctuation">)</span> <span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"%d/%g/%q"</span><span class="token punctuation">,</span> t<span class="token punctuation">.</span>a<span class="token punctuation">,</span> t<span class="token punctuation">.</span>b<span class="token punctuation">,</span> t<span class="token punctuation">.</span>c<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>
fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%v\n"</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span></code></pre>

<p>会打印出如下格式：</p>
<pre class="language-go" data-language="go"><code class="language-go"><span class="token number">7</span><span class="token operator">/</span><span class="token operator">-</span><span class="token number">2.35</span><span class="token operator">/</span><span class="token string">"abc\tdef"</span></code></pre>

<p>（如果你需要像指向 <code>T</code> 的指针那样打印类型 <code>T</code> 的<strong>值</strong>， <code>String</code> 的接收者就必须是值类型的；上面的例子中接收者是一个指针， 因为这对结构来说更高效而通用。更多详情见<a href="https://go-zh.org/doc/effective_go.html#%E6%8C%87%E9%92%88vs%E5%80%BC">指针vs.值接收者</a>一节.）</p>
<p>我们的 <code>String</code> 方法也可调用 <code>Sprintf</code>， 因为打印例程可以完全重入并按这种方式封装。不过要理解这种方式，还有一个重要的细节： 请勿通过调用 <code>Sprintf</code> 来构造 <code>String</code> 方法，因为它会无限递归你的 <code>String</code> 方法。</p>
<pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> MyString <span class="token builtin">string</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>m MyString<span class="token punctuation">)</span> <span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"MyString=%s"</span><span class="token punctuation">,</span> m<span class="token punctuation">)</span> <span class="token comment">// 错误：会无限递归</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>要解决这个问题也很简单：将该实参转换为基本的字符串类型，它没有这个方法。</p>
<pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> MyString <span class="token builtin">string</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>m MyString<span class="token punctuation">)</span> <span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"MyString=%s"</span><span class="token punctuation">,</span> <span class="token function">string</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 可以：注意转换</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>在<a href="https://go-zh.org/doc/effective_go.html#%E5%88%9D%E5%A7%8B%E5%8C%96">初始化</a>一节中，我们将看到避免这种递归的另一种技术。</p>
<p>另一种打印技术就是将打印例程的实参直接传入另一个这样的例程。<code>Printf</code> 的签名为其最后的实参使用了 <code>...interface&#123;&#125;</code> 类型，这样格式的后面就能出现任意数量，任意类型的形参了。</p>
<pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">Printf</span><span class="token punctuation">(</span>format <span class="token builtin">string</span><span class="token punctuation">,</span> v <span class="token operator">...</span><span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>n <span class="token builtin">int</span><span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></code></pre>

<p>在 <code>Printf</code> 函数中，<code>v</code> 看起来更像是 <code>[]interface&#123;&#125;</code> 类型的变量，但如果将它传递到另一个变参函数中，它就像是常规实参列表了。 以下是我们之前用过的 <code>log.Println</code> 的实现。它直接将其实参传递给 <code>fmt.Sprintln</code> 进行实际的格式化。</p>
<pre class="language-go" data-language="go"><code class="language-go"><span class="token comment">// Println 通过 fmt.Println 的方式将日志打印到标准记录器。</span>
<span class="token keyword">func</span> <span class="token function">Println</span><span class="token punctuation">(</span>v <span class="token operator">...</span><span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	std<span class="token punctuation">.</span><span class="token function">Output</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintln</span><span class="token punctuation">(</span>v<span class="token operator">...</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// Output 接受形参 (int, string)</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>在该 <code>Sprintln</code> 嵌套调用中，我们将 <code>...</code> 写在 <code>v</code> 之后来告诉编译器将 <code>v</code> 视作一个实参列表，否则它会将 <code>v</code> 当做单一的切片实参来传递。</p>
<p>还有很多关于打印知识点没有提及。详情请参阅 <code>godoc</code> 对 <code>fmt</code> 包的说明文档。</p>
<p>顺便一提，<code>...</code> 形参可指定具体的类型，例如从整数列表中选出最小值的函数 <code>min</code>，其形参可为 <code>...int</code> 类型。</p>
<pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">Min</span><span class="token punctuation">(</span>a <span class="token operator">...</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">&#123;</span>
	min <span class="token operator">:=</span> <span class="token function">int</span><span class="token punctuation">(</span><span class="token operator">^</span><span class="token function">uint</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment">// 最大的 int</span>
	<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> i <span class="token operator">:=</span> <span class="token keyword">range</span> a <span class="token punctuation">&#123;</span>
		<span class="token keyword">if</span> i <span class="token operator">&lt;</span> min <span class="token punctuation">&#123;</span>
			min <span class="token operator">=</span> i
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">return</span> min
<span class="token punctuation">&#125;</span></code></pre>

<h2 id="追加"><a href="#追加" class="headerlink" title="追加"></a>追加</h2><p>现在我们要对内建函数 <code>append</code> 的设计进行补充说明。大致来说,<code>append</code> 函数的签名像这样：</p>
<pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">append</span><span class="token punctuation">(</span>slice <span class="token punctuation">[</span><span class="token punctuation">]</span>T<span class="token punctuation">,</span> 元素 <span class="token operator">...</span>T<span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>T</code></pre>

<p>其中的 <em>T</em> 为任意给定类型的占位符。实际上，你无法在Go中编写一个类型 <code>T</code> 由调用者决定的函数。这也就是为何 <code>append</code> 为内建函数的原因：它需要编译器的支持。</p>
<p><code>append</code> 会在切片末尾追加元素并返回结果。我们必须返回结果， 原因与我们手写的 <code>Append</code> 一样，即底层数组可能会被改变。以下简单的例子</p>
<pre class="language-go" data-language="go"><code class="language-go">x <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">&#125;</span>
x <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span></code></pre>

<p>将打印 <code>[1 2 3 4 5 6]</code>。因此 <code>append</code> 有点像 <code>Printf</code> 那样，可接受任意数量的实参。</p>
<p>但如果我们要像 <code>Append</code> 那样将一个切片追加到另一个切片中呢？ 很简单：在调用的地方使用 <code>...</code>，就像我们在上面调用 <code>Output</code> 那样。以下代码片段的输出与上一个相同。</p>
<pre class="language-go" data-language="go"><code class="language-go">x <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">&#125;</span>
y <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">&#125;</span>
x <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token operator">...</span><span class="token punctuation">)</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span></code></pre>

<p>如果没有 <code>...</code>，它就会由于类型错误而无法编译，因为 <code>y</code> 不是 <code>int</code> 类型的。</p>
<h1 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h1><p>尽管从表面上看，Go 的初始化过程与 C 或 C++ 并没有太大不同，但它确实更为强大。 在初始化过程中，不仅可以构建复杂的结构，还能正确处理不同包对象间的初始化顺序。</p>
<h2 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h2><p>Go 中的常量就是不变量。它们在编译时创建，即便它们可能是函数中定义的局部变量。 常量只能是数字、字符（符文）、字符串或布尔值。由于编译时的限制， 定义它们的表达式必须也是可被编译器求值的常量表达式。例如 <code>1&lt;&lt;3</code> 就是一个常量表达式，而 <code>math.Sin(math.Pi/4)</code> 则不是，因为对 <code>math.Sin</code> 的函数调用在运行时才会发生。</p>
<p>在 Go 中，枚举常量使用枚举器 <code>iota</code> 创建。由于 <code>iota</code> 可为表达式的一部分，而表达式可以被隐式地重复，这样也就更容易构建复杂的值的集合了。</p>
<pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> ByteSize <span class="token builtin">float64</span>

<span class="token keyword">const</span> <span class="token punctuation">(</span>
    <span class="token comment">// 通过赋予空白标识符来忽略第一个值</span>
    <span class="token boolean">_</span>           <span class="token operator">=</span> <span class="token boolean">iota</span> <span class="token comment">// ignore first value by assigning to blank identifier</span>
    KB ByteSize <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token number">10</span> <span class="token operator">*</span> <span class="token boolean">iota</span><span class="token punctuation">)</span>
    MB
    GB
    TB
    PB
    EB
    ZB
    YB
<span class="token punctuation">)</span></code></pre>

<p>由于可将 <code>String</code> 之类的方法附加在用户定义的类型上， 因此它就为打印时自动格式化任意值提供了可能性，即便是作为一个通用类型的一部分。 尽管你常常会看到这种技术应用于结构体，但它对于像 <code>ByteSize</code> 之类的浮点数标量等类型也是有用的。</p>
<pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>b ByteSize<span class="token punctuation">)</span> <span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">switch</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">case</span> b <span class="token operator">>=</span> YB<span class="token punctuation">:</span>
        <span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"%.2fYB"</span><span class="token punctuation">,</span> b<span class="token operator">/</span>YB<span class="token punctuation">)</span>
    <span class="token keyword">case</span> b <span class="token operator">>=</span> ZB<span class="token punctuation">:</span>
        <span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"%.2fZB"</span><span class="token punctuation">,</span> b<span class="token operator">/</span>ZB<span class="token punctuation">)</span>
    <span class="token keyword">case</span> b <span class="token operator">>=</span> EB<span class="token punctuation">:</span>
        <span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"%.2fEB"</span><span class="token punctuation">,</span> b<span class="token operator">/</span>EB<span class="token punctuation">)</span>
    <span class="token keyword">case</span> b <span class="token operator">>=</span> PB<span class="token punctuation">:</span>
        <span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"%.2fPB"</span><span class="token punctuation">,</span> b<span class="token operator">/</span>PB<span class="token punctuation">)</span>
    <span class="token keyword">case</span> b <span class="token operator">>=</span> TB<span class="token punctuation">:</span>
        <span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"%.2fTB"</span><span class="token punctuation">,</span> b<span class="token operator">/</span>TB<span class="token punctuation">)</span>
    <span class="token keyword">case</span> b <span class="token operator">>=</span> GB<span class="token punctuation">:</span>
        <span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"%.2fGB"</span><span class="token punctuation">,</span> b<span class="token operator">/</span>GB<span class="token punctuation">)</span>
    <span class="token keyword">case</span> b <span class="token operator">>=</span> MB<span class="token punctuation">:</span>
        <span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"%.2fMB"</span><span class="token punctuation">,</span> b<span class="token operator">/</span>MB<span class="token punctuation">)</span>
    <span class="token keyword">case</span> b <span class="token operator">>=</span> KB<span class="token punctuation">:</span>
        <span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"%.2fKB"</span><span class="token punctuation">,</span> b<span class="token operator">/</span>KB<span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"%.2fB"</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>表达式 <code>YB</code> 会打印出 <code>1.00YB</code>，而 <code>ByteSize(1e13)</code> 则会打印出 <code>9.09</code>。</p>
<p>在这里用 <code>Sprintf</code> 实现 <code>ByteSize</code> 的 <code>String</code> 方法很安全（不会无限递归），这倒不是因为类型转换，而是它以 <code>%f</code> 调用了 <code>Sprintf</code>，它并不是一种字符串格式：<code>Sprintf</code> 只会在它需要字符串时才调用 <code>String</code> 方法，而 <code>%f</code> 需要一个浮点数值。</p>
<h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>变量的初始化与常量类似，但其初始值也可以是在运行时才被计算的一般表达式。</p>
<pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> <span class="token punctuation">(</span>
	home   <span class="token operator">=</span> os<span class="token punctuation">.</span><span class="token function">Getenv</span><span class="token punctuation">(</span><span class="token string">"HOME"</span><span class="token punctuation">)</span>
	user   <span class="token operator">=</span> os<span class="token punctuation">.</span><span class="token function">Getenv</span><span class="token punctuation">(</span><span class="token string">"USER"</span><span class="token punctuation">)</span>
	gopath <span class="token operator">=</span> os<span class="token punctuation">.</span><span class="token function">Getenv</span><span class="token punctuation">(</span><span class="token string">"GOPATH"</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span></code></pre>

<h2 id="init-函数"><a href="#init-函数" class="headerlink" title="init 函数"></a><code>init</code> 函数</h2><p>最后，每个源文件都可以通过定义自己的无参数 <code>init</code> 函数来设置一些必要的状态。 （其实每个文件都可以拥有多个 <code>init</code> 函数。）而它的结束就意味着初始化结束： 只有该包中的所有变量声明都通过它们的初始化器求值后 <code>init</code> 才会被调用， 而那些 <code>init</code> 只有在所有已导入的包都被初始化后才会被求值。</p>
<p>除了那些不能被表示成声明的初始化外，<code>init</code> 函数还常被用在程序真正开始执行前，检验或校正程序的状态。</p>
<pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> user <span class="token operator">==</span> <span class="token string">""</span> <span class="token punctuation">&#123;</span>
		log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span><span class="token string">"$USER not set"</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">if</span> home <span class="token operator">==</span> <span class="token string">""</span> <span class="token punctuation">&#123;</span>
		home <span class="token operator">=</span> <span class="token string">"/home/"</span> <span class="token operator">+</span> user
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">if</span> gopath <span class="token operator">==</span> <span class="token string">""</span> <span class="token punctuation">&#123;</span>
		gopath <span class="token operator">=</span> home <span class="token operator">+</span> <span class="token string">"/go"</span>
	<span class="token punctuation">&#125;</span>
	<span class="token comment">// gopath 可通过命令行中的 --gopath 标记覆盖掉。</span>
	flag<span class="token punctuation">.</span><span class="token function">StringVar</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>gopath<span class="token punctuation">,</span> <span class="token string">"gopath"</span><span class="token punctuation">,</span> gopath<span class="token punctuation">,</span> <span class="token string">"override default GOPATH"</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span></code></pre>

<h3 id="详解-Go-语言中的-init-函数"><a href="#详解-Go-语言中的-init-函数" class="headerlink" title="详解 Go 语言中的 init () 函数"></a><a href="https://learnku.com/go/t/47178">详解 Go 语言中的 init () 函数</a></h3><blockquote>
<p>原文作者：Summer<br>转自链接：<a href="https://learnku.com/go/t/47178">https://learnku.com/go/t/47178</a><br>原文地址：<a href="https://developpaper.com/detailed-explanation-of-init-function-in-go-language/">https://developpaper.com/detailed-explan...</a><br>译文地址：<a href="https://learnku.com/go/t/47178">https://learnku.com/go/t/47178</a><br>版权声明：著作权归作者所有。商业转载请联系作者获得授权，非商业转载请保留以上作者信息和原文链接。</p>
</blockquote>
<p>初始化每个包后，会自动执行 init（）函数，并且执行优先级高于主函数的执行优先级。init 函数通常用于：</p>
<ul>
<li>变量初始化</li>
<li>检查 &#x2F; 修复状态</li>
<li>注册器</li>
<li>运行计算</li>
</ul>
<p><strong>包初始化</strong></p>
<p>为了使用导入的程序包，必须首先对其进行初始化。初始化始终在单个线程中执行，并且以程序包依赖关系的顺序执行。这由 Golang 的运行时系统控制，如下图所示：</p>
<ul>
<li>初始化导入的包（递归导入）</li>
<li>计算并为块中声明的变量分配初始值</li>
<li>在包中执行初始化函数</li>
</ul>
<p><img src="/2022/from_A-Tour-of-Go_to_Effective-Go/ejLR69f443.png"></p>
<pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main
<span class="token keyword">import</span> <span class="token string">"fmt"</span>
<span class="token keyword">var</span> <span class="token boolean">_</span> <span class="token builtin">int64</span><span class="token operator">=</span><span class="token function">s</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">func</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"init function --->"</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">func</span> <span class="token function">s</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">int64</span><span class="token punctuation">&#123;</span>
  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"function s() --->"</span><span class="token punctuation">)</span>
  <span class="token keyword">return</span> <span class="token number">1</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"main --->"</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>执行结果为：</p>
<pre class="language-go" data-language="go"><code class="language-go">function <span class="token function">s</span><span class="token punctuation">(</span><span class="token punctuation">)</span> —<span class="token operator">></span>
init function —<span class="token operator">></span>
main —<span class="token operator">></span></code></pre>

<p>即使程序包被多次导入，初始化也只需要一次。</p>
<p><strong>特性</strong></p>
<p><code>init</code> 函数不需要传入参数，也不需要返回任何值。与 <code>main</code> 相比，<code>init</code> 没有声明，因此无法引用。</p>
<pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main
<span class="token keyword">import</span> <span class="token string">"fmt"</span>
<span class="token keyword">func</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"init"</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span></code></pre>
<p>编译上述函数 <code>undefined：init</code> 时发生错误。</p>
<p>每个源文件可以包含一个以上的 <code>init</code> 函数，请记住，写在每个源文件中的 “行进方式” 只能包含一个 <code>init</code> 函数，这有点不同，因此进行下一个验证。</p>
<pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main
<span class="token keyword">import</span> <span class="token string">"fmt"</span>
<span class="token keyword">func</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"init 1"</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">func</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"init2"</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"main"</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">/* 执行结果:
init1
init2
main 
*/</span></code></pre>
<p>从上面的示例中，您可以看到每个源文件可以包含多个 <code>init</code> 函数。</p>
<p>初始化函数的一个常见示例是设置初始表达式的值。</p>
<pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> precomputed<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token builtin">float64</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
<span class="token keyword">func</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  <span class="token keyword">var</span> current <span class="token builtin">float64</span><span class="token operator">=</span><span class="token number">1</span>
  precomputed<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>current
  <span class="token keyword">for</span> i<span class="token operator">:=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token function">len</span><span class="token punctuation">(</span>precomputed<span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">&#123;</span>
    precomputed<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>precomputed<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token number">1.2</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>因为不可能在上面的代码 (这是一条语句) 中将 for 循环用作预先计算的值，所以可以使用 <code>init</code> 函数来解决此问题。</p>
<p><strong>Go 套件汇入规则的副作用</strong></p>
<p>Go 非常严格，不允许引用未使用的软件包。但是有时您引用包只是为了调用 <code>init</code> 函数进行一些初始化。空标识符 (即下划线) 的目的是解决此问题。</p>
<pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">import</span> <span class="token boolean">_</span> <span class="token string">"image/png"</span></code></pre>



<h1 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h1><p>Go 没有类。不过你可以为结构体类型定义方法。</p>
<p>方法就是一类带特殊的 <strong>接收者</strong> 参数的函数。</p>
<p>方法接收者在它自己的参数列表内，位于 <code>func</code> 关键字和方法名之间。</p>
<p>在此例中，<code>Abs</code> 方法拥有一个名为 <code>v</code>，类型为 <code>Vertex</code> 的接收者。</p>
<pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">"fmt"</span>
	<span class="token string">"math"</span>
<span class="token punctuation">)</span>

<span class="token keyword">type</span> Vertex <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
	X<span class="token punctuation">,</span> Y <span class="token builtin">float64</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>v Vertex<span class="token punctuation">)</span> <span class="token function">Abs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">float64</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">return</span> math<span class="token punctuation">.</span><span class="token function">Sqrt</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span>X<span class="token operator">*</span>v<span class="token punctuation">.</span>X <span class="token operator">+</span> v<span class="token punctuation">.</span>Y<span class="token operator">*</span>v<span class="token punctuation">.</span>Y<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	v <span class="token operator">:=</span> Vertex<span class="token punctuation">&#123;</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">&#125;</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">Abs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span></code></pre>

<p> <strong>方法即函数</strong></p>
<p>记住：方法只是个带接收者参数的函数。</p>
<p>现在这个 <code>Abs</code> 的写法就是个正常的函数，功能并没有什么变化。</p>
<pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">"fmt"</span>
	<span class="token string">"math"</span>
<span class="token punctuation">)</span>

<span class="token keyword">type</span> Vertex <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
	X<span class="token punctuation">,</span> Y <span class="token builtin">float64</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">Abs</span><span class="token punctuation">(</span>v Vertex<span class="token punctuation">)</span> <span class="token builtin">float64</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">return</span> math<span class="token punctuation">.</span><span class="token function">Sqrt</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span>X<span class="token operator">*</span>v<span class="token punctuation">.</span>X <span class="token operator">+</span> v<span class="token punctuation">.</span>Y<span class="token operator">*</span>v<span class="token punctuation">.</span>Y<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	v <span class="token operator">:=</span> Vertex<span class="token punctuation">&#123;</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">&#125;</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">Abs</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>你也可以为非结构体类型声明方法。</p>
<p>在此例中，我们看到了一个带 <code>Abs</code> 方法的数值类型 <code>MyFloat</code>。</p>
<p>你只能为在同一包内定义的类型的接收者声明方法，而不能为其它包内定义的类型（包括 <code>int</code> 之类的内建类型）的接收者声明方法。</p>
<p>（译注：就是接收者的类型定义和方法声明必须在同一包内；不能为内建类型声明方法。）</p>
<pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">"fmt"</span>
	<span class="token string">"math"</span>
<span class="token punctuation">)</span>

<span class="token keyword">type</span> MyFloat <span class="token builtin">float64</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>f MyFloat<span class="token punctuation">)</span> <span class="token function">Abs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">float64</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> f <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> <span class="token function">float64</span><span class="token punctuation">(</span><span class="token operator">-</span>f<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">return</span> <span class="token function">float64</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	f <span class="token operator">:=</span> <span class="token function">MyFloat</span><span class="token punctuation">(</span><span class="token operator">-</span>math<span class="token punctuation">.</span>Sqrt2<span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">Abs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span></code></pre>

<h2 id="指针接收者"><a href="#指针接收者" class="headerlink" title="指针接收者"></a>指针接收者</h2><p>你可以为指针接收者声明 <strong>方法</strong> 。</p>
<p>这意味着对于某类型 <code>T</code>，接收者的类型可以用 <code>*T</code> 的文法。（此外，<code>T</code> 不能是像 <code>*int</code> 这样的指针。）</p>
<p>例如，这里为 <code>*Vertex</code> 定义了 <code>Scale</code> 方法。</p>
<p><strong>指针接收者的方法可以修改接收者指向的值（就像 <code>Scale</code> 在这做的）。由于方法经常需要修改它的接收者，指针接收者比值接收者更常用。</strong></p>
<p>若使用值接收者，那么 <code>Scale</code> 方法会对原始 <code>Vertex</code> 值的副本进行操作。（对于函数的其它参数也是如此。）<code>Scale</code> 方法必须用指针接受者来更改 <code>main</code> 函数中声明的 <code>Vertex</code> 的值。</p>
<pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">"fmt"</span>
	<span class="token string">"math"</span>
<span class="token punctuation">)</span>

<span class="token keyword">type</span> Vertex <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
	X<span class="token punctuation">,</span> Y <span class="token builtin">float64</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>v Vertex<span class="token punctuation">)</span> <span class="token function">Abs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">float64</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">return</span> math<span class="token punctuation">.</span><span class="token function">Sqrt</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span>X<span class="token operator">*</span>v<span class="token punctuation">.</span>X <span class="token operator">+</span> v<span class="token punctuation">.</span>Y<span class="token operator">*</span>v<span class="token punctuation">.</span>Y<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>v <span class="token operator">*</span>Vertex<span class="token punctuation">)</span> <span class="token function">Scale</span><span class="token punctuation">(</span>f <span class="token builtin">float64</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	v<span class="token punctuation">.</span>X <span class="token operator">=</span> v<span class="token punctuation">.</span>X <span class="token operator">*</span> f
	v<span class="token punctuation">.</span>Y <span class="token operator">=</span> v<span class="token punctuation">.</span>Y <span class="token operator">*</span> f
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	v <span class="token operator">:=</span> Vertex<span class="token punctuation">&#123;</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">&#125;</span>
	v<span class="token punctuation">.</span><span class="token function">Scale</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">Abs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>现在我们要把 <code>Abs</code> 和 <code>Scale</code> 方法重写为函数。</p>
<pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">"fmt"</span>
	<span class="token string">"math"</span>
<span class="token punctuation">)</span>

<span class="token keyword">type</span> Vertex <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
	X<span class="token punctuation">,</span> Y <span class="token builtin">float64</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">Abs</span><span class="token punctuation">(</span>v Vertex<span class="token punctuation">)</span> <span class="token builtin">float64</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">return</span> math<span class="token punctuation">.</span><span class="token function">Sqrt</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span>X<span class="token operator">*</span>v<span class="token punctuation">.</span>X <span class="token operator">+</span> v<span class="token punctuation">.</span>Y<span class="token operator">*</span>v<span class="token punctuation">.</span>Y<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">Scale</span><span class="token punctuation">(</span>v Vertex<span class="token punctuation">,</span> f <span class="token builtin">float64</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	v<span class="token punctuation">.</span>X <span class="token operator">=</span> v<span class="token punctuation">.</span>X <span class="token operator">*</span> f
	v<span class="token punctuation">.</span>Y <span class="token operator">=</span> v<span class="token punctuation">.</span>Y <span class="token operator">*</span> f
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	v <span class="token operator">:=</span> Vertex<span class="token punctuation">&#123;</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">&#125;</span>
	<span class="token function">Scale</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">Abs</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>
</code></pre>

<h2 id="方法与指针重定向"><a href="#方法与指针重定向" class="headerlink" title="方法与指针重定向"></a>方法与指针重定向</h2><p>比较前两个程序，你大概会注意到带指针参数的函数必须接受一个指针：</p>
<pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> v Vertex
<span class="token function">ScaleFunc</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>  <span class="token comment">// 编译错误！</span>
<span class="token function">ScaleFunc</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>v<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token comment">// OK</span></code></pre>

<p>而以指针为接收者的方法被调用时，接收者既能为值又能为指针：</p>
<pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> v Vertex
v<span class="token punctuation">.</span><span class="token function">Scale</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>  <span class="token comment">// OK</span>
p <span class="token operator">:=</span> <span class="token operator">&amp;</span>v
p<span class="token punctuation">.</span><span class="token function">Scale</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token comment">// OK</span></code></pre>

<p>对于语句 <code>v.Scale(5)</code>，即便 <code>v</code> 是个值而非指针，带指针接收者的方法也能被直接调用。 <strong>也就是说，由于 <code>Scale</code> 方法有一个指针接收者，为方便起见，Go 会将语句 <code>v.Scale(5)</code> 解释为 <code>(&amp;v).Scale(5)</code>。</strong></p>
<p>同样的事情也发生在相反的方向。</p>
<p>接受一个值作为参数的函数必须接受一个指定类型的值：</p>
<pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> v Vertex
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">AbsFunc</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// OK</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">AbsFunc</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 编译错误！</span></code></pre>

<p>而以值为接收者的方法被调用时，接收者既能为值又能为指针：</p>
<pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> v Vertex
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">Abs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// OK</span>
p <span class="token operator">:=</span> <span class="token operator">&amp;</span>v
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">Abs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// OK</span></code></pre>

<p><strong>这种情况下，方法调用 <code>p.Abs()</code> 会被解释为 <code>(*p).Abs()</code>。</strong></p>
<h2 id="选择值或指针作为接收者"><a href="#选择值或指针作为接收者" class="headerlink" title="选择值或指针作为接收者"></a>选择值或指针作为接收者</h2><p>使用指针接收者的原因有二：</p>
<ul>
<li>方法能够修改其接收者指向的值。</li>
<li>这样可以避免在每次调用方法时复制该值。若值的类型为大型结构体时，这样做会更加高效。</li>
</ul>
<p>在本例中，<code>Scale</code> 和 <code>Abs</code> 接收者的类型为 <code>*Vertex</code>，即便 <code>Abs</code> 并不需要修改其接收者。</p>
<pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">"fmt"</span>
	<span class="token string">"math"</span>
<span class="token punctuation">)</span>

<span class="token keyword">type</span> Vertex <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
	X<span class="token punctuation">,</span> Y <span class="token builtin">float64</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>v <span class="token operator">*</span>Vertex<span class="token punctuation">)</span> <span class="token function">Scale</span><span class="token punctuation">(</span>f <span class="token builtin">float64</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	v<span class="token punctuation">.</span>X <span class="token operator">=</span> v<span class="token punctuation">.</span>X <span class="token operator">*</span> f
	v<span class="token punctuation">.</span>Y <span class="token operator">=</span> v<span class="token punctuation">.</span>Y <span class="token operator">*</span> f
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>v <span class="token operator">*</span>Vertex<span class="token punctuation">)</span> <span class="token function">Abs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">float64</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">return</span> math<span class="token punctuation">.</span><span class="token function">Sqrt</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span>X<span class="token operator">*</span>v<span class="token punctuation">.</span>X <span class="token operator">+</span> v<span class="token punctuation">.</span>Y<span class="token operator">*</span>v<span class="token punctuation">.</span>Y<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	v <span class="token operator">:=</span> <span class="token operator">&amp;</span>Vertex<span class="token punctuation">&#123;</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">&#125;</span>
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"Before scaling: %+v, Abs: %v\n"</span><span class="token punctuation">,</span> v<span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">Abs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	v<span class="token punctuation">.</span><span class="token function">Scale</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"After scaling: %+v, Abs: %v\n"</span><span class="token punctuation">,</span> v<span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">Abs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>通常来说，所有给定类型的方法都应该有值或指针接收者，但并不应该二者混用。</p>
<h2 id="指针-vs-值"><a href="#指针-vs-值" class="headerlink" title="指针 vs. 值"></a>指针 vs. 值</h2><p>正如 <code>ByteSize</code> 那样，我们可以为任何已命名的类型（除了指针或接口）定义方法； 接收者可不必为结构体。</p>
<p>在之前讨论切片时，我们编写了一个 <code>Append</code> 函数。 我们也可将其定义为切片的方法。为此，我们首先要声明一个已命名的类型来绑定该方法， 然后使该方法的接收者成为该类型的值。</p>
<pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> ByteSlice <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>slice ByteSlice<span class="token punctuation">)</span> <span class="token function">Append</span><span class="token punctuation">(</span>data <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span> <span class="token punctuation">&#123;</span>
	<span class="token comment">// 主体和前面相同。</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>我们仍然需要该方法返回更新后的切片。为了消除这种不便，我们可通过重新定义该方法， 将一个指向 <code>ByteSlice</code> 的<strong>指针</strong>作为该方法的接收者， 这样该方法就能重写调用者提供的切片了。</p>
<pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>p <span class="token operator">*</span>ByteSlice<span class="token punctuation">)</span> <span class="token function">Append</span><span class="token punctuation">(</span>data <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	slice <span class="token operator">:=</span> <span class="token operator">*</span>p
	<span class="token comment">// 主体和前面相同，但没有 return。</span>
	<span class="token operator">*</span>p <span class="token operator">=</span> slice
<span class="token punctuation">&#125;</span></code></pre>

<p>若我们将函数修改为与标准 <code>Write</code> 类似的方法，就像这样，</p>
<pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>p <span class="token operator">*</span>ByteSlice<span class="token punctuation">)</span> <span class="token function">Write</span><span class="token punctuation">(</span>data <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>n <span class="token builtin">int</span><span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	slice <span class="token operator">:=</span> <span class="token operator">*</span>p
	<span class="token comment">// 依旧和前面相同。</span>
	<span class="token operator">*</span>p <span class="token operator">=</span> slice
	<span class="token keyword">return</span> <span class="token function">len</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">nil</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>那么类型 <code>*ByteSlice</code> 就满足了标准的 <code>io.Writer</code> 接口，这将非常实用。 例如，我们可以通过打印将内容写入。</p>
<pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> b ByteSlice
fmt<span class="token punctuation">.</span><span class="token function">Fprintf</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>b<span class="token punctuation">,</span> <span class="token string">"This hour has %d days\n"</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span></code></pre>

<p>我们将 <code>ByteSlice</code> 的地址传入，因为只有 <code>*ByteSlice</code> 才满足 <code>io.Writer</code>。以指针或值为接收者的区别在于：值方法可通过指针和值调用， 而指针方法只能通过指针来调用。</p>
<p>之所以会有这条规则是因为指针方法可以修改接收者；通过值调用它们会导致方法接收到该值的副本， 因此任何修改都将被丢弃，因此该语言不允许这种错误。不过有个方便的例外：<strong>若该值是可寻址的， 那么该语言就会自动插入取址操作符来对付一般的通过值调用的指针方法。在我们的例子中，变量 <code>b</code> 是可寻址的，因此我们只需通过 <code>b.Write</code> 来调用它的 <code>Write</code> 方法，编译器会将它重写为 <code>(&amp;b).Write</code>。</strong></p>
<p>顺便一提，在字节切片上使用 <code>Write</code> 的想法已被 <code>bytes.Buffer</code> 所实现。</p>
<h1 id="接口与其它类型"><a href="#接口与其它类型" class="headerlink" title="接口与其它类型"></a>接口与其它类型</h1><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><p>Go中的接口为指定对象的行为提供了一种方法：如果某样东西可以完成<strong>这个</strong>， 那么它就可以用在<strong>这里</strong>。我们已经见过许多简单的示例了；通过实现 <code>String</code> 方法，我们可以自定义打印函数，而通过 <code>Write</code> 方法，<code>Fprintf</code> 则能对任何对象产生输出。在Go代码中， 仅包含一两种方法的接口很常见，且其名称通常来自于实现它的方法， 如 <code>io.Writer</code> 就是实现了 <code>Write</code> 的一类对象。</p>
<p>每种类型都能实现多个接口。例如一个实现了 <code>sort.Interface</code> 接口的集合就可通过 <code>sort</code> 包中的例程进行排序。该接口包括 <code>Len()</code>、<code>Less(i, j int) bool</code> 以及 <code>Swap(i, j int)</code>，另外，该集合仍然可以有一个自定义的格式化器。 以下特意构建的例子 <code>Sequence</code> 就同时满足这两种情况。</p>
<pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">"fmt"</span>
	<span class="token string">"sort"</span>
<span class="token punctuation">)</span>

<span class="token keyword">type</span> Sequence <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span>

<span class="token comment">// Methods required by sort.Interface.</span>
<span class="token comment">// sort.Interface 所需的方法。</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>s Sequence<span class="token punctuation">)</span> <span class="token function">Len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>s Sequence<span class="token punctuation">)</span> <span class="token function">Less</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> s<span class="token punctuation">[</span>j<span class="token punctuation">]</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>s Sequence<span class="token punctuation">)</span> <span class="token function">Swap</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> s<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// Method for printing - sorts the elements before printing.</span>
<span class="token comment">// 用于打印的方法 - 在打印前对元素进行排序。</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>s Sequence<span class="token punctuation">)</span> <span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">&#123;</span>
    sort<span class="token punctuation">.</span><span class="token function">Sort</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>
    str <span class="token operator">:=</span> <span class="token string">"["</span>
    <span class="token keyword">for</span> i<span class="token punctuation">,</span> elem <span class="token operator">:=</span> <span class="token keyword">range</span> s <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> i <span class="token operator">></span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>
            str <span class="token operator">+=</span> <span class="token string">" "</span>
        <span class="token punctuation">&#125;</span>
        str <span class="token operator">+=</span> fmt<span class="token punctuation">.</span><span class="token function">Sprint</span><span class="token punctuation">(</span>elem<span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> str <span class="token operator">+</span> <span class="token string">"]"</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	seq <span class="token operator">:=</span> Sequence<span class="token punctuation">&#123;</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">&#125;</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>seq<span class="token punctuation">)</span> <span class="token comment">// [1 2 3 4 7 8 9 10]</span>
    
    seq <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">&#125;</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>seq<span class="token punctuation">)</span> <span class="token comment">// [7 8 2 1 3 10 9 4]</span>
<span class="token punctuation">&#125;</span></code></pre>

<h2 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h2><p><code>Sequence</code> 的 <code>String</code> 方法重新实现了 <code>Sprint</code> 为切片实现的功能。若我们在调用 <code>Sprint</code> 之前将 <code>Sequence</code> 转换为纯粹的 <code>[]int</code>，就能共享 <code>[]int</code> 已实现的功能。</p>
<pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>s Sequence<span class="token punctuation">)</span> <span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">&#123;</span>
	sort<span class="token punctuation">.</span><span class="token function">Sort</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>
	<span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Sprint</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">int</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	seq <span class="token operator">:=</span> Sequence<span class="token punctuation">&#123;</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">&#125;</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>seq<span class="token punctuation">)</span> <span class="token comment">// [1 2 3 4 7 8 9 10]</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>该方法是通过类型转换技术，在 <code>String</code> 方法中安全调用 <code>Sprintf</code> 的另个一例子。若我们忽略类型名的话，这两种类型（<code>Sequence</code>和 <code>[]int</code>）其实是相同的，因此在二者之间进行转换是合法的。 转换过程并不会创建新值，它只是值暂让现有的时看起来有个新类型而已。 （还有些合法转换则会创建新值，如从整数转换为浮点数等。）</p>
<p>在Go程序中，为访问不同的方法集而进行类型转换的情况非常常见。 例如，我们可使用现有的 <code>sort.IntSlice</code> 类型来简化整个示例：</p>
<pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> Sequence <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span>

<span class="token comment">// 用于打印的方法 - 在打印前对元素进行排序。</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>s Sequence<span class="token punctuation">)</span> <span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">&#123;</span>
	sort<span class="token punctuation">.</span><span class="token function">IntSlice</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 将 s 的类型转换为 sort.IntSlice 类型，然后调用 sort.IntSlice 的 Sort 方法 </span>
	<span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Sprint</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">int</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>现在，不必让 <code>Sequence</code> 实现多个接口（排序和打印）， 我们可通过将数据条目转换为多种类型（<code>Sequence</code>、<code>sort.IntSlice</code> 和 <code>[]int</code>）来使用相应的功能，每次转换都完成一部分工作。 这在实践中虽然有些不同寻常，但往往却很有效。</p>
<h2 id="接口转换与类型断言"><a href="#接口转换与类型断言" class="headerlink" title="接口转换与类型断言"></a>接口转换与类型断言</h2><p><a href="https://go-zh.org/doc/effective_go.html#%E7%B1%BB%E5%9E%8B%E9%80%89%E6%8B%A9">类型选择</a> 是类型转换的一种形式：它接受一个接口，在 switch 语句中根据其判断选择对应的 case 语句， 并在某种意义上将其转换为该种类型。以下代码为 <code>fmt.Printf</code> 通过类型选择将值转换为字符串的简化版。若它已经为字符串，我们需要该接口中实际的字符串值； 若它有 <code>String</code> 方法，我们则需要调用该方法所得的结果。</p>
<pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> Stringer <span class="token keyword">interface</span> <span class="token punctuation">&#123;</span>
	<span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">var</span> value <span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token comment">// 调用者提供的值。</span>
<span class="token keyword">switch</span> str <span class="token operator">:=</span> value<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token keyword">type</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">case</span> <span class="token builtin">string</span><span class="token punctuation">:</span>
	<span class="token keyword">return</span> str
<span class="token keyword">case</span> Stringer<span class="token punctuation">:</span>
	<span class="token keyword">return</span> str<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>第一种情况获取具体的值，第二种将该接口转换为另一个接口。这种方式对于混合类型来说非常完美。</p>
<p>若我们只关心一种类型呢？若我们知道该值拥有一个 <code>string</code> 而想要提取它呢？ 只需一种情况的类型选择就行，但它需要<strong>类型断言</strong>。类型断言接受一个接口值， 并从中提取指定的明确类型的值。其语法借鉴自类型选择开头的子句，但它需要一个明确的类型， 而非 <code>type</code> 关键字：</p>
<pre class="language-go" data-language="go"><code class="language-go">value<span class="token punctuation">.</span><span class="token punctuation">(</span>typeName<span class="token punctuation">)</span></code></pre>

<p>而其结果则是拥有静态类型 <code>typeName</code> 的新值。该类型必须为该接口所拥有的具体类型， 或者该值可转换成的第二种接口类型。要提取我们知道在该值中的字符串，可以这样：</p>
<pre class="language-go" data-language="go"><code class="language-go">str <span class="token operator">:=</span> value<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">)</span></code></pre>

<p>但若它所转换的值中不包含字符串，该程序就会以运行时错误崩溃。为避免这种情况， 需使用<code>逗号, ok</code>惯用测试它能安全地判断该值是否为字符串：</p>
<pre class="language-go" data-language="go"><code class="language-go">str<span class="token punctuation">,</span> ok <span class="token operator">:=</span> value<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">)</span>
<span class="token keyword">if</span> ok <span class="token punctuation">&#123;</span>
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"字符串值为 %q\n"</span><span class="token punctuation">,</span> str<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"该值非字符串\n"</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>若类型断言失败，<code>str</code> 将继续存在且为字符串类型，但它将拥有零值，即空字符串。</p>
<p>作为对能力 (capability) 的说明，这里有个 <code>if-else</code> 语句，它等价于本节开头的类型选择 switch 。</p>
<pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">if</span> str<span class="token punctuation">,</span> ok <span class="token operator">:=</span> value<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">;</span> ok <span class="token punctuation">&#123;</span>
	<span class="token keyword">return</span> str
<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> str<span class="token punctuation">,</span> ok <span class="token operator">:=</span> value<span class="token punctuation">.</span><span class="token punctuation">(</span>Stringer<span class="token punctuation">)</span><span class="token punctuation">;</span> ok <span class="token punctuation">&#123;</span>
	<span class="token keyword">return</span> str<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span></code></pre>

<h2 id="通用性"><a href="#通用性" class="headerlink" title="通用性"></a>通用性</h2><p>若某种现有的类型仅实现了一个接口，且除此之外并无可导出的方法，则该类型本身就无需导出。 仅导出该接口能让我们更专注于其行为而非实现，其它属性不同的实现则能镜像该原始类型的行为。 这也能够避免为每个通用接口的实例重复编写文档。</p>
<p>在这种情况下，构造函数应当返回一个接口值而非实现的类型。例如在 <code>hash</code> 库中，<code>crc32.NewIEEE</code> 和 <code>adler32.New</code> 都返回接口类型 <code>hash.Hash32</code>。要在Go程序中用 Adler-32 算法替代 CRC-32， 只需修改构造函数调用即可，其余代码则不受算法改变的影响。</p>
<p>同样的方式能将 <code>crypto</code> 包中多种联系在一起的流密码算法与块密码算法分开。 <code>crypto/cipher</code> 包中的 <code>Block</code> 接口指定了块密码算法的行为， 它为单独的数据块提供加密。接着，和 <code>bufio</code> 包类似，任何实现了该接口的密码包都能被用于构造以 <code>Stream</code> 为接口表示的流密码，而无需知道块加密的细节。</p>
<p><code>crypto/cipher</code> 接口看其来就像这样：</p>
<pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> Block <span class="token keyword">interface</span> <span class="token punctuation">&#123;</span>
	<span class="token function">BlockSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">int</span>
	<span class="token function">Encrypt</span><span class="token punctuation">(</span>src<span class="token punctuation">,</span> dst <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span>
	<span class="token function">Decrypt</span><span class="token punctuation">(</span>src<span class="token punctuation">,</span> dst <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">type</span> Stream <span class="token keyword">interface</span> <span class="token punctuation">&#123;</span>
	<span class="token function">XORKeyStream</span><span class="token punctuation">(</span>dst<span class="token punctuation">,</span> src <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>这是计数器模式 CTR 流的定义，它将块加密改为流加密，注意块加密的细节已被抽象化了。</p>
<pre class="language-go" data-language="go"><code class="language-go"><span class="token comment">// NewCTR 返回一个 Stream，其加密/解密使用计数器模式中给定的 Block 进行。</span>
<span class="token comment">// iv 的长度必须与 Block 的块大小相同。</span>
<span class="token keyword">func</span> <span class="token function">NewCTR</span><span class="token punctuation">(</span>block Block<span class="token punctuation">,</span> iv <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span> Stream</code></pre>

<p><code>NewCTR</code> 的应用并不仅限于特定的加密算法和数据源，它适用于任何对 <code>Block</code> 接口和 <code>Stream</code> 的实现。因为它们返回接口值， 所以用其它加密模式来代替CTR只需做局部的更改。构造函数的调用过程必须被修改， 但由于其周围的代码只能将它看做 <code>Stream</code>，因此它们不会注意到其中的区别。</p>
<h2 id="接口和方法"><a href="#接口和方法" class="headerlink" title="接口和方法"></a>接口和方法</h2><p>由于几乎任何类型都能添加方法，因此几乎任何类型都能满足一个接口。一个很直观的例子就是 <code>http</code> 包中定义的 <code>Handler</code> 接口。任何实现了 <code>Handler</code> 的对象都能够处理HTTP请求。</p>
<pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> Handler <span class="token keyword">interface</span> <span class="token punctuation">&#123;</span>
	<span class="token function">ServeHTTP</span><span class="token punctuation">(</span>ResponseWriter<span class="token punctuation">,</span> <span class="token operator">*</span>Request<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span></code></pre>

<p><code>ResponseWriter</code> 接口提供了对方法的访问，这些方法需要响应客户端的请求。 由于这些方法包含了标准的 <code>Write</code> 方法，因此 <code>http.ResponseWriter</code> 可用于任何 <code>io.Writer</code> 适用的场景。<code>Request</code> 结构体包含已解析的客户端请求。</p>
<p>为简单起见，我们假设所有的HTTP请求都是GET方法，而忽略POST方法， 这种简化不会影响处理程序的建立方式。这里有个短小却完整的处理程序实现， 它用于记录某个页面被访问的次数。</p>
<pre class="language-go" data-language="go"><code class="language-go"><span class="token comment">// 简单的计数器服务。</span>
<span class="token keyword">type</span> Counter <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
	n <span class="token builtin">int</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>ctr <span class="token operator">*</span>Counter<span class="token punctuation">)</span> <span class="token function">ServeHTTP</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> req <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	ctr<span class="token punctuation">.</span>n<span class="token operator">++</span>
	fmt<span class="token punctuation">.</span><span class="token function">Fprintf</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> <span class="token string">"counter = %d\n"</span><span class="token punctuation">,</span> ctr<span class="token punctuation">.</span>n<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>（紧跟我们的主题，注意 <code>Fprintf</code> 如何能输出到 <code>http.ResponseWriter</code>。） 作为参考，这里演示了如何将这样一个服务器添加到URL树的一个节点上。</p>
<pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">import</span> <span class="token string">"net/http"</span>
<span class="token operator">...</span>
ctr <span class="token operator">:=</span> <span class="token function">new</span><span class="token punctuation">(</span>Counter<span class="token punctuation">)</span>
http<span class="token punctuation">.</span><span class="token function">Handle</span><span class="token punctuation">(</span><span class="token string">"/counter"</span><span class="token punctuation">,</span> ctr<span class="token punctuation">)</span></code></pre>

<p>但 <code>Counter</code> 不必是结构体，一个整数就够了。 An integer is all that’s needed. （接收者必须为指针，增量操作对于调用者才可见。）</p>
<pre class="language-go" data-language="go"><code class="language-go"><span class="token comment">// 简单的计数器服务。</span>
<span class="token keyword">type</span> Counter <span class="token builtin">int</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>ctr <span class="token operator">*</span>Counter<span class="token punctuation">)</span> <span class="token function">ServeHTTP</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> req <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token operator">*</span>ctr<span class="token operator">++</span>
	fmt<span class="token punctuation">.</span><span class="token function">Fprintf</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> <span class="token string">"counter = %d\n"</span><span class="token punctuation">,</span> <span class="token operator">*</span>ctr<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>当页面被访问时，怎样通知你的程序去更新一些内部状态呢？为Web页面绑定个信道吧。</p>
<pre class="language-go" data-language="go"><code class="language-go"><span class="token comment">// 每次浏览该信道都会发送一个提醒。</span>
<span class="token comment">// （可能需要带缓冲的信道。）</span>
<span class="token keyword">type</span> Chan <span class="token keyword">chan</span> <span class="token operator">*</span>http<span class="token punctuation">.</span>Request

<span class="token keyword">func</span> <span class="token punctuation">(</span>ch Chan<span class="token punctuation">)</span> <span class="token function">ServeHTTP</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> req <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	ch <span class="token operator">&lt;-</span> req
	fmt<span class="token punctuation">.</span><span class="token function">Fprint</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> <span class="token string">"notification sent"</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>最后，假设我们需要输出调用服务器二进制程序时使用的实参 <code>/args</code>。 很简单，写个打印实参的函数就行了。</p>
<pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">ArgServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>Args<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>我们如何将它转换为HTTP服务器呢？我们可以将 <code>ArgServer</code> 实现为某种可忽略值的方法，不过还有种更简单的方法。 既然我们可以为除指针和接口以外的任何类型定义方法，同样也能为一个函数写一个方法。 <code>http</code> 包包含以下代码：</p>
<pre class="language-go" data-language="go"><code class="language-go"><span class="token comment">// HandlerFunc 类型是一个适配器，它允许将普通函数用做HTTP处理程序。</span>
<span class="token comment">// 若 f 是个具有适当签名的函数，HandlerFunc(f) 就是个调用 f 的处理程序对象。</span>
<span class="token keyword">type</span> HandlerFunc <span class="token keyword">func</span><span class="token punctuation">(</span>ResponseWriter<span class="token punctuation">,</span> <span class="token operator">*</span>Request<span class="token punctuation">)</span>

<span class="token comment">// ServeHTTP calls f(c, req).</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>f HandlerFunc<span class="token punctuation">)</span> <span class="token function">ServeHTTP</span><span class="token punctuation">(</span>w ResponseWriter<span class="token punctuation">,</span> req <span class="token operator">*</span>Request<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token function">f</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> req<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span></code></pre>

<p><code>HandlerFunc</code> 是个具有 <code>ServeHTTP</code> 方法的类型， 因此该类型的值就能处理HTTP请求。我们来看看该方法的实现：接收者是一个函数 <code>f</code>，而该方法调用 <code>f</code>。这看起来很奇怪，但不必大惊小怪， 区别在于接收者变成了一个信道，而方法通过该信道发送消息。</p>
<p>为了将 <code>ArgServer</code> 实现成HTTP服务器，首先我们得让它拥有合适的签名。</p>
<pre class="language-go" data-language="go"><code class="language-go"><span class="token comment">// 实参服务器。</span>
<span class="token keyword">func</span> <span class="token function">ArgServer</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> req <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	fmt<span class="token punctuation">.</span><span class="token function">Fprintln</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> os<span class="token punctuation">.</span>Args<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span></code></pre>

<p><code>ArgServer</code> 和 <code>HandlerFunc</code> 现在拥有了相同的签名， 因此我们可将其转换为这种类型以访问它的方法，就像我们将 <code>Sequence</code> 转换为 <code>IntSlice</code> 以访问 <code>IntSlice.Sort</code> 那样。 建立代码非常简单：</p>
<pre class="language-go" data-language="go"><code class="language-go">http<span class="token punctuation">.</span><span class="token function">Handle</span><span class="token punctuation">(</span><span class="token string">"/args"</span><span class="token punctuation">,</span> http<span class="token punctuation">.</span><span class="token function">HandlerFunc</span><span class="token punctuation">(</span>ArgServer<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre>

<p>当有人访问 <code>/args</code> 页面时，安装到该页面的处理程序就有了值 <code>ArgServer</code> 和类型 <code>HandlerFunc</code>。 HTTP服务器会以 <code>ArgServer</code> 为接收者，调用该类型的 <code>ServeHTTP</code> 方法，它会反过来调用 <code>ArgServer</code>（通过 <code>f(c, req)</code>），接着实参就会被显示出来。</p>
<p>在本节中，我们通过一个结构体，一个整数，一个信道和一个函数，建立了一个HTTP服务器， 这一切都是因为接口只是方法的集和，而几乎任何类型都能定义方法。</p>
<h1 id="空白标识符"><a href="#空白标识符" class="headerlink" title="空白标识符"></a>空白标识符</h1><p>我们在 <a href="https://go-zh.org/doc/effective_go.html#for"><code>for-range</code> 循环</a>和<a href="https://go-zh.org/doc/effective_go.html#%E6%98%A0%E5%B0%84">映射</a>中提过几次空白标识符。 空白标识符可被赋予或声明为任何类型的任何值，而其值会被无害地丢弃。它有点像Unix中的 <code>/dev/null</code> 文件：它表示只写的值，在需要变量但不需要实际值的地方用作占位符。 我们在前面已经见过它的用法了。</p>
<h2 id="多重赋值中的空白标识符"><a href="#多重赋值中的空白标识符" class="headerlink" title="多重赋值中的空白标识符"></a>多重赋值中的空白标识符</h2><p><code>for range</code> 循环中对空表标识符的用法是一种具体情况，更一般的情况即为多重赋值。</p>
<p>若某次赋值需要匹配多个左值，但其中某个变量不会被程序使用， 那么用空白标识符来代替该变量可避免创建无用的变量，并能清楚地表明该值将被丢弃。 例如，当调用某个函数时，它会返回一个值和一个错误，但只有错误很重要， 那么可使用空白标识符来丢弃无关的值。</p>
<pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">if</span> <span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">Stat</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span> os<span class="token punctuation">.</span><span class="token function">IsNotExist</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%s does not exist\n"</span><span class="token punctuation">,</span> path<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>你偶尔会看见为忽略错误而丢弃错误值的代码，这是种糟糕的实践。请务必检查错误返回， 它们会提供错误的理由。</p>
<pre class="language-go" data-language="go"><code class="language-go"><span class="token comment">// 烂代码！若路径不存在，它就会崩溃。</span>
fi<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">Stat</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span>
<span class="token keyword">if</span> fi<span class="token punctuation">.</span><span class="token function">IsDir</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%s is a directory\n"</span><span class="token punctuation">,</span> path<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span></code></pre>

<h2 id="未使用的导入和变量"><a href="#未使用的导入和变量" class="headerlink" title="未使用的导入和变量"></a>未使用的导入和变量</h2><p>若导入某个包或声明某个变量而不使用它就会产生错误。未使用的包会让程序膨胀并拖慢编译速度， 而已初始化但未使用的变量不仅会浪费计算能力，还有可能暗藏着更大的Bug。 然而在程序开发过程中，经常会产生未使用的导入和变量。虽然以后会用到它们， 但为了完成编译又不得不删除它们才行，这很让人烦恼。空白标识符就能提供一个工作空间。</p>
<p>这个写了一半的程序有两个未使用的导入（<code>fmt</code> 和 <code>io</code>）以及一个未使用的变量（<code>fd</code>），因此它不能编译， 但若到目前为止代码还是正确的，我们还是很乐意看到它们的。</p>
<pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
    <span class="token string">"fmt"</span>
    <span class="token string">"io"</span>
    <span class="token string">"log"</span>
    <span class="token string">"os"</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    fd<span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span><span class="token string">"test.go"</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
        log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">// TODO: use fd.</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>要让编译器停止关于未使用导入的抱怨，需要空白标识符来引用已导入包中的符号。 同样，将未使用的变量 <code>fd</code> 赋予空白标识符也能关闭未使用变量错误。 该程序的以下版本可以编译。</p>
<pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
    <span class="token string">"fmt"</span>
    <span class="token string">"io"</span>
    <span class="token string">"log"</span>
    <span class="token string">"os"</span>
<span class="token punctuation">)</span>

<span class="token keyword">var</span> <span class="token boolean">_</span> <span class="token operator">=</span> fmt<span class="token punctuation">.</span>Printf <span class="token comment">// For debugging; delete when done. // 用于调试，结束时删除。</span>
<span class="token keyword">var</span> <span class="token boolean">_</span> io<span class="token punctuation">.</span>Reader    <span class="token comment">// For debugging; delete when done. // 用于调试，结束时删除。</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    fd<span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span><span class="token string">"test.go"</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
        log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">// TODO: use fd.</span>
    <span class="token boolean">_</span> <span class="token operator">=</span> fd
<span class="token punctuation">&#125;</span></code></pre>

<p>按照惯例，我们应在导入并加以注释后，再使全局声明导入错误静默，这样可以让它们更易找到， 并作为以后清理它的提醒。</p>
<h2 id="为副作用而导入"><a href="#为副作用而导入" class="headerlink" title="为副作用而导入"></a>为副作用而导入</h2><p>像前例中 <code>fmt</code> 或 <code>io</code> 这种未使用的导入总应在最后被使用或移除： 空白赋值会将代码标识为工作正在进行中。但有时导入某个包只是为了其副作用， 而没有任何明确的使用。例如，在 <code>net/http/pprof</code> 包的 <code>init</code> 函数中记录了HTTP处理程序的调试信息。它有个可导出的API， 但大部分客户端只需要该处理程序的记录和通过网页访问数据。只为了其副作用来导入该包， 只需将包重命名为空白标识符：</p>
<pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">import</span> <span class="token boolean">_</span> <span class="token string">"net/http/pprof"</span></code></pre>

<p>这种导入格式能明确表示该包是为其副作用而导入的，因为没有其它使用该包的可能： 在此文件中，它没有名字。（若它有名字而我们没有使用，编译器就会拒绝该程序。）</p>
<h2 id="接口检查"><a href="#接口检查" class="headerlink" title="接口检查"></a>接口检查</h2><p>就像我们在前面<a href="https://go-zh.org/doc/effective_go.html#%E6%8E%A5%E5%8F%A3%E4%B8%8E%E7%B1%BB%E5%9E%8B">接口</a>中讨论的那样， 一个类型无需显式地声明它实现了某个接口。取而代之，该类型只要实现了某个接口的方法， 其实就实现了该接口。在实践中，大部分接口转换都是静态的，因此会在编译时检测。 例如，将一个 <code>*os.File</code> 传入一个预期的 <code>io.Reader</code> 函数将不会被编译， 除非 <code>*os.File</code> 实现了 <code>io.Reader</code> 接口。</p>
<p>尽管有些接口检查会在运行时进行。<code>encoding/json</code> 包中就有个实例它定义了一个 <code>Marshaler</code> 接口。当JSON编码器接收到一个实现了该接口的值，那么该编码器就会调用该值的编组方法， 将其转换为JSON，而非进行标准的类型转换。 编码器在运行时通过<a href="https://go-zh.org/doc/effective_go.html#%E6%8E%A5%E5%8F%A3%E8%BD%AC%E6%8D%A2">类型断言</a>检查其属性，就像这样：</p>
<pre class="language-go" data-language="go"><code class="language-go">m<span class="token punctuation">,</span> ok <span class="token operator">:=</span> val<span class="token punctuation">.</span><span class="token punctuation">(</span>json<span class="token punctuation">.</span>Marshaler<span class="token punctuation">)</span></code></pre>

<p>若只需要判断某个类型是否是实现了某个接口，而不需要实际使用接口本身 （可能是错误检查部分），就使用空白标识符来忽略类型断言的值：</p>
<pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">if</span> <span class="token boolean">_</span><span class="token punctuation">,</span> ok <span class="token operator">:=</span> val<span class="token punctuation">.</span><span class="token punctuation">(</span>json<span class="token punctuation">.</span>Marshaler<span class="token punctuation">)</span><span class="token punctuation">;</span> ok <span class="token punctuation">&#123;</span>
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"value %v of type %T implements json.Marshaler\n"</span><span class="token punctuation">,</span> val<span class="token punctuation">,</span> val<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>当需要确保某个包中实现的类型一定满足该接口时，就会遇到这种情况。 若某个类型（例如 <code>json.RawMessage</code>） 需要一种定制的JSON表现时，它应当实现 <code>json.Marshaler</code>， 不过现在没有静态转换可以让编译器去自动验证它。若该类型通过忽略转换失败来满足该接口， 那么JSON编码器仍可工作，但它却不会使用定制的实现。为确保其实现正确， 可在该包中用空白标识符声明一个全局变量：</p>
<pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> <span class="token boolean">_</span> json<span class="token punctuation">.</span>Marshaler <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>RawMessage<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token boolean">nil</span><span class="token punctuation">)</span></code></pre>

<p>在此声明中，我们调用了一个 <code>*RawMessage</code> 转换并将其赋予了 <code>Marshaler</code>，以此来要求 <code>*RawMessage</code> 实现 <code>Marshaler</code>，这时其属性就会在编译时被检测。 若 <code>json.Marshaler</code> 接口被更改，此包将无法通过编译， 而我们则会注意到它需要更新。</p>
<p>在这种结构中出现空白标识符，即表示该声明的存在只是为了类型检查。 不过请不要为满足接口就将它用于任何类型。作为约定， 仅当代码中不存在静态类型转换时才能这种声明，毕竟这是种罕见的情况。</p>
<h1 id="内嵌"><a href="#内嵌" class="headerlink" title="内嵌"></a>内嵌</h1><p>Go并不提供典型的、类型驱动的子类化概念，但通过将类型<strong>内嵌</strong>到结构体或接口中， 它就能“借鉴”部分实现。</p>
<p>接口内嵌非常简单。我们之前提到过 <code>io.Reader</code> 和 <code>io.Writer</code> 接口，这里是它们的定义。</p>
<pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> Reader <span class="token keyword">interface</span> <span class="token punctuation">&#123;</span>
	<span class="token function">Read</span><span class="token punctuation">(</span>p <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>n <span class="token builtin">int</span><span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">type</span> Writer <span class="token keyword">interface</span> <span class="token punctuation">&#123;</span>
	<span class="token function">Write</span><span class="token punctuation">(</span>p <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>n <span class="token builtin">int</span><span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span></code></pre>

<p><code>io</code> 包也导出了一些其它接口，以此来阐明对象所需实现的方法。 例如 <code>io.ReadWriter</code> 就是个包含 <code>Read</code> 和 <code>Write</code> 的接口。我们可以通过显式地列出这两个方法来指明 <code>io.ReadWriter</code>， 但通过将这两个接口内嵌到新的接口中显然更容易且更具启发性，就像这样：</p>
<pre class="language-go" data-language="go"><code class="language-go"><span class="token comment">// ReadWriter 接口结合了 Reader 和 Writer 接口。</span>
<span class="token keyword">type</span> ReadWriter <span class="token keyword">interface</span> <span class="token punctuation">&#123;</span>
	Reader
	Writer
<span class="token punctuation">&#125;</span></code></pre>

<p>正如它看起来那样：<code>ReadWriter</code> 能够做任何 <code>Reader</code> <strong>和</strong> <code>Writer</code> 可以做到的事情，它是内嵌接口的联合体 （它们必须是不相交的方法集）。<strong>只有接口能被嵌入到接口中。</strong></p>
<p>同样的基本想法可以应用在结构体中，但其意义更加深远。<code>bufio</code> 包中有 <code>bufio.Reader</code> 和 <code>bufio.Writer</code> 这两个结构体类型， 它们每一个都实现了与 <code>io</code> 包中相同意义的接口。此外，<code>bufio</code> 还通过结合 <code>reader/writer</code> 并将其内嵌到结构体中，实现了带缓冲的 <code>reader/writer</code>：它列出了结构体中的类型，但并未给予它们字段名。</p>
<pre class="language-go" data-language="go"><code class="language-go"><span class="token comment">// ReadWriter 存储了指向 Reader 和 Writer 的指针。</span>
<span class="token comment">// 它实现了 io.ReadWriter。</span>
<span class="token keyword">type</span> ReadWriter <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
	<span class="token operator">*</span>Reader  <span class="token comment">// *bufio.Reader</span>
	<span class="token operator">*</span>Writer  <span class="token comment">// *bufio.Writer</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>内嵌的元素为指向结构体的指针，当然它们在使用前必须被初始化为指向有效结构体的指针。 <code>ReadWriter</code> 结构体可通过如下方式定义：</p>
<pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> ReadWriter <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
	reader <span class="token operator">*</span>Reader
	writer <span class="token operator">*</span>Writer
<span class="token punctuation">&#125;</span></code></pre>

<p>但为了提升该字段的方法并满足 <code>io</code> 接口，我们同样需要提供转发的方法， 就像这样：</p>
<pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>rw <span class="token operator">*</span>ReadWriter<span class="token punctuation">)</span> <span class="token function">Read</span><span class="token punctuation">(</span>p <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>n <span class="token builtin">int</span><span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">return</span> rw<span class="token punctuation">.</span>reader<span class="token punctuation">.</span><span class="token function">Read</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>而<strong>通过直接内嵌结构体，我们就能避免如此繁琐。 内嵌类型的方法可以直接引用，这意味着 <code>bufio.ReadWriter</code> 不仅包括 <code>bufio.Reader</code> 和 <code>bufio.Writer</code> 的方法，它还同时满足下列三个接口： <code>io.Reader</code>、<code>io.Writer</code> 以及 <code>io.ReadWriter</code>。</strong></p>
<p>还有种区分内嵌与子类的重要手段。<strong>当内嵌一个类型时，该类型的方法会成为外部类型的方法， 但当它们被调用时，该方法的接收者是内部类型，而非外部的。</strong>在我们的例子中，当 <code>bufio.ReadWriter</code> 的 <code>Read</code> 方法被调用时， 它与之前写的转发方法具有同样的效果；接收者是 <code>ReadWriter</code> 的 <code>reader</code> 字段，而非 <code>ReadWriter</code> 本身。</p>
<p><strong>内嵌同样可以提供便利。这个例子展示了一个内嵌字段和一个常规的命名字段。</strong></p>
<pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> Job <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
	Command <span class="token builtin">string</span>
	<span class="token operator">*</span>log<span class="token punctuation">.</span>Logger
<span class="token punctuation">&#125;</span></code></pre>

<p><strong><code>Job</code> 类型现在有了 <code>Log</code>、<code>Logf</code> 和 <code>*log.Logger</code> 的其它方法。我们当然可以为 <code>Logger</code> 提供一个字段名，但完全不必这么做。现在，一旦初始化后，我们就能记录 <code>Job</code> 了：</strong></p>
<pre class="language-go" data-language="go"><code class="language-go">job<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token string">"starting now..."</span><span class="token punctuation">)</span></code></pre>

<blockquote>
<p>go 1.19.1 没有 <code>Log</code>、<code>Logf</code>方法，但 <code>job</code> 依然有了 <code>log.Logger</code>的其他方法，如：<code>Println</code>、<code>Print</code>、<code>Fatal</code>。</p>
<pre class="language-go" data-language="go"><code class="language-go"><span class="token comment">// 以下结果运行于 go 1.19.1</span>

job <span class="token operator">:=</span> <span class="token operator">&amp;</span>Job<span class="token punctuation">&#123;</span><span class="token string">"cmd"</span><span class="token punctuation">,</span> log<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>Stderr<span class="token punctuation">,</span> <span class="token string">"Job: "</span><span class="token punctuation">,</span> log<span class="token punctuation">.</span>Ldate<span class="token punctuation">)</span><span class="token punctuation">&#125;</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>job<span class="token punctuation">.</span>Command<span class="token punctuation">)</span> <span class="token comment">// cmd</span>
job<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"starting now..."</span><span class="token punctuation">)</span> <span class="token comment">// Job: 2022/09/14 starting now...</span></code></pre>
</blockquote>
<p><code>Logger</code> 是 <code>Job</code> 结构体的常规字段， 因此我们可在 <code>Job</code> 的构造函数中，通过一般的方式来初始化它，就像这样：</p>
<pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">NewJob</span><span class="token punctuation">(</span>command <span class="token builtin">string</span><span class="token punctuation">,</span> logger <span class="token operator">*</span>log<span class="token punctuation">.</span>Logger<span class="token punctuation">)</span> <span class="token operator">*</span>Job <span class="token punctuation">&#123;</span>
	<span class="token keyword">return</span> <span class="token operator">&amp;</span>Job<span class="token punctuation">&#123;</span>command<span class="token punctuation">,</span> logger<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>或通过复合字面：</p>
<pre class="language-go" data-language="go"><code class="language-go">job <span class="token operator">:=</span> <span class="token operator">&amp;</span>Job<span class="token punctuation">&#123;</span>command<span class="token punctuation">,</span> log<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>Stderr<span class="token punctuation">,</span> <span class="token string">"Job: "</span><span class="token punctuation">,</span> log<span class="token punctuation">.</span>Ldate<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre>

<p>若我们需要直接引用内嵌字段，可以忽略包限定名，直接将该字段的类型名作为字段名， 就像我们在 <code>ReaderWriter</code> 结构体的 <code>Read</code> 方法中做的那样。 若我们需要访问 <code>Job</code> 类型的变量 <code>job</code> 的 <code>*log.Logger</code>， 可以直接写作 <code>job.Logger</code>。若我们想精炼 <code>Logger</code> 的方法时， 这会非常有用。</p>
<pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>job <span class="token operator">*</span>Job<span class="token punctuation">)</span> <span class="token function">Logf</span><span class="token punctuation">(</span>format <span class="token builtin">string</span><span class="token punctuation">,</span> args <span class="token operator">...</span><span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	job<span class="token punctuation">.</span>Logger<span class="token punctuation">.</span><span class="token function">Logf</span><span class="token punctuation">(</span><span class="token string">"%q: %s"</span><span class="token punctuation">,</span> job<span class="token punctuation">.</span>Command<span class="token punctuation">,</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span>format<span class="token punctuation">,</span> args<span class="token operator">...</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span></code></pre>

<p><strong>内嵌类型会引入命名冲突的问题，但解决规则却很简单。首先，字段或方法 <code>X</code> 会隐藏该类型中更深层嵌套的其它项 <code>X</code>。若 <code>log.Logger</code> 包含一个名为 <code>Command</code> 的字段或方法，<code>Job</code> 的 <code>Command</code> 字段会覆盖它。</strong></p>
<p><strong>其次，若相同的嵌套层级上出现同名冲突，通常会产生一个错误。若 <code>Job</code> 结构体中包含名为 <code>Logger</code> 的字段或方法，再将 <code>log.Logger</code> 内嵌到其中的话就会产生错误。然而，若重名永远不会在该类型定义之外的程序中使用，那就不会出错。 这种限定能够在外部嵌套类型发生修改时提供某种保护。 因此，就算添加的字段与另一个子类型中的字段相冲突，只要这两个相同的字段永远不会被使用就没问题。</strong></p>
<h1 id="并发"><a href="#并发" class="headerlink" title="并发"></a>并发</h1><h2 id="通过通信共享内存"><a href="#通过通信共享内存" class="headerlink" title="通过通信共享内存"></a>通过通信共享内存</h2><p>并发编程是个很大的论题。但限于篇幅，这里仅讨论一些Go特有的东西。</p>
<p>在并发编程中，为实现对共享变量的正确访问需要精确的控制，这在多数环境下都很困难。 Go语言另辟蹊径，它将共享的值通过信道传递，实际上，多个独立执行的线程从不会主动共享。 在任意给定的时间点，只有一个Go程能够访问该值。数据竞争从设计上就被杜绝了。 为了提倡这种思考方式，我们将它简化为一句口号：</p>
<blockquote>
<p>不要通过共享内存来通信，而应通过通信来共享内存。</p>
</blockquote>
<p>这种方法意义深远。例如，引用计数通过为整数变量添加互斥锁来很好地实现。 但作为一种高级方法，通过信道来控制访问能够让你写出更简洁，正确的程序。</p>
<p>我们可以从典型的单线程运行在单CPU之上的情形来审视这种模型。它无需提供同步原语。 现在考虑另一种情况，它也无需同步。现在让它们俩进行通信。若将通信过程看做同步着， 那就完全不需要其它同步了。例如，Unix管道就与这种模型完美契合。 尽管Go的并发处理方式来源于Hoare的通信顺序处理（CSP）， 它依然可以看做是类型安全的Unix管道的实现。</p>
<h2 id="Goroutines"><a href="#Goroutines" class="headerlink" title="Goroutines"></a>Goroutines</h2><p>我们称之为<strong>Go程（Goroutines）</strong>是因为现有的术语—线程、协程、进程等等—无法准确传达它的含义。 <strong>Go程</strong>具有简单的模型：它是与其它Go程并发运行在同一地址空间的函数。它是轻量级的， 所有消耗几乎就只有栈空间的分配。而且栈最开始是非常小的，所以它们很廉价， 仅在需要时才会随着堆空间的分配（和释放）而变化。</p>
<p>Go程在多线程操作系统上可实现多路复用，因此若一个线程阻塞，比如说等待I&#x2F;O， 那么其它的线程就会运行。Go程的设计隐藏了线程创建和管理的诸多复杂性。</p>
<p><strong>在函数或方法前添加 <code>go</code> 关键字能够在新的Go程中调用它。当调用完成后， 该Go程也会安静地退出。（效果有点像Unix Shell中的 <code>&amp;</code> 符号，它能让命令在后台运行。）</strong></p>
<pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">go</span> list<span class="token punctuation">.</span><span class="token function">Sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// 并发运行 list.Sort，无需等它结束。</span></code></pre>

<p>函数字面在Go程调用中非常有用。</p>
<pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">Announce</span><span class="token punctuation">(</span>message <span class="token builtin">string</span><span class="token punctuation">,</span> delay time<span class="token punctuation">.</span>Duration<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>delay<span class="token punctuation">)</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// 注意括号 - 必须调用该函数。</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>在Go中，函数字面都是闭包：其实现在保证了函数内引用变量的生命周期与函数的活动时间相同。</p>
<p>这些函数没什么实用性，因为它们没有实现完成时的信号处理。因此，我们需要信道。</p>
<h2 id="信道"><a href="#信道" class="headerlink" title="信道"></a>信道</h2><p>信道与映射一样，也需要通过 <code>make</code> 来分配内存。其结果值充当了对底层数据结构的引用。 若提供了一个可选的整数形参，它就会为该信道设置缓冲区大小。默认值是零，表示不带缓冲的或同步的信道。</p>
<pre class="language-go" data-language="go"><code class="language-go">ci <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">)</span>            <span class="token comment">// 整数类型的无缓冲信道</span>
cj <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>         <span class="token comment">// 整数类型的无缓冲信道</span>
cs <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token operator">*</span>os<span class="token punctuation">.</span>File<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span>  <span class="token comment">// 指向文件指针的带缓冲信道</span></code></pre>

<p>无缓冲信道在通信时会同步交换数据，它能确保（两个Go程的）计算处于确定状态。</p>
<p>信道有很多惯用法，我们从这里开始了解。在上一节中，我们在后台启动了排序操作。 信道使得启动的Go程等待排序完成。</p>
<pre class="language-go" data-language="go"><code class="language-go">c <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">)</span>  <span class="token comment">// 分配一个信道</span>
<span class="token comment">// 在Go程中启动排序。当它完成后，在信道上发送信号。</span>
<span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	list<span class="token punctuation">.</span><span class="token function">Sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	c <span class="token operator">&lt;-</span> <span class="token number">1</span>  <span class="token comment">// 发送信号，什么值无所谓。</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token function">doSomethingForAWhile</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token operator">&lt;-</span>c   <span class="token comment">// 等待排序结束，丢弃发来的值。</span></code></pre>

<p>接收者在收到数据前会一直阻塞。若信道是不带缓冲的，那么在接收者收到值前， 发送者会一直阻塞；若信道是带缓冲的，则发送者仅在值被复制到缓冲区前阻塞； 若缓冲区已满，发送者会一直等待直到某个接收者取出一个值为止。</p>
<p>A buffered channel can be used like a semaphore, for instance to limit throughput. In this example, incoming requests are passed to <code>handle</code>, which sends a value into the channel, processes the request, and then receives a value from the channel to ready the “semaphore” for the next consumer. The capacity of the channel buffer limits the number of simultaneous calls to <code>process</code>.</p>
<p>带缓冲的信道可被用作信号量，例如限制吞吐量。在此例中，进入的请求会被传递给 <code>handle</code>，它从信道中接收值，处理请求后将值发回该信道中，以便让该 “信号量”准备迎接下一次请求。信道缓冲区的容量决定了同时调用 <code>process</code> 的数量上限，因此我们在初始化时首先要填充至它的容量上限。</p>
<pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> sem <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">,</span> MaxOutstanding<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">handle</span><span class="token punctuation">(</span>r <span class="token operator">*</span>Request<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	sem <span class="token operator">&lt;-</span> <span class="token number">1</span> <span class="token comment">// 等待活动队列清空。</span>
	<span class="token function">process</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span>  <span class="token comment">// 可能需要很长时间。</span>
	<span class="token operator">&lt;-</span>sem    <span class="token comment">// 完成；使下一个请求可以运行。</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">Serve</span><span class="token punctuation">(</span>queue <span class="token keyword">chan</span> <span class="token operator">*</span>Request<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">for</span> <span class="token punctuation">&#123;</span>
		req <span class="token operator">:=</span> <span class="token operator">&lt;-</span>queue
		<span class="token keyword">go</span> <span class="token function">handle</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span>  <span class="token comment">// 无需等待 handle 结束。</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>Once <code>MaxOutstanding</code> handlers are executing <code>process</code>, any more will block trying to send into the filled channel buffer, until one of the existing handlers finishes and receives from the buffer.</p>
<p>一旦有 <code>MaxOutstanding</code> 个处理程序正在执行 <code>process</code>，任何试图向缓冲区已满的信道发送更多消息的操作都将被阻塞，直到有一个处理程序（handler）完成并从缓冲区接收。</p>
<p>由于数据同步发生在信道的接收端（也就是说发送<strong>发生在</strong>&gt;接受<strong>之前</strong>，参见 <a href="https://go-zh.org/ref/mem">Go内存模型</a>），因此信号必须在信道的接收端获取，而非发送端。</p>
<p>然而，它却有个设计问题：尽管只有 <code>MaxOutstanding</code> 个Go程能同时运行，但 <code>Serve</code> 还是为每个进入的请求都创建了新的Go程。其结果就是，若请求来得很快， 该程序就会无限地消耗资源。为了弥补这种不足，我们可以通过修改 <code>Serve</code> 来限制创建Go程，这是个明显的解决方案，但要当心我们修复后出现的Bug。</p>
<pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">Serve</span><span class="token punctuation">(</span>queue <span class="token keyword">chan</span> <span class="token operator">*</span>Request<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">for</span> req <span class="token operator">:=</span> <span class="token keyword">range</span> queue <span class="token punctuation">&#123;</span>
		sem <span class="token operator">&lt;-</span> <span class="token number">1</span>
		<span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			<span class="token function">process</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span> <span class="token comment">// 这儿有Bug，见下方解释。</span>
			<span class="token operator">&lt;-</span>sem
		<span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>Bug出现在Go的 <code>for</code> 循环中，该循环变量在每次迭代时会被重用，因此 <code>req</code> 变量会在所有的Go程间共享，这不是我们想要的。我们需要确保 <code>req</code> 对于每个Go程来说都是唯一的。</p>
<p>有一种方法能够做到，就是将 <code>req</code> 的值作为实参传入到该Go程的闭包中：</p>
<pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">Serve</span><span class="token punctuation">(</span>queue <span class="token keyword">chan</span> <span class="token operator">*</span>Request<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">for</span> req <span class="token operator">:=</span> <span class="token keyword">range</span> queue <span class="token punctuation">&#123;</span>
		sem <span class="token operator">&lt;-</span> <span class="token number">1</span>
		<span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span>req <span class="token operator">*</span>Request<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			<span class="token function">process</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span>
			<span class="token operator">&lt;-</span>sem
		<span class="token punctuation">&#125;</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>比较前后两个版本，观察该闭包声明和运行中的差别。 </p>
<p>另一种解决方案就是以相同的名字创建新的变量，如例中所示：</p>
<pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">Serve</span><span class="token punctuation">(</span>queue <span class="token keyword">chan</span> <span class="token operator">*</span>Request<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">for</span> req <span class="token operator">:=</span> <span class="token keyword">range</span> queue <span class="token punctuation">&#123;</span>
		req <span class="token operator">:=</span> req <span class="token comment">// 为该Go程创建 req 的新实例。</span>
		sem <span class="token operator">&lt;-</span> <span class="token number">1</span>
		<span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			<span class="token function">process</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span>
			<span class="token operator">&lt;-</span>sem
		<span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>它的写法看起来有点奇怪</p>
<pre class="language-go" data-language="go"><code class="language-go">req <span class="token operator">:=</span> req</code></pre>

<p>但在Go中这样做是合法且惯用的。你用相同的名字获得了该变量的一个新的版本， 以此来局部地刻意屏蔽循环变量，使它对每个Go程保持唯一。</p>
<p>回到编写服务器的一般问题上来。另一种管理资源的好方法就是启动固定数量的 <code>handle</code> Go程，一起从请求信道中读取数据。Go程的数量限制了同时调用 <code>process</code> 的数量。<code>Serve</code> 同样会接收一个通知退出的信道， 在启动所有Go程后，它将阻塞并暂停从信道中接收消息。</p>
<pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">handle</span><span class="token punctuation">(</span>queue <span class="token keyword">chan</span> <span class="token operator">*</span>Request<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">for</span> r <span class="token operator">:=</span> <span class="token keyword">range</span> queue <span class="token punctuation">&#123;</span>
		<span class="token function">process</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">Serve</span><span class="token punctuation">(</span>clientRequests <span class="token keyword">chan</span> <span class="token operator">*</span>Request<span class="token punctuation">,</span> quit <span class="token keyword">chan</span> <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token comment">// 启动处理程序</span>
	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> MaxOutstanding<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">go</span> <span class="token function">handle</span><span class="token punctuation">(</span>clientRequests<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
	<span class="token operator">&lt;-</span>quit  <span class="token comment">// 等待通知退出。</span>
<span class="token punctuation">&#125;</span></code></pre>

<h2 id="信道的-range-和-close"><a href="#信道的-range-和-close" class="headerlink" title="信道的 range 和 close"></a>信道的 range 和 close</h2><p>发送者可通过 <code>close</code> 关闭一个信道来表示没有需要发送的值了。接收者可以通过为接收表达式分配第二个参数来测试信道是否被关闭：若没有值可以接收且信道已被关闭，那么在执行完</p>
<pre class="language-none"><code class="language-none">v, ok :&#x3D; &lt;-ch</code></pre>

<p>之后 <code>ok</code> 会被设置为 <code>false</code>。</p>
<p>循环 <code>for i := range c</code> 会不断从信道接收值，直到它被关闭。</p>
<p><em>注意：</em> 只有发送者才能关闭信道，而接收者不能。向一个已经关闭的信道发送数据会引发程序恐慌（panic）。</p>
<p><em>还要注意：</em> 信道与文件不同，通常情况下无需关闭它们。只有在必须告诉接收者不再有需要发送的值时才有必要关闭，例如终止一个 <code>range</code> 循环。</p>
<pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">"fmt"</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">fibonacci</span><span class="token punctuation">(</span>n <span class="token builtin">int</span><span class="token punctuation">,</span> c <span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	x<span class="token punctuation">,</span> y <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span>
	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>
		c <span class="token operator">&lt;-</span> x
		x<span class="token punctuation">,</span> y <span class="token operator">=</span> y<span class="token punctuation">,</span> x<span class="token operator">+</span>y
	<span class="token punctuation">&#125;</span>
	<span class="token function">close</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	c <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>
	<span class="token keyword">go</span> <span class="token function">fibonacci</span><span class="token punctuation">(</span><span class="token function">cap</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span>
	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token keyword">range</span> c <span class="token punctuation">&#123;</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>

<h2 id="select-语句"><a href="#select-语句" class="headerlink" title="select 语句"></a>select 语句</h2><p><code>select</code> 语句使一个 Go 程可以等待多个通信操作。</p>
<p><code>select</code> 会阻塞到某个分支可以继续执行为止，这时就会执行该分支。当多个分支都准备好时会随机选择一个执行。</p>
<pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">"fmt"</span>

<span class="token keyword">func</span> <span class="token function">fibonacci</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> quit <span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	x<span class="token punctuation">,</span> y <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span>
	<span class="token keyword">for</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">select</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">case</span> c <span class="token operator">&lt;-</span> x<span class="token punctuation">:</span>
			x<span class="token punctuation">,</span> y <span class="token operator">=</span> y<span class="token punctuation">,</span> x<span class="token operator">+</span>y
		<span class="token keyword">case</span> <span class="token operator">&lt;-</span>quit<span class="token punctuation">:</span>
			fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"quit"</span><span class="token punctuation">)</span>
			<span class="token keyword">return</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	c <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">)</span>
	quit <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">)</span>
	<span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>
			fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token operator">&lt;-</span>c<span class="token punctuation">)</span>
		<span class="token punctuation">&#125;</span>
		quit <span class="token operator">&lt;-</span> <span class="token number">0</span>
	<span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token function">fibonacci</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> quit<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span></code></pre>

<h3 id="默认选择"><a href="#默认选择" class="headerlink" title="默认选择"></a>默认选择</h3><p>当 <code>select</code> 中的其它分支都没有准备好时，<code>default</code> 分支就会执行。</p>
<p>为了在尝试发送或者接收时不发生阻塞，可使用 <code>default</code> 分支：</p>
<pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">select</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">case</span> i <span class="token operator">:=</span> <span class="token operator">&lt;-</span>c<span class="token punctuation">:</span>
    <span class="token comment">// 使用 i</span>
<span class="token keyword">default</span><span class="token punctuation">:</span>
    <span class="token comment">// 从 c 中接收会阻塞时执行</span>
<span class="token punctuation">&#125;</span></code></pre>

<pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">"fmt"</span>
	<span class="token string">"time"</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	tick <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Tick</span><span class="token punctuation">(</span><span class="token number">100</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Millisecond<span class="token punctuation">)</span>
	boom <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">After</span><span class="token punctuation">(</span><span class="token number">500</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Millisecond<span class="token punctuation">)</span>
	<span class="token keyword">for</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">select</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">case</span> <span class="token operator">&lt;-</span>tick<span class="token punctuation">:</span>
			fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"tick."</span><span class="token punctuation">)</span>
		<span class="token keyword">case</span> <span class="token operator">&lt;-</span>boom<span class="token punctuation">:</span>
			fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"BOOM!"</span><span class="token punctuation">)</span>
			<span class="token keyword">return</span>
		<span class="token keyword">default</span><span class="token punctuation">:</span>
			fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"    ."</span><span class="token punctuation">)</span>
			time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">50</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Millisecond<span class="token punctuation">)</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>



<h2 id="信道中的信道"><a href="#信道中的信道" class="headerlink" title="信道中的信道"></a>信道中的信道</h2><p>Go最重要的特性就是信道是一等值 （ first-class value），它可以被分配并像其它值到处传递。 这种特性通常被用来实现安全、并行的多路分解。</p>
<p>在上一节的例子中，<code>handle</code> 是个非常理想化的请求处理程序， 但我们并未定义它所处理的请求类型。若该类型包含一个可用于回复的信道， 那么每一个客户端都能为其回应提供自己的路径。以下为 <code>Request</code> 类型的大概定义。</p>
<pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> Request <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
	args        <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span>
	f           <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span>
	resultChan  <span class="token keyword">chan</span> <span class="token builtin">int</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>客户端提供了一个函数及其实参，此外在请求对象中还有个接收应答的信道。</p>
<pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">sum</span><span class="token punctuation">(</span>a <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>s <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> a <span class="token punctuation">&#123;</span>
		s <span class="token operator">+=</span> v
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">return</span>
<span class="token punctuation">&#125;</span>

request <span class="token operator">:=</span> <span class="token operator">&amp;</span>Request<span class="token punctuation">&#123;</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> sum<span class="token punctuation">,</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>
<span class="token comment">// 发送请求</span>
clientRequests <span class="token operator">&lt;-</span> request
<span class="token comment">// 等待回应</span>
fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"answer: %d\n"</span><span class="token punctuation">,</span> <span class="token operator">&lt;-</span>request<span class="token punctuation">.</span>resultChan<span class="token punctuation">)</span></code></pre>

<p>在服务器端, 只需要修改处理函数。</p>
<pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">handle</span><span class="token punctuation">(</span>queue <span class="token keyword">chan</span> <span class="token operator">*</span>Request<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">for</span> req <span class="token operator">:=</span> <span class="token keyword">range</span> queue <span class="token punctuation">&#123;</span>
		req<span class="token punctuation">.</span>resultChan <span class="token operator">&lt;-</span> req<span class="token punctuation">.</span><span class="token function">f</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>args<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>要使其实际可用还有很多工作要做，这些代码仅能实现一个速率有限、并行、非阻塞RPC系统的 框架，而且它并不包含互斥锁。</p>
<h2 id="并行化"><a href="#并行化" class="headerlink" title="并行化"></a>并行化</h2><p>这些设计的另一个应用是在多CPU核心上实现并行计算。如果计算过程能够被分为几块 可独立执行的过程，它就可以在每块计算结束时向信道发送信号，从而实现并行处理。</p>
<p>让我们看看这个理想化的例子。我们在对一系列向量项进行极耗资源的操作， 而每个项的值计算是完全独立的。</p>
<pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> Vector <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">float64</span>

<span class="token comment">// 将此操应用至 v[i], v[i+1] ... 直到 v[n-1]</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>v Vector<span class="token punctuation">)</span> <span class="token function">DoSome</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> n <span class="token builtin">int</span><span class="token punctuation">,</span> u Vector<span class="token punctuation">,</span> c <span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">for</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>
		v<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> u<span class="token punctuation">.</span><span class="token function">Op</span><span class="token punctuation">(</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
	c <span class="token operator">&lt;-</span> <span class="token number">1</span>    <span class="token comment">// 发信号表示这一块计算完成。</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>我们在循环中启动了独立的处理块，每个CPU将执行一个处理。 它们有可能以乱序的形式完成并结束，但这没有关系； 我们只需在所有Go程开始后接收，并统计信道中的完成信号即可。</p>
<pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">const</span> NCPU <span class="token operator">=</span> <span class="token number">4</span>  <span class="token comment">// CPU核心数</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>v Vector<span class="token punctuation">)</span> <span class="token function">DoAll</span><span class="token punctuation">(</span>u Vector<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	c <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">,</span> NCPU<span class="token punctuation">)</span>  <span class="token comment">// 缓冲区是可选的，但明显用上更好</span>
	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> NCPU<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">go</span> v<span class="token punctuation">.</span><span class="token function">DoSome</span><span class="token punctuation">(</span>i<span class="token operator">*</span><span class="token function">len</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token operator">/</span>NCPU<span class="token punctuation">,</span> <span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token function">len</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token operator">/</span>NCPU<span class="token punctuation">,</span> u<span class="token punctuation">,</span> c<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
	<span class="token comment">// 排空信道。</span>
	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> NCPU<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>
		<span class="token operator">&lt;-</span>c    <span class="token comment">// 等待任务完成</span>
	<span class="token punctuation">&#125;</span>
	<span class="token comment">// 一切完成。</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>Rather than create a constant value for numCPU, we can ask the runtime what value is appropriate. The function <code>runtime.NumCPU</code> returns the number of hardware CPU cores in the machine, so we could write</p>
<p>我们可以询问 runtime 什么值是合适的，而不是创建一个常量值 <code>numCPU</code> 。 <code>runtime.NumCPU</code> 函数返回机器中硬件 CPU 内核的数量，所以我们可以这样写：</p>
<pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> numCPU <span class="token operator">=</span> runtime<span class="token punctuation">.</span><span class="token function">NumCPU</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>

<p>There is also a function <code>runtime.GOMAXPROCS</code>, which reports (or sets) the user-specified number of cores that a Go program can have running simultaneously. It defaults to the value of <code>runtime.NumCPU</code> but can be overridden by setting the similarly named shell environment variable or by calling the function with a positive number. Calling it with zero just queries the value. Therefore if we want to honor the user’s resource request, we should write</p>
<p>函数 <a href="https://go.dev/pkg/runtime#GOMAXPROCS"><code>runtime.GOMAXPROCS</code></a> 可以报告（或设置）Go程序可以同时运行的、用户指定的核心数。其值默认为 <code>runtime.NumCPU</code> 的值，但可以被重新覆盖；如，通过设置类似的命名Shell环境变量，或者调用 <code>runtime.GOMAXPROCS</code> 函数并传递一个正数作为参数。以 <code>0</code> 作为参数调用 <code>runtime.GOMAXPROCS</code> 仅仅是查询该值。因此，如果我们想尊重用户的资源请求，我们应该这样写：</p>
<pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> numCPU <span class="token operator">=</span> runtime<span class="token punctuation">.</span><span class="token function">GOMAXPROCS</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span></code></pre>

<p>注意不要混淆并发和并行的概念：并发是用可独立执行的组件构造程序的方法， 而并行则是为了效率在多CPU上平行地进行计算。尽管Go的并发特性能够让某些问题更易构造成并行计算， 但Go仍然是种并发而非并行的语言，且Go的模型并不适合所有的并行问题。 关于其中区别的讨论，见 <a href="http://blog.golang.org/2013/01/concurrency-is-not-parallelism.html">此博文</a>。</p>
<h2 id="Leaky-Buffer"><a href="#Leaky-Buffer" class="headerlink" title="Leaky Buffer"></a>Leaky Buffer</h2><p>并发编程的工具甚至能很容易地表达非并发的思想。这里有个提取自RPC包的例子。 客户端Go程从某些来源，可能是网络中循环接收数据。为避免分配和释放缓冲区， 它保存了一个空闲链表，使用一个带缓冲信道表示。若信道为空，就会分配新的缓冲区。 一旦消息缓冲区就绪，它将通过 <code>serverChan</code> 被发送到服务器。</p>
<pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> freeList <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token operator">*</span>Buffer<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span>
<span class="token keyword">var</span> serverChan <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token operator">*</span>Buffer<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">client</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">for</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">var</span> b <span class="token operator">*</span>Buffer
		<span class="token comment">// 若缓冲区可用就用它，不可用就分配个新的。</span>
		<span class="token keyword">select</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">case</span> b <span class="token operator">=</span> <span class="token operator">&lt;-</span>freeList<span class="token punctuation">:</span>
			<span class="token comment">// 获取一个，不做别的。</span>
		<span class="token keyword">default</span><span class="token punctuation">:</span>
			<span class="token comment">// 非空闲，因此分配一个新的。</span>
			b <span class="token operator">=</span> <span class="token function">new</span><span class="token punctuation">(</span>Buffer<span class="token punctuation">)</span>
		<span class="token punctuation">&#125;</span>
		<span class="token function">load</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>              <span class="token comment">// 从网络中读取下一条消息。</span>
		serverChan <span class="token operator">&lt;-</span> b   <span class="token comment">// 发送至服务器。</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>服务器从客户端循环接收每个消息，处理它们，并将缓冲区返回给空闲列表。</p>
<pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">server</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">for</span> <span class="token punctuation">&#123;</span>
		b <span class="token operator">:=</span> <span class="token operator">&lt;-</span>serverChan    <span class="token comment">// 等待工作。</span>
		<span class="token function">process</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>
		<span class="token comment">// 若缓冲区有空间就重用它。</span>
		<span class="token keyword">select</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">case</span> freeList <span class="token operator">&lt;-</span> b<span class="token punctuation">:</span>
			<span class="token comment">// 将缓冲区b放到freeList中，不做别的。</span>
		<span class="token keyword">default</span><span class="token punctuation">:</span>
			<span class="token comment">// 空闲列表已满，保持就好。</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>The client attempts to retrieve a buffer from <code>freeList</code>; if none is available, it allocates a fresh one. The server’s send to <code>freeList</code> puts <code>b</code> back on the free list unless the list is full, in which case the buffer is dropped on the floor to be reclaimed by the garbage collector. (The <code>default</code> clauses in the <code>select</code> statements execute when no other case is ready, meaning that the <code>selects</code> never block.) This implementation builds a leaky bucket free list in just a few lines, relying on the buffered channel and the garbage collector for bookkeeping.</p>
<p>客户端试图从 <code>freeList</code> 中获取缓冲区；若没有缓冲区可用， 它就将分配一个新的。服务器将 <code>b</code> 放回空闲列表 <code>freeList</code> 中直到列表已满，此时缓冲区将被丢弃，并被垃圾回收器回收。（<code>select</code> 语句中的 <code>default</code> 子句在没有条件符合时执行，这也就意味着 <code>selects</code> 永远不会被阻塞。）依靠带缓冲的信道和垃圾回收器的记录， 我们仅用短短几行代码就构建了一个漏桶 （leaky bucket）空闲列表。</p>
<h2 id="sync-Mutex"><a href="#sync-Mutex" class="headerlink" title="sync.Mutex"></a>sync.Mutex</h2><p>我们已经看到信道非常适合在各个 Go 程间进行通信。</p>
<p>但是如果我们并不需要通信呢？比如说，若我们只是想保证每次只有一个 Go 程能够访问一个共享的变量，从而避免冲突？</p>
<p>这里涉及的概念叫做 <em>互斥（mutual exclusion）</em> ，我们通常使用 <em>互斥锁（Mutex）</em> 这一数据结构来提供这种机制。</p>
<p>Go 标准库中提供了 <a href="https://go-zh.org/pkg/sync/#Mutex"><code>sync.Mutex</code></a> 互斥锁类型及其两个方法：</p>
<ul>
<li><code>Lock</code></li>
<li><code>Unlock</code></li>
</ul>
<p>我们可以通过在代码前调用 <code>Lock</code> 方法，在代码后调用 <code>Unlock</code> 方法来保证一段代码的互斥执行。参见 <code>Inc</code> 方法。</p>
<p>我们也可以用 <code>defer</code> 语句来保证互斥锁一定会被解锁。参见 <code>Value</code> 方法。</p>
<pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">"fmt"</span>
	<span class="token string">"sync"</span>
	<span class="token string">"time"</span>
<span class="token punctuation">)</span>

<span class="token comment">// SafeCounter 的并发使用是安全的。</span>
<span class="token keyword">type</span> SafeCounter <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
	v   <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span>
	mux sync<span class="token punctuation">.</span>Mutex
<span class="token punctuation">&#125;</span>

<span class="token comment">// Inc 增加给定 key 的计数器的值。</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>SafeCounter<span class="token punctuation">)</span> <span class="token function">Inc</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	c<span class="token punctuation">.</span>mux<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token comment">// Lock 之后同一时刻只有一个 goroutine 能访问 c.v</span>
	c<span class="token punctuation">.</span>v<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token operator">++</span>
	c<span class="token punctuation">.</span>mux<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// Value 返回给定 key 的计数器的当前值。</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>SafeCounter<span class="token punctuation">)</span> <span class="token function">Value</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">&#123;</span>
	c<span class="token punctuation">.</span>mux<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token comment">// Lock 之后同一时刻只有一个 goroutine 能访问 c.v</span>
	<span class="token keyword">defer</span> c<span class="token punctuation">.</span>mux<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">return</span> c<span class="token punctuation">.</span>v<span class="token punctuation">[</span>key<span class="token punctuation">]</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	c <span class="token operator">:=</span> SafeCounter<span class="token punctuation">&#123;</span>v<span class="token punctuation">:</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>
	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1000</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">go</span> c<span class="token punctuation">.</span><span class="token function">Inc</span><span class="token punctuation">(</span><span class="token string">"somekey"</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>

	time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">Value</span><span class="token punctuation">(</span><span class="token string">"somekey"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span></code></pre>

<h2 id="sync-WaitGroup"><a href="#sync-WaitGroup" class="headerlink" title="sync.WaitGroup"></a>sync.WaitGroup</h2><p>A WaitGroup waits for a collection of goroutines to finish. The main goroutine calls Add to set the number of goroutines to wait for. Then each of the goroutines runs and calls Done when finished. At the same time, Wait can be used to block until all goroutines have finished.</p>
<p>A WaitGroup must not be copied after first use.</p>
<p>In the terminology of the Go memory model, a call to Done “synchronizes before” the return of any Wait call that it unblocks.</p>
<p>在 Go 内存模型的术语中，对 Done 的调用在它解除阻塞的任何 Wait 调用返回之前是同步的。</p>
<pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">"fmt"</span>
	<span class="token string">"sync"</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">var</span> wg sync<span class="token punctuation">.</span>WaitGroup
	c <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>
	c <span class="token operator">&lt;-</span> <span class="token number">0</span>
	list <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">&#125;</span>
	<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> i <span class="token operator">:=</span> <span class="token keyword">range</span> list <span class="token punctuation">&#123;</span>
		wg<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
		<span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span>n <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			<span class="token keyword">defer</span> wg<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
			tmp <span class="token operator">:=</span> <span class="token operator">&lt;-</span>c
			fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%v + %v = %v\n"</span><span class="token punctuation">,</span> tmp<span class="token punctuation">,</span> n<span class="token punctuation">,</span> tmp<span class="token operator">+</span>n<span class="token punctuation">)</span>
			c <span class="token operator">&lt;-</span> tmp <span class="token operator">+</span> n
		<span class="token punctuation">&#125;</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
	wg<span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token operator">&lt;-</span>c<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>多次运行，可以发现执行过程并不是同步的：</p>
<pre class="language-go" data-language="go"><code class="language-go"><span class="token number">0</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">=</span> <span class="token number">1</span>
<span class="token number">1</span> <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">=</span> <span class="token number">3</span>
<span class="token number">3</span> <span class="token operator">+</span> <span class="token number">4</span> <span class="token operator">=</span> <span class="token number">7</span>
<span class="token number">7</span> <span class="token operator">+</span> <span class="token number">5</span> <span class="token operator">=</span> <span class="token number">12</span>
<span class="token number">12</span> <span class="token operator">+</span> <span class="token number">3</span> <span class="token operator">=</span> <span class="token number">15</span>
<span class="token number">15</span></code></pre>

<h1 id="错误"><a href="#错误" class="headerlink" title="错误"></a>错误</h1><p>库例程 （Library routines）通常需要向调用者返回某种类型的错误提示。之前提到过，Go语言的多值返回特性， 使得它在返回常规的值时，还能轻松地返回详细的错误描述。按照约定，错误的类型通常为 <code>error</code>，这是一个内建的简单接口。</p>
<pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> <span class="token builtin">error</span> <span class="token keyword">interface</span> <span class="token punctuation">&#123;</span>
	<span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>库的编写者通过更丰富的底层模型可以轻松实现这个接口，这样不仅能看见错误， 还能提供一些上下文。例如，<code>os.Open</code> 可返回一个 <code>os.PathError</code>。</p>
<pre class="language-go" data-language="go"><code class="language-go"><span class="token comment">// PathError 记录一个错误以及产生该错误的路径和操作。</span>
<span class="token keyword">type</span> PathError <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
	Op <span class="token builtin">string</span>    <span class="token comment">// "open"、"unlink" 等等。</span>
	Path <span class="token builtin">string</span>  <span class="token comment">// 相关联的文件。</span>
	Err <span class="token builtin">error</span>    <span class="token comment">// 由系统调用返回。</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>e <span class="token operator">*</span>PathError<span class="token punctuation">)</span> <span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">return</span> e<span class="token punctuation">.</span>Op <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> e<span class="token punctuation">.</span>Path <span class="token operator">+</span> <span class="token string">": "</span> <span class="token operator">+</span> e<span class="token punctuation">.</span>Err<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span></code></pre>

<p><code>PathError</code>的 <code>Error</code> 会生成如下错误信息：</p>
<pre class="language-go" data-language="go"><code class="language-go">open <span class="token operator">/</span>etc<span class="token operator">/</span>passwx<span class="token punctuation">:</span> no such file or directory</code></pre>

<p>这种错误包含了出错的文件名、操作和触发的操作系统错误，即便在产生该错误的调用 和输出的错误信息相距甚远时，它也会非常有用，这比苍白的“不存在该文件或目录”更具说明性。</p>
<p>错误字符串应尽可能地指明它们的来源，例如产生该错误的包名前缀。例如在 <code>image</code> 包中，由于未知格式导致解码错误的字符串为“image: unknown format”。</p>
<p>若调用者关心错误的完整细节，可使用类型选择或者类型断言来查看特定错误，并抽取其细节。 对于 <code>PathErrors</code>，它应该还包含检查内部的 <code>Err</code> 字段以进行可能的错误恢复。</p>
<pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">for</span> try <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> try <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">;</span> try<span class="token operator">++</span> <span class="token punctuation">&#123;</span>
	file<span class="token punctuation">,</span> err <span class="token operator">=</span> os<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">if</span> e<span class="token punctuation">,</span> ok <span class="token operator">:=</span> err<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token operator">*</span>os<span class="token punctuation">.</span>PathError<span class="token punctuation">)</span><span class="token punctuation">;</span> ok <span class="token operator">&amp;&amp;</span> e<span class="token punctuation">.</span>Err <span class="token operator">==</span> syscall<span class="token punctuation">.</span>ENOSPC <span class="token punctuation">&#123;</span>
		<span class="token function">deleteTempFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// 恢复一些空间。</span>
		<span class="token keyword">continue</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">return</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>这里的第二条 <code>if</code> 是另一种<a href="https://go-zh.org/doc/effective_go.html#%E6%8E%A5%E5%8F%A3%E8%BD%AC%E6%8D%A2">类型断言</a>。若它失败， <code>ok</code> 将为 <code>false</code>，而 <code>e</code> 则为<code>nil</code>. 若它成功，<code>ok</code> 将为 <code>true</code>，这意味着该错误属于 <code>*os.PathError</code> 类型，而 <code>e</code> 能够检测关于该错误的更多信息。</p>
<h2 id="Panic"><a href="#Panic" class="headerlink" title="Panic"></a>Panic</h2><p>向调用者报告错误的一般方式就是将 <code>error</code> 作为额外的值返回。 标准的 <code>Read</code> 方法就是个众所周知的实例，它返回一个字节计数和一个 <code>error</code>。但如果错误时不可恢复的呢？有时程序就是不能继续运行。</p>
<p>为此，我们提供了内建的 <code>panic</code> 函数，它会产生一个运行时错误并终止程序 （但请继续看下一节）。该函数接受一个任意类型的实参（一般为字符串），并在程序终止时打印。 它还能表明发生了意料之外的事情，比如从无限循环中退出了。</p>
<pre class="language-go" data-language="go"><code class="language-go"><span class="token comment">// 用牛顿法计算立方根的一个玩具实现。</span>
<span class="token keyword">func</span> <span class="token function">CubeRoot</span><span class="token punctuation">(</span>x <span class="token builtin">float64</span><span class="token punctuation">)</span> <span class="token builtin">float64</span> <span class="token punctuation">&#123;</span>
	z <span class="token operator">:=</span> x<span class="token operator">/</span><span class="token number">3</span>   <span class="token comment">// 任意初始值</span>
	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1e6</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>
		prevz <span class="token operator">:=</span> z
		z <span class="token operator">-=</span> <span class="token punctuation">(</span>z<span class="token operator">*</span>z<span class="token operator">*</span>z<span class="token operator">-</span>x<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token operator">*</span>z<span class="token operator">*</span>z<span class="token punctuation">)</span>
		<span class="token keyword">if</span> <span class="token function">veryClose</span><span class="token punctuation">(</span>z<span class="token punctuation">,</span> prevz<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			<span class="token keyword">return</span> z
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token comment">// 一百万次迭代并未收敛，事情出错了。</span>
	<span class="token function">panic</span><span class="token punctuation">(</span>fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"CubeRoot(%g) did not converge"</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>这仅仅是个示例，实际的库函数应避免 <code>panic</code>。若问题可以被屏蔽或解决， 最好就是让程序继续运行而不是终止整个程序。一个可能的反例就是初始化： 若某个库真的不能让自己工作，且有足够理由产生Panic，那就由它去吧。</p>
<pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> user <span class="token operator">=</span> os<span class="token punctuation">.</span><span class="token function">Getenv</span><span class="token punctuation">(</span><span class="token string">"USER"</span><span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> user <span class="token operator">==</span> <span class="token string">""</span> <span class="token punctuation">&#123;</span>
		<span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">"no value for $USER"</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>

<h2 id="Recover"><a href="#Recover" class="headerlink" title="Recover"></a>Recover</h2><p>当 <code>panic</code> 被调用后（包括不明确的运行时错误，例如切片检索越界或类型断言失败）， 程序将立刻终止当前函数的执行，并开始回溯Go程的栈，运行任何被推迟的函数。 若回溯到达Go程栈的顶端，程序就会终止。不过我们可以用内建的 <code>recover</code> 函数来重新或来取回Go程的控制权限并使其恢复正常执行。</p>
<p>调用 <code>recover</code> 将停止回溯过程，并返回传入 <code>panic</code> 的实参。 由于在回溯时只有被推迟函数中的代码在运行，因此 <code>recover</code> 只能在被推迟的函数中才有效。</p>
<p><code>recover</code> 的一个应用就是在服务器中终止失败的Go程而无需杀死其它正在执行的Go程。</p>
<pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">server</span><span class="token punctuation">(</span>workChan <span class="token operator">&lt;-</span><span class="token keyword">chan</span> <span class="token operator">*</span>Work<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">for</span> work <span class="token operator">:=</span> <span class="token keyword">range</span> workChan <span class="token punctuation">&#123;</span>
		<span class="token keyword">go</span> <span class="token function">safelyDo</span><span class="token punctuation">(</span>work<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">safelyDo</span><span class="token punctuation">(</span>work <span class="token operator">*</span>Work<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">if</span> err <span class="token operator">:=</span> <span class="token function">recover</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
			log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"work failed:"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token function">do</span><span class="token punctuation">(</span>work<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>在此例中，若 <code>do(work)</code> 触发了Panic，其结果就会被记录， 而该Go程会被干净利落地结束，不会干扰到其它Go程。我们无需在推迟的闭包中做任何事情， <code>recover</code> 会处理好这一切。</p>
<p>由于直接从被推迟函数中调用 <code>recover</code> 时不会返回 <code>nil</code>， 因此被推迟的代码能够调用本身使用了 <code>panic</code> 和 <code>recover</code> 的库函数而不会失败。例如在 <code>safelyDo</code> 中，被推迟的函数可能在调用 <code>recover</code> 前先调用记录函数，而该记录函数应当不受Panic状态的代码的影响。</p>
<p>通过恰当地使用恢复模式，<code>do</code> 函数（及其调用的任何代码）可通过调用 <code>panic</code> 来避免更坏的结果。我们可以利用这种思想来简化复杂软件中的错误处理。 让我们看看 <code>regexp</code> 包的理想化版本，它会以局部的错误类型调用 <code>panic</code> 来报告解析错误。以下是一个 <code>error</code> 类型的 <code>Error</code> 方法和一个 <code>Compile</code> 函数的定义：</p>
<pre class="language-go" data-language="go"><code class="language-go"><span class="token comment">// Error 是解析错误的类型，它满足 error 接口。</span>
<span class="token keyword">type</span> Error <span class="token builtin">string</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>e Error<span class="token punctuation">)</span> <span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">return</span> <span class="token function">string</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// error 是 *Regexp 的方法，它通过用一个 Error 触发Panic来报告解析错误。</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>regexp <span class="token operator">*</span>Regexp<span class="token punctuation">)</span> <span class="token function">error</span><span class="token punctuation">(</span>err <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token function">panic</span><span class="token punctuation">(</span><span class="token function">Error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// Compile 返回该正则表达式解析后的表示。</span>
<span class="token keyword">func</span> <span class="token function">Compile</span><span class="token punctuation">(</span>str <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>regexp <span class="token operator">*</span>Regexp<span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	regexp <span class="token operator">=</span> <span class="token function">new</span><span class="token punctuation">(</span>Regexp<span class="token punctuation">)</span>
	<span class="token comment">// doParse will panic if there is a parse error.</span>
	<span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">if</span> e <span class="token operator">:=</span> <span class="token function">recover</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> e <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
			regexp <span class="token operator">=</span> <span class="token boolean">nil</span>    <span class="token comment">// 清理返回值。</span>
			err <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token punctuation">(</span>Error<span class="token punctuation">)</span> <span class="token comment">// 若它不是解析错误，将重新触发Panic。</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">return</span> regexp<span class="token punctuation">.</span><span class="token function">doParse</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">nil</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>若 <code>doParse</code> 触发了Panic，恢复块会将返回值设为 <code>nil</code> —被推迟的函数能够修改已命名的返回值。在 <code>err</code> 的赋值过程中， 我们将通过断言它是否拥有局部类型 <code>Error</code> 来检查它。若它没有， 类型断言将会失败，此时会产生运行时错误，并继续栈的回溯，仿佛一切从未中断过一样。 该检查意味着若发生了一些像索引越界之类的意外，那么即便我们使用了 <code>panic</code> 和 <code>recover</code> 来处理解析错误，代码仍然会失败。</p>
<p>通过适当的错误处理，<code>error</code> 方法（由于它是个绑定到具体类型的方法， 因此即便它与内建的 <code>error</code> 类型名字相同也没有关系） 能让报告解析错误变得更容易，而无需手动处理回溯的解析栈：</p>
<pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">if</span> pos <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>
	re<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"'*' illegal at start of expression"</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>尽管这种模式很有用，但它应当仅在包内使用。<code>Parse</code> 会将其内部的 <code>panic</code> 调用转为 <code>error</code> 值，它并不会向调用者暴露出 <code>panic</code>。这是个值得遵守的良好规则。</p>
<p>顺便一提，这种重新触发Panic的惯用法会在产生实际错误时改变Panic的值。 然而，不管是原始的还是新的错误都会在崩溃报告中显示，因此问题的根源仍然是可见的。 这种简单的重新触发Panic的模型已经够用了，毕竟他只是一次崩溃。 但若你只想显示原始的值，也可以多写一点代码来过滤掉不需要的问题，然后用原始值再次触发Panic。 这里就将这个练习留给读者了。</p>
<h1 id="一个Web服务器"><a href="#一个Web服务器" class="headerlink" title="一个Web服务器"></a>一个Web服务器</h1><p>让我们以一个完整的Go程序作为结束吧，一个Web服务器。该程序其实只是个Web服务器的重用。 Google在<a href="http://chart.apis.google.com/">http://chart.apis.google.com</a> 上提供了一个将表单数据自动转换为图表的服务。不过，该服务很难交互， 因为你需要将数据作为查询放到URL中。此程序为一种数据格式提供了更好的的接口： 给定一小段文本，它将调用图表服务器来生成二维码（QR码），这是一种编码文本的点格矩阵。 该图像可被你的手机摄像头捕获，并解释为一个字符串，比如URL， 这样就免去了你在狭小的手机键盘上键入URL的麻烦。</p>
<p>以下为完整的程序，随后有一段解释。</p>
<pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
    <span class="token string">"flag"</span>
    <span class="token string">"html/template"</span>
    <span class="token string">"log"</span>
    <span class="token string">"net/http"</span>
<span class="token punctuation">)</span>

<span class="token keyword">var</span> addr <span class="token operator">=</span> flag<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token string">"addr"</span><span class="token punctuation">,</span> <span class="token string">":1718"</span><span class="token punctuation">,</span> <span class="token string">"http service address"</span><span class="token punctuation">)</span> <span class="token comment">// Q=17, R=18</span>

<span class="token keyword">var</span> templ <span class="token operator">=</span> template<span class="token punctuation">.</span><span class="token function">Must</span><span class="token punctuation">(</span>template<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">"qr"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>templateStr<span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    flag<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    http<span class="token punctuation">.</span><span class="token function">Handle</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">,</span> http<span class="token punctuation">.</span><span class="token function">HandlerFunc</span><span class="token punctuation">(</span>QR<span class="token punctuation">)</span><span class="token punctuation">)</span>
    err <span class="token operator">:=</span> http<span class="token punctuation">.</span><span class="token function">ListenAndServe</span><span class="token punctuation">(</span><span class="token operator">*</span>addr<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
        log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span><span class="token string">"ListenAndServe:"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">QR</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> req <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    templ<span class="token punctuation">.</span><span class="token function">Execute</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> req<span class="token punctuation">.</span><span class="token function">FormValue</span><span class="token punctuation">(</span><span class="token string">"s"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">const</span> templateStr <span class="token operator">=</span> <span class="token string">`
&lt;html>
&lt;head>
&lt;title>QR Link Generator&lt;/title>
&lt;/head>
&lt;body>
&#123;&#123;if .&#125;&#125;
&lt;img src="http://chart.apis.google.com/chart?chs=300x300&amp;cht=qr&amp;choe=UTF-8&amp;chl=&#123;&#123;.&#125;&#125;" />
&lt;br>
&#123;&#123;.&#125;&#125;
&lt;br>
&lt;br>
&#123;&#123;end&#125;&#125;
&lt;form action="/" name=f method="GET">&lt;input maxLength=1024 size=70
name=s value="" title="Text to QR Encode">&lt;input type=submit
value="Show QR" name=qr>
&lt;/form>
&lt;/body>
&lt;/html>
`</span></code></pre>

<p><code>main</code> 之前的代码应该比较容易理解。我们通过一个标志为服务器设置了默认端口。 模板变量 <code>templ</code> 正式有趣的地方。它构建的HTML模版将会被服务器执行并显示在页面中。 稍后我们将详细讨论。</p>
<p><code>main</code> 函数解析了参数标志并使用我们讨论过的机制将 <code>QR</code> 函数绑定到服务器的根路径。然后调用 <code>http.ListenAndServe</code> 启动服务器；它将在服务器运行时处于阻塞状态。</p>
<p><code>QR</code> 仅接受包含表单数据的请求，并为表单值 <code>s</code> 中的数据执行模板。</p>
<p>模板包 <code>html/template</code> 非常强大；该程序只是浅尝辄止。 本质上，它通过在运行时将数据项中提取的元素（在这里是表单值）传给 <code>templ.Execute</code> 执行因而重写了HTML文本。 在模板文本（<code>templateStr</code>）中，双大括号界定的文本表示模板的动作。 从 <code>&#123;&#123;if .&#125;&#125;</code> 到 <code>&#123;&#123;end&#125;&#125;</code> 的代码段仅在当前数据项（这里是点 <code>.</code>）的值非空时才会执行。 也就是说，当字符串为空时，此部分模板段会被忽略。</p>
<p>其中两段 <code>&#123;&#123;.&#125;&#125;</code> 表示要将数据显示在模板中 （即将查询字符串显示在Web页面上）。HTML模板包将自动对文本进行转义， 因此文本的显示是安全的。</p>
<p>余下的模板字符串只是页面加载时将要显示的HTML。如果这段解释你无法理解，请参考 <a href="https://go-zh.org/pkg/html/template/">文档</a> 获得更多有关模板包的解释。</p>
<p>你终于如愿以偿了：以几行代码实现的，包含一些数据驱动的HTML文本的Web服务器。 Go语言强大到能让很多事情以短小精悍的方式解决。</p>
]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>Golang</tag>
        <tag>Programming</tag>
      </tags>
  </entry>
  <entry>
    <title>gobyexample 学习笔记</title>
    <url>/2022/learn_gobyexample/</url>
    <content><![CDATA[<h1 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h1><p>我们的第一个程序将打印传说中的 “hello world” 消息，右边是完整的程序代码。</p>
<pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">"fmt"</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"hello world"</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>要运行这个程序，将这些代码放到 <code>hello-world.go</code> 中并且使用 <code>go run</code> 命令。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ go run hello-world.go
hello world</code></pre>

<p>有时候我们想将我们的程序编译成二进制文件。我们可以通过 go build 命来达到目的。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ go build hello-world.go
$ <span class="token function">ls</span>
hello-world	hello-world.go</code></pre>

<p>然后我们可以直接运行这个二进制文件。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ ./hello-world
hello world</code></pre>

<span id="more"></span>

<h1 id="值"><a href="#值" class="headerlink" title="值"></a>值</h1><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">"fmt"</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token comment">// 字符串可以通过 + 连接。</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"go"</span> <span class="token operator">+</span> <span class="token string">"lang"</span><span class="token punctuation">)</span>
	
	<span class="token comment">// 整数和浮点数</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"1+1 ="</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"7.0/3.0 ="</span><span class="token punctuation">,</span> <span class="token number">7.0</span><span class="token operator">/</span><span class="token number">3.0</span><span class="token punctuation">)</span>

	<span class="token comment">// 布尔型，还有你想要的逻辑运算符。</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token boolean">true</span> <span class="token operator">&amp;&amp;</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token boolean">true</span> <span class="token operator">||</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token boolean">true</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span></code></pre>

<pre class="language-bash" data-language="bash"><code class="language-bash">$ go run values.go
golang
<span class="token number">1</span>+1 <span class="token operator">=</span> <span class="token number">2</span>
<span class="token number">7.0</span>/3.0 <span class="token operator">=</span> <span class="token number">2.3333333333333335</span>
<span class="token boolean">false</span>
<span class="token boolean">true</span>
<span class="token boolean">false</span></code></pre>

<h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">"fmt"</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token comment">// var 声明 1 个或者多个变量。</span>
    <span class="token keyword">var</span> a <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">"initial"</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
    
	<span class="token comment">// 你可以申明一次性声明多个变量。</span>
    <span class="token keyword">var</span> b<span class="token punctuation">,</span> c <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> c<span class="token punctuation">)</span>
    
	<span class="token comment">// Go 将自动推断已经初始化的变量类型。</span>
    <span class="token keyword">var</span> d <span class="token operator">=</span> <span class="token boolean">true</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span>
	
    <span class="token comment">// 声明变量且没有给出对应的初始值时，变量将会初始化为零值 。例如，一个 int 的零值是 0。</span>
    <span class="token keyword">var</span> e <span class="token builtin">int</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>

    <span class="token comment">// := 语句是申明并初始化变量的简写，例如这个例子中的 var f string = "short"。</span>
    f <span class="token operator">:=</span> <span class="token string">"short"</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span></code></pre>

<pre class="language-bash" data-language="bash"><code class="language-bash">$ go run variables.go
initial
<span class="token number">1</span> <span class="token number">2</span>
<span class="token boolean">true</span>
<span class="token number">0</span>
short</code></pre>



<h1 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h1><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
    <span class="token string">"fmt"</span>
    <span class="token string">"math"</span>
<span class="token punctuation">)</span>

<span class="token comment">// const 用于声明一个常量。</span>
<span class="token keyword">const</span> s <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">"constant"</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>

    <span class="token comment">// 重新赋值会报错</span>
    s <span class="token operator">=</span> <span class="token string">"yoyo"</span> <span class="token comment">// cannot assign to s (constant "constant" of type string)</span>

    <span class="token keyword">var</span> s <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">100</span> <span class="token comment">// 重新定义局部变量则不会报错</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>

    <span class="token comment">// const 语句可以出现在任何 var 语句可以出现的地方</span>
    <span class="token keyword">const</span> n <span class="token operator">=</span> <span class="token number">500000000</span>

    <span class="token comment">//常数表达式可以执行任意精度的运算</span>
    <span class="token keyword">const</span> d <span class="token operator">=</span> <span class="token number">3e20</span> <span class="token operator">/</span> n
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span>

    <span class="token comment">//数值型常量是没有确定的类型的，直到它们被给定了一个类型，比如说一次显示的类型转化。</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">int64</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">)</span>

    <span class="token comment">//当上下文需要时，一个数可以被给定一个类型，比如变量赋值或者函数调用。举个例子，这里的 math.Sin函数需要一个 float64 的参数。</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>math<span class="token punctuation">.</span><span class="token function">Sin</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span></code></pre>

<pre class="language-bash" data-language="bash"><code class="language-bash">$ go run constant.go 
constant
6e+11
<span class="token number">600000000000</span>
-0.28470407323754404</code></pre>

<h1 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h1><p><code>for</code> 是 Go 中唯一的循环结构。这里有 <code>for</code> 循环的三个基本使用方式。</p>
<pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">"fmt"</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token comment">// 最常用的方式，带单个循环条件。</span>
    i <span class="token operator">:=</span> <span class="token number">1</span>
    <span class="token keyword">for</span> i <span class="token operator">&lt;=</span> <span class="token number">3</span> <span class="token punctuation">&#123;</span>
        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
        i <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span>
    <span class="token punctuation">&#125;</span>
    
	<span class="token comment">// 经典的初始化/条件/后续形式 for 循环。</span>
    <span class="token keyword">for</span> j <span class="token operator">:=</span> <span class="token number">7</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> <span class="token number">9</span><span class="token punctuation">;</span> j<span class="token operator">++</span> <span class="token punctuation">&#123;</span>
        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">// 不带条件的 for 循环将一直执行，直到在循环体内使用了 break 或者 return 来跳出循环。</span>
    <span class="token keyword">for</span> <span class="token punctuation">&#123;</span>
        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"loop"</span><span class="token punctuation">)</span>
        <span class="token keyword">break</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>

<pre class="language-bash" data-language="bash"><code class="language-bash">$ go run for.go
<span class="token number">1</span>
<span class="token number">2</span>
<span class="token number">3</span>
<span class="token number">7</span>
<span class="token number">8</span>
<span class="token number">9</span>
loop</code></pre>

<h1 id="if-x2F-else-分支"><a href="#if-x2F-else-分支" class="headerlink" title="if&#x2F;else 分支"></a>if&#x2F;else 分支</h1><p>注意，在 Go 中，你可以不适用圆括号，但是花括号是需要的。Go 里没有<a href="http://en.wikipedia.org/wiki/%3F:">三目运算符</a>，所以即使你只需要基本的条件判断，你仍需要使用完整的 <code>if</code> 语句。</p>
<pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">"fmt"</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token number">7</span><span class="token operator">%</span><span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>
        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"7 is even"</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"7 is odd"</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">// 你可以不要 else 只用 if 语句。</span>
    <span class="token keyword">if</span> <span class="token number">8</span><span class="token operator">%</span><span class="token number">4</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>
        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"8 is divisible by 4"</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
    
	<span class="token comment">// 在条件语句之前可以有一个语句；任何在这里声明的变量都可以在所有的条件分支中使用。</span>
    <span class="token keyword">if</span> num <span class="token operator">:=</span> <span class="token number">9</span><span class="token punctuation">;</span> num <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>
        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> <span class="token string">"is negative"</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> num <span class="token operator">&lt;</span> <span class="token number">10</span> <span class="token punctuation">&#123;</span>
        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> <span class="token string">"has 1 digit"</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> <span class="token string">"has multiple digits"</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>

<pre class="language-bash" data-language="bash"><code class="language-bash">$ go run if-else.go 
<span class="token number">7</span> is odd
<span class="token number">8</span> is divisible by <span class="token number">4</span>
<span class="token number">9</span> has <span class="token number">1</span> digit</code></pre>

<h1 id="switch-语句"><a href="#switch-语句" class="headerlink" title="switch 语句"></a>switch 语句</h1><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">"fmt"</span>
<span class="token keyword">import</span> <span class="token string">"time"</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token comment">// 一个基本的 switch。</span>
    i <span class="token operator">:=</span> <span class="token number">2</span>
    fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token string">"write "</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token string">" as "</span><span class="token punctuation">)</span>
    <span class="token keyword">switch</span> i <span class="token punctuation">&#123;</span>
    <span class="token keyword">case</span> <span class="token number">1</span><span class="token punctuation">:</span>
        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"one"</span><span class="token punctuation">)</span>
    <span class="token keyword">case</span> <span class="token number">2</span><span class="token punctuation">:</span>
        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"two"</span><span class="token punctuation">)</span>
    <span class="token keyword">case</span> <span class="token number">3</span><span class="token punctuation">:</span>
        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"three"</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>

	<span class="token comment">// 在一个 case 语句中，你可以使用逗号来分隔多个表达式。</span>
  <span class="token comment">// 在这个例子中，我们很好的使用了可选的 default 分支。</span>
    <span class="token keyword">switch</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Weekday</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">case</span> time<span class="token punctuation">.</span>Saturday<span class="token punctuation">,</span> time<span class="token punctuation">.</span>Sunday<span class="token punctuation">:</span>
        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"it's the weekend"</span><span class="token punctuation">)</span>
    <span class="token keyword">default</span><span class="token punctuation">:</span>
        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"it's a weekday"</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>

	<span class="token comment">// 不带表达式的 switch 是实现 if/else 逻辑的另一种方式。这里展示了 case 表达式是如何使用非常量的。</span>
    t <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">switch</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">case</span> t<span class="token punctuation">.</span><span class="token function">Hour</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">12</span><span class="token punctuation">:</span>
        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"it's before noon"</span><span class="token punctuation">)</span>
    <span class="token keyword">default</span><span class="token punctuation">:</span>
        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"it's after noon"</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>

<pre class="language-bash" data-language="bash"><code class="language-bash">$ go run switch.go 
<span class="token function">write</span> <span class="token number">2</span> as two
it<span class="token string">'s the weekend
it'</span>s before noon</code></pre>

<h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><p>在 Go 中，<strong>数组</strong> 是一个固定长度的数列。</p>
<pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">"fmt"</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token comment">// 这里我们创建了一个数组 a 来存放刚好 5 个 int。元素的类型和长度都是数组类型的一部分。数组默认是零值的，对于 int 数组来说也就是 0。</span>
    <span class="token keyword">var</span> a <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token builtin">int</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"emp:"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span>
    
	<span class="token comment">// 我们可以使用 array[index] = value 语法来设置数组指定位置的值，或者用 array[index] 得到值。</span>
    a<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">100</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"set:"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"get:"</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    
	<span class="token comment">// 使用内置函数 len 返回数组的长度</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"len:"</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span>
    
	<span class="token comment">// 使用这个语法在一行内初始化一个数组</span>
    <span class="token keyword">var</span> b <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">&#125;</span>
    <span class="token comment">// 上面语句可简写为 var b = [5]int&#123;1, 2, 3, 4, 5&#125;</span>
    <span class="token comment">// 进一步简写为 b := [5]int&#123;1, 2, 3, 4, 5&#125;</span>
    
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"dcl:"</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span>
    
	<span class="token comment">// 数组的存储类型是单一的，但是你可以组合这些数据来构造多维的数据结构。</span>
    <span class="token keyword">var</span> twoD <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">int</span>
    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">for</span> j <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> j<span class="token operator">++</span> <span class="token punctuation">&#123;</span>
            twoD<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> i <span class="token operator">+</span> j
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"2d: "</span><span class="token punctuation">,</span> twoD<span class="token punctuation">)</span> <span class="token comment">// 注意，在使用 fmt.Println 来打印数组的时候，会使用[v1 v2 v3 ...] 的格式显示</span>
<span class="token punctuation">&#125;</span></code></pre>

<pre class="language-bash" data-language="bash"><code class="language-bash">$ go run arrays.go
emp: <span class="token punctuation">[</span><span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span><span class="token punctuation">]</span>
set: <span class="token punctuation">[</span><span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">100</span><span class="token punctuation">]</span>
get: <span class="token number">100</span>
len: <span class="token number">5</span>
dcl: <span class="token punctuation">[</span><span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span> <span class="token number">4</span> <span class="token number">5</span><span class="token punctuation">]</span>
2d:  <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span> <span class="token number">1</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span></code></pre>
<p>在典型的 Go 程序中，相对于数组而言，<strong>slice</strong> 使用的更多。我们将在后面讨论 <strong>slice</strong>。</p>
<h1 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h1><p><strong>Slice</strong> 是 Go 中一个关键的数据类型，是一个比数组更加强大的序列接口。</p>
<pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">"fmt"</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 不像数组，slice 的类型仅由它所包含的元素决定（不像数组中还需要元素的个数）。</span>
    <span class="token comment">// 要创建一个长度非零的空slice，需要使用内建函数 make。</span>
    <span class="token comment">// 这里我们创建了一个长度为3的 string 类型 slice（初始化为零值）。</span>
    s <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"emp:"</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span> <span class="token comment">// emp: [  ]</span>

    <span class="token comment">// 我们可以和数组一样设置和得到值</span>
    s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"a"</span>
    s<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"b"</span>
    s<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"c"</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"set:"</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span>    <span class="token comment">// set: [a b c]</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"get:"</span><span class="token punctuation">,</span> s<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// get: c</span>

    <span class="token comment">// 如你所料，len 返回 slice 的长度</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"len:"</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// len: 3</span>

    <span class="token comment">// 作为基本操作的补充，slice 支持比数组更多的操作。其中一个是内建的 append，它返回一个包含了一个或者多个新值的 slice。注意我们接受返回由 append返回的新的 slice 值。</span>
    s <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token string">"d"</span><span class="token punctuation">)</span>
    s <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token string">"e"</span><span class="token punctuation">,</span> <span class="token string">"f"</span><span class="token punctuation">)</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"apd:"</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span> <span class="token comment">// apd: [a b c d e f]</span>

    <span class="token comment">// Slice 也可以被 copy。这里我们创建一个空的和 s 有相同长度的 slice c，并且将 s 复制给 c。</span>
    c <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token function">copy</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> s<span class="token punctuation">)</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"cpy:"</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span> <span class="token comment">// cpy: [a b c d e f]</span>

    <span class="token comment">// Slice 支持通过 slice[low:high] 语法进行“切片”操作。例如，这里得到一个包含元素 s[2], s[3],s[4] 的 slice。</span>
    l <span class="token operator">:=</span> s<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"sl1:"</span><span class="token punctuation">,</span> l<span class="token punctuation">)</span> <span class="token comment">// sl1: [c d e]</span>

    <span class="token comment">// 这个 slice 从 s[0] 到（但是包含）s[5]。</span>
    l <span class="token operator">=</span> s<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"sl2:"</span><span class="token punctuation">,</span> l<span class="token punctuation">)</span> <span class="token comment">// sl2: [a b c d e]</span>

    <span class="token comment">// 这个 slice 从（包含）s[2] 到 slice 的后一个值。</span>
    l <span class="token operator">=</span> s<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"sl3:"</span><span class="token punctuation">,</span> l<span class="token punctuation">)</span> <span class="token comment">// sl3: [c d e f]</span>

    <span class="token comment">// 我们可以在一行代码中声明并初始化一个 slice 变量。</span>
    <span class="token keyword">var</span> t <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">&#123;</span><span class="token string">"g"</span><span class="token punctuation">,</span> <span class="token string">"h"</span><span class="token punctuation">,</span> <span class="token string">"i"</span><span class="token punctuation">&#125;</span>
    <span class="token comment">// 上面语句可简写为 var t = []string &#123;"g", "h", "i"&#125;</span>
    <span class="token comment">// 进一步简写为 t := []string&#123;"g", "h", "i"&#125;</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"dcl:"</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span> <span class="token comment">// dcl: [g h i]</span>

    <span class="token comment">// Slice 可以组成多维数据结构。内部的 slice 长度可以不同，这和多位数组不同。</span>
    twoD <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>
        innerLen <span class="token operator">:=</span> i <span class="token operator">+</span> <span class="token number">1</span>
        twoD<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> innerLen<span class="token punctuation">)</span>
        <span class="token keyword">for</span> j <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> innerLen<span class="token punctuation">;</span> j<span class="token operator">++</span> <span class="token punctuation">&#123;</span>
            twoD<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> i <span class="token operator">+</span> j
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"2d: "</span><span class="token punctuation">,</span> twoD<span class="token punctuation">)</span> <span class="token comment">// 2d:  [[0] [1 2] [2 3 4]]</span>
    <span class="token comment">// 注意，slice 和数组不同，虽然它们通过 fmt.Println 输出差不多。</span>
<span class="token punctuation">&#125;</span></code></pre>

<pre class="language-bash" data-language="bash"><code class="language-bash">$ go run slices.go
emp: <span class="token punctuation">[</span>  <span class="token punctuation">]</span>
set: <span class="token punctuation">[</span>a b c<span class="token punctuation">]</span>
get: c
len: <span class="token number">3</span>
apd: <span class="token punctuation">[</span>a b c d e f<span class="token punctuation">]</span>
cpy: <span class="token punctuation">[</span>a b c d e f<span class="token punctuation">]</span>
sl1: <span class="token punctuation">[</span>c d e<span class="token punctuation">]</span>
sl2: <span class="token punctuation">[</span>a b c d e<span class="token punctuation">]</span>
sl3: <span class="token punctuation">[</span>c d e f<span class="token punctuation">]</span>
dcl: <span class="token punctuation">[</span>g h i<span class="token punctuation">]</span>
2d:  <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">1</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">2</span> <span class="token number">3</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span></code></pre>
<p>看看这个由 Go 团队撰写的一篇<a href="http://blog.golang.org/2011/01/go-slices-usage-and-internals.html">很棒的博文</a>，获得更多关于 Go 中 slice 的设计和实现细节。</p>
<pre class="language-go" data-language="go"><code class="language-go"><span class="token comment">// array 和 slice 的字面量声明的区别在于方括号[]中是否指定长度</span>
<span class="token keyword">var</span> a <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">string</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
<span class="token function">append</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">)</span> <span class="token comment">// 此时会报错：first argument to append must be a slice; have a (variable of type [3]string)</span></code></pre>

<h1 id="map"><a href="#map" class="headerlink" title="map"></a>map</h1><p>现在，我们已经看过了数组和 slice，接下来我们将看看 Go 中的另一个关键的内建数据类型：map。</p>
<p>map 是 Go 内置关联数据类型（在一些其他的语言中称为哈希 或者字典 ）。</p>
<pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">"fmt"</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 要创建一个空 map，需要使用内建函数make</span>
    <span class="token comment">// 其形式为：make(map[key-type]val-type).</span>
    m <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span>

    <span class="token comment">// 使用典型的 name[key] = val 语法来设置键值对。</span>
    m<span class="token punctuation">[</span><span class="token string">"k1"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">7</span>
    m<span class="token punctuation">[</span><span class="token string">"k2"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">13</span>

    <span class="token comment">// 使用例如 Println 来打印一个 map 将会输出所有的键值对。</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"map:"</span><span class="token punctuation">,</span> m<span class="token punctuation">)</span> <span class="token comment">// map: map[k1:7 k2:13]</span>
    <span class="token comment">// 注意一个 map 在使用 fmt.Println 打印的时候，是以 map[k:v k:v]的格式输出的。</span>

    <span class="token comment">// 使用 name[key] 来获取一个键的值</span>
    v1 <span class="token operator">:=</span> m<span class="token punctuation">[</span><span class="token string">"k1"</span><span class="token punctuation">]</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"v1: "</span><span class="token punctuation">,</span> v1<span class="token punctuation">)</span> <span class="token comment">// v1:  7</span>

    <span class="token comment">// 当对一个 map 调用内建的 len 时，返回的是键值对数目</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"len:"</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// len: 2</span>

    <span class="token comment">// 内建的 delete 可以从一个 map 中移除键值对</span>
    <span class="token function">delete</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> <span class="token string">"k2"</span><span class="token punctuation">)</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"map:"</span><span class="token punctuation">,</span> m<span class="token punctuation">)</span> <span class="token comment">// map: map[k1:7]</span>

    <span class="token comment">// 当从一个 map 中取值时，可选的第二返回值指示这个键是在这个 map 中。这可以用来消除键不存在和键有零值，像 0 或者 "" 而产生的歧义。</span>
    <span class="token comment">// _, prs := m["k2"]</span>
    k2<span class="token punctuation">,</span> prs <span class="token operator">:=</span> m<span class="token punctuation">[</span><span class="token string">"k2"</span><span class="token punctuation">]</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"prs:"</span><span class="token punctuation">,</span> prs<span class="token punctuation">)</span> <span class="token comment">// prs: false</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"k2:"</span><span class="token punctuation">,</span> k2<span class="token punctuation">)</span>   <span class="token comment">// k2: 0</span>

    k1<span class="token punctuation">,</span> prs <span class="token operator">:=</span> m<span class="token punctuation">[</span><span class="token string">"k1"</span><span class="token punctuation">]</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"prs:"</span><span class="token punctuation">,</span> prs<span class="token punctuation">)</span> <span class="token comment">// prs: true</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"k1:"</span><span class="token punctuation">,</span> k1<span class="token punctuation">)</span>   <span class="token comment">// k1: 7</span>

    <span class="token comment">// 你也可以通过这个语法在同一行申明和初始化一个新的map。</span>
    n <span class="token operator">:=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token string">"foo"</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"bar"</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">&#125;</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"map:"</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span> <span class="token comment">// map: map[bar:2 foo:1]</span>
<span class="token punctuation">&#125;</span></code></pre>

<pre class="language-bash" data-language="bash"><code class="language-bash">$ go run maps.go 
map: map<span class="token punctuation">[</span>k1:7 k2:13<span class="token punctuation">]</span>
v1:  <span class="token number">7</span>
len: <span class="token number">2</span>
map: map<span class="token punctuation">[</span>k1:7<span class="token punctuation">]</span>
prs: <span class="token boolean">false</span>
k2: <span class="token number">0</span>
prs: <span class="token boolean">true</span>
k1: <span class="token number">7</span>
map: map<span class="token punctuation">[</span>bar:2 foo:1<span class="token punctuation">]</span></code></pre>

<h1 id="range遍历"><a href="#range遍历" class="headerlink" title="range遍历"></a>range遍历</h1><p><code>range</code> 迭代各种各样的数据结构。让我们来看看如何在我们已经学过的数据结构上使用 <code>range</code> 吧。</p>
<pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">"fmt"</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token comment">// 这里我们使用 range 来统计一个 slice 的元素个数。数组也可以采用这种方法。</span>
	nums <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">&#125;</span>
	sum <span class="token operator">:=</span> <span class="token number">0</span>
	<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> num <span class="token operator">:=</span> <span class="token keyword">range</span> nums <span class="token punctuation">&#123;</span> <span class="token comment">// 这里我们不需要索引，所以使用 空值定义符_ 来忽略它。有时候我们实际上是需要这个索引的。</span>
		sum <span class="token operator">+=</span> num
	<span class="token punctuation">&#125;</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"sum:"</span><span class="token punctuation">,</span> sum<span class="token punctuation">)</span> <span class="token comment">// sum: 9</span>

	<span class="token comment">// range 在数组和 slice 中都同样提供每个项的索引和值。</span>
	<span class="token keyword">for</span> i<span class="token punctuation">,</span> num <span class="token operator">:=</span> <span class="token keyword">range</span> nums <span class="token punctuation">&#123;</span>
		<span class="token keyword">if</span> num <span class="token operator">==</span> <span class="token number">3</span> <span class="token punctuation">&#123;</span>
			fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"index:"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span> <span class="token comment">// index: 1</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token comment">// range 在 map 中迭代键值对。</span>
	kvs <span class="token operator">:=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">&#123;</span><span class="token string">"a"</span><span class="token punctuation">:</span> <span class="token string">"apple"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">:</span> <span class="token string">"banana"</span><span class="token punctuation">&#125;</span>
	<span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> kvs <span class="token punctuation">&#123;</span>
		fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%s -> %s\n"</span><span class="token punctuation">,</span> k<span class="token punctuation">,</span> v<span class="token punctuation">)</span>
		<span class="token comment">// a -> apple</span>
		<span class="token comment">// b -> banana</span>
	<span class="token punctuation">&#125;</span>

	<span class="token comment">// The first value is the starting byte index of the rune and the second the rune itself.</span>
	<span class="token keyword">for</span> i<span class="token punctuation">,</span> c <span class="token operator">:=</span> <span class="token keyword">range</span> <span class="token string">"go"</span> <span class="token punctuation">&#123;</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> c<span class="token punctuation">)</span>
		<span class="token comment">// 0 103</span>
		<span class="token comment">// 1 111</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">for</span> i<span class="token punctuation">,</span> r <span class="token operator">:=</span> <span class="token keyword">range</span> <span class="token string">"啊哈"</span> <span class="token punctuation">&#123;</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> r<span class="token punctuation">,</span> <span class="token function">string</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token comment">// 0 21834 啊</span>
		<span class="token comment">//3 21704 哈</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>

<pre class="language-bash" data-language="bash"><code class="language-bash">	
$ go run range.go 
sum: <span class="token number">9</span>
index: <span class="token number">1</span>
a -<span class="token operator">></span> apple
b -<span class="token operator">></span> banana
<span class="token number">0</span> <span class="token number">103</span>
<span class="token number">1</span> <span class="token number">111</span>
<span class="token number">0</span> <span class="token number">21834</span> 啊
<span class="token number">3</span> <span class="token number">21704</span> 哈</code></pre>

<h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">"fmt"</span>

<span class="token comment">// 这里是一个函数，接受两个 int 并返回它们的和，返回值为int类型</span>
<span class="token keyword">func</span> <span class="token function">plus</span><span class="token punctuation">(</span>a <span class="token builtin">int</span><span class="token punctuation">,</span> b <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">&#123;</span>
	<span class="token comment">// Go 需要明确的返回值，例如，它不会自动返回最后一个表达式的值</span>
    <span class="token keyword">return</span> a <span class="token operator">+</span> b
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token comment">// 正如你期望的那样，通过 name(args) 来调用一个函数，</span>
    res <span class="token operator">:=</span> <span class="token function">plus</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"1+2 ="</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span></code></pre>

<pre class="language-bash" data-language="bash"><code class="language-bash">$ go run functions.go
<span class="token number">1</span>+2 <span class="token operator">=</span> <span class="token number">3</span></code></pre>

<h2 id="返回多个值"><a href="#返回多个值" class="headerlink" title="返回多个值"></a>返回多个值</h2><p>Go 内建<em>多返回值</em> 支持。这个特性在 Go 语言中经常被用到，例如用来同时返回一个函数的结果和错误信息。</p>
<pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">"fmt"</span>

<span class="token comment">// (int, int) 在这个函数中标志着这个函数返回 2 个 int。</span>
<span class="token keyword">func</span> <span class="token function">vals</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">7</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token comment">// 这里我们通过多赋值 操作来使用这两个不同的返回值。</span>
    a<span class="token punctuation">,</span> b <span class="token operator">:=</span> <span class="token function">vals</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>

    <span class="token comment">// 如果你仅仅想返回值的一部分的话，你可以使用空白标识符 _。</span>
    <span class="token boolean">_</span><span class="token punctuation">,</span> c <span class="token operator">:=</span> <span class="token function">vals</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span></code></pre>

<pre class="language-bash" data-language="bash"><code class="language-bash">$ go run multiple-return-values.go
<span class="token number">3</span>
<span class="token number">7</span>
<span class="token number">7</span></code></pre>

<h2 id="可变参数函数"><a href="#可变参数函数" class="headerlink" title="可变参数函数"></a>可变参数函数</h2><p><a href="http://zh.wikipedia.org/wiki/%E5%8F%AF%E8%AE%8A%E5%8F%83%E6%95%B8%E5%87%BD%E6%95%B8"><em>可变参数函数</em></a>。可以用任意数量的参数调用。例如，<code>fmt.Println</code> 是一个常见的变参函数。</p>
<pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">"fmt"</span>

<span class="token comment">// 这个函数使用任意数目的 int 作为参数。</span>
<span class="token keyword">func</span> <span class="token function">sum</span><span class="token punctuation">(</span>nums <span class="token operator">...</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token string">" "</span><span class="token punctuation">)</span>
    total <span class="token operator">:=</span> <span class="token number">0</span>
    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> num <span class="token operator">:=</span> <span class="token keyword">range</span> nums <span class="token punctuation">&#123;</span>
        total <span class="token operator">+=</span> num
    <span class="token punctuation">&#125;</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>total<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token comment">// 变参函数使用常规的调用方式，除了参数比较特殊。</span>
    <span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>
    <span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>
    
	<span class="token comment">// 如果你的 slice 已经有了多个值，想把它们作为变参使用，你要这样调用 func(slice...)。</span>
    nums <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">&#125;</span>
    <span class="token function">sum</span><span class="token punctuation">(</span>nums<span class="token operator">...</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span></code></pre>

<pre class="language-bash" data-language="bash"><code class="language-bash">$ go run variadic-functions.go 
<span class="token punctuation">[</span><span class="token number">1</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token number">3</span>
<span class="token punctuation">[</span><span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token number">6</span>
<span class="token punctuation">[</span><span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span> <span class="token number">4</span><span class="token punctuation">]</span> <span class="token number">10</span></code></pre>

<h2 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h2><p>Go 支持 <a href="http://zh.wikipedia.org/wiki/%E5%8C%BF%E5%90%8D%E5%87%BD%E6%95%B0"><em>匿名函数</em></a>，可以形成 <a href="http://zh.wikipedia.org/wiki/%E9%97%AD%E5%8C%85_(%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6)"><em>闭包</em></a> 。当您想定义一个内联函数而不必命名时，匿名函数很有用。</p>
<pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">"fmt"</span>

<span class="token comment">// 这个 intSeq 函数返回另一个在 intSeq 函数体内定义的匿名函数。</span>
<span class="token comment">// 这个返回的匿名函数返回一个int类型；</span>
<span class="token comment">// 同时，这个返回的函数使用闭包的方式 隐藏 变量 i。</span>
<span class="token keyword">func</span> <span class="token function">intSeq</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">&#123;</span>
    i <span class="token operator">:=</span> <span class="token number">0</span>
    <span class="token keyword">return</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">&#123;</span>
        i <span class="token operator">+=</span> <span class="token number">1</span>
        <span class="token keyword">return</span> i
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token comment">//我们调用 intSeq 函数，将返回值（也是一个函数）赋给nextInt。</span>
    <span class="token comment">// 这个函数的值包含了自己的值 i，这样在每次调用 nextInt 时都会更新 i 的值。</span>
    nextInt <span class="token operator">:=</span> <span class="token function">intSeq</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    
	<span class="token comment">// 通过多次调用 nextInt 来看看闭包的效果。</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 1</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 2</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 3</span>

    <span class="token comment">// 为了确认这个状态对于这个特定的函数是唯一的，我们重新创建并测试一下。</span>
    newInts <span class="token operator">:=</span> <span class="token function">intSeq</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">newInts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 1</span>
<span class="token punctuation">&#125;</span></code></pre>

<pre class="language-bash" data-language="bash"><code class="language-bash">$ go run closures.go
<span class="token number">1</span>
<span class="token number">2</span>
<span class="token number">3</span>
<span class="token number">1</span></code></pre>

<h2 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h2><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">"fmt"</span>

<span class="token comment">// 这里是一个经典的阶乘示例。</span>
<span class="token keyword">func</span> <span class="token function">fact</span><span class="token punctuation">(</span>n <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> n <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span> <span class="token comment">// face 函数在到达 face(0) 前一直调用自身。</span>
        <span class="token keyword">return</span> <span class="token number">1</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> n <span class="token operator">*</span> <span class="token function">fact</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">fact</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span></code></pre>

<pre class="language-bash" data-language="bash"><code class="language-bash">$ go run recursion.go 
<span class="token number">5040</span></code></pre>

<h1 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h1><p>Go 支持 *<a href="http://zh.wikipedia.org/wiki/%E6%8C%87%E6%A8%99_(%E9%9B%BB%E8%85%A6%E7%A7%91%E5%AD%B8)">指针</a>*，允许在程序中通过引用传递值或者数据结构。</p>
<pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">"fmt"</span>

<span class="token comment">// 我们将通过两个函数：zeroval 和 zeroptr 来比较指针和值类型的不同。</span>

<span class="token comment">// zeroval 有一个 int 型参数，所以使用值传递。zeroval 将从调用它的那个函数中得到一个 ival形参的拷贝。</span>
<span class="token keyword">func</span> <span class="token function">zeroval</span><span class="token punctuation">(</span>ival <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    ival <span class="token operator">=</span> <span class="token number">0</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// zeroptr 有一个和上面不同的 *int 参数，意味着它用了一个 int指针。</span>
<span class="token comment">// 函数体内的 *iptr 接着解引用 这个指针，从它内存地址得到这个地址对应的当前值。</span>
<span class="token comment">// 对一个解引用的指针赋值将会改变这个指针引用的真实地址的值。</span>
<span class="token keyword">func</span> <span class="token function">zeroptr</span><span class="token punctuation">(</span>iptr <span class="token operator">*</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token operator">*</span>iptr <span class="token operator">=</span> <span class="token number">0</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    i <span class="token operator">:=</span> <span class="token number">1</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"initial:"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span> <span class="token comment">// 1</span>
    <span class="token function">zeroval</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"zeroval:"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span> <span class="token comment">// 1</span>
    
	<span class="token comment">// 通过 &amp;i 语法来取得 i 的内存地址，例如一个变量i 的指针。</span>
    <span class="token function">zeroptr</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>i<span class="token punctuation">)</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"zeroptr:"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span> <span class="token comment">// 0</span>

    <span class="token comment">// 指针也是可以被打印的。</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"pointer:"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>i<span class="token punctuation">)</span> <span class="token comment">// 0x42131100</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">// zeroval 在 main 函数中不能改变 i 的值，但是zeroptr 可以，因为它有一个这个变量的内存地址的引用。</span></code></pre>

<pre class="language-bash" data-language="bash"><code class="language-bash">$ go run pointers.go
initial: <span class="token number">1</span>
zeroval: <span class="token number">1</span>
zeroptr: <span class="token number">0</span>
pointer: 0x42131100</code></pre>



<h1 id="Strings-and-Runes"><a href="#Strings-and-Runes" class="headerlink" title="Strings and Runes"></a>Strings and Runes</h1><p>A Go string is a read-only slice of bytes. The language and the standard library treat strings specially - as containers of text encoded in <a href="https://en.wikipedia.org/wiki/UTF-8">UTF-8</a>. In other languages, strings are made of “characters”. In Go, the concept of a character is called a <code>rune</code> - it’s an integer that represents a Unicode code point. <a href="https://go.dev/blog/strings">This Go blog post</a> is a good introduction to the topic.</p>
<pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
    <span class="token string">"fmt"</span>
    <span class="token string">"unicode/utf8"</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

    <span class="token comment">// s is a string assigned a literal value representing the word “hello” in the Thai language. </span>
    <span class="token comment">// Go string literals are UTF-8 encoded text.</span>
    <span class="token keyword">const</span> s <span class="token operator">=</span> <span class="token string">"สวัสดี"</span>

    <span class="token comment">// Since strings are equivalent to []byte, this will produce the length of the raw bytes stored within.</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Len:"</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// Len: 18</span>

    <span class="token comment">// Indexing into a string produces the raw byte values at each index. </span>
    <span class="token comment">// This loop generates the hex values of all the bytes that constitute the code points in s.</span>
    <span class="token comment">// 对字符串进行索引会在每个索引处生成原始字节值。</span>
    <span class="token comment">// 此循环生成构成 s 中代码点的所有字节的十六进制值。</span>
    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>
        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%x "</span><span class="token punctuation">,</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// e0 b8 aa e0 b8 a7 e0 b8 b1 e0 b8 aa e0 b8 94 e0 b8 b5 </span>
    <span class="token punctuation">&#125;</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token comment">// To count how many runes are in a string, we can use the utf8 package. </span>
    <span class="token comment">// Note that the run-time of RuneCountInString dependes on the size of the string, because it has to decode each UTF-8 rune sequentially. </span>
    <span class="token comment">// Some Thai characters are represented by multiple UTF-8 code points, so the result of this count may be surprising.</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Rune count:"</span><span class="token punctuation">,</span> utf8<span class="token punctuation">.</span><span class="token function">RuneCountInString</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// Rune count: 6</span>

    <span class="token comment">// A range loop handles strings specially and decodes each rune along with its offset in the string.</span>
    <span class="token keyword">for</span> idx<span class="token punctuation">,</span> runeValue <span class="token operator">:=</span> <span class="token keyword">range</span> s <span class="token punctuation">&#123;</span>
        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%#U starts at %d\n"</span><span class="token punctuation">,</span> runeValue<span class="token punctuation">,</span> idx<span class="token punctuation">)</span>
        <span class="token comment">// U+0E2A 'ส' starts at 0</span>
	   <span class="token comment">// U+0E27 'ว' starts at 3</span>
	   <span class="token comment">// U+0E31 'ั' starts at 6</span>
       <span class="token comment">// U+0E2A 'ส' starts at 9</span>
       <span class="token comment">// U+0E14 'ด' starts at 12</span>
       <span class="token comment">// U+0E35 'ี' starts at 15</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">// We can achieve the same iteration by using the utf8.DecodeRuneInString function explicitly.</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"\nUsing DecodeRuneInString"</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span> i<span class="token punctuation">,</span> w <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">+=</span> w <span class="token punctuation">&#123;</span>
        runeValue<span class="token punctuation">,</span> width <span class="token operator">:=</span> utf8<span class="token punctuation">.</span><span class="token function">DecodeRuneInString</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%#U starts at %d\n"</span><span class="token punctuation">,</span> runeValue<span class="token punctuation">,</span> i<span class="token punctuation">)</span>
        w <span class="token operator">=</span> width

        <span class="token comment">// This demonstrates passing a rune value to a function.</span>
        <span class="token function">examineRune</span><span class="token punctuation">(</span>runeValue<span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">// Using DecodeRuneInString</span>
    <span class="token comment">// U+0E2A 'ส' starts at 0</span>
    <span class="token comment">// found so sua</span>
    <span class="token comment">// U+0E27 'ว' starts at 3</span>
    <span class="token comment">// U+0E31 'ั' starts at 6</span>
    <span class="token comment">// U+0E2A 'ส' starts at 9</span>
    <span class="token comment">// found so sua</span>
    <span class="token comment">// U+0E14 'ด' starts at 12</span>
    <span class="token comment">// U+0E35 'ี' starts at 15</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">examineRune</span><span class="token punctuation">(</span>r <span class="token builtin">rune</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

    <span class="token comment">// Values enclosed in single quotes are rune literals. </span>
    <span class="token comment">// We can compare a rune value to a rune literal directly.</span>
    <span class="token keyword">if</span> r <span class="token operator">==</span> <span class="token char">'t'</span> <span class="token punctuation">&#123;</span>
        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"found tee"</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> r <span class="token operator">==</span> <span class="token char">'ส'</span> <span class="token punctuation">&#123;</span>
        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"found so sua"</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>



<pre class="language-bash" data-language="bash"><code class="language-bash">$ go run strings-and-runes.go
Len: <span class="token number">18</span>
e0 b8 aa e0 b8 a7 e0 b8 b1 e0 b8 aa e0 b8 <span class="token number">94</span> e0 b8 b5 
Rune count: <span class="token number">6</span>
U+0E2A <span class="token string">'ส'</span> starts at <span class="token number">0</span>
U+0E27 <span class="token string">'ว'</span> starts at <span class="token number">3</span>
U+0E31 <span class="token string">'ั'</span> starts at <span class="token number">6</span>
U+0E2A <span class="token string">'ส'</span> starts at <span class="token number">9</span>
U+0E14 <span class="token string">'ด'</span> starts at <span class="token number">12</span>
U+0E35 <span class="token string">'ี'</span> starts at <span class="token number">15</span>

Using DecodeRuneInString
U+0E2A <span class="token string">'ส'</span> starts at <span class="token number">0</span>
found so sua
U+0E27 <span class="token string">'ว'</span> starts at <span class="token number">3</span>
U+0E31 <span class="token string">'ั'</span> starts at <span class="token number">6</span>
U+0E2A <span class="token string">'ส'</span> starts at <span class="token number">9</span>
found so sua
U+0E14 <span class="token string">'ด'</span> starts at <span class="token number">12</span>
U+0E35 <span class="token string">'ี'</span> starts at <span class="token number">15</span></code></pre>



<h1 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h1><p>Go 的<em>结构体(struct)</em> 是带类型的字段(fields)集合。 这在组织数据时非常有用。</p>
<pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">"fmt"</span>

<span class="token comment">// This person struct type has name and age fields.</span>
<span class="token keyword">type</span> person <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
    name <span class="token builtin">string</span>
    age  <span class="token builtin">int</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// newPerson constructs a new person struct with the given name.</span>
<span class="token keyword">func</span> <span class="token function">newPerson</span><span class="token punctuation">(</span>name <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">*</span>person <span class="token punctuation">&#123;</span>

    <span class="token comment">// You can safely return a pointer to local variable as a local variable will survive the scope of the function.</span>
    p <span class="token operator">:=</span> person<span class="token punctuation">&#123;</span>name<span class="token punctuation">:</span> name<span class="token punctuation">&#125;</span>
    p<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">42</span>
    <span class="token keyword">return</span> <span class="token operator">&amp;</span>p
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

    <span class="token comment">// This syntax creates a new struct.</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>person<span class="token punctuation">&#123;</span><span class="token string">"Bob"</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token comment">// &#123;Bob 20&#125;</span>

    <span class="token comment">// You can name the fields when initializing a struct.</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>person<span class="token punctuation">&#123;</span>name<span class="token punctuation">:</span> <span class="token string">"Alice"</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">30</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token comment">// &#123;Alice 30&#125;</span>

    <span class="token comment">// Omitted fields will be zero-valued.</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>person<span class="token punctuation">&#123;</span>name<span class="token punctuation">:</span> <span class="token string">"Fred"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token comment">// &#123;Fred 0&#125;</span>

    <span class="token comment">// An &amp; prefix yields a pointer to the struct.</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>person<span class="token punctuation">&#123;</span>name<span class="token punctuation">:</span> <span class="token string">"Ann"</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">40</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token comment">// &amp;&#123;Ann 40&#125;</span>

    <span class="token comment">// It’s idiomatic to encapsulate new struct creation in constructor functions</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">newPerson</span><span class="token punctuation">(</span><span class="token string">"Jon"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// &amp;&#123;Jon 42&#125;</span>

    s <span class="token operator">:=</span> person<span class="token punctuation">&#123;</span>name<span class="token punctuation">:</span> <span class="token string">"Sean"</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">50</span><span class="token punctuation">&#125;</span>
    <span class="token comment">// Access struct fields with a dot.</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment">// Sean</span>

    <span class="token comment">// You can also use dots with struct pointers - the pointers are automatically dereferenced.</span>
    sp <span class="token operator">:=</span> <span class="token operator">&amp;</span>s
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>sp<span class="token punctuation">.</span>age<span class="token punctuation">)</span> <span class="token comment">// 50</span>

    <span class="token comment">// Structs are mutable.</span>
    sp<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">51</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>sp<span class="token punctuation">.</span>age<span class="token punctuation">)</span> <span class="token comment">// 51</span>
<span class="token punctuation">&#125;</span></code></pre>


<pre class="language-bash" data-language="bash"><code class="language-bash">$ go run structs.go
<span class="token punctuation">&#123;</span>Bob <span class="token number">20</span><span class="token punctuation">&#125;</span>
<span class="token punctuation">&#123;</span>Alice <span class="token number">30</span><span class="token punctuation">&#125;</span>
<span class="token punctuation">&#123;</span>Fred <span class="token number">0</span><span class="token punctuation">&#125;</span>
<span class="token operator">&amp;</span><span class="token punctuation">&#123;</span>Ann <span class="token number">40</span><span class="token punctuation">&#125;</span>
<span class="token operator">&amp;</span><span class="token punctuation">&#123;</span>Jon <span class="token number">42</span><span class="token punctuation">&#125;</span>
Sean
<span class="token number">50</span>
<span class="token number">51</span></code></pre>

<p>结构体中可以包含函数类型的字段：</p>
<pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">"fmt"</span>

<span class="token keyword">type</span> person <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
	name <span class="token builtin">string</span>
	age  <span class="token builtin">int</span>
	say  <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 结构体中可以包含函数类型的字段</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">newPerson</span><span class="token punctuation">(</span>name <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">*</span>person <span class="token punctuation">&#123;</span>

	p <span class="token operator">:=</span> person<span class="token punctuation">&#123;</span>name<span class="token punctuation">:</span> name<span class="token punctuation">&#125;</span>
	p<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">42</span>
	p<span class="token punctuation">.</span>say <span class="token operator">=</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"yoyo"</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span>
	<span class="token keyword">return</span> <span class="token operator">&amp;</span>p
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	p <span class="token operator">:=</span> person<span class="token punctuation">&#123;</span>name<span class="token punctuation">:</span> <span class="token string">"Peter"</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">12</span><span class="token punctuation">,</span> say<span class="token punctuation">:</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"haha"</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token comment">// &#123;Peter 12 0xede5c0&#125;</span>
	p<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment">// haha</span>

	p1 <span class="token operator">:=</span> <span class="token function">newPerson</span><span class="token punctuation">(</span><span class="token string">"Neo"</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span> <span class="token comment">// &amp;&#123;Neo 42 0xaae480&#125;</span>
	p1<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment">// yoyo</span>

<span class="token punctuation">&#125;</span></code></pre>

<pre class="language-bash" data-language="bash"><code class="language-bash">$ go run demo.go
<span class="token punctuation">&#123;</span>Peter <span class="token number">12</span> 0xede5c0<span class="token punctuation">&#125;</span>
haha
<span class="token operator">&amp;</span><span class="token punctuation">&#123;</span>Neo <span class="token number">42</span> 0xaae480<span class="token punctuation">&#125;</span>
yoyo</code></pre>



<h1 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h1><p>Go 支持为结构体类型定义 <em><strong>方法</strong> (methods)</em>  。</p>
<pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">"fmt"</span>

<span class="token keyword">type</span> rect <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
    width<span class="token punctuation">,</span> height <span class="token builtin">int</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// area 是一个方法，该方法拥有一个 *rect 类型（rect类型的指针）的接收器(receiver)。</span>
<span class="token comment">// You may want to use a pointer receiver type to avoid copying on method calls or to allow the method to mutate the receiving struct.</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>r <span class="token operator">*</span>rect<span class="token punctuation">)</span> <span class="token function">area</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> r<span class="token punctuation">.</span>width <span class="token operator">*</span> r<span class="token punctuation">.</span>height
<span class="token punctuation">&#125;</span>

<span class="token comment">// 方法的接收器(receiver)类型可以被定义为值类型或者指针类型。</span>
<span class="token comment">// 这是一个值类型接收器的例子。</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>r rect<span class="token punctuation">)</span> <span class="token function">perim</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token number">2</span><span class="token operator">*</span>r<span class="token punctuation">.</span>width <span class="token operator">+</span> <span class="token number">2</span><span class="token operator">*</span>r<span class="token punctuation">.</span>height
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    r <span class="token operator">:=</span> rect<span class="token punctuation">&#123;</span>width<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span> height<span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">&#125;</span>
    
	<span class="token comment">// 这里我们调用上面为结构体定义的两个方法。</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"area: "</span><span class="token punctuation">,</span> r<span class="token punctuation">.</span><span class="token function">area</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// area:  50</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"perim:"</span><span class="token punctuation">,</span> r<span class="token punctuation">.</span><span class="token function">perim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// perim: 30</span>

    <span class="token comment">// Go automatically handles conversion between values and pointers for method calls.</span>
    rp <span class="token operator">:=</span> <span class="token operator">&amp;</span>r
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"area: "</span><span class="token punctuation">,</span> rp<span class="token punctuation">.</span><span class="token function">area</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// area:  50</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"perim:"</span><span class="token punctuation">,</span> rp<span class="token punctuation">.</span><span class="token function">perim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// perim: 30</span>
    
    <span class="token comment">// 与上面等价，注意，需要在取地址符外加上括号</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"(&amp;r).area(): "</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">&amp;</span>r<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">area</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// (&amp;r).area():  50</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"(&amp;r).perim():"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">&amp;</span>r<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">perim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// (&amp;r).perim(): 30</span>
<span class="token punctuation">&#125;</span></code></pre>

<pre class="language-bash" data-language="bash"><code class="language-bash">$ go run methods.go
area:  <span class="token number">50</span>
perim: <span class="token number">30</span>
area:  <span class="token number">50</span>
perim: <span class="token number">30</span>
<span class="token punctuation">(</span><span class="token operator">&amp;</span>r<span class="token punctuation">)</span>.area<span class="token punctuation">(</span><span class="token punctuation">)</span>:  <span class="token number">50</span>
<span class="token punctuation">(</span><span class="token operator">&amp;</span>r<span class="token punctuation">)</span>.perim<span class="token punctuation">(</span><span class="token punctuation">)</span>: <span class="token number">30</span></code></pre>

<p>使用接收器类型为指针的方法，既可以避免方法调用时的值拷贝，也允许方法修改接收到的结构体中的字段。</p>
<pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">"fmt"</span>

<span class="token keyword">type</span> person <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
	name <span class="token builtin">string</span>
	age  <span class="token builtin">int</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>p person<span class="token punctuation">)</span> <span class="token function">SayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"my name is"</span><span class="token punctuation">,</span> p<span class="token punctuation">.</span>name<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>p person<span class="token punctuation">)</span> <span class="token function">ChangeName</span><span class="token punctuation">(</span><span class="token builtin">new</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	p<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token builtin">new</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>p <span class="token operator">*</span>person<span class="token punctuation">)</span> <span class="token function">ChangeNameInPlace</span><span class="token punctuation">(</span><span class="token builtin">new</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	p<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token builtin">new</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	p <span class="token operator">:=</span> person<span class="token punctuation">&#123;</span>name<span class="token punctuation">:</span> <span class="token string">"Peter"</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">12</span><span class="token punctuation">&#125;</span>
	pp <span class="token operator">:=</span> <span class="token operator">&amp;</span>p

	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span>  <span class="token comment">// &#123;Peter 12&#125;</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>pp<span class="token punctuation">)</span> <span class="token comment">// &amp;&#123;Peter 12&#125;</span>

	<span class="token comment">// 在调用方法时，Go会自动处理值和指针的转换；</span>
	<span class="token comment">// 你可以直接使用结构体的值来调用方法，也可以使用结构体的指针来调用方法；</span>
	p<span class="token punctuation">.</span><span class="token function">SayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// my name is Peter</span>
	pp<span class="token punctuation">.</span><span class="token function">SayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// my name is Peter</span>

	<span class="token comment">// 不管是使用值调用方法还是使用结构体指针调用方法，都无法直接修改结构体中的字段；</span>
	p<span class="token punctuation">.</span><span class="token function">ChangeName</span><span class="token punctuation">(</span><span class="token string">"Guy"</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment">// Peter</span>
	pp<span class="token punctuation">.</span><span class="token function">ChangeName</span><span class="token punctuation">(</span><span class="token string">"Goodman"</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment">// Peter</span>

	<span class="token comment">// 只有在方法的接收器类型是指针时，方法才能修改接收到的结构体的字段。</span>
	p<span class="token punctuation">.</span><span class="token function">ChangeNameInPlace</span><span class="token punctuation">(</span><span class="token string">"Guy"</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment">// Guy</span>
	pp<span class="token punctuation">.</span><span class="token function">ChangeNameInPlace</span><span class="token punctuation">(</span><span class="token string">"Goodman"</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment">// Goodman</span>
<span class="token punctuation">&#125;</span></code></pre>

<pre class="language-bash" data-language="bash"><code class="language-bash">$ go run .<span class="token punctuation">\</span>demo1.go
<span class="token punctuation">&#123;</span>Peter <span class="token number">12</span><span class="token punctuation">&#125;</span>
<span class="token operator">&amp;</span><span class="token punctuation">&#123;</span>Peter <span class="token number">12</span><span class="token punctuation">&#125;</span>
my name is Peter
my name is Peter
Peter
Peter
Guy
Goodman</code></pre>



<h1 id="接口-Interfaces"><a href="#接口-Interfaces" class="headerlink" title="接口 (Interfaces)"></a>接口 (Interfaces)</h1><p>方法签名的集合叫做 *<strong>接口</strong> (Interfaces)*。</p>
<pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
    <span class="token string">"fmt"</span>
    <span class="token string">"math"</span>
<span class="token punctuation">)</span>

<span class="token comment">// 这是一个几何形状的基本接口。</span>
<span class="token keyword">type</span> geometry <span class="token keyword">interface</span> <span class="token punctuation">&#123;</span>
    <span class="token function">area</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">float64</span>
    <span class="token function">perim</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">float64</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// 在这个例子中，我们将为 rect 和 circle 实现该接口。</span>
<span class="token keyword">type</span> rect <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
    width<span class="token punctuation">,</span> height <span class="token builtin">float64</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">type</span> circle <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
    radius <span class="token builtin">float64</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// 要在 Go 中实现一个接口，我们只需要实现接口中的所有方法。</span>
<span class="token comment">// 为 rect 实现 geometry 接口。</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>r rect<span class="token punctuation">)</span> <span class="token function">area</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">float64</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> r<span class="token punctuation">.</span>width <span class="token operator">*</span> r<span class="token punctuation">.</span>height
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>r rect<span class="token punctuation">)</span> <span class="token function">perim</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">float64</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token number">2</span><span class="token operator">*</span>r<span class="token punctuation">.</span>width <span class="token operator">+</span> <span class="token number">2</span><span class="token operator">*</span>r<span class="token punctuation">.</span>height
<span class="token punctuation">&#125;</span>

<span class="token comment">// 为 circle 实现 geometry 接口。</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>c circle<span class="token punctuation">)</span> <span class="token function">area</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">float64</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> math<span class="token punctuation">.</span>Pi <span class="token operator">*</span> c<span class="token punctuation">.</span>radius <span class="token operator">*</span> c<span class="token punctuation">.</span>radius
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>c circle<span class="token punctuation">)</span> <span class="token function">perim</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">float64</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token number">2</span> <span class="token operator">*</span> math<span class="token punctuation">.</span>Pi <span class="token operator">*</span> c<span class="token punctuation">.</span>radius
<span class="token punctuation">&#125;</span>

<span class="token comment">// 如果一个变量实现了某个接口，我们就可以调用指定接口中的方法。 </span>
<span class="token comment">// 这有一个通用的 measure 函数，我们可以通过它来使用所有的 geometry。</span>
<span class="token keyword">func</span> <span class="token function">measure</span><span class="token punctuation">(</span>g geometry<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"g :"</span><span class="token punctuation">,</span> g<span class="token punctuation">)</span> 
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"g.area() :"</span><span class="token punctuation">,</span> g<span class="token punctuation">.</span><span class="token function">area</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"g.perim() :"</span><span class="token punctuation">,</span> g<span class="token punctuation">.</span><span class="token function">perim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    r <span class="token operator">:=</span> rect<span class="token punctuation">&#123;</span>width<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> height<span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">&#125;</span>
    c <span class="token operator">:=</span> circle<span class="token punctuation">&#123;</span>radius<span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">&#125;</span>

    <span class="token comment">// 结构体类型 circle 和 rect 都实现了 geometry 接口， 所以我们可以将其实例作为 measure 的参数。</span>
    <span class="token function">measure</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span>
    <span class="token function">measure</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span></code></pre>

<pre class="language-bash" data-language="bash"><code class="language-bash">$ go run interfaces.go
g <span class="token builtin class-name">:</span> <span class="token punctuation">&#123;</span><span class="token number">3</span> <span class="token number">4</span><span class="token punctuation">&#125;</span>
g.area<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin class-name">:</span> <span class="token number">12</span>                
g.perim<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin class-name">:</span> <span class="token number">14</span>               
g <span class="token builtin class-name">:</span> <span class="token punctuation">&#123;</span><span class="token number">5</span><span class="token punctuation">&#125;</span>                      
g.area<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin class-name">:</span> <span class="token number">78.53981633974483</span> 
g.perim<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin class-name">:</span> <span class="token number">31.41592653589793</span></code></pre>

<pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">"fmt"</span>

<span class="token keyword">type</span> person <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
	name <span class="token builtin">string</span>
	age  <span class="token builtin">int</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">type</span> dog <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
	name <span class="token builtin">string</span>
	age  <span class="token builtin">int</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// 定义animal接口</span>
<span class="token keyword">type</span> animal <span class="token keyword">interface</span> <span class="token punctuation">&#123;</span>
	<span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// person类型实现animal接口</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>p person<span class="token punctuation">)</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%s eat KFC.\n"</span><span class="token punctuation">,</span> p<span class="token punctuation">.</span>name<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>p person<span class="token punctuation">)</span> <span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"my name is %s.\n"</span><span class="token punctuation">,</span> p<span class="token punctuation">.</span>name<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// dog类型实现animal接口</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>d dog<span class="token punctuation">)</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"dog eat meat."</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>d dog<span class="token punctuation">)</span> <span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Woof woof~"</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// call函数接受一个animal接口</span>
<span class="token keyword">func</span> <span class="token function">call</span><span class="token punctuation">(</span>a animal<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	a<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	a<span class="token punctuation">.</span><span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	p <span class="token operator">:=</span> person<span class="token punctuation">&#123;</span>name<span class="token punctuation">:</span> <span class="token string">"Peter"</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">12</span><span class="token punctuation">&#125;</span>
	d <span class="token operator">:=</span> dog<span class="token punctuation">&#123;</span>name<span class="token punctuation">:</span> <span class="token string">"Dog"</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">&#125;</span>

	<span class="token function">call</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span>
	<span class="token function">call</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span></code></pre>

<pre class="language-bash" data-language="bash"><code class="language-bash">Peter eat KFC.
my name is Peter.
dog eat meat.
Woof woof~</code></pre>



<h1 id="Struct-Embedding"><a href="#Struct-Embedding" class="headerlink" title="Struct Embedding"></a>Struct Embedding</h1><p>Go supports <em>embedding</em> of structs and interfaces to express a more seamless <em>composition</em> of types. This is not to be confused with <code>//go:embed</code> which is a go directive introduced in Go version 1.16+ to embed files and folders into the application binary.</p>
<pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">"fmt"</span>

<span class="token comment">// 定义一个 base 结构体</span>
<span class="token keyword">type</span> base <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
    num <span class="token builtin">int</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// 定义一个base类型的方法</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>b base<span class="token punctuation">)</span> <span class="token function">describe</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"base with num=%v"</span><span class="token punctuation">,</span> b<span class="token punctuation">.</span>num<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// 定义一个 container 结构体，在 container 中嵌入 base。</span>
<span class="token keyword">type</span> container <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
    base <span class="token comment">// “嵌入”看起来像是没有名称的字段</span>
    str <span class="token builtin">string</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// When creating structs with literals, we have to initialize the embedding explicitly; here the embedded type serves as the field name.</span>
    <span class="token comment">// 当使用字面量创建结构体时，必须显式地初始化“嵌入”。</span>
    co <span class="token operator">:=</span> container<span class="token punctuation">&#123;</span>
        base<span class="token punctuation">:</span> base<span class="token punctuation">&#123;</span> <span class="token comment">// 这里为被嵌入的类型提供一个字段名 base。</span>
            num<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
        str<span class="token punctuation">:</span> <span class="token string">"some name"</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span>
    
	<span class="token comment">// We can access the base’s fields directly on co, e.g. co.num.</span>
    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"co=&#123;num: %v, str: %v&#125;\n"</span><span class="token punctuation">,</span> co<span class="token punctuation">.</span>num<span class="token punctuation">,</span> co<span class="token punctuation">.</span>str<span class="token punctuation">)</span> <span class="token comment">// co=&#123;num: 1, str: some name&#125;</span>

    <span class="token comment">// Alternatively, we can spell out the full path using the embedded type name.</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"co.base.num: "</span><span class="token punctuation">,</span> co<span class="token punctuation">.</span>base<span class="token punctuation">.</span>num<span class="token punctuation">)</span> <span class="token comment">// co.base.num:  1</span>
    
	<span class="token comment">// Since container embeds base, the methods of base also become methods of a container. Here we invoke a method that was embedded from base directly on co.</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"co.describe(): "</span><span class="token punctuation">,</span> co<span class="token punctuation">.</span><span class="token function">describe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// co.describe():  base with num=1  </span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"co.base.describe(): "</span><span class="token punctuation">,</span> co<span class="token punctuation">.</span>base<span class="token punctuation">.</span><span class="token function">describe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// co.base.describe():  base with num=1</span>
    
    <span class="token keyword">type</span> describer <span class="token keyword">interface</span> <span class="token punctuation">&#123;</span>
        <span class="token function">describe</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span>
    <span class="token punctuation">&#125;</span>
    
	<span class="token comment">// Embedding structs with methods may be used to bestow interface implementations onto other structs. Here we see that a container now implements the describer interface because it embeds base.</span>
    <span class="token comment">// 使用方法嵌入结构体可用于将接口实现赋予其他结构体。</span>
    <span class="token comment">// 因为 container 嵌入了 base, 所以 container 也就实现了 describer 接口</span>
    <span class="token keyword">var</span> d describer <span class="token operator">=</span> co
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"d.describe(): "</span><span class="token punctuation">,</span> d<span class="token punctuation">.</span><span class="token function">describe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// d.describe():  base with num=1</span>
<span class="token punctuation">&#125;</span></code></pre>

<pre class="language-bash" data-language="bash"><code class="language-bash">$ go run embedding.go
<span class="token assign-left variable">co</span><span class="token operator">=</span><span class="token punctuation">&#123;</span>num: <span class="token number">1</span>, str: some name<span class="token punctuation">&#125;</span>
co.base.num:  <span class="token number">1</span>
co.describe<span class="token punctuation">(</span><span class="token punctuation">)</span>:  base with <span class="token assign-left variable">num</span><span class="token operator">=</span><span class="token number">1</span>
co.base.describe<span class="token punctuation">(</span><span class="token punctuation">)</span>:  base with <span class="token assign-left variable">num</span><span class="token operator">=</span><span class="token number">1</span>
d.describe<span class="token punctuation">(</span><span class="token punctuation">)</span>:  base with <span class="token assign-left variable">num</span><span class="token operator">=</span><span class="token number">1</span></code></pre>

<h1 id="Generics"><a href="#Generics" class="headerlink" title="Generics"></a>Generics</h1><p>Starting with version 1.18, Go has added support for <em>generics</em>, also known as <em>type parameters</em>.</p>
<p>As an example of a generic function, <code>MapKeys</code> takes a map of any type and returns a slice of its keys. This function has two type parameters - <code>K</code> and <code>V</code>; <code>K</code> has the <code>comparable</code> <em>constraint</em>, meaning that we can compare values of this type with the <code>==</code> and <code>!=</code> operators. This is required for map keys in Go. <code>V</code> has the <code>any</code> constraint, meaning that it’s not restricted in any way (<code>any</code> is an alias for <code>interface&#123;&#125;</code>).</p>
<pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">"fmt"</span>

<span class="token keyword">func</span> MapKeys<span class="token punctuation">[</span>K comparable<span class="token punctuation">,</span> V any<span class="token punctuation">]</span><span class="token punctuation">(</span>m <span class="token keyword">map</span><span class="token punctuation">[</span>K<span class="token punctuation">]</span>V<span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>K <span class="token punctuation">&#123;</span>
    r <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span>K<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span> k <span class="token operator">:=</span> <span class="token keyword">range</span> m <span class="token punctuation">&#123;</span>
        r <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> k<span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> r
<span class="token punctuation">&#125;</span>

<span class="token comment">// As an example of a generic type, List is a singly-linked list with values of any type.</span>
<span class="token keyword">type</span> List<span class="token punctuation">[</span>T any<span class="token punctuation">]</span> <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
    head<span class="token punctuation">,</span> tail <span class="token operator">*</span>element<span class="token punctuation">[</span>T<span class="token punctuation">]</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">type</span> element<span class="token punctuation">[</span>T any<span class="token punctuation">]</span> <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
    next <span class="token operator">*</span>element<span class="token punctuation">[</span>T<span class="token punctuation">]</span>
    val  T
<span class="token punctuation">&#125;</span>

<span class="token comment">// We can define methods on generic types just like we do on regular types, but we have to keep the type parameters in place. </span>
<span class="token comment">// The type is List[T], not List.</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>lst <span class="token operator">*</span>List<span class="token punctuation">[</span>T<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token function">Push</span><span class="token punctuation">(</span>v T<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> lst<span class="token punctuation">.</span>tail <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
        lst<span class="token punctuation">.</span>head <span class="token operator">=</span> <span class="token operator">&amp;</span>element<span class="token punctuation">[</span>T<span class="token punctuation">]</span><span class="token punctuation">&#123;</span>val<span class="token punctuation">:</span> v<span class="token punctuation">&#125;</span>
        lst<span class="token punctuation">.</span>tail <span class="token operator">=</span> lst<span class="token punctuation">.</span>head
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
        lst<span class="token punctuation">.</span>tail<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token operator">&amp;</span>element<span class="token punctuation">[</span>T<span class="token punctuation">]</span><span class="token punctuation">&#123;</span>val<span class="token punctuation">:</span> v<span class="token punctuation">&#125;</span>
        lst<span class="token punctuation">.</span>tail <span class="token operator">=</span> lst<span class="token punctuation">.</span>tail<span class="token punctuation">.</span>next
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>lst <span class="token operator">*</span>List<span class="token punctuation">[</span>T<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token function">GetAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>T <span class="token punctuation">&#123;</span>
    <span class="token keyword">var</span> elems <span class="token punctuation">[</span><span class="token punctuation">]</span>T
    <span class="token keyword">for</span> e <span class="token operator">:=</span> lst<span class="token punctuation">.</span>head<span class="token punctuation">;</span> e <span class="token operator">!=</span> <span class="token boolean">nil</span><span class="token punctuation">;</span> e <span class="token operator">=</span> e<span class="token punctuation">.</span>next <span class="token punctuation">&#123;</span>
        elems <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>elems<span class="token punctuation">,</span> e<span class="token punctuation">.</span>val<span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> elems
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">var</span> m <span class="token operator">=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">:</span> <span class="token string">"2"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">:</span> <span class="token string">"4"</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">:</span> <span class="token string">"8"</span><span class="token punctuation">&#125;</span>

    <span class="token comment">// When invoking generic functions, we can often rely on type inference. </span>
    <span class="token comment">// Note that we don’t have to specify the types for K and V when calling MapKeys - the compiler infers them automatically.</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"keys m:"</span><span class="token punctuation">,</span> <span class="token function">MapKeys</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">)</span>

    <span class="token comment">// though we could also specify them explicitly.</span>
    <span class="token boolean">_</span> <span class="token operator">=</span> MapKeys<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span>

    lst <span class="token operator">:=</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
    lst<span class="token punctuation">.</span><span class="token function">Push</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>
    lst<span class="token punctuation">.</span><span class="token function">Push</span><span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">)</span>
    lst<span class="token punctuation">.</span><span class="token function">Push</span><span class="token punctuation">(</span><span class="token number">23</span><span class="token punctuation">)</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"list:"</span><span class="token punctuation">,</span> lst<span class="token punctuation">.</span><span class="token function">GetAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span></code></pre>

<pre class="language-bash" data-language="bash"><code class="language-bash">keys: <span class="token punctuation">[</span><span class="token number">4</span> <span class="token number">1</span> <span class="token number">2</span><span class="token punctuation">]</span>
list: <span class="token punctuation">[</span><span class="token number">10</span> <span class="token number">13</span> <span class="token number">23</span><span class="token punctuation">]</span></code></pre>

<h1 id="错误"><a href="#错误" class="headerlink" title="错误"></a>错误</h1><p>In Go it’s idiomatic to communicate errors via an explicit, separate return value. This contrasts with the exceptions used in languages like Java and Ruby and the overloaded single result &#x2F; error value sometimes used in C. Go’s approach makes it easy to see which functions return errors and to handle them using the same language constructs employed for any other, non-error tasks.</p>
<p>符合 Go 语言习惯的做法是使用一个独立、明确的返回值来传递错误信息。 这与 Java、Ruby 使用的异常（exception） 以及在 C 语言中有时用到的重载 (overloaded) 的单返回&#x2F;错误值有着明显的不同。 Go 语言的处理方式能清楚的知道哪个函数返回了错误，并使用跟其他（无异常处理的）语言类似的方式来处理错误。</p>
<pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
    <span class="token string">"errors"</span>
    <span class="token string">"fmt"</span>
<span class="token punctuation">)</span>

<span class="token comment">// 按照惯例，错误通常是最后一个返回值并且是 error 类型，它是一个内建的接口。</span>
<span class="token keyword">func</span> <span class="token function">f1</span><span class="token punctuation">(</span>arg <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> arg <span class="token operator">==</span> <span class="token number">42</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// errors.New 使用给定的错误信息构造一个基本的 error 值。</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">"can't work with 42"</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
    
	<span class="token comment">// A nil value in the error position indicates that there was no error.</span>
    <span class="token comment">// 返回的错误值为 nil 代表没有错误。</span>
    <span class="token keyword">return</span> arg <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token boolean">nil</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// It’s possible to use custom types as errors by implementing the Error() method on them. Here’s a variant on the example above that uses a custom type to explicitly represent an argument error.</span>
<span class="token comment">// 你还可以通过实现 Error() 方法来自定义 error 类型。 </span>
<span class="token comment">// 这里是上面示例的一个变体，使用自定义错误类型来表示参数错误。</span>
<span class="token keyword">type</span> argError <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
    arg  <span class="token builtin">int</span>
    prob <span class="token builtin">string</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>e <span class="token operator">*</span>argError<span class="token punctuation">)</span> <span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"%d - %s"</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span>arg<span class="token punctuation">,</span> e<span class="token punctuation">.</span>prob<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">f2</span><span class="token punctuation">(</span>arg <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> arg <span class="token operator">==</span> <span class="token number">42</span> <span class="token punctuation">&#123;</span>
		<span class="token comment">// In this case we use &amp;argError syntax to build a new struct, supplying values for the two fields arg and prob.</span>
        <span class="token comment">// 在这个例子中，我们使用 &amp;argError 语法来建立一个新的结构体， 并提供了 arg 和 prob 两个字段的值。</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>argError<span class="token punctuation">&#123;</span>arg<span class="token punctuation">,</span> <span class="token string">"can't work with it"</span><span class="token punctuation">&#125;</span> 
        <span class="token comment">// return -1, &amp;(argError&#123;arg, "can't work with it"&#125;)</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> arg <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token boolean">nil</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token comment">// The two loops below test out each of our error-returning functions.</span>
    <span class="token comment">// 下面的两个循环测试了我们的每个错误返回函数</span>
    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> i <span class="token operator">:=</span> <span class="token keyword">range</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">&#125;</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// Note that the use of an inline error check on the if line is a common idiom in Go code.</span>
        <span class="token keyword">if</span> r<span class="token punctuation">,</span> e <span class="token operator">:=</span> <span class="token function">f1</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> e <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 请注意，在 if 行上使用内联错误检查是 Go 代码中的常见习惯用法。</span>
            fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"f1 failed:"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
            fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"f1 worked:"</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> i <span class="token operator">:=</span> <span class="token keyword">range</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">&#125;</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> r<span class="token punctuation">,</span> e <span class="token operator">:=</span> <span class="token function">f2</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> e <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
            fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"f2 failed:"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
            fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"f2 worked:"</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    
	<span class="token comment">// If you want to programmatically use the data in a custom error, you’ll need to get the error as an instance of the custom error type via type assertion.</span>
    <span class="token comment">// 如果你想在程序中使用自定义错误类型的数据， 你需要通过类型断言来得到这个自定义错误类型的实例。</span>
    <span class="token boolean">_</span><span class="token punctuation">,</span> e <span class="token operator">:=</span> <span class="token function">f2</span><span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> ae<span class="token punctuation">,</span> ok <span class="token operator">:=</span> e<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token operator">*</span>argError<span class="token punctuation">)</span><span class="token punctuation">;</span> ok <span class="token punctuation">&#123;</span>
        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>ae<span class="token punctuation">.</span>arg<span class="token punctuation">)</span>
        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>ae<span class="token punctuation">.</span>prob<span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>

<pre class="language-bash" data-language="bash"><code class="language-bash">$ go run errors.go
f1 worked: <span class="token number">10</span>
f1 failed: can<span class="token string">'t work with 42
f2 worked: 10
f2 failed: 42 - can'</span>t work with it
<span class="token number">42</span>
can't work with it</code></pre>

<h1 id="Go协程"><a href="#Go协程" class="headerlink" title="Go协程"></a>Go协程</h1><p><em>协程(goroutine)</em> 是轻量级的执行线程。</p>
<pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
    <span class="token string">"fmt"</span>
    <span class="token string">"time"</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">f</span><span class="token punctuation">(</span>from <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>
        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>from<span class="token punctuation">,</span> <span class="token string">":"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    
	<span class="token comment">// 假设我们有一个函数叫做 f(s)。 我们一般会这样 同步地 调用它</span>
    <span class="token function">f</span><span class="token punctuation">(</span><span class="token string">"direct"</span><span class="token punctuation">)</span>
	
    <span class="token comment">// 使用 go f(s) 在一个协程中调用这个函数。 这个新的 Go 协程将会 并发地 执行这个函数。</span>
    <span class="token keyword">go</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token string">"goroutine"</span><span class="token punctuation">)</span>

    <span class="token comment">// 你也可以为匿名函数启动一个协程。</span>
    <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span>msg <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token string">"going"</span><span class="token punctuation">)</span>
	
    <span class="token comment">// 现在两个协程在独立的协程中 异步地 运行， 然后等待两个协程完成（更好的方法是使用 WaitGroup）。</span>
    time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"done"</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">// 当我们运行这个程序时，首先会看到阻塞式调用的输出，然后是两个协程的交替输出。 这种交替的情况表示 Go runtime 是以并发的方式运行协程的。</span></code></pre>

<pre class="language-bash" data-language="bash"><code class="language-bash">$ go run goroutines.go
direct <span class="token builtin class-name">:</span> <span class="token number">0</span>
direct <span class="token builtin class-name">:</span> <span class="token number">1</span>
direct <span class="token builtin class-name">:</span> <span class="token number">2</span>
goroutine <span class="token builtin class-name">:</span> <span class="token number">0</span>
going
goroutine <span class="token builtin class-name">:</span> <span class="token number">1</span>
goroutine <span class="token builtin class-name">:</span> <span class="token number">2</span>
<span class="token keyword">done</span></code></pre>



<h1 id="通道"><a href="#通道" class="headerlink" title="通道"></a>通道</h1><p><em>通道(channels)</em> 是连接多个协程的管道。 你可以从一个协程将值发送到通道，然后在另一个协程中接收。</p>
<pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">"fmt"</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

    <span class="token comment">// 使用 make(chan val-type) 创建一个新的通道。 通道类型就是他们需要传递值的类型。</span>
    messages <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">string</span><span class="token punctuation">)</span>
    
	<span class="token comment">// 使用 channel &lt;- 语法 发送 一个新的值到通道中。 这里我们在一个新的协程中发送 "ping" 到上面创建的 messages 通道中。</span>
    <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> messages <span class="token operator">&lt;-</span> <span class="token string">"ping"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    
	<span class="token comment">// 使用 &lt;-channel 语法从通道中 接收 一个值。 这里我们会收到在上面发送的 "ping" 消息并将其打印出来。</span>
    msg <span class="token operator">:=</span> <span class="token operator">&lt;-</span>messages
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">// 我们运行程序时，通过通道， 成功的将消息 "ping" 从一个协程传送到了另一个协程中。</span></code></pre>

<pre class="language-bash" data-language="bash"><code class="language-bash">$ go run channels.go
<span class="token function">ping</span></code></pre>

<p>默认发送和接收操作是阻塞的、同步的，直到发送方和接收方都就绪。 这个特性允许我们，不使用任何其它的同步操作， 就可以在程序结尾处等待消息 “ping”。</p>
<h1 id="通道缓冲"><a href="#通道缓冲" class="headerlink" title="通道缓冲"></a>通道缓冲</h1><p>默认情况下，通道是 <em>无缓冲</em> 的，这意味着只有对应的接收（<code>&lt;- chan</code>） 通道准备好接收时，才允许进行发送（<code>chan &lt;-</code>）。 <em>有缓冲的通道 (<em>Buffered channels</em>)</em> 允许在没有对应接收者的情况下，缓存一定数量的值。</p>
<pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">"fmt"</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token comment">// 这里我们 make 了一个字符串通道，最多允许缓存 2 个值。</span>
    messages <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>

	<span class="token comment">// 由于此通道是有缓冲的， 因此我们可以将这些值发送到通道中，而无需并发的接收。</span>
    messages <span class="token operator">&lt;-</span> <span class="token string">"buffered"</span>
    messages <span class="token operator">&lt;-</span> <span class="token string">"channel"</span>

	<span class="token comment">// 然后我们可以正常接收这两个值。</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token operator">&lt;-</span>messages<span class="token punctuation">)</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token operator">&lt;-</span>messages<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span></code></pre>

<pre class="language-bash" data-language="bash"><code class="language-bash">$ go run channel-buffering.go 
buffered
channel</code></pre>



<h1 id="通道同步"><a href="#通道同步" class="headerlink" title="通道同步"></a>通道同步</h1><p>我们可以使用通道来同步协程之间的执行状态。 这有一个例子，使用阻塞接收的方式，实现了等待另一个协程完成。 如果需要等待多个协程，**<a href="https://gobyexample-cn.github.io/waitgroups">WaitGroup</a>** 是一个更好的选择。</p>
<pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
    <span class="token string">"fmt"</span>
    <span class="token string">"time"</span>
<span class="token punctuation">)</span>

<span class="token comment">// 我们将要在协程中运行这个函数。 done 通道将被用于通知其他协程这个函数已经完成工作。</span>
<span class="token keyword">func</span> <span class="token function">worker</span><span class="token punctuation">(</span>done <span class="token keyword">chan</span> <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"working..."</span><span class="token punctuation">)</span>
    time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second <span class="token operator">*</span> <span class="token number">5</span><span class="token punctuation">)</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"done..."</span><span class="token punctuation">)</span>
    
	<span class="token comment">// 发送一个值来通知我们已经完工啦。</span>
    done <span class="token operator">&lt;-</span> <span class="token boolean">true</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token comment">// 运行一个 worker 协程，并给予用于通知的通道。</span>
    done <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">bool</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token keyword">go</span> <span class="token function">worker</span><span class="token punctuation">(</span>done<span class="token punctuation">)</span>
	<span class="token comment">// 程序将一直阻塞，直至收到 worker 使用通道发送的通知。</span>
    <span class="token operator">&lt;-</span>done <span class="token comment">// 如果你把 &lt;- done 这行代码从程序中移除， 程序甚至可能在 worker 开始运行前就结束了。</span>
<span class="token punctuation">&#125;</span></code></pre>

<pre class="language-bash" data-language="bash"><code class="language-bash">$ go run channel-synchronization.go
working<span class="token punctuation">..</span>.
done<span class="token punctuation">..</span>.</code></pre>
]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>Golang</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux Firewall 学习笔记</title>
    <url>/2022/linux_firewall/</url>
    <content><![CDATA[<h1 id="iptables"><a href="#iptables" class="headerlink" title="iptables"></a>iptables</h1><h2 id="netfilter-和-iptables"><a href="#netfilter-和-iptables" class="headerlink" title="netfilter 和 iptables"></a>netfilter 和 iptables</h2><ul>
<li>netfilter：内核态，即不以文件的形式存在的防火墙。</li>
<li>iptables：用户态，在<code>/sbin/iptables</code>存在的防火墙。</li>
</ul>
<h2 id="防火墙的分类"><a href="#防火墙的分类" class="headerlink" title="防火墙的分类"></a>防火墙的分类</h2><p>按保护范围划分:</p>
<ul>
<li>主机防火墙:服务范围为当前一台主机</li>
<li>网络防火墙:服务范围为防火墙一侧的局域网</li>
</ul>
<h2 id="4-Tables"><a href="#4-Tables" class="headerlink" title="4 Tables"></a>4 Tables</h2><ul>
<li>filter</li>
<li>nat</li>
<li>mangle</li>
<li>raw</li>
<li>security</li>
</ul>
<h2 id="5-Chains"><a href="#5-Chains" class="headerlink" title="5 Chains"></a>5 Chains</h2><ul>
<li>PREROUTING</li>
<li>INPUT</li>
<li>FORWARD</li>
<li>OUTPUT</li>
<li>POSTROUTING</li>
</ul>
<span id="more"></span>

<h2 id="Targets"><a href="#Targets" class="headerlink" title="Targets"></a>Targets</h2><p>A  firewall rule specifies criteria for a packet and a target.  If the packet does not match, the next rule in the chain is examined; if it does match, then the next rule is specified by the value of the target, which can be the name of a user-defined chain, one of the  targets  described in <em>iptables-extensions(8)</em>, or one of the special values <code>ACCEPT</code>, <code>DROP</code> or <code>RETURN</code>. </p>
<ul>
<li><code>ACCEPT</code>  : means to let the packet through. </li>
<li><code>DROP</code> : means to drop the packet on the floor. </li>
<li><code>RETURN</code> : means stop traversing this chain and resume at the next rule in the previous (calling) chain.  If the end of a built-in chain is reached or a rule in  a  built-in  chain  with  target  <code>RETURN</code>  is matched, the target specified by the chain policy determines the fate of the packet.<code>RETURN</code>代表停止遍历当前链，然后返回之前的链（调用当前链的链），并继续匹配之前链中的下一条规则。如果到达了内建链的底部，或者某条内建链中目标（target）为<code>RETURN</code>的规则被匹配，那么这条内建链的默认策略 (policy)决定了当前数据包的归宿。</li>
</ul>
<h1 id="firewalld"><a href="#firewalld" class="headerlink" title="firewalld"></a>firewalld</h1><p>基于zone概念：</p>
<ol>
<li>源IP或源网段关联到zone；</li>
<li>接口（网卡）关联到zone；</li>
<li>没有被源IP（源网段）或接口关联的zone所匹配时，关联到default zone；<strong>所以，default zone中不要轻易放置服务！</strong></li>
</ol>
<h2 id="查看默认zone"><a href="#查看默认zone" class="headerlink" title="查看默认zone"></a>查看默认zone</h2><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># firewall-cmd --get-default-zone</span>
public</code></pre>

<h2 id="设置默认zone"><a href="#设置默认zone" class="headerlink" title="设置默认zone"></a>设置默认zone</h2><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># firewall-cmd --set-default-zone=home</span>
success
<span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># firewall-cmd --get-default-zone</span>
home</code></pre>

<h2 id="将源网段关联到zone"><a href="#将源网段关联到zone" class="headerlink" title="将源网段关联到zone"></a>将源网段关联到zone</h2><p>相关命令：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># firewall-cmd --help | grep source</span>
  --get-zone-of-source<span class="token operator">=</span><span class="token operator">&lt;</span>source<span class="token operator">></span><span class="token punctuation">[</span>/<span class="token operator">&lt;</span>mask<span class="token operator">></span><span class="token punctuation">]</span><span class="token operator">|</span><span class="token operator">&lt;</span>MAC<span class="token operator">>|</span>ipset:<span class="token operator">&lt;</span>ipset<span class="token operator">></span>
                       Print name of the zone the <span class="token builtin class-name">source</span> is bound to <span class="token punctuation">[</span>P<span class="token punctuation">]</span>
  --service<span class="token operator">=</span><span class="token operator">&lt;</span>service<span class="token operator">></span> --add-source-port<span class="token operator">=</span><span class="token operator">&lt;</span>portid<span class="token operator">></span><span class="token punctuation">[</span>-<span class="token operator">&lt;</span>portid<span class="token operator">></span><span class="token punctuation">]</span>/<span class="token operator">&lt;</span>protocol<span class="token operator">></span>
                       Add a new <span class="token builtin class-name">source</span> port to <span class="token function">service</span> <span class="token punctuation">[</span>P only<span class="token punctuation">]</span>
  --service<span class="token operator">=</span><span class="token operator">&lt;</span>service<span class="token operator">></span> --remove-source-port<span class="token operator">=</span><span class="token operator">&lt;</span>portid<span class="token operator">></span><span class="token punctuation">[</span>-<span class="token operator">&lt;</span>portid<span class="token operator">></span><span class="token punctuation">]</span>/<span class="token operator">&lt;</span>protocol<span class="token operator">></span>
                       Remove a <span class="token builtin class-name">source</span> port from <span class="token function">service</span> <span class="token punctuation">[</span>P only<span class="token punctuation">]</span>
  --service<span class="token operator">=</span><span class="token operator">&lt;</span>service<span class="token operator">></span> --query-source-port<span class="token operator">=</span><span class="token operator">&lt;</span>portid<span class="token operator">></span><span class="token punctuation">[</span>-<span class="token operator">&lt;</span>portid<span class="token operator">></span><span class="token punctuation">]</span>/<span class="token operator">&lt;</span>protocol<span class="token operator">></span>
                       Return whether the <span class="token builtin class-name">source</span> port has been added <span class="token keyword">for</span> <span class="token function">service</span> <span class="token punctuation">[</span>P only<span class="token punctuation">]</span>
  --service<span class="token operator">=</span><span class="token operator">&lt;</span>service<span class="token operator">></span> --get-source-ports
                       List <span class="token builtin class-name">source</span> ports of <span class="token function">service</span> <span class="token punctuation">[</span>P only<span class="token punctuation">]</span>
  --list-source-ports  List <span class="token builtin class-name">source</span> ports added <span class="token punctuation">[</span>P<span class="token punctuation">]</span> <span class="token punctuation">[</span>Z<span class="token punctuation">]</span> <span class="token punctuation">[</span>O<span class="token punctuation">]</span>
  --add-source-port<span class="token operator">=</span><span class="token operator">&lt;</span>portid<span class="token operator">></span><span class="token punctuation">[</span>-<span class="token operator">&lt;</span>portid<span class="token operator">></span><span class="token punctuation">]</span>/<span class="token operator">&lt;</span>protocol<span class="token operator">></span>
                       Add the <span class="token builtin class-name">source</span> port <span class="token punctuation">[</span>P<span class="token punctuation">]</span> <span class="token punctuation">[</span>Z<span class="token punctuation">]</span> <span class="token punctuation">[</span>O<span class="token punctuation">]</span> <span class="token punctuation">[</span>T<span class="token punctuation">]</span>
  --remove-source-port<span class="token operator">=</span><span class="token operator">&lt;</span>portid<span class="token operator">></span><span class="token punctuation">[</span>-<span class="token operator">&lt;</span>portid<span class="token operator">></span><span class="token punctuation">]</span>/<span class="token operator">&lt;</span>protocol<span class="token operator">></span>
                       Remove the <span class="token builtin class-name">source</span> port <span class="token punctuation">[</span>P<span class="token punctuation">]</span> <span class="token punctuation">[</span>Z<span class="token punctuation">]</span> <span class="token punctuation">[</span>O<span class="token punctuation">]</span>
  --query-source-port<span class="token operator">=</span><span class="token operator">&lt;</span>portid<span class="token operator">></span><span class="token punctuation">[</span>-<span class="token operator">&lt;</span>portid<span class="token operator">></span><span class="token punctuation">]</span>/<span class="token operator">&lt;</span>protocol<span class="token operator">></span>
                       Return whether the <span class="token builtin class-name">source</span> port has been added <span class="token punctuation">[</span>P<span class="token punctuation">]</span> <span class="token punctuation">[</span>Z<span class="token punctuation">]</span> <span class="token punctuation">[</span>O<span class="token punctuation">]</span>
                       sources <span class="token keyword">in</span> a zone <span class="token punctuation">[</span>P<span class="token punctuation">]</span> <span class="token punctuation">[</span>Z<span class="token punctuation">]</span> <span class="token punctuation">[</span>T<span class="token punctuation">]</span>
                       sources <span class="token keyword">in</span> a zone <span class="token punctuation">[</span>P<span class="token punctuation">]</span> <span class="token punctuation">[</span>Z<span class="token punctuation">]</span>
                       and sources has been enabled <span class="token keyword">for</span> a zone <span class="token punctuation">[</span>P<span class="token punctuation">]</span> <span class="token punctuation">[</span>Z<span class="token punctuation">]</span>
  --list-sources       List sources that are bound to a zone <span class="token punctuation">[</span>P<span class="token punctuation">]</span> <span class="token punctuation">[</span>Z<span class="token punctuation">]</span>
  --add-source<span class="token operator">=</span><span class="token operator">&lt;</span>source<span class="token operator">></span><span class="token punctuation">[</span>/<span class="token operator">&lt;</span>mask<span class="token operator">></span><span class="token punctuation">]</span><span class="token operator">|</span><span class="token operator">&lt;</span>MAC<span class="token operator">>|</span>ipset:<span class="token operator">&lt;</span>ipset<span class="token operator">></span>
                       Bind the <span class="token builtin class-name">source</span> to a zone <span class="token punctuation">[</span>P<span class="token punctuation">]</span> <span class="token punctuation">[</span>Z<span class="token punctuation">]</span>
  --change-source<span class="token operator">=</span><span class="token operator">&lt;</span>source<span class="token operator">></span><span class="token punctuation">[</span>/<span class="token operator">&lt;</span>mask<span class="token operator">></span><span class="token punctuation">]</span><span class="token operator">|</span><span class="token operator">&lt;</span>MAC<span class="token operator">>|</span>ipset:<span class="token operator">&lt;</span>ipset<span class="token operator">></span>
                       Change zone the <span class="token builtin class-name">source</span> is bound to <span class="token punctuation">[</span>Z<span class="token punctuation">]</span>
  --query-source<span class="token operator">=</span><span class="token operator">&lt;</span>source<span class="token operator">></span><span class="token punctuation">[</span>/<span class="token operator">&lt;</span>mask<span class="token operator">></span><span class="token punctuation">]</span><span class="token operator">|</span><span class="token operator">&lt;</span>MAC<span class="token operator">>|</span>ipset:<span class="token operator">&lt;</span>ipset<span class="token operator">></span>
                       Query whether the <span class="token builtin class-name">source</span> is bound to a zone <span class="token punctuation">[</span>P<span class="token punctuation">]</span> <span class="token punctuation">[</span>Z<span class="token punctuation">]</span>
  --remove-source<span class="token operator">=</span><span class="token operator">&lt;</span>source<span class="token operator">></span><span class="token punctuation">[</span>/<span class="token operator">&lt;</span>mask<span class="token operator">></span><span class="token punctuation">]</span><span class="token operator">|</span><span class="token operator">&lt;</span>MAC<span class="token operator">>|</span>ipset:<span class="token operator">&lt;</span>ipset<span class="token operator">></span>
                       Remove binding of the <span class="token builtin class-name">source</span> from a zone <span class="token punctuation">[</span>P<span class="token punctuation">]</span> <span class="token punctuation">[</span>Z<span class="token punctuation">]</span></code></pre>

<p>将源网段192.168.16.0&#x2F;24关联到zone home：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># firewall-cmd --permanent --add-source=192.168.16.0/24 --zone=home</span>
success</code></pre>

<p>查看配置没有生效，需要重新加载配置：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># firewall-cmd --list-all --zone=home</span>
home <span class="token punctuation">(</span>active<span class="token punctuation">)</span>
  target: default
  icmp-block-inversion: no
  interfaces: ens160
  sources: 
  services: cockpit dhcpv6-client mdns samba-client <span class="token function">ssh</span>
  ports: 
  protocols: 
  forward: no
  masquerade: no
  forward-ports: 
  source-ports: 
  icmp-blocks: 
  rich rules: </code></pre>

<p>重新加载配置：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># firewall-cmd --reload</span>
success</code></pre>

<p>再次查看zone配置，发现配置已生效：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># firewall-cmd --list-all --zone=home</span>
home <span class="token punctuation">(</span>active<span class="token punctuation">)</span>
  target: default
  icmp-block-inversion: no
  interfaces: ens160
  sources: <span class="token number">192.168</span>.16.0/24
  services: cockpit dhcpv6-client mdns samba-client <span class="token function">ssh</span>
  ports: 
  protocols: 
  forward: no
  masquerade: no
  forward-ports: 
  source-ports: 
  icmp-blocks: 
  rich rules: </code></pre>

<p>查询某个网段是否被添加到某个zone：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># firewall-cmd --query-source=192.168.16.0/24 --zone=home</span>
<span class="token function">yes</span>
<span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># firewall-cmd --query-source=192.168.1.0/24 --zone=home</span>
no</code></pre>

<p>将某个zone中的网段切换到另一个zone中：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># firewall-cmd --change-source=192.168.16.0/24 --zone=public --permanent</span>
success
<span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># firewall-cmd --reload</span>
success
<span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># firewall-cmd --list-all --zone=public</span>
public <span class="token punctuation">(</span>active<span class="token punctuation">)</span>
  target: default
  icmp-block-inversion: no
  interfaces: 
  sources: <span class="token number">192.168</span>.16.0/24
  services: cockpit dhcpv6-client <span class="token function">ssh</span>
  ports: <span class="token number">8080</span>/tcp <span class="token number">3306</span>/tcp <span class="token number">8090</span>/tcp <span class="token number">8001</span>/tcp <span class="token number">8002</span>/tcp
  protocols: 
  forward: no
  masquerade: no
  forward-ports: 
  source-ports: 
  icmp-blocks: 
  rich rules: 
<span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># firewall-cmd --query-source=192.168.16.0/24 --zone=public</span>
<span class="token function">yes</span></code></pre>

<p>从一个zone中移除关联的网段：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># firewall-cmd --remove-source=192.168.16.0/24 --zone=public --permanent</span>
success
<span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># firewall-cmd --reload</span>
success
<span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># firewall-cmd --list-all --zone=public</span>
public
  target: default
  icmp-block-inversion: no
  interfaces: 
  sources: 
  services: cockpit dhcpv6-client <span class="token function">ssh</span>
  ports: <span class="token number">8080</span>/tcp <span class="token number">3306</span>/tcp <span class="token number">8090</span>/tcp <span class="token number">8001</span>/tcp <span class="token number">8002</span>/tcp
  protocols: 
  forward: no
  masquerade: no
  forward-ports: 
  source-ports: 
  icmp-blocks: 
  rich rules: 
<span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># firewall-cmd --list-sources --zone=public</span>
</code></pre>

<h2 id="将接口（网卡）关联到zone"><a href="#将接口（网卡）关联到zone" class="headerlink" title="将接口（网卡）关联到zone"></a>将接口（网卡）关联到zone</h2><p>相关命令：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># firewall-cmd -h | grep interface</span>
  --get-default-zone   Print default zone <span class="token keyword">for</span> connections and interfaces
  --get-zone-of-interface<span class="token operator">=</span><span class="token operator">&lt;</span>interface<span class="token operator">></span>
                       Print name of the zone the interface is bound to <span class="token punctuation">[</span>P<span class="token punctuation">]</span>
  --add-forward        Enable forwarding of packets between interfaces and
  --remove-forward     Disable forwarding of packets between interfaces and
  --query-forward      Return whether forwarding of packets between interfaces
  --list-interfaces    List interfaces that are bound to a zone <span class="token punctuation">[</span>P<span class="token punctuation">]</span> <span class="token punctuation">[</span>Z<span class="token punctuation">]</span>
  --add-interface<span class="token operator">=</span><span class="token operator">&lt;</span>interface<span class="token operator">></span>
                       Bind the <span class="token operator">&lt;</span>interface<span class="token operator">></span> to a zone <span class="token punctuation">[</span>P<span class="token punctuation">]</span> <span class="token punctuation">[</span>Z<span class="token punctuation">]</span>
  --change-interface<span class="token operator">=</span><span class="token operator">&lt;</span>interface<span class="token operator">></span>
                       Change zone the <span class="token operator">&lt;</span>interface<span class="token operator">></span> is bound to <span class="token punctuation">[</span>P<span class="token punctuation">]</span> <span class="token punctuation">[</span>Z<span class="token punctuation">]</span>
  --query-interface<span class="token operator">=</span><span class="token operator">&lt;</span>interface<span class="token operator">></span>
                       Query whether <span class="token operator">&lt;</span>interface<span class="token operator">></span> is bound to a zone <span class="token punctuation">[</span>P<span class="token punctuation">]</span> <span class="token punctuation">[</span>Z<span class="token punctuation">]</span>
  --remove-interface<span class="token operator">=</span><span class="token operator">&lt;</span>interface<span class="token operator">></span>
                       Remove binding of <span class="token operator">&lt;</span>interface<span class="token operator">></span> from a zone <span class="token punctuation">[</span>P<span class="token punctuation">]</span> <span class="token punctuation">[</span>Z<span class="token punctuation">]</span></code></pre>

<p>查看zone所绑定的接口：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># firewall-cmd --list-all --zone=public</span>
public <span class="token punctuation">(</span>active<span class="token punctuation">)</span>
  target: default
  icmp-block-inversion: no
  interfaces: ens160
  sources: 
  services: cockpit dhcpv6-client <span class="token function">ssh</span>
  ports: <span class="token number">8080</span>/tcp <span class="token number">3306</span>/tcp <span class="token number">8090</span>/tcp <span class="token number">8001</span>/tcp <span class="token number">8002</span>/tcp
  protocols: 
  forward: no
  masquerade: no
  forward-ports: 
  source-ports: 
  icmp-blocks: 
  rich rules: 
<span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># firewall-cmd --list-interfaces --zone=public</span>
ens160</code></pre>

<p>将接口添加进zone：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># firewall-cmd --add-interface=ens160 --zone=public --permanent</span>
Warning: ZONE_ALREADY_SET: <span class="token string">'ens160'</span> already bound to <span class="token string">'public'</span>
success
<span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># firewall-cmd --list-all --zone=public</span>
public <span class="token punctuation">(</span>active<span class="token punctuation">)</span>
  target: default
  icmp-block-inversion: no
  interfaces: ens160
  sources: 
  services: cockpit dhcpv6-client <span class="token function">ssh</span>
  ports: <span class="token number">8080</span>/tcp <span class="token number">3306</span>/tcp <span class="token number">8090</span>/tcp <span class="token number">8001</span>/tcp <span class="token number">8002</span>/tcp
  protocols: 
  forward: no
  masquerade: no
  forward-ports: 
  source-ports: 
  icmp-blocks: 
  rich rules: 
<span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># firewall-cmd --list-interfaces --zone=public</span>
ens160</code></pre>

<p>将接口从zone中删除：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># firewall-cmd --remove-interface=ens160 --zone=public --permanent</span>
The interface is under control of NetworkManager and already bound to the default zone
The interface is under control of NetworkManager, setting zone to default.
success
<span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># firewall-cmd --list-interface --zone=public</span>

<span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># firewall-cmd --list-all --zone=public</span>
public
  target: default
  icmp-block-inversion: no
  interfaces: 
  sources: 
  services: cockpit dhcpv6-client <span class="token function">ssh</span>
  ports: <span class="token number">8080</span>/tcp <span class="token number">3306</span>/tcp <span class="token number">8090</span>/tcp <span class="token number">8001</span>/tcp <span class="token number">8002</span>/tcp
  protocols: 
  forward: no
  masquerade: no
  forward-ports: 
  source-ports: 
  icmp-blocks: 
  rich rules: </code></pre>

<p>注意：当将一个接口（网卡）从一个zone中移除时，NetworkManager服务会自动将其添加进default zone。下例中，将接口<code>ens160</code>从zone public中移除，但default zone正好就是zone public，所以NetworkManager又将接口<code>ens160</code>绑定回了default zone即 zone public：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># firewall-cmd --get-default-zone</span>
public
<span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># firewall-cmd --remove-interface=ens160 --zone=public --permanent</span>
The interface is under control of NetworkManager and already bound to the default zone
The interface is under control of NetworkManager, setting zone to default.
success</code></pre>

<h2 id="基本规则"><a href="#基本规则" class="headerlink" title="基本规则"></a>基本规则</h2><p>firewalld基本规则只能以白名单方式添加端口或服务。</p>
<h3 id="添加服务"><a href="#添加服务" class="headerlink" title="添加服务"></a>添加服务</h3><p>相关命令：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># firewall-cmd -h | grep service</span>
  --get-services       Print predefined services <span class="token punctuation">[</span>P<span class="token punctuation">]</span>
  --new-service<span class="token operator">=</span><span class="token operator">&lt;</span>service<span class="token operator">></span>
                       Add a new <span class="token function">service</span> <span class="token punctuation">[</span>P only<span class="token punctuation">]</span>
  --new-service-from-file<span class="token operator">=</span><span class="token operator">&lt;</span>filename<span class="token operator">></span> <span class="token punctuation">[</span>--name<span class="token operator">=</span><span class="token operator">&lt;</span>service<span class="token operator">></span><span class="token punctuation">]</span>
                       Add a new <span class="token function">service</span> from <span class="token function">file</span> with optional name <span class="token punctuation">[</span>P only<span class="token punctuation">]</span>
  --delete-service<span class="token operator">=</span><span class="token operator">&lt;</span>service<span class="token operator">></span>
                       Delete an existing <span class="token function">service</span> <span class="token punctuation">[</span>P only<span class="token punctuation">]</span>
  --load-service-defaults<span class="token operator">=</span><span class="token operator">&lt;</span>service<span class="token operator">></span>
  --info-service<span class="token operator">=</span><span class="token operator">&lt;</span>service<span class="token operator">></span>
                       Print information about a <span class="token function">service</span>
  --path-service<span class="token operator">=</span><span class="token operator">&lt;</span>service<span class="token operator">></span>
                       Print <span class="token function">file</span> path of a <span class="token function">service</span> <span class="token punctuation">[</span>P only<span class="token punctuation">]</span>
  --service<span class="token operator">=</span><span class="token operator">&lt;</span>service<span class="token operator">></span> --set-description<span class="token operator">=</span><span class="token operator">&lt;</span>description<span class="token operator">></span>
                       Set new description to <span class="token function">service</span> <span class="token punctuation">[</span>P only<span class="token punctuation">]</span>
  --service<span class="token operator">=</span><span class="token operator">&lt;</span>service<span class="token operator">></span> --get-description
                       Print description <span class="token keyword">for</span> <span class="token function">service</span> <span class="token punctuation">[</span>P only<span class="token punctuation">]</span>
  --service<span class="token operator">=</span><span class="token operator">&lt;</span>service<span class="token operator">></span> --set-short<span class="token operator">=</span><span class="token operator">&lt;</span>description<span class="token operator">></span>
                       Set new short description to <span class="token function">service</span> <span class="token punctuation">[</span>P only<span class="token punctuation">]</span>
  --service<span class="token operator">=</span><span class="token operator">&lt;</span>service<span class="token operator">></span> --get-short
                       Print short description <span class="token keyword">for</span> <span class="token function">service</span> <span class="token punctuation">[</span>P only<span class="token punctuation">]</span>
  --service<span class="token operator">=</span><span class="token operator">&lt;</span>service<span class="token operator">></span> --add-port<span class="token operator">=</span><span class="token operator">&lt;</span>portid<span class="token operator">></span><span class="token punctuation">[</span>-<span class="token operator">&lt;</span>portid<span class="token operator">></span><span class="token punctuation">]</span>/<span class="token operator">&lt;</span>protocol<span class="token operator">></span>
                       Add a new port to <span class="token function">service</span> <span class="token punctuation">[</span>P only<span class="token punctuation">]</span>
  --service<span class="token operator">=</span><span class="token operator">&lt;</span>service<span class="token operator">></span> --remove-port<span class="token operator">=</span><span class="token operator">&lt;</span>portid<span class="token operator">></span><span class="token punctuation">[</span>-<span class="token operator">&lt;</span>portid<span class="token operator">></span><span class="token punctuation">]</span>/<span class="token operator">&lt;</span>protocol<span class="token operator">></span>
                       Remove a port from <span class="token function">service</span> <span class="token punctuation">[</span>P only<span class="token punctuation">]</span>
  --service<span class="token operator">=</span><span class="token operator">&lt;</span>service<span class="token operator">></span> --query-port<span class="token operator">=</span><span class="token operator">&lt;</span>portid<span class="token operator">></span><span class="token punctuation">[</span>-<span class="token operator">&lt;</span>portid<span class="token operator">></span><span class="token punctuation">]</span>/<span class="token operator">&lt;</span>protocol<span class="token operator">></span>
                       Return whether the port has been added <span class="token keyword">for</span> <span class="token function">service</span> <span class="token punctuation">[</span>P only<span class="token punctuation">]</span>
  --service<span class="token operator">=</span><span class="token operator">&lt;</span>service<span class="token operator">></span> --get-ports
                       List ports of <span class="token function">service</span> <span class="token punctuation">[</span>P only<span class="token punctuation">]</span>
  --service<span class="token operator">=</span><span class="token operator">&lt;</span>service<span class="token operator">></span> --add-protocol<span class="token operator">=</span><span class="token operator">&lt;</span>protocol<span class="token operator">></span>
                       Add a new protocol to <span class="token function">service</span> <span class="token punctuation">[</span>P only<span class="token punctuation">]</span>
  --service<span class="token operator">=</span><span class="token operator">&lt;</span>service<span class="token operator">></span> --remove-protocol<span class="token operator">=</span><span class="token operator">&lt;</span>protocol<span class="token operator">></span>
                       Remove a protocol from <span class="token function">service</span> <span class="token punctuation">[</span>P only<span class="token punctuation">]</span>
  --service<span class="token operator">=</span><span class="token operator">&lt;</span>service<span class="token operator">></span> --query-protocol<span class="token operator">=</span><span class="token operator">&lt;</span>protocol<span class="token operator">></span>
                       Return whether the protocol has been added <span class="token keyword">for</span> <span class="token function">service</span> <span class="token punctuation">[</span>P only<span class="token punctuation">]</span>
  --service<span class="token operator">=</span><span class="token operator">&lt;</span>service<span class="token operator">></span> --get-protocols
                       List protocols of <span class="token function">service</span> <span class="token punctuation">[</span>P only<span class="token punctuation">]</span>
  --service<span class="token operator">=</span><span class="token operator">&lt;</span>service<span class="token operator">></span> --add-source-port<span class="token operator">=</span><span class="token operator">&lt;</span>portid<span class="token operator">></span><span class="token punctuation">[</span>-<span class="token operator">&lt;</span>portid<span class="token operator">></span><span class="token punctuation">]</span>/<span class="token operator">&lt;</span>protocol<span class="token operator">></span>
                       Add a new <span class="token builtin class-name">source</span> port to <span class="token function">service</span> <span class="token punctuation">[</span>P only<span class="token punctuation">]</span>
  --service<span class="token operator">=</span><span class="token operator">&lt;</span>service<span class="token operator">></span> --remove-source-port<span class="token operator">=</span><span class="token operator">&lt;</span>portid<span class="token operator">></span><span class="token punctuation">[</span>-<span class="token operator">&lt;</span>portid<span class="token operator">></span><span class="token punctuation">]</span>/<span class="token operator">&lt;</span>protocol<span class="token operator">></span>
                       Remove a <span class="token builtin class-name">source</span> port from <span class="token function">service</span> <span class="token punctuation">[</span>P only<span class="token punctuation">]</span>
  --service<span class="token operator">=</span><span class="token operator">&lt;</span>service<span class="token operator">></span> --query-source-port<span class="token operator">=</span><span class="token operator">&lt;</span>portid<span class="token operator">></span><span class="token punctuation">[</span>-<span class="token operator">&lt;</span>portid<span class="token operator">></span><span class="token punctuation">]</span>/<span class="token operator">&lt;</span>protocol<span class="token operator">></span>
                       Return whether the <span class="token builtin class-name">source</span> port has been added <span class="token keyword">for</span> <span class="token function">service</span> <span class="token punctuation">[</span>P only<span class="token punctuation">]</span>
  --service<span class="token operator">=</span><span class="token operator">&lt;</span>service<span class="token operator">></span> --get-source-ports
                       List <span class="token builtin class-name">source</span> ports of <span class="token function">service</span> <span class="token punctuation">[</span>P only<span class="token punctuation">]</span>
  --service<span class="token operator">=</span><span class="token operator">&lt;</span>service<span class="token operator">></span> --add-helper<span class="token operator">=</span><span class="token operator">&lt;</span>helper<span class="token operator">></span>
                       Add a new helper to <span class="token function">service</span> <span class="token punctuation">[</span>P only<span class="token punctuation">]</span>
  --service<span class="token operator">=</span><span class="token operator">&lt;</span>service<span class="token operator">></span> --remove-helper<span class="token operator">=</span><span class="token operator">&lt;</span>helper<span class="token operator">></span>
                       Remove a helper from <span class="token function">service</span> <span class="token punctuation">[</span>P only<span class="token punctuation">]</span>
  --service<span class="token operator">=</span><span class="token operator">&lt;</span>service<span class="token operator">></span> --query-helper<span class="token operator">=</span><span class="token operator">&lt;</span>helper<span class="token operator">></span>
                       Return whether the helper has been added <span class="token keyword">for</span> <span class="token function">service</span> <span class="token punctuation">[</span>P only<span class="token punctuation">]</span>
  --service<span class="token operator">=</span><span class="token operator">&lt;</span>service<span class="token operator">></span> --get-service-helpers
                       List helpers of <span class="token function">service</span> <span class="token punctuation">[</span>P only<span class="token punctuation">]</span>
  --service<span class="token operator">=</span><span class="token operator">&lt;</span>service<span class="token operator">></span> --set-destination<span class="token operator">=</span><span class="token operator">&lt;</span>ipv<span class="token operator">></span>:<span class="token operator">&lt;</span>address<span class="token operator">></span><span class="token punctuation">[</span>/<span class="token operator">&lt;</span>mask<span class="token operator">></span><span class="token punctuation">]</span>
                       Set destination <span class="token keyword">for</span> ipv to address <span class="token keyword">in</span> <span class="token function">service</span> <span class="token punctuation">[</span>P only<span class="token punctuation">]</span>
  --service<span class="token operator">=</span><span class="token operator">&lt;</span>service<span class="token operator">></span> --remove-destination<span class="token operator">=</span><span class="token operator">&lt;</span>ipv<span class="token operator">></span>
                       Disable destination <span class="token keyword">for</span> ipv i <span class="token function">service</span> <span class="token punctuation">[</span>P only<span class="token punctuation">]</span>
  --service<span class="token operator">=</span><span class="token operator">&lt;</span>service<span class="token operator">></span> --query-destination<span class="token operator">=</span><span class="token operator">&lt;</span>ipv<span class="token operator">></span>:<span class="token operator">&lt;</span>address<span class="token operator">></span><span class="token punctuation">[</span>/<span class="token operator">&lt;</span>mask<span class="token operator">></span><span class="token punctuation">]</span>
                       Return whether destination ipv is <span class="token builtin class-name">set</span> <span class="token keyword">for</span> <span class="token function">service</span> <span class="token punctuation">[</span>P only<span class="token punctuation">]</span>
  --service<span class="token operator">=</span><span class="token operator">&lt;</span>service<span class="token operator">></span> --get-destinations
                       List destinations <span class="token keyword">in</span> <span class="token function">service</span> <span class="token punctuation">[</span>P only<span class="token punctuation">]</span>
  --service<span class="token operator">=</span><span class="token operator">&lt;</span>service<span class="token operator">></span> --add-include<span class="token operator">=</span><span class="token operator">&lt;</span>service<span class="token operator">></span>
                       Add a new include to <span class="token function">service</span> <span class="token punctuation">[</span>P only<span class="token punctuation">]</span>
  --service<span class="token operator">=</span><span class="token operator">&lt;</span>service<span class="token operator">></span> --remove-include<span class="token operator">=</span><span class="token operator">&lt;</span>service<span class="token operator">></span>
                       Remove a include from <span class="token function">service</span> <span class="token punctuation">[</span>P only<span class="token punctuation">]</span>
  --service<span class="token operator">=</span><span class="token operator">&lt;</span>service<span class="token operator">></span> --query-include<span class="token operator">=</span><span class="token operator">&lt;</span>service<span class="token operator">></span>
                       Return whether the include has been added <span class="token keyword">for</span> <span class="token function">service</span> <span class="token punctuation">[</span>P only<span class="token punctuation">]</span>
  --service<span class="token operator">=</span><span class="token operator">&lt;</span>service<span class="token operator">></span> --get-includes
                       List includes of <span class="token function">service</span> <span class="token punctuation">[</span>P only<span class="token punctuation">]</span>
  --list-services      List services added <span class="token punctuation">[</span>P<span class="token punctuation">]</span> <span class="token punctuation">[</span>Z<span class="token punctuation">]</span>
  --add-service<span class="token operator">=</span><span class="token operator">&lt;</span>service<span class="token operator">></span>
                       Add a <span class="token function">service</span> <span class="token punctuation">[</span>P<span class="token punctuation">]</span> <span class="token punctuation">[</span>Z<span class="token punctuation">]</span> <span class="token punctuation">[</span>O<span class="token punctuation">]</span> <span class="token punctuation">[</span>T<span class="token punctuation">]</span>
  --remove-service<span class="token operator">=</span><span class="token operator">&lt;</span>service<span class="token operator">></span>
                       Remove a <span class="token function">service</span> <span class="token punctuation">[</span>P<span class="token punctuation">]</span> <span class="token punctuation">[</span>Z<span class="token punctuation">]</span> <span class="token punctuation">[</span>O<span class="token punctuation">]</span>
  --query-service<span class="token operator">=</span><span class="token operator">&lt;</span>service<span class="token operator">></span>
                       Return whether <span class="token function">service</span> has been added <span class="token punctuation">[</span>P<span class="token punctuation">]</span> <span class="token punctuation">[</span>Z<span class="token punctuation">]</span> <span class="token punctuation">[</span>O<span class="token punctuation">]</span></code></pre>

<p>添加服务到指定zone：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># firewall-cmd --list-all --zone=public</span>
public <span class="token punctuation">(</span>active<span class="token punctuation">)</span>
  target: default
  icmp-block-inversion: no
  interfaces: ens160
  sources: 
  services: cockpit dhcpv6-client <span class="token function">ssh</span>
  ports: <span class="token number">8080</span>/tcp <span class="token number">3306</span>/tcp <span class="token number">8090</span>/tcp <span class="token number">8001</span>/tcp <span class="token number">8002</span>/tcp
  protocols: 
  forward: no
  masquerade: no
  forward-ports: 
  source-ports: 
  icmp-blocks: 
  rich rules: 
<span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># firewall-cmd --add-service=http --zone=public --permanent</span>
success
<span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># firewall-cmd --reload</span>
success
<span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># firewall-cmd --list-all --zone=public</span>
public <span class="token punctuation">(</span>active<span class="token punctuation">)</span>
  target: default
  icmp-block-inversion: no
  interfaces: ens160
  sources: 
  services: cockpit dhcpv6-client http <span class="token function">ssh</span>
  ports: <span class="token number">8080</span>/tcp <span class="token number">3306</span>/tcp <span class="token number">8090</span>/tcp <span class="token number">8001</span>/tcp <span class="token number">8002</span>/tcp
  protocols: 
  forward: no
  masquerade: no
  forward-ports: 
  source-ports: 
  icmp-blocks: 
  rich rules: </code></pre>

<p>将http服务从zone public中移除：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># firewall-cmd --permanent --remove-service=http --zone=public</span>
success
<span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># firewall-cmd --reload</span>
success
<span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># firewall-cmd --list-services --zone=public</span>
cockpit dhcpv6-client <span class="token function">ssh</span>
<span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># firewall-cmd --list-all --zone=public</span>
public <span class="token punctuation">(</span>active<span class="token punctuation">)</span>
  target: default
  icmp-block-inversion: no
  interfaces: ens160
  sources: 
  services: cockpit dhcpv6-client <span class="token function">ssh</span>
  ports: <span class="token number">8080</span>/tcp <span class="token number">3306</span>/tcp <span class="token number">8090</span>/tcp <span class="token number">8001</span>/tcp <span class="token number">8002</span>/tcp
  protocols: 
  forward: no
  masquerade: no
  forward-ports: 
  source-ports: 
  icmp-blocks: 
  rich rules: </code></pre>



<h3 id="添加端口"><a href="#添加端口" class="headerlink" title="添加端口"></a>添加端口</h3><p>相关命令：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># firewall-cmd -h | grep port</span>
  --get-ipset-types    Print the supported ipset types
  --service<span class="token operator">=</span><span class="token operator">&lt;</span>service<span class="token operator">></span> --add-port<span class="token operator">=</span><span class="token operator">&lt;</span>portid<span class="token operator">></span><span class="token punctuation">[</span>-<span class="token operator">&lt;</span>portid<span class="token operator">></span><span class="token punctuation">]</span>/<span class="token operator">&lt;</span>protocol<span class="token operator">></span>
                       Add a new port to <span class="token function">service</span> <span class="token punctuation">[</span>P only<span class="token punctuation">]</span>
  --service<span class="token operator">=</span><span class="token operator">&lt;</span>service<span class="token operator">></span> --remove-port<span class="token operator">=</span><span class="token operator">&lt;</span>portid<span class="token operator">></span><span class="token punctuation">[</span>-<span class="token operator">&lt;</span>portid<span class="token operator">></span><span class="token punctuation">]</span>/<span class="token operator">&lt;</span>protocol<span class="token operator">></span>
                       Remove a port from <span class="token function">service</span> <span class="token punctuation">[</span>P only<span class="token punctuation">]</span>
  --service<span class="token operator">=</span><span class="token operator">&lt;</span>service<span class="token operator">></span> --query-port<span class="token operator">=</span><span class="token operator">&lt;</span>portid<span class="token operator">></span><span class="token punctuation">[</span>-<span class="token operator">&lt;</span>portid<span class="token operator">></span><span class="token punctuation">]</span>/<span class="token operator">&lt;</span>protocol<span class="token operator">></span>
                       Return whether the port has been added <span class="token keyword">for</span> <span class="token function">service</span> <span class="token punctuation">[</span>P only<span class="token punctuation">]</span>
  --service<span class="token operator">=</span><span class="token operator">&lt;</span>service<span class="token operator">></span> --get-ports
                       List ports of <span class="token function">service</span> <span class="token punctuation">[</span>P only<span class="token punctuation">]</span>
  --service<span class="token operator">=</span><span class="token operator">&lt;</span>service<span class="token operator">></span> --add-source-port<span class="token operator">=</span><span class="token operator">&lt;</span>portid<span class="token operator">></span><span class="token punctuation">[</span>-<span class="token operator">&lt;</span>portid<span class="token operator">></span><span class="token punctuation">]</span>/<span class="token operator">&lt;</span>protocol<span class="token operator">></span>
                       Add a new <span class="token builtin class-name">source</span> port to <span class="token function">service</span> <span class="token punctuation">[</span>P only<span class="token punctuation">]</span>
  --service<span class="token operator">=</span><span class="token operator">&lt;</span>service<span class="token operator">></span> --remove-source-port<span class="token operator">=</span><span class="token operator">&lt;</span>portid<span class="token operator">></span><span class="token punctuation">[</span>-<span class="token operator">&lt;</span>portid<span class="token operator">></span><span class="token punctuation">]</span>/<span class="token operator">&lt;</span>protocol<span class="token operator">></span>
                       Remove a <span class="token builtin class-name">source</span> port from <span class="token function">service</span> <span class="token punctuation">[</span>P only<span class="token punctuation">]</span>
  --service<span class="token operator">=</span><span class="token operator">&lt;</span>service<span class="token operator">></span> --query-source-port<span class="token operator">=</span><span class="token operator">&lt;</span>portid<span class="token operator">></span><span class="token punctuation">[</span>-<span class="token operator">&lt;</span>portid<span class="token operator">></span><span class="token punctuation">]</span>/<span class="token operator">&lt;</span>protocol<span class="token operator">></span>
                       Return whether the <span class="token builtin class-name">source</span> port has been added <span class="token keyword">for</span> <span class="token function">service</span> <span class="token punctuation">[</span>P only<span class="token punctuation">]</span>
  --service<span class="token operator">=</span><span class="token operator">&lt;</span>service<span class="token operator">></span> --get-source-ports
                       List <span class="token builtin class-name">source</span> ports of <span class="token function">service</span> <span class="token punctuation">[</span>P only<span class="token punctuation">]</span>
  --list-ports         List ports added <span class="token punctuation">[</span>P<span class="token punctuation">]</span> <span class="token punctuation">[</span>Z<span class="token punctuation">]</span> <span class="token punctuation">[</span>O<span class="token punctuation">]</span>
  --add-port<span class="token operator">=</span><span class="token operator">&lt;</span>portid<span class="token operator">></span><span class="token punctuation">[</span>-<span class="token operator">&lt;</span>portid<span class="token operator">></span><span class="token punctuation">]</span>/<span class="token operator">&lt;</span>protocol<span class="token operator">></span>
                       Add the port <span class="token punctuation">[</span>P<span class="token punctuation">]</span> <span class="token punctuation">[</span>Z<span class="token punctuation">]</span> <span class="token punctuation">[</span>O<span class="token punctuation">]</span> <span class="token punctuation">[</span>T<span class="token punctuation">]</span>
  --remove-port<span class="token operator">=</span><span class="token operator">&lt;</span>portid<span class="token operator">></span><span class="token punctuation">[</span>-<span class="token operator">&lt;</span>portid<span class="token operator">></span><span class="token punctuation">]</span>/<span class="token operator">&lt;</span>protocol<span class="token operator">></span>
                       Remove the port <span class="token punctuation">[</span>P<span class="token punctuation">]</span> <span class="token punctuation">[</span>Z<span class="token punctuation">]</span> <span class="token punctuation">[</span>O<span class="token punctuation">]</span>
  --query-port<span class="token operator">=</span><span class="token operator">&lt;</span>portid<span class="token operator">></span><span class="token punctuation">[</span>-<span class="token operator">&lt;</span>portid<span class="token operator">></span><span class="token punctuation">]</span>/<span class="token operator">&lt;</span>protocol<span class="token operator">></span>
                       Return whether the port has been added <span class="token punctuation">[</span>P<span class="token punctuation">]</span> <span class="token punctuation">[</span>Z<span class="token punctuation">]</span> <span class="token punctuation">[</span>O<span class="token punctuation">]</span>
  --list-source-ports  List <span class="token builtin class-name">source</span> ports added <span class="token punctuation">[</span>P<span class="token punctuation">]</span> <span class="token punctuation">[</span>Z<span class="token punctuation">]</span> <span class="token punctuation">[</span>O<span class="token punctuation">]</span>
  --add-source-port<span class="token operator">=</span><span class="token operator">&lt;</span>portid<span class="token operator">></span><span class="token punctuation">[</span>-<span class="token operator">&lt;</span>portid<span class="token operator">></span><span class="token punctuation">]</span>/<span class="token operator">&lt;</span>protocol<span class="token operator">></span>
                       Add the <span class="token builtin class-name">source</span> port <span class="token punctuation">[</span>P<span class="token punctuation">]</span> <span class="token punctuation">[</span>Z<span class="token punctuation">]</span> <span class="token punctuation">[</span>O<span class="token punctuation">]</span> <span class="token punctuation">[</span>T<span class="token punctuation">]</span>
  --remove-source-port<span class="token operator">=</span><span class="token operator">&lt;</span>portid<span class="token operator">></span><span class="token punctuation">[</span>-<span class="token operator">&lt;</span>portid<span class="token operator">></span><span class="token punctuation">]</span>/<span class="token operator">&lt;</span>protocol<span class="token operator">></span>
                       Remove the <span class="token builtin class-name">source</span> port <span class="token punctuation">[</span>P<span class="token punctuation">]</span> <span class="token punctuation">[</span>Z<span class="token punctuation">]</span> <span class="token punctuation">[</span>O<span class="token punctuation">]</span>
  --query-source-port<span class="token operator">=</span><span class="token operator">&lt;</span>portid<span class="token operator">></span><span class="token punctuation">[</span>-<span class="token operator">&lt;</span>portid<span class="token operator">></span><span class="token punctuation">]</span>/<span class="token operator">&lt;</span>protocol<span class="token operator">></span>
                       Return whether the <span class="token builtin class-name">source</span> port has been added <span class="token punctuation">[</span>P<span class="token punctuation">]</span> <span class="token punctuation">[</span>Z<span class="token punctuation">]</span> <span class="token punctuation">[</span>O<span class="token punctuation">]</span>
  --list-forward-ports List IPv4 forward ports added <span class="token punctuation">[</span>P<span class="token punctuation">]</span> <span class="token punctuation">[</span>Z<span class="token punctuation">]</span> <span class="token punctuation">[</span>O<span class="token punctuation">]</span>
  --add-forward-port<span class="token operator">=</span>port<span class="token operator">=</span><span class="token operator">&lt;</span>portid<span class="token operator">></span><span class="token punctuation">[</span>-<span class="token operator">&lt;</span>portid<span class="token operator">></span><span class="token punctuation">]</span>:proto<span class="token operator">=</span><span class="token operator">&lt;</span>protocol<span class="token operator">></span><span class="token punctuation">[</span>:toport<span class="token operator">=</span><span class="token operator">&lt;</span>portid<span class="token operator">></span><span class="token punctuation">[</span>-<span class="token operator">&lt;</span>portid<span class="token operator">></span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>:toaddr<span class="token operator">=</span><span class="token operator">&lt;</span>address<span class="token operator">></span><span class="token punctuation">[</span>/<span class="token operator">&lt;</span>mask<span class="token operator">></span><span class="token punctuation">]</span><span class="token punctuation">]</span>
                       Add the IPv4 forward port <span class="token punctuation">[</span>P<span class="token punctuation">]</span> <span class="token punctuation">[</span>Z<span class="token punctuation">]</span> <span class="token punctuation">[</span>O<span class="token punctuation">]</span> <span class="token punctuation">[</span>T<span class="token punctuation">]</span>
  --remove-forward-port<span class="token operator">=</span>port<span class="token operator">=</span><span class="token operator">&lt;</span>portid<span class="token operator">></span><span class="token punctuation">[</span>-<span class="token operator">&lt;</span>portid<span class="token operator">></span><span class="token punctuation">]</span>:proto<span class="token operator">=</span><span class="token operator">&lt;</span>protocol<span class="token operator">></span><span class="token punctuation">[</span>:toport<span class="token operator">=</span><span class="token operator">&lt;</span>portid<span class="token operator">></span><span class="token punctuation">[</span>-<span class="token operator">&lt;</span>portid<span class="token operator">></span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>:toaddr<span class="token operator">=</span><span class="token operator">&lt;</span>address<span class="token operator">></span><span class="token punctuation">[</span>/<span class="token operator">&lt;</span>mask<span class="token operator">></span><span class="token punctuation">]</span><span class="token punctuation">]</span>
                       Remove the IPv4 forward port <span class="token punctuation">[</span>P<span class="token punctuation">]</span> <span class="token punctuation">[</span>Z<span class="token punctuation">]</span> <span class="token punctuation">[</span>O<span class="token punctuation">]</span>
  --query-forward-port<span class="token operator">=</span>port<span class="token operator">=</span><span class="token operator">&lt;</span>portid<span class="token operator">></span><span class="token punctuation">[</span>-<span class="token operator">&lt;</span>portid<span class="token operator">></span><span class="token punctuation">]</span>:proto<span class="token operator">=</span><span class="token operator">&lt;</span>protocol<span class="token operator">></span><span class="token punctuation">[</span>:toport<span class="token operator">=</span><span class="token operator">&lt;</span>portid<span class="token operator">></span><span class="token punctuation">[</span>-<span class="token operator">&lt;</span>portid<span class="token operator">></span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>:toaddr<span class="token operator">=</span><span class="token operator">&lt;</span>address<span class="token operator">></span><span class="token punctuation">[</span>/<span class="token operator">&lt;</span>mask<span class="token operator">></span><span class="token punctuation">]</span><span class="token punctuation">]</span>
                       Return whether the IPv4 forward port has been added <span class="token punctuation">[</span>P<span class="token punctuation">]</span> <span class="token punctuation">[</span>Z<span class="token punctuation">]</span> <span class="token punctuation">[</span>O<span class="token punctuation">]</span>
  --helper<span class="token operator">=</span><span class="token operator">&lt;</span>helper<span class="token operator">></span> --add-port<span class="token operator">=</span><span class="token operator">&lt;</span>portid<span class="token operator">></span><span class="token punctuation">[</span>-<span class="token operator">&lt;</span>portid<span class="token operator">></span><span class="token punctuation">]</span>/<span class="token operator">&lt;</span>protocol<span class="token operator">></span>
                       Add a new port to helper <span class="token punctuation">[</span>P only<span class="token punctuation">]</span>
  --helper<span class="token operator">=</span><span class="token operator">&lt;</span>helper<span class="token operator">></span> --remove-port<span class="token operator">=</span><span class="token operator">&lt;</span>portid<span class="token operator">></span><span class="token punctuation">[</span>-<span class="token operator">&lt;</span>portid<span class="token operator">></span><span class="token punctuation">]</span>/<span class="token operator">&lt;</span>protocol<span class="token operator">></span>
                       Remove a port from helper <span class="token punctuation">[</span>P only<span class="token punctuation">]</span>
  --helper<span class="token operator">=</span><span class="token operator">&lt;</span>helper<span class="token operator">></span> --query-port<span class="token operator">=</span><span class="token operator">&lt;</span>portid<span class="token operator">></span><span class="token punctuation">[</span>-<span class="token operator">&lt;</span>portid<span class="token operator">></span><span class="token punctuation">]</span>/<span class="token operator">&lt;</span>protocol<span class="token operator">></span>
                       Return whether the port has been added <span class="token keyword">for</span> helper <span class="token punctuation">[</span>P only<span class="token punctuation">]</span>
  --helper<span class="token operator">=</span><span class="token operator">&lt;</span>helper<span class="token operator">></span> --get-ports
                       List ports of helper <span class="token punctuation">[</span>P only<span class="token punctuation">]</span></code></pre>

<p>添加tcp端口8888到zone public：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># firewall-cmd --list-all --zone=public</span>
public <span class="token punctuation">(</span>active<span class="token punctuation">)</span>
  target: default
  icmp-block-inversion: no
  interfaces: ens160
  sources: 
  services: cockpit dhcpv6-client <span class="token function">ssh</span>
  ports: <span class="token number">8080</span>/tcp <span class="token number">3306</span>/tcp <span class="token number">8090</span>/tcp <span class="token number">8001</span>/tcp <span class="token number">8002</span>/tcp
  protocols: 
  forward: no
  masquerade: no
  forward-ports: 
  source-ports: 
  icmp-blocks: 
  rich rules: 
<span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># firewall-cmd --permanent --add-port=8888/tcp --zone=public</span>
success
<span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># firewall-cmd --reload</span>
success
<span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># firewall-cmd --list-all --zone=public</span>
public <span class="token punctuation">(</span>active<span class="token punctuation">)</span>
  target: default
  icmp-block-inversion: no
  interfaces: ens160
  sources: 
  services: cockpit dhcpv6-client <span class="token function">ssh</span>
  ports: <span class="token number">8080</span>/tcp <span class="token number">3306</span>/tcp <span class="token number">8090</span>/tcp <span class="token number">8001</span>/tcp <span class="token number">8002</span>/tcp <span class="token number">8888</span>/tcp
  protocols: 
  forward: no
  masquerade: no
  forward-ports: 
  source-ports: 
  icmp-blocks: 
  rich rules: </code></pre>

<p>将tcp端口8888从zone public中移除：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># firewall-cmd --permanent --remove-port=8888/tcp --zone=public</span>
success
<span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># firewall-cmd --reload</span>
success
<span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># firewall-cmd --list-ports --zone=public</span>
<span class="token number">3306</span>/tcp <span class="token number">8001</span>/tcp <span class="token number">8002</span>/tcp <span class="token number">8080</span>/tcp <span class="token number">8090</span>/tcp
<span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># firewall-cmd --list-all --zone=public</span>
public <span class="token punctuation">(</span>active<span class="token punctuation">)</span>
  target: default
  icmp-block-inversion: no
  interfaces: ens160
  sources: 
  services: cockpit dhcpv6-client <span class="token function">ssh</span>
  ports: <span class="token number">8080</span>/tcp <span class="token number">3306</span>/tcp <span class="token number">8090</span>/tcp <span class="token number">8001</span>/tcp <span class="token number">8002</span>/tcp
  protocols: 
  forward: no
  masquerade: no
  forward-ports: 
  source-ports: 
  icmp-blocks: 
  rich rules: </code></pre>

<h2 id="富规则（Rich-Rules）"><a href="#富规则（Rich-Rules）" class="headerlink" title="富规则（Rich Rules）"></a>富规则（Rich Rules）</h2><p>使用<code>--add-rich-rule</code>参数添加富规则。</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>iptables</tag>
        <tag>firewalld</tag>
        <tag>nftables</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx小记</title>
    <url>/2022/some_pieces_of_nginx/</url>
    <content><![CDATA[<h1 id="nginx及其衍生版本"><a href="#nginx及其衍生版本" class="headerlink" title="nginx及其衍生版本"></a>nginx及其衍生版本</h1><ul>
<li>nginx开源版：<a href="http://nginx.org/">http://nginx.org</a></li>
<li>nginx plus 商业版: <a href="https://www.nginx.com/">https://www.nginx.com</a></li>
<li>openresty: <a href="http://openresty.org/">http://openresty.org</a></li>
<li>tengine: <a href="http://tengine.taobao.org/">http://tengine.taobao.org</a></li>
</ul>
<h1 id="nginx默认目录结构"><a href="#nginx默认目录结构" class="headerlink" title="nginx默认目录结构"></a>nginx默认目录结构</h1><ul>
<li><code>logs/</code>：日志目录；</li>
<li><code>conf/</code>：配置文件目录；</li>
<li><code>html/</code>：静态资源目录；</li>
<li><code>sbin/</code>：存放nginx可执行文件；</li>
</ul>
<h1 id="nginx基础配置"><a href="#nginx基础配置" class="headerlink" title="nginx基础配置"></a>nginx基础配置</h1><h2 id="nginx最小配置"><a href="#nginx最小配置" class="headerlink" title="nginx最小配置"></a>nginx最小配置</h2><ul>
<li><code>worker_processes</code> worker 进程数，根据CPU核心数进行配置；</li>
</ul>
<pre class="language-nginx" data-language="nginx"><code class="language-nginx"><span class="token directive"><span class="token keyword">user</span>  nginx</span><span class="token punctuation">;</span>
<span class="token directive"><span class="token keyword">worker_processes</span>  auto</span><span class="token punctuation">;</span>

<span class="token directive"><span class="token keyword">error_log</span>  /var/log/nginx/error.log notice</span><span class="token punctuation">;</span>
<span class="token directive"><span class="token keyword">pid</span>        /var/run/nginx.pid</span><span class="token punctuation">;</span>


<span class="token directive"><span class="token keyword">events</span></span> <span class="token punctuation">&#123;</span>
    <span class="token directive"><span class="token keyword">worker_connections</span>  <span class="token number">1024</span></span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>


<span class="token directive"><span class="token keyword">http</span></span> <span class="token punctuation">&#123;</span>
    <span class="token directive"><span class="token keyword">include</span>       /etc/nginx/mime.types</span><span class="token punctuation">;</span>
    <span class="token directive"><span class="token keyword">default_type</span>  application/octet-stream</span><span class="token punctuation">;</span>

    <span class="token directive"><span class="token keyword">log_format</span>  main  <span class="token string">'<span class="token variable">$remote_addr</span> - <span class="token variable">$remote_user</span> [<span class="token variable">$time_local]</span> "<span class="token variable">$request</span>" '</span>
                      <span class="token string">'<span class="token variable">$status</span> <span class="token variable">$body_bytes_sent</span> "<span class="token variable">$http_referer</span>" '</span>
                      <span class="token string">'"<span class="token variable">$http_user_agent</span>" "<span class="token variable">$http_x_forwarded_for</span>"'</span></span><span class="token punctuation">;</span>

    <span class="token directive"><span class="token keyword">access_log</span>  /var/log/nginx/access.log  main</span><span class="token punctuation">;</span>

    <span class="token directive"><span class="token keyword">sendfile</span>        <span class="token boolean">on</span></span><span class="token punctuation">;</span>

    <span class="token directive"><span class="token keyword">keepalive_timeout</span>  <span class="token number">65</span></span><span class="token punctuation">;</span>
    
    <span class="token directive"><span class="token keyword">server</span></span> <span class="token punctuation">&#123;</span>
        <span class="token directive"><span class="token keyword">listen</span>       <span class="token number">80</span></span><span class="token punctuation">;</span>
        <span class="token directive"><span class="token keyword">server_name</span>  localhost</span><span class="token punctuation">;</span>

        <span class="token directive"><span class="token keyword">location</span> /</span> <span class="token punctuation">&#123;</span>
            <span class="token directive"><span class="token keyword">root</span>   /usr/share/nginx/html</span><span class="token punctuation">;</span>
            <span class="token directive"><span class="token keyword">index</span>  index.html index.htm</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token comment">#error_page  404              /404.html;</span>

        <span class="token comment"># redirect server error pages to the static page /50x.html</span>
        <span class="token directive"><span class="token keyword">error_page</span>   <span class="token number">500</span> <span class="token number">502</span> <span class="token number">503</span> <span class="token number">504</span>  /50x.html</span><span class="token punctuation">;</span>
        <span class="token directive"><span class="token keyword">location</span> = /50x.html</span> <span class="token punctuation">&#123;</span>
            <span class="token directive"><span class="token keyword">root</span>   /usr/share/nginx/html</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>

<span id="more"></span>

<h2 id="虚拟主机"><a href="#虚拟主机" class="headerlink" title="虚拟主机"></a>虚拟主机</h2><p>通过配置<code>server_name</code>可以同时在一台服务器部署多个虚拟主机。通过<code>server_name</code>区分不同虚拟主机，甚至可以做到不同web站点服务共享相同端口。</p>
<p><code>server_name</code>支持多种匹配模式：</p>
<ul>
<li>完整匹配（精确匹配）；</li>
<li>通配符匹配：如，<code>*.baidu.com</code>，<code>*.baidu.*</code>等；</li>
<li>正则匹配；</li>
</ul>
<pre class="language-nginx" data-language="nginx"><code class="language-nginx"><span class="token directive"><span class="token keyword">user</span>  nginx</span><span class="token punctuation">;</span>
<span class="token directive"><span class="token keyword">worker_processes</span>  auto</span><span class="token punctuation">;</span>

<span class="token directive"><span class="token keyword">error_log</span>  /var/log/nginx/error.log notice</span><span class="token punctuation">;</span>
<span class="token directive"><span class="token keyword">pid</span>        /var/run/nginx.pid</span><span class="token punctuation">;</span>


<span class="token directive"><span class="token keyword">events</span></span> <span class="token punctuation">&#123;</span>
    <span class="token directive"><span class="token keyword">worker_connections</span>  <span class="token number">1024</span></span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>


<span class="token directive"><span class="token keyword">http</span></span> <span class="token punctuation">&#123;</span>
    <span class="token directive"><span class="token keyword">include</span>       /etc/nginx/mime.types</span><span class="token punctuation">;</span>
    <span class="token directive"><span class="token keyword">default_type</span>  application/octet-stream</span><span class="token punctuation">;</span>

    <span class="token directive"><span class="token keyword">log_format</span>  main  <span class="token string">'<span class="token variable">$remote_addr</span> - <span class="token variable">$remote_user</span> [<span class="token variable">$time_local]</span> "<span class="token variable">$request</span>" '</span>
                      <span class="token string">'<span class="token variable">$status</span> <span class="token variable">$body_bytes_sent</span> "<span class="token variable">$http_referer</span>" '</span>
                      <span class="token string">'"<span class="token variable">$http_user_agent</span>" "<span class="token variable">$http_x_forwarded_for</span>"'</span></span><span class="token punctuation">;</span>

    <span class="token directive"><span class="token keyword">access_log</span>  /var/log/nginx/access.log  main</span><span class="token punctuation">;</span>

    <span class="token directive"><span class="token keyword">sendfile</span>        <span class="token boolean">on</span></span><span class="token punctuation">;</span>

    <span class="token directive"><span class="token keyword">keepalive_timeout</span>  <span class="token number">65</span></span><span class="token punctuation">;</span>
    
    <span class="token comment"># 虚拟主机1</span>
    <span class="token directive"><span class="token keyword">server</span></span> <span class="token punctuation">&#123;</span>
        <span class="token directive"><span class="token keyword">listen</span>       <span class="token number">80</span></span><span class="token punctuation">;</span>
    		<span class="token comment"># 通过配置server_name 可以同时在一台服务器部署多个虚拟主机；</span>
        <span class="token comment"># 通过server_name区分不同虚拟主机，甚至可以做到不同web站点服务共享相同端口；</span>
        <span class="token comment"># 注意 vhost1和vhost2都是用80端口！</span>
        <span class="token directive"><span class="token keyword">server_name</span>  vhost1</span><span class="token punctuation">;</span>  

        <span class="token directive"><span class="token keyword">location</span> /</span> <span class="token punctuation">&#123;</span>
            <span class="token directive"><span class="token keyword">root</span>   /usr/share/nginx/www/vhost1/html</span><span class="token punctuation">;</span>
            <span class="token directive"><span class="token keyword">index</span>  index.html index.htm</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token comment">#error_page  404              /404.html;</span>

        <span class="token comment"># redirect server error pages to the static page /50x.html</span>
        <span class="token directive"><span class="token keyword">error_page</span>   <span class="token number">500</span> <span class="token number">502</span> <span class="token number">503</span> <span class="token number">504</span>  /50x.html</span><span class="token punctuation">;</span>
        <span class="token directive"><span class="token keyword">location</span> = /50x.html</span> <span class="token punctuation">&#123;</span>
            <span class="token directive"><span class="token keyword">root</span>   /usr/share/nginx/www/vhost1/html</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
  
    <span class="token comment"># 虚拟主机2</span>
    <span class="token directive"><span class="token keyword">server</span></span> <span class="token punctuation">&#123;</span>
        <span class="token directive"><span class="token keyword">listen</span>       <span class="token number">80</span></span><span class="token punctuation">;</span>
        <span class="token comment"># 通过server_name区分不同虚拟主机，甚至可以做到不同web站点服务共享相同端口；</span>
        <span class="token comment"># 注意 vhost1和vhost2都是用80端口！</span>
        <span class="token directive"><span class="token keyword">server_name</span>  vhost2</span><span class="token punctuation">;</span>

        <span class="token directive"><span class="token keyword">location</span> /</span> <span class="token punctuation">&#123;</span>
            <span class="token directive"><span class="token keyword">root</span>   /usr/share/nginx/www/vhost2/html</span><span class="token punctuation">;</span>
            <span class="token directive"><span class="token keyword">index</span>  index.html index.htm</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token comment">#error_page  404              /404.html;</span>

        <span class="token comment"># redirect server error pages to the static page /50x.html</span>
        <span class="token directive"><span class="token keyword">error_page</span>   <span class="token number">500</span> <span class="token number">502</span> <span class="token number">503</span> <span class="token number">504</span>  /50x.html</span><span class="token punctuation">;</span>
        <span class="token directive"><span class="token keyword">location</span> = /50x.html</span> <span class="token punctuation">&#123;</span>
            <span class="token directive"><span class="token keyword">root</span>   /usr/share/nginx/www/vhost2/html</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>

<h2 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h2><p><code>proxy_pass</code>参数配置</p>
<pre class="language-nginx" data-language="nginx"><code class="language-nginx"><span class="token directive"><span class="token keyword">user</span>  nginx</span><span class="token punctuation">;</span>
<span class="token directive"><span class="token keyword">worker_processes</span>  auto</span><span class="token punctuation">;</span>

<span class="token directive"><span class="token keyword">error_log</span>  /var/log/nginx/error.log notice</span><span class="token punctuation">;</span>
<span class="token directive"><span class="token keyword">pid</span>        /var/run/nginx.pid</span><span class="token punctuation">;</span>


<span class="token directive"><span class="token keyword">events</span></span> <span class="token punctuation">&#123;</span>
    <span class="token directive"><span class="token keyword">worker_connections</span>  <span class="token number">1024</span></span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>


<span class="token directive"><span class="token keyword">http</span></span> <span class="token punctuation">&#123;</span>
    <span class="token directive"><span class="token keyword">include</span>       /etc/nginx/mime.types</span><span class="token punctuation">;</span>
    <span class="token directive"><span class="token keyword">default_type</span>  application/octet-stream</span><span class="token punctuation">;</span>

    <span class="token directive"><span class="token keyword">log_format</span>  main  <span class="token string">'<span class="token variable">$remote_addr</span> - <span class="token variable">$remote_user</span> [<span class="token variable">$time_local]</span> "<span class="token variable">$request</span>" '</span>
                      <span class="token string">'<span class="token variable">$status</span> <span class="token variable">$body_bytes_sent</span> "<span class="token variable">$http_referer</span>" '</span>
                      <span class="token string">'"<span class="token variable">$http_user_agent</span>" "<span class="token variable">$http_x_forwarded_for</span>"'</span></span><span class="token punctuation">;</span>

    <span class="token directive"><span class="token keyword">access_log</span>  /var/log/nginx/access.log  main</span><span class="token punctuation">;</span>

    <span class="token directive"><span class="token keyword">sendfile</span>        <span class="token boolean">on</span></span><span class="token punctuation">;</span>

    <span class="token directive"><span class="token keyword">keepalive_timeout</span>  <span class="token number">65</span></span><span class="token punctuation">;</span>
    
    <span class="token comment"># 虚拟主机1</span>
    <span class="token directive"><span class="token keyword">server</span></span> <span class="token punctuation">&#123;</span>
        <span class="token directive"><span class="token keyword">listen</span>       <span class="token number">80</span></span><span class="token punctuation">;</span>
        <span class="token directive"><span class="token keyword">server_name</span>  vhost1</span><span class="token punctuation">;</span>  

        <span class="token directive"><span class="token keyword">location</span> /</span> <span class="token punctuation">&#123;</span>
            <span class="token comment"># 配置反向代理</span>
            <span class="token directive"><span class="token keyword">proxy_pass</span> http://www.baidu.com</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token comment"># redirect server error pages to the static page /50x.html</span>
        <span class="token directive"><span class="token keyword">error_page</span>   <span class="token number">500</span> <span class="token number">502</span> <span class="token number">503</span> <span class="token number">504</span>  /50x.html</span><span class="token punctuation">;</span>
        <span class="token directive"><span class="token keyword">location</span> = /50x.html</span> <span class="token punctuation">&#123;</span>
            <span class="token directive"><span class="token keyword">root</span>   /usr/share/nginx/www/vhost1/html</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>

<h2 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h2><pre class="language-nginx" data-language="nginx"><code class="language-nginx"><span class="token directive"><span class="token keyword">user</span>  nginx</span><span class="token punctuation">;</span>
<span class="token directive"><span class="token keyword">worker_processes</span>  auto</span><span class="token punctuation">;</span>

<span class="token directive"><span class="token keyword">error_log</span>  /var/log/nginx/error.log notice</span><span class="token punctuation">;</span>
<span class="token directive"><span class="token keyword">pid</span>        /var/run/nginx.pid</span><span class="token punctuation">;</span>


<span class="token directive"><span class="token keyword">events</span></span> <span class="token punctuation">&#123;</span>
    <span class="token directive"><span class="token keyword">worker_connections</span>  <span class="token number">1024</span></span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>


<span class="token directive"><span class="token keyword">http</span></span> <span class="token punctuation">&#123;</span>
    <span class="token directive"><span class="token keyword">include</span>       /etc/nginx/mime.types</span><span class="token punctuation">;</span>
    <span class="token directive"><span class="token keyword">default_type</span>  application/octet-stream</span><span class="token punctuation">;</span>

    <span class="token directive"><span class="token keyword">log_format</span>  main  <span class="token string">'<span class="token variable">$remote_addr</span> - <span class="token variable">$remote_user</span> [<span class="token variable">$time_local]</span> "<span class="token variable">$request</span>" '</span>
                      <span class="token string">'<span class="token variable">$status</span> <span class="token variable">$body_bytes_sent</span> "<span class="token variable">$http_referer</span>" '</span>
                      <span class="token string">'"<span class="token variable">$http_user_agent</span>" "<span class="token variable">$http_x_forwarded_for</span>"'</span></span><span class="token punctuation">;</span>

    <span class="token directive"><span class="token keyword">access_log</span>  /var/log/nginx/access.log  main</span><span class="token punctuation">;</span>

    <span class="token directive"><span class="token keyword">sendfile</span>        <span class="token boolean">on</span></span><span class="token punctuation">;</span>

    <span class="token directive"><span class="token keyword">keepalive_timeout</span>  <span class="token number">65</span></span><span class="token punctuation">;</span>
  
    <span class="token comment"># 定义服务器集群，集群名为httpds</span>
    <span class="token directive"><span class="token keyword">upstream</span> httpds</span> <span class="token punctuation">&#123;</span>
      <span class="token directive"><span class="token keyword">server</span> 172.17.0.2:80</span><span class="token punctuation">;</span>
      <span class="token directive"><span class="token keyword">server</span> 172.17.0.3:80</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    
    <span class="token comment"># 虚拟主机1</span>
    <span class="token directive"><span class="token keyword">server</span></span> <span class="token punctuation">&#123;</span>
        <span class="token directive"><span class="token keyword">listen</span>       <span class="token number">80</span></span><span class="token punctuation">;</span>
        <span class="token directive"><span class="token keyword">server_name</span>  vhost1</span><span class="token punctuation">;</span>  

        <span class="token directive"><span class="token keyword">location</span> /</span> <span class="token punctuation">&#123;</span>
            <span class="token comment"># 配置反向代理</span>
            <span class="token directive"><span class="token keyword">proxy_pass</span> http://httpds</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token comment"># redirect server error pages to the static page /50x.html</span>
        <span class="token directive"><span class="token keyword">error_page</span>   <span class="token number">500</span> <span class="token number">502</span> <span class="token number">503</span> <span class="token number">504</span>  /50x.html</span><span class="token punctuation">;</span>
        <span class="token directive"><span class="token keyword">location</span> = /50x.html</span> <span class="token punctuation">&#123;</span>
            <span class="token directive"><span class="token keyword">root</span>   /usr/share/nginx/www/vhost1/html</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>

<h3 id="权重"><a href="#权重" class="headerlink" title="权重"></a>权重</h3><pre class="language-none"><code class="language-none">version: &quot;3&quot;
services:
  ngx:
    image: nginx:1.21.6
    container_name: ngx
    ports:
      - 80:80
    volumes:
      - .&#x2F;www:&#x2F;usr&#x2F;share&#x2F;nginx&#x2F;www:ro
      - .&#x2F;nginx.conf:&#x2F;etc&#x2F;nginx&#x2F;nginx.conf:ro
      - .&#x2F;logs:&#x2F;var&#x2F;log&#x2F;nginx:rw
    depends_on:
      - ng1
      - ng2
      - ng3
    networks:
      - ngx_net
  ng1:
    image: nginx:1.21.6
    container_name: ng1
    ports:
       - 8001:80
    volumes:
       - .&#x2F;www&#x2F;ng1&#x2F;html:&#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html:ro
    networks:
      - ngx_net
  ng2:
    image: nginx:1.21.6
    container_name: ng2
    ports:
      - 8002:80
    volumes:
       - .&#x2F;www&#x2F;ng2&#x2F;html:&#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html:ro
    networks:
      - ngx_net
  ng3:
    image: nginx:1.21.6
    container_name: ng3
    ports:
      - 8003:80
    volumes:
      - .&#x2F;www&#x2F;ng3&#x2F;html:&#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html:ro
    networks:
      - ngx_net
networks:
  ngx_net:</code></pre>

<p>weight设置权重：</p>
<pre class="language-nginx" data-language="nginx"><code class="language-nginx"><span class="token directive"><span class="token keyword">user</span>  nginx</span><span class="token punctuation">;</span>
<span class="token directive"><span class="token keyword">worker_processes</span>  auto</span><span class="token punctuation">;</span>

<span class="token directive"><span class="token keyword">error_log</span>  /var/log/nginx/error.log notice</span><span class="token punctuation">;</span>
<span class="token directive"><span class="token keyword">pid</span>        /var/run/nginx.pid</span><span class="token punctuation">;</span>


<span class="token directive"><span class="token keyword">events</span></span> <span class="token punctuation">&#123;</span>
    <span class="token directive"><span class="token keyword">worker_connections</span>  <span class="token number">1024</span></span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>


<span class="token directive"><span class="token keyword">http</span></span> <span class="token punctuation">&#123;</span>
    <span class="token directive"><span class="token keyword">include</span>       /etc/nginx/mime.types</span><span class="token punctuation">;</span>
    <span class="token directive"><span class="token keyword">default_type</span>  application/octet-stream</span><span class="token punctuation">;</span>

    <span class="token directive"><span class="token keyword">log_format</span>  main  <span class="token string">'<span class="token variable">$remote_addr</span> - <span class="token variable">$remote_user</span> [<span class="token variable">$time_local]</span> "<span class="token variable">$request</span>" '</span>
                      <span class="token string">'<span class="token variable">$status</span> <span class="token variable">$body_bytes_sent</span> "<span class="token variable">$http_referer</span>" '</span>
                      <span class="token string">'"<span class="token variable">$http_user_agent</span>" "<span class="token variable">$http_x_forwarded_for</span>"'</span></span><span class="token punctuation">;</span>

    <span class="token directive"><span class="token keyword">access_log</span>  /var/log/nginx/access.log  main</span><span class="token punctuation">;</span>

    <span class="token directive"><span class="token keyword">sendfile</span>        <span class="token boolean">on</span></span><span class="token punctuation">;</span>

    <span class="token directive"><span class="token keyword">keepalive_timeout</span>  <span class="token number">65</span></span><span class="token punctuation">;</span>
  
    <span class="token comment"># 定义服务器集群，集群名为httpds</span>
    <span class="token directive"><span class="token keyword">upstream</span> httpds</span> <span class="token punctuation">&#123;</span>
      <span class="token comment"># weight设置权重</span>
      <span class="token directive"><span class="token keyword">server</span> ng1:80 weight=7</span><span class="token punctuation">;</span>
      <span class="token directive"><span class="token keyword">server</span> ng2:80 weight=2</span><span class="token punctuation">;</span>
      <span class="token directive"><span class="token keyword">server</span> ng3:80 weight=1</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    
    <span class="token comment"># 虚拟主机1</span>
    <span class="token directive"><span class="token keyword">server</span></span> <span class="token punctuation">&#123;</span>
        <span class="token directive"><span class="token keyword">listen</span>       <span class="token number">80</span></span><span class="token punctuation">;</span>
        <span class="token directive"><span class="token keyword">server_name</span>  localhost</span><span class="token punctuation">;</span>  

        <span class="token directive"><span class="token keyword">location</span> /</span> <span class="token punctuation">&#123;</span>
            <span class="token comment"># 配置反向代理</span>
            <span class="token directive"><span class="token keyword">proxy_pass</span> http://httpds</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token comment"># redirect server error pages to the static page /50x.html</span>
        <span class="token directive"><span class="token keyword">error_page</span>   <span class="token number">500</span> <span class="token number">502</span> <span class="token number">503</span> <span class="token number">504</span>  /50x.html</span><span class="token punctuation">;</span>
        <span class="token directive"><span class="token keyword">location</span> = /50x.html</span> <span class="token punctuation">&#123;</span>
            <span class="token directive"><span class="token keyword">root</span>   /usr/share/nginx/www/vhost1/html</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>down参数指定服务器不参与负载，backup参数代表默认不启用，其他服务器down了才启用：</p>
<pre class="language-nginx" data-language="nginx"><code class="language-nginx"><span class="token directive"><span class="token keyword">user</span>  nginx</span><span class="token punctuation">;</span>
<span class="token directive"><span class="token keyword">worker_processes</span>  auto</span><span class="token punctuation">;</span>

<span class="token directive"><span class="token keyword">error_log</span>  /var/log/nginx/error.log notice</span><span class="token punctuation">;</span>
<span class="token directive"><span class="token keyword">pid</span>        /var/run/nginx.pid</span><span class="token punctuation">;</span>


<span class="token directive"><span class="token keyword">events</span></span> <span class="token punctuation">&#123;</span>
    <span class="token directive"><span class="token keyword">worker_connections</span>  <span class="token number">1024</span></span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>


<span class="token directive"><span class="token keyword">http</span></span> <span class="token punctuation">&#123;</span>
    <span class="token directive"><span class="token keyword">include</span>       /etc/nginx/mime.types</span><span class="token punctuation">;</span>
    <span class="token directive"><span class="token keyword">default_type</span>  application/octet-stream</span><span class="token punctuation">;</span>

    <span class="token directive"><span class="token keyword">log_format</span>  main  <span class="token string">'<span class="token variable">$remote_addr</span> - <span class="token variable">$remote_user</span> [<span class="token variable">$time_local]</span> "<span class="token variable">$request</span>" '</span>
                      <span class="token string">'<span class="token variable">$status</span> <span class="token variable">$body_bytes_sent</span> "<span class="token variable">$http_referer</span>" '</span>
                      <span class="token string">'"<span class="token variable">$http_user_agent</span>" "<span class="token variable">$http_x_forwarded_for</span>"'</span></span><span class="token punctuation">;</span>

    <span class="token directive"><span class="token keyword">access_log</span>  /var/log/nginx/access.log  main</span><span class="token punctuation">;</span>

    <span class="token directive"><span class="token keyword">sendfile</span>        <span class="token boolean">on</span></span><span class="token punctuation">;</span>

    <span class="token directive"><span class="token keyword">keepalive_timeout</span>  <span class="token number">65</span></span><span class="token punctuation">;</span>
  
    <span class="token comment"># 定义服务器集群，集群名为httpds</span>
    <span class="token directive"><span class="token keyword">upstream</span> httpds</span> <span class="token punctuation">&#123;</span>
      <span class="token comment"># weight设置权重</span>
      <span class="token directive"><span class="token keyword">server</span> ng1:80 weight=7</span><span class="token punctuation">;</span>
      <span class="token directive"><span class="token keyword">server</span> ng2:80 weight=2</span><span class="token punctuation">;</span>
      <span class="token directive"><span class="token keyword">server</span> ng3:80 weight=1 backup</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    
    <span class="token comment"># 虚拟主机1</span>
    <span class="token directive"><span class="token keyword">server</span></span> <span class="token punctuation">&#123;</span>
        <span class="token directive"><span class="token keyword">listen</span>       <span class="token number">80</span></span><span class="token punctuation">;</span>
        <span class="token directive"><span class="token keyword">server_name</span>  localhost</span><span class="token punctuation">;</span>  

        <span class="token directive"><span class="token keyword">location</span> /</span> <span class="token punctuation">&#123;</span>
            <span class="token comment"># 配置反向代理</span>
            <span class="token directive"><span class="token keyword">proxy_pass</span> http://httpds</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token comment"># redirect server error pages to the static page /50x.html</span>
        <span class="token directive"><span class="token keyword">error_page</span>   <span class="token number">500</span> <span class="token number">502</span> <span class="token number">503</span> <span class="token number">504</span>  /50x.html</span><span class="token punctuation">;</span>
        <span class="token directive"><span class="token keyword">location</span> = /50x.html</span> <span class="token punctuation">&#123;</span>
            <span class="token directive"><span class="token keyword">root</span>   /usr/share/nginx/www/vhost1/html</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>

<h2 id="动静分离"><a href="#动静分离" class="headerlink" title="动静分离"></a>动静分离</h2><pre class="language-nginx" data-language="nginx"><code class="language-nginx"><span class="token directive"><span class="token keyword">user</span>  nginx</span><span class="token punctuation">;</span>
<span class="token directive"><span class="token keyword">worker_processes</span>  auto</span><span class="token punctuation">;</span>

<span class="token directive"><span class="token keyword">error_log</span>  /var/log/nginx/error.log notice</span><span class="token punctuation">;</span>
<span class="token directive"><span class="token keyword">pid</span>        /var/run/nginx.pid</span><span class="token punctuation">;</span>


<span class="token directive"><span class="token keyword">events</span></span> <span class="token punctuation">&#123;</span>
    <span class="token directive"><span class="token keyword">worker_connections</span>  <span class="token number">1024</span></span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>


<span class="token directive"><span class="token keyword">http</span></span> <span class="token punctuation">&#123;</span>
    <span class="token directive"><span class="token keyword">include</span>       /etc/nginx/mime.types</span><span class="token punctuation">;</span>
    <span class="token directive"><span class="token keyword">default_type</span>  application/octet-stream</span><span class="token punctuation">;</span>

    <span class="token directive"><span class="token keyword">log_format</span>  main  <span class="token string">'<span class="token variable">$remote_addr</span> - <span class="token variable">$remote_user</span> [<span class="token variable">$time_local]</span> "<span class="token variable">$request</span>" '</span>
                      <span class="token string">'<span class="token variable">$status</span> <span class="token variable">$body_bytes_sent</span> "<span class="token variable">$http_referer</span>" '</span>
                      <span class="token string">'"<span class="token variable">$http_user_agent</span>" "<span class="token variable">$http_x_forwarded_for</span>"'</span></span><span class="token punctuation">;</span>

    <span class="token directive"><span class="token keyword">access_log</span>  /var/log/nginx/access.log  main</span><span class="token punctuation">;</span>

    <span class="token directive"><span class="token keyword">sendfile</span>        <span class="token boolean">on</span></span><span class="token punctuation">;</span>

    <span class="token directive"><span class="token keyword">keepalive_timeout</span>  <span class="token number">65</span></span><span class="token punctuation">;</span>
  
    <span class="token comment"># 定义服务器集群，集群名为httpds</span>
    <span class="token directive"><span class="token keyword">upstream</span> httpds</span> <span class="token punctuation">&#123;</span>
      <span class="token comment"># weight设置权重</span>
      <span class="token directive"><span class="token keyword">server</span> ng1:80 weight=7</span><span class="token punctuation">;</span>
      <span class="token directive"><span class="token keyword">server</span> ng2:80 weight=2</span><span class="token punctuation">;</span>
      <span class="token directive"><span class="token keyword">server</span> ng3:80 weight=1 backup</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    
    <span class="token comment"># 虚拟主机1</span>
    <span class="token directive"><span class="token keyword">server</span></span> <span class="token punctuation">&#123;</span>
        <span class="token directive"><span class="token keyword">listen</span>       <span class="token number">80</span></span><span class="token punctuation">;</span>
        <span class="token directive"><span class="token keyword">server_name</span>  localhost</span><span class="token punctuation">;</span>  

        <span class="token directive"><span class="token keyword">location</span> /</span> <span class="token punctuation">&#123;</span>
            <span class="token comment"># 配置反向代理</span>
            <span class="token directive"><span class="token keyword">proxy_pass</span> http://httpds</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
     
        <span class="token directive"><span class="token keyword">location</span> /img</span> <span class="token punctuation">&#123;</span>
					<span class="token directive"><span class="token keyword">root</span> html</span><span class="token punctuation">;</span>
           <span class="token directive"><span class="token keyword">index</span> index.html index.htm</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    
    		<span class="token directive"><span class="token keyword">location</span> /js</span> <span class="token punctuation">&#123;</span>
					<span class="token directive"><span class="token keyword">root</span> html</span><span class="token punctuation">;</span>
           <span class="token directive"><span class="token keyword">index</span> index.html index.htm</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    
    		<span class="token directive"><span class="token keyword">location</span> /css</span> <span class="token punctuation">&#123;</span>
					<span class="token directive"><span class="token keyword">root</span> html</span><span class="token punctuation">;</span>
           <span class="token directive"><span class="token keyword">index</span> index.html index.htm</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token comment"># redirect server error pages to the static page /50x.html</span>
        <span class="token directive"><span class="token keyword">error_page</span>   <span class="token number">500</span> <span class="token number">502</span> <span class="token number">503</span> <span class="token number">504</span>  /50x.html</span><span class="token punctuation">;</span>
        <span class="token directive"><span class="token keyword">location</span> = /50x.html</span> <span class="token punctuation">&#123;</span>
            <span class="token directive"><span class="token keyword">root</span>   /usr/share/nginx/www/vhost1/html</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>

<h3 id="location-正则参数"><a href="#location-正则参数" class="headerlink" title="location 正则参数"></a>location 正则参数</h3><pre class="language-nginx" data-language="nginx"><code class="language-nginx"><span class="token directive"><span class="token keyword">user</span>  nginx</span><span class="token punctuation">;</span>
<span class="token directive"><span class="token keyword">worker_processes</span>  auto</span><span class="token punctuation">;</span>

<span class="token directive"><span class="token keyword">error_log</span>  /var/log/nginx/error.log notice</span><span class="token punctuation">;</span>
<span class="token directive"><span class="token keyword">pid</span>        /var/run/nginx.pid</span><span class="token punctuation">;</span>


<span class="token directive"><span class="token keyword">events</span></span> <span class="token punctuation">&#123;</span>
    <span class="token directive"><span class="token keyword">worker_connections</span>  <span class="token number">1024</span></span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>


<span class="token directive"><span class="token keyword">http</span></span> <span class="token punctuation">&#123;</span>
    <span class="token directive"><span class="token keyword">include</span>       /etc/nginx/mime.types</span><span class="token punctuation">;</span>
    <span class="token directive"><span class="token keyword">default_type</span>  application/octet-stream</span><span class="token punctuation">;</span>

    <span class="token directive"><span class="token keyword">log_format</span>  main  <span class="token string">'<span class="token variable">$remote_addr</span> - <span class="token variable">$remote_user</span> [<span class="token variable">$time_local]</span> "<span class="token variable">$request</span>" '</span>
                      <span class="token string">'<span class="token variable">$status</span> <span class="token variable">$body_bytes_sent</span> "<span class="token variable">$http_referer</span>" '</span>
                      <span class="token string">'"<span class="token variable">$http_user_agent</span>" "<span class="token variable">$http_x_forwarded_for</span>"'</span></span><span class="token punctuation">;</span>

    <span class="token directive"><span class="token keyword">access_log</span>  /var/log/nginx/access.log  main</span><span class="token punctuation">;</span>

    <span class="token directive"><span class="token keyword">sendfile</span>        <span class="token boolean">on</span></span><span class="token punctuation">;</span>

    <span class="token directive"><span class="token keyword">keepalive_timeout</span>  <span class="token number">65</span></span><span class="token punctuation">;</span>
  
    <span class="token comment"># 定义服务器集群，集群名为httpds</span>
    <span class="token directive"><span class="token keyword">upstream</span> httpds</span> <span class="token punctuation">&#123;</span>
      <span class="token comment"># weight设置权重</span>
      <span class="token directive"><span class="token keyword">server</span> ng1:80 weight=7</span><span class="token punctuation">;</span>
      <span class="token directive"><span class="token keyword">server</span> ng2:80 weight=2</span><span class="token punctuation">;</span>
      <span class="token directive"><span class="token keyword">server</span> ng3:80 weight=1 backup</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    
    <span class="token comment"># 虚拟主机1</span>
    <span class="token directive"><span class="token keyword">server</span></span> <span class="token punctuation">&#123;</span>
        <span class="token directive"><span class="token keyword">listen</span>       <span class="token number">80</span></span><span class="token punctuation">;</span>
        <span class="token directive"><span class="token keyword">server_name</span>  localhost</span><span class="token punctuation">;</span>  

        <span class="token directive"><span class="token keyword">location</span> /</span> <span class="token punctuation">&#123;</span>
            <span class="token comment"># 配置反向代理</span>
            <span class="token directive"><span class="token keyword">proxy_pass</span> http://httpds</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
     
    		<span class="token comment"># A regular expression is preceded with the tilde (~) for case-sensitive matching,</span>
        <span class="token comment"># or the tilde-asterisk (~*) for case-insensitive matching. </span>
        <span class="token directive"><span class="token keyword">location</span> ~*/(img|js|css)</span> <span class="token punctuation">&#123;</span>
					<span class="token directive"><span class="token keyword">root</span> html</span><span class="token punctuation">;</span>
           <span class="token directive"><span class="token keyword">index</span> index.html index.htm</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token comment"># redirect server error pages to the static page /50x.html</span>
        <span class="token directive"><span class="token keyword">error_page</span>   <span class="token number">500</span> <span class="token number">502</span> <span class="token number">503</span> <span class="token number">504</span>  /50x.html</span><span class="token punctuation">;</span>
        <span class="token directive"><span class="token keyword">location</span> = /50x.html</span> <span class="token punctuation">&#123;</span>
            <span class="token directive"><span class="token keyword">root</span>   /usr/share/nginx/www/vhost1/html</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>

<h3 id="URL-rewrite"><a href="#URL-rewrite" class="headerlink" title="URL rewrite"></a>URL rewrite</h3><pre class="language-nginx" data-language="nginx"><code class="language-nginx"><span class="token directive"><span class="token keyword">user</span>  nginx</span><span class="token punctuation">;</span>
<span class="token directive"><span class="token keyword">worker_processes</span>  auto</span><span class="token punctuation">;</span>

<span class="token directive"><span class="token keyword">error_log</span>  /var/log/nginx/error.log notice</span><span class="token punctuation">;</span>
<span class="token directive"><span class="token keyword">pid</span>        /var/run/nginx.pid</span><span class="token punctuation">;</span>


<span class="token directive"><span class="token keyword">events</span></span> <span class="token punctuation">&#123;</span>
    <span class="token directive"><span class="token keyword">worker_connections</span>  <span class="token number">1024</span></span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>


<span class="token directive"><span class="token keyword">http</span></span> <span class="token punctuation">&#123;</span>
    <span class="token directive"><span class="token keyword">include</span>       /etc/nginx/mime.types</span><span class="token punctuation">;</span>
    <span class="token directive"><span class="token keyword">default_type</span>  application/octet-stream</span><span class="token punctuation">;</span>

    <span class="token directive"><span class="token keyword">log_format</span>  main  <span class="token string">'<span class="token variable">$remote_addr</span> - <span class="token variable">$remote_user</span> [<span class="token variable">$time_local]</span> "<span class="token variable">$request</span>" '</span>
                      <span class="token string">'<span class="token variable">$status</span> <span class="token variable">$body_bytes_sent</span> "<span class="token variable">$http_referer</span>" '</span>
                      <span class="token string">'"<span class="token variable">$http_user_agent</span>" "<span class="token variable">$http_x_forwarded_for</span>"'</span></span><span class="token punctuation">;</span>

    <span class="token directive"><span class="token keyword">access_log</span>  /var/log/nginx/access.log  main</span><span class="token punctuation">;</span>

    <span class="token directive"><span class="token keyword">sendfile</span>        <span class="token boolean">on</span></span><span class="token punctuation">;</span>

    <span class="token directive"><span class="token keyword">keepalive_timeout</span>  <span class="token number">65</span></span><span class="token punctuation">;</span>
  
    <span class="token comment"># 定义服务器集群，集群名为httpds</span>
    <span class="token directive"><span class="token keyword">upstream</span> httpds</span> <span class="token punctuation">&#123;</span>
      <span class="token comment"># weight设置权重</span>
      <span class="token directive"><span class="token keyword">server</span> ng1:80 weight=7</span><span class="token punctuation">;</span>
      <span class="token directive"><span class="token keyword">server</span> ng2:80 weight=2</span><span class="token punctuation">;</span>
      <span class="token directive"><span class="token keyword">server</span> ng3:80 weight=1 backup</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    
    <span class="token comment"># 虚拟主机1</span>
    <span class="token directive"><span class="token keyword">server</span></span> <span class="token punctuation">&#123;</span>
        <span class="token directive"><span class="token keyword">listen</span>       <span class="token number">80</span></span><span class="token punctuation">;</span>
        <span class="token directive"><span class="token keyword">server_name</span>  localhost</span><span class="token punctuation">;</span>  

        <span class="token directive"><span class="token keyword">location</span> /</span> <span class="token punctuation">&#123;</span>
            <span class="token comment"># 将/2.html 重写为 /index.jsp?pageNum=2</span>
            <span class="token directive"><span class="token keyword">rewrite</span> ^/2.html$ /index.jsp?pageNum=2 break</span><span class="token punctuation">;</span>
            <span class="token comment"># 配置反向代理</span>
            <span class="token directive"><span class="token keyword">proxy_pass</span> http://httpds</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
     
    		<span class="token comment"># A regular expression is preceded with the tilde (~) for case-sensitive matching,</span>
        <span class="token comment"># or the tilde-asterisk (~*) for case-insensitive matching. </span>
        <span class="token directive"><span class="token keyword">location</span> ~*/(img|js|css)</span> <span class="token punctuation">&#123;</span>
					<span class="token directive"><span class="token keyword">root</span> html</span><span class="token punctuation">;</span>
           <span class="token directive"><span class="token keyword">index</span> index.html index.htm</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token comment"># redirect server error pages to the static page /50x.html</span>
        <span class="token directive"><span class="token keyword">error_page</span>   <span class="token number">500</span> <span class="token number">502</span> <span class="token number">503</span> <span class="token number">504</span>  /50x.html</span><span class="token punctuation">;</span>
        <span class="token directive"><span class="token keyword">location</span> = /50x.html</span> <span class="token punctuation">&#123;</span>
            <span class="token directive"><span class="token keyword">root</span>   /usr/share/nginx/www/vhost1/html</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>

]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>Python tkinter 布局管理</title>
    <url>/2022/tkinter_geometry_manager/</url>
    <content><![CDATA[<p>本文讲述如何使用 tkinter 的布局管理 (被称作 layout managers 或 geometry managers)。tkinter 有三种布局管理方式：</p>
<ul>
<li>pack</li>
<li>place</li>
<li>grid</li>
</ul>
<blockquote>
<p>注意，这三种布局管理在同一个 master window 里一定不该被混用！</p>
</blockquote>
<p>布局管理有以下功能：</p>
<ul>
<li>在屏幕上排列控件，包括确定组件的大小和位置</li>
<li>注册窗口控件到底层窗口系统</li>
<li>管理控件在屏幕上的显示</li>
</ul>
<p>虽然控件自己也可以指定大小和对齐方式等信息， 但最终的控件大小及位置还是由布局管理决定的。</p>
<span id="more"></span>

<h1 id="Pack-布局管理器"><a href="#Pack-布局管理器" class="headerlink" title="Pack 布局管理器"></a>Pack 布局管理器</h1><p>Pack布局管理器按行或列打包控件。您可以使用fill，expand和side等选项来控制此布局管理器。</p>
<p>管理器处理在同一master widget中打包的所有窗口小部件。打包算法很简单，但有点不太好用文字描述;想象一块弹性材料，中间有一个非常小的矩形孔。对于每个窗口控件，按照打包的顺序，布局管理器使孔足够大以容纳窗口控件，然后将其放置在给定的内边缘（默认为上边缘）。然后它重复所有小部件的过程。最后，当所有窗口小部件都被打包到孔中时，管理器计算所有窗口小部件的边界框，使master widget足够大以容纳所有窗口小部件，并将它们全部移动到主窗口。</p>
<p>pack 是三种布局管理器中最容易使用的。我们可以用pack方法声明控件之间的相对位置，而不必精确地指定控件在屏幕上的位置。pack 布局管理器会自动处理好控件的这些细节。虽然pack更容易使用，但相较于place和grid，这种布局管理器的灵活性也受到限制。对于简单的应用程序，pack肯定是首选。以下几种情况比较适合使用pack布局管理器：</p>
<ul>
<li>将控件放在frame（或任何其他容器控件）中，并让它填充整个frame</li>
<li>从上到下逐个放置一些控件</li>
<li>并排放置一些控件</li>
</ul>
<p>示例：</p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> tkinter <span class="token keyword">as</span> tk

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>
    root <span class="token operator">=</span> tk<span class="token punctuation">.</span>Tk<span class="token punctuation">(</span><span class="token punctuation">)</span>
    
    tk<span class="token punctuation">.</span>Label<span class="token punctuation">(</span>root<span class="token punctuation">,</span> text<span class="token operator">=</span><span class="token string">"Red Sun"</span><span class="token punctuation">,</span> bg<span class="token operator">=</span><span class="token string">"red"</span><span class="token punctuation">,</span> fg<span class="token operator">=</span><span class="token string">"white"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token punctuation">)</span>
    tk<span class="token punctuation">.</span>Label<span class="token punctuation">(</span>root<span class="token punctuation">,</span> text<span class="token operator">=</span><span class="token string">"Green Grass"</span><span class="token punctuation">,</span> bg<span class="token operator">=</span><span class="token string">"green"</span><span class="token punctuation">,</span> fg<span class="token operator">=</span><span class="token string">"black"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token punctuation">)</span>
    tk<span class="token punctuation">.</span>Label<span class="token punctuation">(</span>root<span class="token punctuation">,</span> text<span class="token operator">=</span><span class="token string">"Blue Sky"</span><span class="token punctuation">,</span> bg<span class="token operator">=</span><span class="token string">"blue"</span><span class="token punctuation">,</span> fg<span class="token operator">=</span><span class="token string">"white"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token punctuation">)</span>

    root<span class="token punctuation">.</span>mainloop<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>

<p><img src="/2022/tkinter_geometry_manager/20170114201534466.png" alt="img"></p>
<p>如果需要创建更复杂的布局，通常需要使用额外的Frame控件对控件进行分组。您也可以使用grid布局管理器。</p>
<h2 id="fill-选项：控制填充"><a href="#fill-选项：控制填充" class="headerlink" title="fill 选项：控制填充"></a>fill 选项：控制填充</h2><p>在上面那个例子里, 我们简单的将三个 Label 控件 pack 到父控件<code>root</code>上，没有使用任何属性。 因此，pack必须决定以哪种方式来排列这些 Label 控件。可以看到，pack默认使用<code>pack(side=tkinter.TOP)</code>方式进行布局，即从上到下依次放置，并水平居中。 同时，我们也发现 pack 默认会将 Label 控件的大小设置为文本的大小。如果你想让这些控件和其父控件一样宽, 可以使用<code>fill=tkinter.X</code>属性，使其水平横向填充父控件：</p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> tkinter <span class="token keyword">as</span> tk

root <span class="token operator">=</span> tk<span class="token punctuation">.</span>Tk<span class="token punctuation">(</span><span class="token punctuation">)</span>
w1 <span class="token operator">=</span> tk<span class="token punctuation">.</span>Label<span class="token punctuation">(</span>root<span class="token punctuation">,</span> text<span class="token operator">=</span><span class="token string">"Red Sun"</span><span class="token punctuation">,</span> bg<span class="token operator">=</span><span class="token string">"red"</span><span class="token punctuation">,</span> fg<span class="token operator">=</span><span class="token string">"white"</span><span class="token punctuation">)</span>
w1<span class="token punctuation">.</span>pack<span class="token punctuation">(</span>fill<span class="token operator">=</span>tk<span class="token punctuation">.</span>X<span class="token punctuation">)</span>
w2 <span class="token operator">=</span> tk<span class="token punctuation">.</span>Label<span class="token punctuation">(</span>root<span class="token punctuation">,</span> text<span class="token operator">=</span><span class="token string">"Green Grass"</span><span class="token punctuation">,</span> bg<span class="token operator">=</span><span class="token string">"green"</span><span class="token punctuation">,</span> fg<span class="token operator">=</span><span class="token string">"black"</span><span class="token punctuation">)</span>
w2<span class="token punctuation">.</span>pack<span class="token punctuation">(</span>fill<span class="token operator">=</span>tk<span class="token punctuation">.</span>X<span class="token punctuation">)</span>
w3 <span class="token operator">=</span> tk<span class="token punctuation">.</span>Label<span class="token punctuation">(</span>root<span class="token punctuation">,</span> text<span class="token operator">=</span><span class="token string">"Blue Sky"</span><span class="token punctuation">,</span> bg<span class="token operator">=</span><span class="token string">"blue"</span><span class="token punctuation">,</span> fg<span class="token operator">=</span><span class="token string">"white"</span><span class="token punctuation">)</span>
w3<span class="token punctuation">.</span>pack<span class="token punctuation">(</span>fill<span class="token operator">=</span>tk<span class="token punctuation">.</span>X<span class="token punctuation">)</span>

root<span class="token punctuation">.</span>mainloop<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>



<p><img src="/2022/tkinter_geometry_manager/20170114202405976.png" alt="img"></p>
<h2 id="padding-选项：控件边距"><a href="#padding-选项：控件边距" class="headerlink" title="padding 选项：控件边距"></a>padding 选项：控件边距</h2><p>Pack 可以在四个方面控制控件边距: 内边距, 外边距, 水平边距, 垂直边距:</p>
<p><strong>padx</strong> - 设置水平方向的外边距</p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> Tkinter <span class="token keyword">import</span> <span class="token operator">*</span>



root <span class="token operator">=</span> Tk<span class="token punctuation">(</span><span class="token punctuation">)</span>



w <span class="token operator">=</span> Label<span class="token punctuation">(</span>root<span class="token punctuation">,</span> text<span class="token operator">=</span><span class="token string">"Red Sun"</span><span class="token punctuation">,</span> bg<span class="token operator">=</span><span class="token string">"red"</span><span class="token punctuation">,</span> fg<span class="token operator">=</span><span class="token string">"white"</span><span class="token punctuation">)</span>



w<span class="token punctuation">.</span>pack<span class="token punctuation">(</span>fill<span class="token operator">=</span>X<span class="token punctuation">,</span>padx<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span>



w <span class="token operator">=</span> Label<span class="token punctuation">(</span>root<span class="token punctuation">,</span> text<span class="token operator">=</span><span class="token string">"Green Grass"</span><span class="token punctuation">,</span> bg<span class="token operator">=</span><span class="token string">"green"</span><span class="token punctuation">,</span> fg<span class="token operator">=</span><span class="token string">"black"</span><span class="token punctuation">)</span>



w<span class="token punctuation">.</span>pack<span class="token punctuation">(</span>fill<span class="token operator">=</span>X<span class="token punctuation">,</span>padx<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span>



w <span class="token operator">=</span> Label<span class="token punctuation">(</span>root<span class="token punctuation">,</span> text<span class="token operator">=</span><span class="token string">"Blue Sky"</span><span class="token punctuation">,</span> bg<span class="token operator">=</span><span class="token string">"blue"</span><span class="token punctuation">,</span> fg<span class="token operator">=</span><span class="token string">"white"</span><span class="token punctuation">)</span>



w<span class="token punctuation">.</span>pack<span class="token punctuation">(</span>fill<span class="token operator">=</span>X<span class="token punctuation">,</span>padx<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span>



mainloop<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>



<p><img src="/2022/tkinter_geometry_manager/20170114202920393.png" alt="img"></p>
<p><strong>pady</strong> - 设置竖直方向的外边距</p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> Tkinter <span class="token keyword">import</span> <span class="token operator">*</span>



root <span class="token operator">=</span> Tk<span class="token punctuation">(</span><span class="token punctuation">)</span>



w <span class="token operator">=</span> Label<span class="token punctuation">(</span>root<span class="token punctuation">,</span> text<span class="token operator">=</span><span class="token string">"Red Sun"</span><span class="token punctuation">,</span> bg<span class="token operator">=</span><span class="token string">"red"</span><span class="token punctuation">,</span> fg<span class="token operator">=</span><span class="token string">"white"</span><span class="token punctuation">)</span>



w<span class="token punctuation">.</span>pack<span class="token punctuation">(</span>fill<span class="token operator">=</span>X<span class="token punctuation">,</span>pady<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span>



w <span class="token operator">=</span> Label<span class="token punctuation">(</span>root<span class="token punctuation">,</span> text<span class="token operator">=</span><span class="token string">"Green Grass"</span><span class="token punctuation">,</span> bg<span class="token operator">=</span><span class="token string">"green"</span><span class="token punctuation">,</span> fg<span class="token operator">=</span><span class="token string">"black"</span><span class="token punctuation">)</span>



w<span class="token punctuation">.</span>pack<span class="token punctuation">(</span>fill<span class="token operator">=</span>X<span class="token punctuation">,</span>pady<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span>



w <span class="token operator">=</span> Label<span class="token punctuation">(</span>root<span class="token punctuation">,</span> text<span class="token operator">=</span><span class="token string">"Blue Sky"</span><span class="token punctuation">,</span> bg<span class="token operator">=</span><span class="token string">"blue"</span><span class="token punctuation">,</span> fg<span class="token operator">=</span><span class="token string">"white"</span><span class="token punctuation">)</span>



w<span class="token punctuation">.</span>pack<span class="token punctuation">(</span>fill<span class="token operator">=</span>X<span class="token punctuation">,</span>pady<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span>



mainloop<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>



<p><img src="/2022/tkinter_geometry_manager/20170114203036003.png" alt="img"></p>
<p><strong>ipadx</strong> - 设置水平方向的内边距</p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> Tkinter <span class="token keyword">import</span> <span class="token operator">*</span>



root <span class="token operator">=</span> Tk<span class="token punctuation">(</span><span class="token punctuation">)</span>



w <span class="token operator">=</span> Label<span class="token punctuation">(</span>root<span class="token punctuation">,</span> text<span class="token operator">=</span><span class="token string">"Red Sun"</span><span class="token punctuation">,</span> bg<span class="token operator">=</span><span class="token string">"red"</span><span class="token punctuation">,</span> fg<span class="token operator">=</span><span class="token string">"white"</span><span class="token punctuation">)</span>



w<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token punctuation">)</span>



w <span class="token operator">=</span> Label<span class="token punctuation">(</span>root<span class="token punctuation">,</span> text<span class="token operator">=</span><span class="token string">"Green Grass"</span><span class="token punctuation">,</span> bg<span class="token operator">=</span><span class="token string">"green"</span><span class="token punctuation">,</span> fg<span class="token operator">=</span><span class="token string">"black"</span><span class="token punctuation">)</span>



w<span class="token punctuation">.</span>pack<span class="token punctuation">(</span>ipadx<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span>



w <span class="token operator">=</span> Label<span class="token punctuation">(</span>root<span class="token punctuation">,</span> text<span class="token operator">=</span><span class="token string">"Blue Sky"</span><span class="token punctuation">,</span> bg<span class="token operator">=</span><span class="token string">"blue"</span><span class="token punctuation">,</span> fg<span class="token operator">=</span><span class="token string">"white"</span><span class="token punctuation">)</span>



w<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token punctuation">)</span>



mainloop<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>



<p><img src="/2022/tkinter_geometry_manager/20170114203323832.png" alt="img"></p>
<p><strong>ipady</strong> - 设置竖直方向的内边距</p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> Tkinter <span class="token keyword">import</span> <span class="token operator">*</span>



root <span class="token operator">=</span> Tk<span class="token punctuation">(</span><span class="token punctuation">)</span>



w <span class="token operator">=</span> Label<span class="token punctuation">(</span>root<span class="token punctuation">,</span> text<span class="token operator">=</span><span class="token string">"Red Sun"</span><span class="token punctuation">,</span> bg<span class="token operator">=</span><span class="token string">"red"</span><span class="token punctuation">,</span> fg<span class="token operator">=</span><span class="token string">"white"</span><span class="token punctuation">)</span>



w<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token punctuation">)</span>



w <span class="token operator">=</span> Label<span class="token punctuation">(</span>root<span class="token punctuation">,</span> text<span class="token operator">=</span><span class="token string">"Green Grass"</span><span class="token punctuation">,</span> bg<span class="token operator">=</span><span class="token string">"green"</span><span class="token punctuation">,</span> fg<span class="token operator">=</span><span class="token string">"black"</span><span class="token punctuation">)</span>



w<span class="token punctuation">.</span>pack<span class="token punctuation">(</span>ipadx<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span>



w <span class="token operator">=</span> Label<span class="token punctuation">(</span>root<span class="token punctuation">,</span> text<span class="token operator">=</span><span class="token string">"Blue Sky"</span><span class="token punctuation">,</span> bg<span class="token operator">=</span><span class="token string">"blue"</span><span class="token punctuation">,</span> fg<span class="token operator">=</span><span class="token string">"white"</span><span class="token punctuation">)</span>



w<span class="token punctuation">.</span>pack<span class="token punctuation">(</span>ipady<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span>



mainloop<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>



<p><img src="/2022/tkinter_geometry_manager/20170114203423489.png" alt="img"></p>
<p>上述四个属性的默认值都是 0.</p>
<h2 id="side选项：顺次放置控件"><a href="#side选项：顺次放置控件" class="headerlink" title="side选项：顺次放置控件"></a>side选项：顺次放置控件</h2><p>我们把上面那几个 Label 从左到右放在一排:</p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> Tkinter <span class="token keyword">import</span> <span class="token operator">*</span>

root <span class="token operator">=</span> Tk<span class="token punctuation">(</span><span class="token punctuation">)</span>

w <span class="token operator">=</span> Label<span class="token punctuation">(</span>root<span class="token punctuation">,</span> text<span class="token operator">=</span><span class="token string">"red"</span><span class="token punctuation">,</span> bg<span class="token operator">=</span><span class="token string">"red"</span><span class="token punctuation">,</span> fg<span class="token operator">=</span><span class="token string">"white"</span><span class="token punctuation">)</span>
w<span class="token punctuation">.</span>pack<span class="token punctuation">(</span>padx<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> pady<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span> side<span class="token operator">=</span>LEFT<span class="token punctuation">)</span>
w <span class="token operator">=</span> Label<span class="token punctuation">(</span>root<span class="token punctuation">,</span> text<span class="token operator">=</span><span class="token string">"green"</span><span class="token punctuation">,</span> bg<span class="token operator">=</span><span class="token string">"green"</span><span class="token punctuation">,</span> fg<span class="token operator">=</span><span class="token string">"black"</span><span class="token punctuation">)</span>
w<span class="token punctuation">.</span>pack<span class="token punctuation">(</span>padx<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> pady<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">,</span> side<span class="token operator">=</span>LEFT<span class="token punctuation">)</span>
w <span class="token operator">=</span> Label<span class="token punctuation">(</span>root<span class="token punctuation">,</span> text<span class="token operator">=</span><span class="token string">"blue"</span><span class="token punctuation">,</span> bg<span class="token operator">=</span><span class="token string">"blue"</span><span class="token punctuation">,</span> fg<span class="token operator">=</span><span class="token string">"white"</span><span class="token punctuation">)</span>
w<span class="token punctuation">.</span>pack<span class="token punctuation">(</span>padx<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> pady<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">,</span> side<span class="token operator">=</span>LEFT<span class="token punctuation">)</span>

mainloop<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>



<p><img src="/2022/tkinter_geometry_manager/20170114203536054.png" alt="img"></p>
<p>如果把上述 side 属性的值都改为 RIGHT, 那么上面 Label 控件的排列顺序就反过来了:</p>
<p><img src="/2022/tkinter_geometry_manager/20170114204013789.png" alt="img"></p>
<h1 id="Place-布局管理"><a href="#Place-布局管理" class="headerlink" title="Place 布局管理"></a>Place 布局管理</h1><p>Place 布局管理可以显式的指定控件的绝对位置或相对于其他控件的位置. 要使用 Place 布局, 调用相应控件的 place() 方法就可以了. 所有 tkinter 的标准控件都可以调用 place()</p>
<p> 方法.</p>
<p>下面是一个使用 Place 布局的例子: 为 Label 控件设置随机的背景色, 然后计算各个 Label 的背景色的亮度(灰度值), 如果其亮度小于 120, 则将其前景色(文字颜色, fg属性)设置为白色, 否则设为黑色. 这样做是为了避免使背景色和前景色过于接近而导致文字不易阅读.</p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> Tkinter <span class="token keyword">as</span> tk



<span class="token keyword">import</span> random



    



root <span class="token operator">=</span> tk<span class="token punctuation">.</span>Tk<span class="token punctuation">(</span><span class="token punctuation">)</span>



<span class="token comment"># width x height + x_offset + y_offset:</span>



root<span class="token punctuation">.</span>geometry<span class="token punctuation">(</span><span class="token string">"170x200+30+30"</span><span class="token punctuation">)</span> 



     



languages <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Python'</span><span class="token punctuation">,</span><span class="token string">'Perl'</span><span class="token punctuation">,</span><span class="token string">'C++'</span><span class="token punctuation">,</span><span class="token string">'Java'</span><span class="token punctuation">,</span><span class="token string">'Tcl/Tk'</span><span class="token punctuation">]</span>



labels <span class="token operator">=</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>



<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>



   ct <span class="token operator">=</span> <span class="token punctuation">[</span>random<span class="token punctuation">.</span>randrange<span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">]</span>



   brightness <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">round</span><span class="token punctuation">(</span><span class="token number">0.299</span><span class="token operator">*</span>ct<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">0.587</span><span class="token operator">*</span>ct<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">0.114</span><span class="token operator">*</span>ct<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>



   ct_hex <span class="token operator">=</span> <span class="token string">"%02x%02x%02x"</span> <span class="token operator">%</span> <span class="token builtin">tuple</span><span class="token punctuation">(</span>ct<span class="token punctuation">)</span>



   bg_colour <span class="token operator">=</span> <span class="token string">'#'</span> <span class="token operator">+</span> <span class="token string">""</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>ct_hex<span class="token punctuation">)</span>



   l <span class="token operator">=</span> tk<span class="token punctuation">.</span>Label<span class="token punctuation">(</span>root<span class="token punctuation">,</span> 



                text<span class="token operator">=</span>languages<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> 



                fg<span class="token operator">=</span><span class="token string">'White'</span> <span class="token keyword">if</span> brightness <span class="token operator">&lt;</span> <span class="token number">120</span> <span class="token keyword">else</span> <span class="token string">'Black'</span><span class="token punctuation">,</span>bg<span class="token operator">=</span>bg_colour<span class="token punctuation">)</span>
   l<span class="token punctuation">.</span>place<span class="token punctuation">(</span>x <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token number">30</span> <span class="token operator">+</span> i<span class="token operator">*</span><span class="token number">30</span><span class="token punctuation">,</span> width<span class="token operator">=</span><span class="token number">120</span><span class="token punctuation">,</span> height<span class="token operator">=</span><span class="token number">25</span><span class="token punctuation">)</span>
root<span class="token punctuation">.</span>mainloop<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>



<p><img src="/2022/tkinter_geometry_manager/20170114205223623.png" alt="img"></p>
<h1 id="Grid-布局管理"><a href="#Grid-布局管理" class="headerlink" title="Grid 布局管理"></a>Grid 布局管理</h1><p>Pack 作为首选的布局管理方式, 其运作方式并不是特别易于理解. 已经由 Pack 布局完成的设计也很难做出改变. Grid 布局在1996年作为另一种可供选择的布局方式被引入. Grid 布局方式易学易用, 但似乎大家还是习惯用 Pack.</p>
<p>Grid 在很多场景下是最好用的布局方式. 相比而言, Pack 布局在控制细节方面有些力不从心. Place 布局虽然可以完全控制控件位置, 但这也导致使用 Place 会比其他两种布局方式更加复杂.</p>
<p>Grid 把控件位置作为一个二维表结构来维护, 即按照行列的方式排列控件: 控件位置由其所在的行号和列号决定. 行号相同而列号不同的几个控件会被彼此上下排列; 列号相同而行号不同的几个控件会被彼此左右排列.</p>
<p>使用 Grid 布局的过程就是为各个控件指定行号和列号的过程. 不需要为每个格子指定大小, Grid 布局会自动设置一个合适的大小.</p>
<p>下面还是举个栗子吧:</p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> Tkinter <span class="token keyword">import</span> <span class="token operator">*</span>

colours <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'red'</span><span class="token punctuation">,</span><span class="token string">'green'</span><span class="token punctuation">,</span><span class="token string">'orange'</span><span class="token punctuation">,</span><span class="token string">'white'</span><span class="token punctuation">,</span><span class="token string">'yellow'</span><span class="token punctuation">,</span><span class="token string">'blue'</span><span class="token punctuation">]</span>
r <span class="token operator">=</span> <span class="token number">0</span>
<span class="token keyword">for</span> c <span class="token keyword">in</span> colours<span class="token punctuation">:</span>
    Label<span class="token punctuation">(</span>text<span class="token operator">=</span>c<span class="token punctuation">,</span> relief<span class="token operator">=</span>RIDGE<span class="token punctuation">,</span>width<span class="token operator">=</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">.</span>grid<span class="token punctuation">(</span>row<span class="token operator">=</span>r<span class="token punctuation">,</span>column<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>
    Entry<span class="token punctuation">(</span>bg<span class="token operator">=</span>c<span class="token punctuation">,</span> relief<span class="token operator">=</span>SUNKEN<span class="token punctuation">,</span>width<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span>grid<span class="token punctuation">(</span>row<span class="token operator">=</span>r<span class="token punctuation">,</span>column<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>
    r <span class="token operator">=</span> r <span class="token operator">+</span> <span class="token number">1</span>
mainloop<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>



<p><img src="/2022/tkinter_geometry_manager/20170114210830212.png" alt="img"></p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>tkinter</tag>
        <tag>GUI</tag>
      </tags>
  </entry>
  <entry>
    <title>tkinter 一例</title>
    <url>/2022/tkinter_input_in_entry_widget%EF%BC%8Coutput_in_text_widget_in_real_time/</url>
    <content><![CDATA[<p>entry输入命令，text实时获得命令输出：</p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> tkinter <span class="token keyword">as</span> tk
<span class="token keyword">import</span> tkinter<span class="token punctuation">.</span>ttk <span class="token keyword">as</span> ttk
<span class="token keyword">import</span> subprocess
<span class="token keyword">import</span> shlex
<span class="token keyword">import</span> sys


<span class="token keyword">class</span> <span class="token class-name">App</span><span class="token punctuation">(</span>tk<span class="token punctuation">.</span>Frame<span class="token punctuation">)</span><span class="token punctuation">:</span>
	<span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>master<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
		<span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>master<span class="token punctuation">)</span>
		self<span class="token punctuation">.</span>pack<span class="token punctuation">(</span>fill<span class="token operator">=</span>tk<span class="token punctuation">.</span>BOTH<span class="token punctuation">)</span>
		self<span class="token punctuation">.</span>create_widgets<span class="token punctuation">(</span><span class="token punctuation">)</span>
	
	<span class="token keyword">def</span> <span class="token function">test</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
		content <span class="token operator">=</span> self<span class="token punctuation">.</span>entry<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token keyword">if</span> content<span class="token punctuation">:</span>
			cmd <span class="token operator">=</span> shlex<span class="token punctuation">.</span>split<span class="token punctuation">(</span>content<span class="token punctuation">)</span>
			result <span class="token operator">=</span> subprocess<span class="token punctuation">.</span>Popen<span class="token punctuation">(</span>cmd<span class="token punctuation">,</span> shell<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> stdout<span class="token operator">=</span>subprocess<span class="token punctuation">.</span>PIPE<span class="token punctuation">,</span> stderr<span class="token operator">=</span>subprocess<span class="token punctuation">.</span>PIPE<span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">"gbk"</span><span class="token punctuation">)</span>
			<span class="token comment"># 实时获取子进程输出的每一行内容</span>
			<span class="token keyword">for</span> line <span class="token keyword">in</span> <span class="token builtin">iter</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>readline<span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
				<span class="token comment"># 将子进程输出的每一行写入text文本框</span>
				self<span class="token punctuation">.</span>text<span class="token punctuation">.</span>insert<span class="token punctuation">(</span>tk<span class="token punctuation">.</span>END<span class="token punctuation">,</span> line<span class="token punctuation">)</span>
				<span class="token comment"># 立即重绘Text内容</span>
				self<span class="token punctuation">.</span>text<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">)</span>
			
	
	<span class="token keyword">def</span> <span class="token function">create_widgets</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
		self<span class="token punctuation">.</span>entry <span class="token operator">=</span> ttk<span class="token punctuation">.</span>Entry<span class="token punctuation">(</span>self<span class="token punctuation">)</span>
		self<span class="token punctuation">.</span>entry<span class="token punctuation">.</span>grid<span class="token punctuation">(</span>row<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> column<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> sticky<span class="token operator">=</span>tk<span class="token punctuation">.</span>W<span class="token operator">+</span>tk<span class="token punctuation">.</span>E<span class="token punctuation">)</span>
		
		
		self<span class="token punctuation">.</span>label_split <span class="token operator">=</span> ttk<span class="token punctuation">.</span>Label<span class="token punctuation">(</span>self<span class="token punctuation">)</span>
		self<span class="token punctuation">.</span>label_split<span class="token punctuation">.</span>grid<span class="token punctuation">(</span>row<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> column<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>
		
		self<span class="token punctuation">.</span>button <span class="token operator">=</span> ttk<span class="token punctuation">.</span>Button<span class="token punctuation">(</span>self<span class="token punctuation">,</span> text<span class="token operator">=</span><span class="token string">"确定"</span><span class="token punctuation">,</span> width<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span> command<span class="token operator">=</span>self<span class="token punctuation">.</span>test<span class="token punctuation">)</span>
		self<span class="token punctuation">.</span>button<span class="token punctuation">.</span>grid<span class="token punctuation">(</span>row<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> column<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> sticky<span class="token operator">=</span>tk<span class="token punctuation">.</span>E<span class="token punctuation">)</span>
		
		self<span class="token punctuation">.</span>label_split <span class="token operator">=</span> ttk<span class="token punctuation">.</span>Label<span class="token punctuation">(</span>self<span class="token punctuation">)</span>
		self<span class="token punctuation">.</span>label_split<span class="token punctuation">.</span>grid<span class="token punctuation">(</span>row<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> column<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> sticky<span class="token operator">=</span>tk<span class="token punctuation">.</span>W<span class="token operator">+</span>tk<span class="token punctuation">.</span>E<span class="token punctuation">)</span>
		
		self<span class="token punctuation">.</span>scrollbar <span class="token operator">=</span> ttk<span class="token punctuation">.</span>Scrollbar<span class="token punctuation">(</span>self<span class="token punctuation">)</span>
		self<span class="token punctuation">.</span>text <span class="token operator">=</span> tk<span class="token punctuation">.</span>Text<span class="token punctuation">(</span>self<span class="token punctuation">,</span> yscrollcommand<span class="token operator">=</span>self<span class="token punctuation">.</span>scrollbar<span class="token punctuation">.</span><span class="token builtin">set</span><span class="token punctuation">)</span>
		<span class="token comment"># 渲染以上2个组件</span>
		self<span class="token punctuation">.</span>text<span class="token punctuation">.</span>grid<span class="token punctuation">(</span>row<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> column<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> sticky<span class="token operator">=</span>tk<span class="token punctuation">.</span>W<span class="token operator">+</span>tk<span class="token punctuation">.</span>E<span class="token operator">+</span>tk<span class="token punctuation">.</span>N<span class="token operator">+</span>tk<span class="token punctuation">.</span>S<span class="token punctuation">)</span>
		self<span class="token punctuation">.</span>scrollbar<span class="token punctuation">.</span>grid<span class="token punctuation">(</span>row<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> column<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>sticky<span class="token operator">=</span>tk<span class="token punctuation">.</span>N<span class="token operator">+</span>tk<span class="token punctuation">.</span>S<span class="token punctuation">)</span>
		self<span class="token punctuation">.</span>scrollbar<span class="token punctuation">.</span>config<span class="token punctuation">(</span>command<span class="token operator">=</span>self<span class="token punctuation">.</span>text<span class="token punctuation">.</span>yview<span class="token punctuation">)</span>
		
		
<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
	root <span class="token operator">=</span> tk<span class="token punctuation">.</span>Tk<span class="token punctuation">(</span><span class="token punctuation">)</span>
	root<span class="token punctuation">.</span>title <span class="token operator">=</span> <span class="token string">"Test"</span>
	
	app <span class="token operator">=</span> App<span class="token punctuation">(</span>master<span class="token operator">=</span>root<span class="token punctuation">)</span>
	app<span class="token punctuation">.</span>mainloop<span class="token punctuation">(</span><span class="token punctuation">)</span>


<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>
	main<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre>



]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>tkinter</tag>
        <tag>GUI</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 http-proxy-middleware 创建 npm 代理</title>
    <url>/2022/using-http-proxy-middleware-as-npm-proxy/</url>
    <content><![CDATA[<p>在上一篇中，我们使用 <a href="https://github.com/snail007/goproxy/releases">goproxy</a> 创建 HTTP 代理，供内网中服务器使用 npm 下载并安装第三方外部依赖。其实，借助 <code>http-proxy-middleware</code> 包，我们也可以使用 Node.js 来创建 HTTP 代理。</p>
<p><strong>环境</strong></p>
<ul>
<li>开发计算机：<ul>
<li>Windows 10</li>
<li>可以访问服务器，也可访问互联网</li>
<li>IP: 192.168.200.1</li>
</ul>
</li>
<li>服务器：<ul>
<li>CentOS 8 </li>
<li>仅可访问开发主机，无法直接访问互联网</li>
<li>IP: 192.168.200.129</li>
</ul>
</li>
</ul>
<span id="more"></span>


<p><strong>安装依赖</strong></p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> i express http-proxy-middleware</code></pre>

<p><strong>代码实现</strong></p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// proxy.js</span>

<span class="token comment">// include dependencies</span>
<span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token punctuation">&#123;</span> createProxyMiddleware <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'http-proxy-middleware'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// proxy middleware options</span>
<span class="token comment">/** @type &#123;import('http-proxy-middleware/dist/types').Options&#125; */</span>
<span class="token keyword">const</span> options <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  <span class="token literal-property property">target</span><span class="token operator">:</span> <span class="token string">'https://registry.npmmirror.com'</span><span class="token punctuation">,</span> <span class="token comment">// target host with the same base path</span>
<span class="token comment">//   changeOrigin: true, // needed for virtual hosted sites</span>
  <span class="token literal-property property">logger</span><span class="token operator">:</span> console<span class="token punctuation">,</span>
  <span class="token literal-property property">secure</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// don't verify the SSL certs</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token comment">// create the proxy</span>
<span class="token keyword">const</span> proxy <span class="token operator">=</span> <span class="token function">createProxyMiddleware</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// mount `exampleProxy` in web server</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>proxy<span class="token punctuation">)</span><span class="token punctuation">;</span>
app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">33080</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>

<p><strong>服务器配置</strong></p>
<p>在服务器上启用全局http代理。注意，以下为临时启用，直接设置<code>http_proxy</code>和<code>https_proxy</code>环境变量。如果需要重启后依然生效，则需要将其写入配置文件。</p>
<blockquote>
<p>注意：这里 <code>http_proxy</code> 和 <code>https_proxy</code> 都是指向 <code>http://</code> 而不是 <code>https://</code> 。</p>
</blockquote>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">export</span> <span class="token assign-left variable">http_proxy</span><span class="token operator">=</span>http://192.168.200.1:33080
<span class="token builtin class-name">export</span> <span class="token assign-left variable">https_proxy</span><span class="token operator">=</span>http://192.168.200.1:33080</code></pre>

<p>配置 NPM 代理，将 <code>proxy</code> 和 <code>https-proxy</code> 同时指向 <code>http://192.168.200.1:33080</code>。</p>
<blockquote>
<p>注意：这里 <code>proxy</code> 和 <code>https-proxy</code> 都是指向 <code>http://</code> 而不是 <code>https://</code> 。</p>
</blockquote>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> config <span class="token builtin class-name">set</span> proxy http://192.168.200.1:33080
<span class="token function">npm</span> config <span class="token builtin class-name">set</span> https-proxy http://192.168.200.1:33080</code></pre>

<p><strong>修改 npm registry</strong></p>
<p><strong>注意，由于我们的实现没有使用HTTPS，需要修改 npm registry 为<code>http://</code>。</strong></p>
<pre class="language-none"><code class="language-none">npm config set registry http:&#x2F;&#x2F;registry.npmmirror.com</code></pre>

<p><strong>测试</strong></p>
<p>在开发用的电脑上运行我们实现的代码：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">node</span> proxy.js</code></pre>

<p>在服务器上使用 npm 安装外部依赖包：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">npm</span> i <span class="token function">npm</span> -g

changed <span class="token number">14</span> packages <span class="token keyword">in</span> 3s

<span class="token number">11</span> packages are looking <span class="token keyword">for</span> funding
  run <span class="token variable"><span class="token variable">`</span><span class="token function">npm</span> fund<span class="token variable">`</span></span> <span class="token keyword">for</span> details</code></pre>

<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">npm</span> i nrm -g
<span class="token function">npm</span> WARN deprecated har-validator@5.1.5: this library is no longer supported
<span class="token function">npm</span> WARN deprecated uuid@3.4.0: Please upgrade  to version <span class="token number">7</span> or higher.  Older versions may use Math.random<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">in</span> certain circumstances, <span class="token function">which</span> is known to be problematic.  See https://v8.dev/blog/math-random <span class="token keyword">for</span> details.
<span class="token function">npm</span> WARN deprecated request@2.88.2: request has been deprecated, see https://github.com/request/request/issues/3142

changed <span class="token number">73</span> packages <span class="token keyword">in</span> 6s

<span class="token number">11</span> packages are looking <span class="token keyword">for</span> funding
  run <span class="token variable"><span class="token variable">`</span><span class="token function">npm</span> fund<span class="token variable">`</span></span> <span class="token keyword">for</span> details</code></pre>

<p>可以看到，内网服务器同样可以通过我们实现的 HTTP 代理使用 npm 安装第三方外部依赖了。</p>
]]></content>
      <categories>
        <category>Node.js</category>
      </categories>
      <tags>
        <tag>Proxy</tag>
        <tag>Node.js</tag>
        <tag>NPM</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 goproxy 为处于内网环境的开发服务器提供 npm 代理</title>
    <url>/2022/using_goproxy_as_npm_proxy/</url>
    <content><![CDATA[<p>通常，企业内部使用的 Web 应用，其服务器通常无法直接与外网通信，导致没法直接在服务器上使用 npm 或 yarn 等工具安装第三方外部依赖。而开发使用的电脑通常是可以访问互联网的，那么，就可以在开发电脑上使用 goproxy 创建一个 http 代理，通过这个 http 代理临时为服务器提供外网访问，以便可以使用 npm 或 yarn 安装第三方外部依赖。</p>
<p><strong>环境</strong></p>
<ul>
<li>开发计算机：<ul>
<li>Windows 10</li>
<li>可以访问服务器，也可访问互联网</li>
<li>IP: 192.168.200.1</li>
</ul>
</li>
<li>服务器：<ul>
<li>CentOS 8 </li>
<li>仅可访问开发主机，无法直接访问互联网</li>
<li>IP: 192.168.200.129</li>
</ul>
</li>
</ul>
<span id="more"></span>

<p><strong>具体操作</strong></p>
<p>第1步：在开发计算机上使用 <a href="https://github.com/snail007/goproxy/releases">goproxy</a> 创建 http 代理。</p>
<blockquote>
<p><code>--max-conns-rate</code> 参数控制每秒客户端的最大连接数, 默认20, 0为不限制。有时候 npm 包依赖太多，并发会超过默认的20；超过限制后，goproxy 会杀掉超过的会话，导致 npm 包安装失败。</p>
</blockquote>
<pre class="language-cmd" data-language="cmd"><code class="language-cmd">.\proxy.exe http -t tcp -p &quot;:33080&quot; --max-conns-rate 0 --forever</code></pre>

<p>第2步：在服务器上启用全局http代理。注意，以下为临时启用，直接设置<code>http_proxy</code>和<code>https_proxy</code>环境变量。如果需要重启后依然生效，则需要将其写入配置文件。</p>
<blockquote>
<p>注意：这里 <code>http_proxy</code> 和 <code>https_proxy</code> 都是指向 <code>http://</code> 而不是 <code>https://</code> 。</p>
</blockquote>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">export</span> <span class="token assign-left variable">http_proxy</span><span class="token operator">=</span>http://192.168.200.1:33080
<span class="token builtin class-name">export</span> <span class="token assign-left variable">https_proxy</span><span class="token operator">=</span>http://192.168.200.1:33080</code></pre>



<p>第3步：配置 NPM 代理，将 <code>proxy</code> 和 <code>https-proxy</code> 同时指向 <code>http://192.168.200.1:33080</code>。</p>
<blockquote>
<p>注意：这里 <code>proxy</code> 和 <code>https-proxy</code> 都是指向 <code>http://</code> 而不是 <code>https://</code> 。</p>
</blockquote>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> config <span class="token builtin class-name">set</span> proxy http://192.168.200.1:33080
<span class="token function">npm</span> config <span class="token builtin class-name">set</span> https-proxy http://192.168.200.1:33080</code></pre>

<p>第4步：修改 NPM 源（非必需）。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> config <span class="token builtin class-name">set</span> registry https://registry.npmmirror.com</code></pre>

<p><strong>测试</strong></p>
<p>使用 npm 安装 <code>nrm</code> ，测试 http 代理是否可用。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">npm</span> i nrm -g
<span class="token function">npm</span> WARN deprecated har-validator@5.1.5: this library is no longer supported
<span class="token function">npm</span> WARN deprecated uuid@3.4.0: Please upgrade  to version <span class="token number">7</span> or higher.  Older versions may use Math.random<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">in</span> certain circumstances, <span class="token function">which</span> is known to be problematic.  See https://v8.dev/blog/math-random <span class="token keyword">for</span> details.
<span class="token function">npm</span> WARN deprecated request@2.88.2: request has been deprecated, see https://github.com/request/request/issues/3142

added <span class="token number">58</span> packages <span class="token keyword">in</span> 4s

<span class="token number">11</span> packages are looking <span class="token keyword">for</span> funding
  run <span class="token variable"><span class="token variable">`</span><span class="token function">npm</span> fund<span class="token variable">`</span></span> <span class="token keyword">for</span> details</code></pre>
<p>可以看到处于内网的服务器已经成功安装了 <code>nrm</code> 包。同时，开发计算机的控制台也输出了来自服务器的相关 log ： </p>
<pre class="language-cmd" data-language="cmd"><code class="language-cmd"> E:\proxy-windows-amd64&gt;.\proxy.exe http -t tcp -p &quot;:33080&quot; --max-conns-rate 0 --forever
2022&#x2F;06&#x2F;09 22:49:12.715429 INFO worker E:\Downloads\Chrome\proxy-windows-amd64\proxy.exe [PID] 88516 running...
2022&#x2F;06&#x2F;09 22:49:12.821243 INFO tcp http(s) proxy on [::]:33080
2022&#x2F;06&#x2F;09 22:49:19.266803 INFO CONNECT:registry.npmmirror.com:443
2022&#x2F;06&#x2F;09 22:49:19.266803 INFO use parent : false, registry.npmmirror.com:443
2022&#x2F;06&#x2F;09 22:49:19.291648 INFO conn 192.168.200.129:55892 - 39.130.171.71:443 connected [registry.npmmirror.com:443]
2022&#x2F;06&#x2F;09 22:49:19.576069 INFO conn 192.168.200.129:55892 - 39.130.171.71:443 released [registry.npmmirror.com:443]
2022&#x2F;06&#x2F;09 22:49:19.641743 INFO CONNECT:registry.npmmirror.com:443
2022&#x2F;06&#x2F;09 22:49:19.641743 INFO use parent : false, registry.npmmirror.com:443
2022&#x2F;06&#x2F;09 22:49:19.664109 INFO conn 192.168.200.129:55894 - 39.130.171.71:443 connected [registry.npmmirror.com:443]
2022&#x2F;06&#x2F;09 22:49:19.939819 INFO conn 192.168.200.129:55894 - 39.130.171.71:443 released [registry.npmmirror.com:443]</code></pre>]]></content>
      <categories>
        <category>Node.js</category>
      </categories>
      <tags>
        <tag>Proxy</tag>
        <tag>Node.js</tag>
        <tag>NPM</tag>
      </tags>
  </entry>
</search>
