<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>正经人谁写日记</title>
  <icon>https://ifelif.cn/icon.png</icon>
  
  <link href="https://ifelif.cn/atom.xml" rel="self"/>
  
  <link href="https://ifelif.cn/"/>
  <updated>2022-10-28T01:28:39.000Z</updated>
  <id>https://ifelif.cn/</id>
  
  <author>
    <name>filefi</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>How does the Recycle Bin in Windows work?</title>
    <link href="https://ifelif.cn/2022/How-does-the-Recycle-Bin-in-Windows-work/"/>
    <id>https://ifelif.cn/2022/How-does-the-Recycle-Bin-in-Windows-work/</id>
    <published>2022-10-28T01:28:39.000Z</published>
    <updated>2022-10-28T01:28:39.000Z</updated>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;References from:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://superuser.com/questions/368890/how-does-the-recycle-bin-in-windows-work/1736690#1736690&quot;&gt;https://superuser.com/questions/368890/how-does-the-recycle-bin-in-windows-work/1736690#1736690&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Trash_(computing)#Microsoft_Windows&quot;&gt;https://en.wikipedia.org/wiki/Trash_(computing)#Microsoft_Windows&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="Windows" scheme="https://ifelif.cn/categories/Windows/"/>
    
    
    <category term="Windows" scheme="https://ifelif.cn/tags/Windows/"/>
    
  </entry>
  
  <entry>
    <title>《The Go Programming Language》学习笔记</title>
    <link href="https://ifelif.cn/2022/notes-of-gopl/"/>
    <id>https://ifelif.cn/2022/notes-of-gopl/</id>
    <published>2022-09-30T06:24:21.000Z</published>
    <updated>2022-09-30T06:24:21.000Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;h2 id=&quot;Go语言起源&quot;&gt;&lt;a href=&quot;#Go语言起源&quot; class=&quot;headerlink&quot; title=&quot;Go语言起源&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://gopl-zh.github.io/preface.html#go%E8%AF%AD%E8%A8%80%E8%B5%B7%E6%BA%90&quot;&gt;Go语言起源&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;下图展示了有哪些早期的编程语言对Go语言的设计产生了重要影响。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2022/notes-of-gopl/ch0-01.png&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;Go语言项目&quot;&gt;&lt;a href=&quot;#Go语言项目&quot; class=&quot;headerlink&quot; title=&quot;Go语言项目&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://gopl-zh.github.io/preface.html#go%E8%AF%AD%E8%A8%80%E9%A1%B9%E7%9B%AE&quot;&gt;Go语言项目&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Go项目包括编程语言本身，附带了相关的工具和标准库，最后但并非代表不重要的是，关于简洁编程哲学的宣言。&lt;/p&gt;
&lt;p&gt;Go语言的这些地方都做的还不错：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;拥有自动垃圾回收&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;一个包系统&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;函数作为一等公民&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;词法作用域&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;系统调用接口&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;只读的UTF8字符串等&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;但是Go语言本身只有很少的特性：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;没有隐式的数值转换&lt;/li&gt;
&lt;li&gt;没有构造函数和析构函数&lt;/li&gt;
&lt;li&gt;没有运算符重载&lt;/li&gt;
&lt;li&gt;没有默认参数&lt;/li&gt;
&lt;li&gt;没有继承&lt;/li&gt;
&lt;li&gt;&lt;del&gt;没有泛型&lt;/del&gt;&lt;/li&gt;
&lt;li&gt;没有异常&lt;/li&gt;
&lt;li&gt;没有宏&lt;/li&gt;
&lt;li&gt;没有函数修饰&lt;/li&gt;
&lt;li&gt;没有线程局部存储&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在实践中，Go语言简洁的类型系统给程序员带来了更多的安全性和更好的运行时性能。&lt;/p&gt;
&lt;p&gt;Go语言提供了基于&lt;code&gt;CSP&lt;/code&gt;的并发特性支持。Go语言的动态栈使得轻量级线程&lt;code&gt;goroutine&lt;/code&gt;的初始栈可以很小，因此，创建一个&lt;code&gt;goroutine&lt;/code&gt;的代价很小，创建百万级的&lt;code&gt;goroutine&lt;/code&gt;完全是可行的。&lt;/p&gt;
&lt;p&gt;Go语言的标准库（通常被称为语言自带的电池），提供了清晰的构建模块和公共接口，包含I&amp;#x2F;O操作、文本处理、图像、密码学、网络和分布式应用程序等，并支持许多标准化的文件格式和编解码协议。&lt;/p&gt;</summary>
    
    
    
    <category term="Golang" scheme="https://ifelif.cn/categories/Golang/"/>
    
    
    <category term="Golang" scheme="https://ifelif.cn/tags/Golang/"/>
    
  </entry>
  
  <entry>
    <title>从《A Tour of Go》到《Effective Go》</title>
    <link href="https://ifelif.cn/2022/from_A-Tour-of-Go_to_Effective-Go/"/>
    <id>https://ifelif.cn/2022/from_A-Tour-of-Go_to_Effective-Go/</id>
    <published>2022-08-26T01:36:11.000Z</published>
    <updated>2022-08-26T01:36:11.000Z</updated>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;本文是Golang的学习笔记，内容涵盖 &lt;a href=&quot;https://go.dev/tour/&quot;&gt;A Tour of Go&lt;/a&gt; 官方文档 &lt;a href=&quot;https://go.dev/doc/effective_go&quot;&gt;Effective Go&lt;/a&gt; 以及 &lt;a href=&quot;https://go-zh.org/doc/effective_go.html&quot;&gt;翻译&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h1&gt;&lt;p&gt;Go 是一门全新的语言。尽管它从既有的语言中借鉴了许多理念，但其与众不同的特性， 使得使用Go编程在本质上就不同于其它语言。将现有的C++或Java程序直译为Go 程序并不能令人满意——毕竟Java程序是用Java编写的，而不是Go。 另一方面，若从Go的角度去分析问题，你就能编写出同样可行但大不相同的程序。 换句话说，要想将Go程序写得好，就必须理解其特性和风格。了解命名、格式化、 程序结构等既定规则也同样重要，这样你编写的程序才能更容易被其他程序员所理解。&lt;/p&gt;</summary>
    
    
    
    <category term="Golang" scheme="https://ifelif.cn/categories/Golang/"/>
    
    
    <category term="Golang" scheme="https://ifelif.cn/tags/Golang/"/>
    
    <category term="Programming" scheme="https://ifelif.cn/tags/Programming/"/>
    
  </entry>
  
  <entry>
    <title>This beta version of Typora is expired</title>
    <link href="https://ifelif.cn/2022/This-beta-version-of-Typora-is-expired/"/>
    <id>https://ifelif.cn/2022/This-beta-version-of-Typora-is-expired/</id>
    <published>2022-08-25T13:33:53.000Z</published>
    <updated>2022-08-25T13:33:53.000Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;p&gt;&lt;img</summary>
        
      
    
    
    
    <category term="Miscellaneous" scheme="https://ifelif.cn/categories/Miscellaneous/"/>
    
    
    <category term="Editor" scheme="https://ifelif.cn/tags/Editor/"/>
    
  </entry>
  
  <entry>
    <title>配置和管理逻辑卷管理器 (Logical Volume Manager)</title>
    <link href="https://ifelif.cn/2022/Logical_Volume_Manager_Administration/"/>
    <id>https://ifelif.cn/2022/Logical_Volume_Manager_Administration/</id>
    <published>2022-08-25T06:22:08.000Z</published>
    <updated>2022-08-25T06:22:08.000Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;1-逻辑卷管理概述&quot;&gt;&lt;a href=&quot;#1-逻辑卷管理概述&quot; class=&quot;headerlink&quot; title=&quot;1. 逻辑卷管理概述&quot;&gt;&lt;/a&gt;1. 逻辑卷管理概述&lt;/h1&gt;&lt;p&gt;逻辑卷管理 (LVM) 在物理存储上创建抽象层，帮助您创建逻辑存储卷。这比直接使用物理存储的方式具有更大的灵活性。&lt;/p&gt;
&lt;p&gt;此外，硬件存储配置在软件中隐藏，因此可以调整大小并移动，无需停止应用或卸载文件系统。这可降低操作成本。&lt;/p&gt;</summary>
    
    
    
    <category term="Linux" scheme="https://ifelif.cn/categories/Linux/"/>
    
    
    <category term="Linux" scheme="https://ifelif.cn/tags/Linux/"/>
    
    <category term="LVM" scheme="https://ifelif.cn/tags/LVM/"/>
    
  </entry>
  
  <entry>
    <title>使用 http-proxy-middleware 创建 npm 代理</title>
    <link href="https://ifelif.cn/2022/using-http-proxy-middleware-as-npm-proxy/"/>
    <id>https://ifelif.cn/2022/using-http-proxy-middleware-as-npm-proxy/</id>
    <published>2022-06-09T15:34:01.000Z</published>
    <updated>2022-06-09T15:34:01.000Z</updated>
    
    
    <summary type="html">&lt;p&gt;在上一篇中，我们使用 &lt;a href=&quot;https://github.com/snail007/goproxy/releases&quot;&gt;goproxy&lt;/a&gt; 创建 HTTP 代理，供内网中服务器使用 npm 下载并安装第三方外部依赖。其实，借助 &lt;code&gt;http-proxy-middleware&lt;/code&gt; 包，我们也可以使用 Node.js 来创建 HTTP 代理。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;环境&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;开发计算机：&lt;ul&gt;
&lt;li&gt;Windows 10&lt;/li&gt;
&lt;li&gt;可以访问服务器，也可访问互联网&lt;/li&gt;
&lt;li&gt;IP: 192.168.200.1&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;服务器：&lt;ul&gt;
&lt;li&gt;CentOS 8 &lt;/li&gt;
&lt;li&gt;仅可访问开发主机，无法直接访问互联网&lt;/li&gt;
&lt;li&gt;IP: 192.168.200.129&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="Node.js" scheme="https://ifelif.cn/categories/Node-js/"/>
    
    
    <category term="Proxy" scheme="https://ifelif.cn/tags/Proxy/"/>
    
    <category term="Node.js" scheme="https://ifelif.cn/tags/Node-js/"/>
    
    <category term="NPM" scheme="https://ifelif.cn/tags/NPM/"/>
    
  </entry>
  
  <entry>
    <title>使用 goproxy 为处于内网环境的开发服务器提供 npm 代理</title>
    <link href="https://ifelif.cn/2022/using_goproxy_as_npm_proxy/"/>
    <id>https://ifelif.cn/2022/using_goproxy_as_npm_proxy/</id>
    <published>2022-06-09T12:40:55.000Z</published>
    <updated>2022-06-09T12:40:55.000Z</updated>
    
    
    <summary type="html">&lt;p&gt;通常，企业内部使用的 Web 应用，其服务器通常无法直接与外网通信，导致没法直接在服务器上使用 npm 或 yarn 等工具安装第三方外部依赖。而开发使用的电脑通常是可以访问互联网的，那么，就可以在开发电脑上使用 goproxy 创建一个 http 代理，通过这个 http 代理临时为服务器提供外网访问，以便可以使用 npm 或 yarn 安装第三方外部依赖。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;环境&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;开发计算机：&lt;ul&gt;
&lt;li&gt;Windows 10&lt;/li&gt;
&lt;li&gt;可以访问服务器，也可访问互联网&lt;/li&gt;
&lt;li&gt;IP: 192.168.200.1&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;服务器：&lt;ul&gt;
&lt;li&gt;CentOS 8 &lt;/li&gt;
&lt;li&gt;仅可访问开发主机，无法直接访问互联网&lt;/li&gt;
&lt;li&gt;IP: 192.168.200.129&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="Node.js" scheme="https://ifelif.cn/categories/Node-js/"/>
    
    
    <category term="Proxy" scheme="https://ifelif.cn/tags/Proxy/"/>
    
    <category term="Node.js" scheme="https://ifelif.cn/tags/Node-js/"/>
    
    <category term="NPM" scheme="https://ifelif.cn/tags/NPM/"/>
    
  </entry>
  
  <entry>
    <title>批量将某li某li特定关注组中的UP修改为悄悄关注</title>
    <link href="https://ifelif.cn/2022/batch_modify_bilibili_follow_group/"/>
    <id>https://ifelif.cn/2022/batch_modify_bilibili_follow_group/</id>
    <published>2022-06-01T15:21:23.000Z</published>
    <updated>2022-11-13T15:05:30.085Z</updated>
    
    
    <summary type="html">&lt;p&gt;如题，调用batchModify函数即可批量将某li某li特定关注组中的UP修改为悄悄关注。&lt;/p&gt;</summary>
    
    
    
    <category term="JavaScript" scheme="https://ifelif.cn/categories/JavaScript/"/>
    
    
    <category term="JavaScript" scheme="https://ifelif.cn/tags/JavaScript/"/>
    
    <category term="Reverse" scheme="https://ifelif.cn/tags/Reverse/"/>
    
    <category term="PWN" scheme="https://ifelif.cn/tags/PWN/"/>
    
  </entry>
  
  <entry>
    <title>gobyexample 学习笔记</title>
    <link href="https://ifelif.cn/2022/learn_gobyexample/"/>
    <id>https://ifelif.cn/2022/learn_gobyexample/</id>
    <published>2022-05-28T16:10:21.000Z</published>
    <updated>2022-11-13T15:05:30.109Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;Hello-World&quot;&gt;&lt;a href=&quot;#Hello-World&quot; class=&quot;headerlink&quot; title=&quot;Hello World&quot;&gt;&lt;/a&gt;Hello World&lt;/h1&gt;&lt;p&gt;我们的第一个程序将打印传说中的 “hello world” 消息，右边是完整的程序代码。&lt;/p&gt;
&lt;pre class=&quot;language-go&quot; data-language=&quot;go&quot;&gt;&lt;code class=&quot;language-go&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;package&lt;/span&gt; main

&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;fmt&quot;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;&amp;#123;&lt;/span&gt;
    fmt&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Println&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;hello world&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;要运行这个程序，将这些代码放到 &lt;code&gt;hello-world.go&lt;/code&gt; 中并且使用 &lt;code&gt;go run&lt;/code&gt; 命令。&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot; data-language=&quot;bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ go run hello-world.go
hello world&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;有时候我们想将我们的程序编译成二进制文件。我们可以通过 go build 命来达到目的。&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot; data-language=&quot;bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ go build hello-world.go
$ &lt;span class=&quot;token function&quot;&gt;ls&lt;/span&gt;
hello-world	hello-world.go&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后我们可以直接运行这个二进制文件。&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot; data-language=&quot;bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ ./hello-world
hello world&lt;/code&gt;&lt;/pre&gt;</summary>
    
    
    
    <category term="Golang" scheme="https://ifelif.cn/categories/Golang/"/>
    
    
    <category term="Golang" scheme="https://ifelif.cn/tags/Golang/"/>
    
  </entry>
  
  <entry>
    <title>Ansible 用户指南</title>
    <link href="https://ifelif.cn/2022/ansible_user_guide/"/>
    <id>https://ifelif.cn/2022/ansible_user_guide/</id>
    <published>2022-05-16T16:01:21.000Z</published>
    <updated>2022-11-13T15:05:30.085Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;安装指南&quot;&gt;&lt;a href=&quot;#安装指南&quot; class=&quot;headerlink&quot; title=&quot;安装指南&quot;&gt;&lt;/a&gt;安装指南&lt;/h1&gt;&lt;h2 id=&quot;安装-Ansible&quot;&gt;&lt;a href=&quot;#安装-Ansible&quot; class=&quot;headerlink&quot; title=&quot;安装 Ansible&quot;&gt;&lt;/a&gt;安装 Ansible&lt;/h2&gt;&lt;h3 id=&quot;前提条件&quot;&gt;&lt;a href=&quot;#前提条件&quot; class=&quot;headerlink&quot; title=&quot;前提条件&quot;&gt;&lt;/a&gt;前提条件&lt;/h3&gt;&lt;h4 id=&quot;控制节点要求-（Control-node-requirements）&quot;&gt;&lt;a href=&quot;#控制节点要求-（Control-node-requirements）&quot; class=&quot;headerlink&quot; title=&quot;控制节点要求 （Control node requirements）&quot;&gt;&lt;/a&gt;控制节点要求 （&lt;a href=&quot;https://docs.ansible.com/ansible/latest/installation_guide/intro_installation.html#id8&quot;&gt;Control node requirements&lt;/a&gt;）&lt;/h4&gt;&lt;p&gt;除Windows外，其他任何安装了 Python 3.8 或更新版本的计算机都能成为控制节点，包括 RHEL，Debian，CentOS 以及任何 BSD 等等。&lt;/p&gt;
&lt;h4 id=&quot;被管理节点要求-（Managed-node-requirements）&quot;&gt;&lt;a href=&quot;#被管理节点要求-（Managed-node-requirements）&quot; class=&quot;headerlink&quot; title=&quot;被管理节点要求 （Managed node requirements）&quot;&gt;&lt;/a&gt;被管理节点要求 （&lt;a href=&quot;https://docs.ansible.com/ansible/latest/installation_guide/intro_installation.html#id9&quot;&gt;Managed node requirements&lt;/a&gt;）&lt;/h4&gt;&lt;p&gt;对于大多数被管理的节点，Ansible使用SSH和SFTP来创建连接。但如果SFTP不可用，也可以使用SCP。同时，还需要运行Python。&lt;/p&gt;
&lt;h3 id=&quot;选择要安装的Ansible版本&quot;&gt;&lt;a href=&quot;#选择要安装的Ansible版本&quot; class=&quot;headerlink&quot; title=&quot;选择要安装的Ansible版本&quot;&gt;&lt;/a&gt;选择要安装的Ansible版本&lt;/h3&gt;&lt;p&gt;有2种方式安装Ansible：S&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用各操作系统的包管理器安装预编译的Ansible包&lt;/li&gt;
&lt;li&gt;使用&lt;code&gt;pip&lt;/code&gt;安装Ansible&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;使用pip安装并升级Ansible&quot;&gt;&lt;a href=&quot;#使用pip安装并升级Ansible&quot; class=&quot;headerlink&quot; title=&quot;使用pip安装并升级Ansible&quot;&gt;&lt;/a&gt;使用&lt;code&gt;pip&lt;/code&gt;安装并升级Ansible&lt;/h3&gt;&lt;h4 id=&quot;使用pip安装Ansible&quot;&gt;&lt;a href=&quot;#使用pip安装Ansible&quot; class=&quot;headerlink&quot; title=&quot;使用pip安装Ansible&quot;&gt;&lt;/a&gt;使用&lt;code&gt;pip&lt;/code&gt;安装Ansible&lt;/h4&gt;&lt;p&gt;安装Ansible：&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot; data-language=&quot;bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ python &lt;span class=&quot;token parameter variable&quot;&gt;-m&lt;/span&gt; pip &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;token parameter variable&quot;&gt;--user&lt;/span&gt; ansible&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;安装paramiko：&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot; data-language=&quot;bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ python &lt;span class=&quot;token parameter variable&quot;&gt;-m&lt;/span&gt; pip &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;token parameter variable&quot;&gt;--user&lt;/span&gt; paramiko&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;全局安装Ansible：&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot; data-language=&quot;bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ &lt;span class=&quot;token function&quot;&gt;sudo&lt;/span&gt; python &lt;span class=&quot;token parameter variable&quot;&gt;-m&lt;/span&gt; pip &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt; ansible&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;Running &lt;code&gt;pip&lt;/code&gt; with &lt;code&gt;sudo&lt;/code&gt; will make global changes to the system. Since &lt;code&gt;pip&lt;/code&gt; does not coordinate with system package managers, it could make changes to your system that leaves it in an inconsistent or non-functioning state. This is particularly true for macOS. Installing with &lt;code&gt;--user&lt;/code&gt; is recommended unless you understand fully the implications of modifying global files on the system.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;在虚拟环境中使用pip安装Ansible&quot;&gt;&lt;a href=&quot;#在虚拟环境中使用pip安装Ansible&quot; class=&quot;headerlink&quot; title=&quot;在虚拟环境中使用pip安装Ansible&quot;&gt;&lt;/a&gt;在虚拟环境中使用&lt;code&gt;pip&lt;/code&gt;安装Ansible&lt;/h4&gt;&lt;pre class=&quot;language-bash&quot; data-language=&quot;bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ python &lt;span class=&quot;token parameter variable&quot;&gt;-m&lt;/span&gt; virtualenv ansible  &lt;span class=&quot;token comment&quot;&gt;# Create a virtualenv if one does not already exist&lt;/span&gt;
$ &lt;span class=&quot;token builtin class-name&quot;&gt;source&lt;/span&gt; ansible/bin/activate   &lt;span class=&quot;token comment&quot;&gt;# Activate the virtual environment&lt;/span&gt;
$ python &lt;span class=&quot;token parameter variable&quot;&gt;-m&lt;/span&gt; pip &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt; ansible&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;高版本的Python3都自带了虚拟环境模块&lt;code&gt;venv&lt;/code&gt;，不需要单独安装&lt;code&gt;virtualenv&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="Linux" scheme="https://ifelif.cn/categories/Linux/"/>
    
    
    <category term="Linux" scheme="https://ifelif.cn/tags/Linux/"/>
    
    <category term="ansible" scheme="https://ifelif.cn/tags/ansible/"/>
    
  </entry>
  
  <entry>
    <title>《Docker 从入门到实践》学习笔记</title>
    <link href="https://ifelif.cn/2022/docker_practice/"/>
    <id>https://ifelif.cn/2022/docker_practice/</id>
    <published>2022-04-28T15:56:21.000Z</published>
    <updated>2022-11-13T15:05:30.101Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;什么是-Docker&quot;&gt;&lt;a href=&quot;#什么是-Docker&quot; class=&quot;headerlink&quot; title=&quot;什么是 Docker&quot;&gt;&lt;/a&gt;什么是 Docker&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;Docker&lt;/strong&gt; 使用 &lt;code&gt;Google&lt;/code&gt; 公司推出的 &lt;a href=&quot;https://golang.google.cn/&quot;&gt;Go 语言&lt;/a&gt; 进行开发实现，基于 &lt;code&gt;Linux&lt;/code&gt; 内核的 &lt;a href=&quot;https://zh.wikipedia.org/wiki/Cgroups&quot;&gt;cgroup&lt;/a&gt;，&lt;a href=&quot;https://en.wikipedia.org/wiki/Linux_namespaces&quot;&gt;namespace&lt;/a&gt;，以及 &lt;a href=&quot;https://docs.docker.com/storage/storagedriver/overlayfs-driver/&quot;&gt;OverlayFS&lt;/a&gt; 类的 &lt;a href=&quot;https://en.wikipedia.org/wiki/Union_mount&quot;&gt;Union FS&lt;/a&gt; 等技术，对进程进行封装隔离，属于 &lt;a href=&quot;https://en.wikipedia.org/wiki/Operating-system-level_virtualization&quot;&gt;操作系统层面的虚拟化技术&lt;/a&gt;。由于隔离的进程独立于宿主和其它的隔离的进程，因此也称其为容器。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2022/docker_practice/docker-on-linux-16488874880822.png&quot; alt=&quot;Docker在Linux中的架构&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;传统虚拟机-VS-Docker&quot;&gt;&lt;a href=&quot;#传统虚拟机-VS-Docker&quot; class=&quot;headerlink&quot; title=&quot;传统虚拟机 VS Docker&quot;&gt;&lt;/a&gt;传统虚拟机 VS Docker&lt;/h2&gt;&lt;p&gt;传统虚拟机技术是虚拟出一套硬件后，在其上运行一个完整操作系统，在该系统上再运行所需应用进程；而容器内的应用进程直接运行于宿主的内核，容器内没有自己的内核，而且也没有进行硬件虚拟。因此容器要比传统虚拟机更为轻便。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2022/docker_practice/vm.png&quot; alt=&quot;传统虚拟机&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2022/docker_practice/docker.png&quot; alt=&quot;Docker&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Docker" scheme="https://ifelif.cn/categories/Docker/"/>
    
    
    <category term="CNCF" scheme="https://ifelif.cn/tags/CNCF/"/>
    
    <category term="Docker" scheme="https://ifelif.cn/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Nginx小记</title>
    <link href="https://ifelif.cn/2022/some_pieces_of_nginx/"/>
    <id>https://ifelif.cn/2022/some_pieces_of_nginx/</id>
    <published>2022-04-14T15:41:21.000Z</published>
    <updated>2022-11-13T15:05:30.113Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;nginx及其衍生版本&quot;&gt;&lt;a href=&quot;#nginx及其衍生版本&quot; class=&quot;headerlink&quot; title=&quot;nginx及其衍生版本&quot;&gt;&lt;/a&gt;nginx及其衍生版本&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;nginx开源版：&lt;a href=&quot;http://nginx.org/&quot;&gt;http://nginx.org&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;nginx plus 商业版: &lt;a href=&quot;https://www.nginx.com/&quot;&gt;https://www.nginx.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;openresty: &lt;a href=&quot;http://openresty.org/&quot;&gt;http://openresty.org&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;tengine: &lt;a href=&quot;http://tengine.taobao.org/&quot;&gt;http://tengine.taobao.org&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;nginx默认目录结构&quot;&gt;&lt;a href=&quot;#nginx默认目录结构&quot; class=&quot;headerlink&quot; title=&quot;nginx默认目录结构&quot;&gt;&lt;/a&gt;nginx默认目录结构&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;logs/&lt;/code&gt;：日志目录；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;conf/&lt;/code&gt;：配置文件目录；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;html/&lt;/code&gt;：静态资源目录；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sbin/&lt;/code&gt;：存放nginx可执行文件；&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;nginx基础配置&quot;&gt;&lt;a href=&quot;#nginx基础配置&quot; class=&quot;headerlink&quot; title=&quot;nginx基础配置&quot;&gt;&lt;/a&gt;nginx基础配置&lt;/h1&gt;&lt;h2 id=&quot;nginx最小配置&quot;&gt;&lt;a href=&quot;#nginx最小配置&quot; class=&quot;headerlink&quot; title=&quot;nginx最小配置&quot;&gt;&lt;/a&gt;nginx最小配置&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;worker_processes&lt;/code&gt; worker 进程数，根据CPU核心数进行配置；&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&quot;language-nginx&quot; data-language=&quot;nginx&quot;&gt;&lt;code class=&quot;language-nginx&quot;&gt;&lt;span class=&quot;token directive&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;user&lt;/span&gt;  nginx&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token directive&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;worker_processes&lt;/span&gt;  auto&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token directive&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;error_log&lt;/span&gt;  /var/log/nginx/error.log notice&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token directive&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;pid&lt;/span&gt;        /var/run/nginx.pid&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;


&lt;span class=&quot;token directive&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;events&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;&amp;#123;&lt;/span&gt;
    &lt;span class=&quot;token directive&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;worker_connections&lt;/span&gt;  &lt;span class=&quot;token number&quot;&gt;1024&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;&amp;#125;&lt;/span&gt;


&lt;span class=&quot;token directive&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;http&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;&amp;#123;&lt;/span&gt;
    &lt;span class=&quot;token directive&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;include&lt;/span&gt;       /etc/nginx/mime.types&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token directive&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;default_type&lt;/span&gt;  application/octet-stream&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token directive&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;log_format&lt;/span&gt;  main  &lt;span class=&quot;token string&quot;&gt;&#39;&lt;span class=&quot;token variable&quot;&gt;$remote_addr&lt;/span&gt; - &lt;span class=&quot;token variable&quot;&gt;$remote_user&lt;/span&gt; [&lt;span class=&quot;token variable&quot;&gt;$time_local]&lt;/span&gt; &quot;&lt;span class=&quot;token variable&quot;&gt;$request&lt;/span&gt;&quot; &#39;&lt;/span&gt;
                      &lt;span class=&quot;token string&quot;&gt;&#39;&lt;span class=&quot;token variable&quot;&gt;$status&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$body_bytes_sent&lt;/span&gt; &quot;&lt;span class=&quot;token variable&quot;&gt;$http_referer&lt;/span&gt;&quot; &#39;&lt;/span&gt;
                      &lt;span class=&quot;token string&quot;&gt;&#39;&quot;&lt;span class=&quot;token variable&quot;&gt;$http_user_agent&lt;/span&gt;&quot; &quot;&lt;span class=&quot;token variable&quot;&gt;$http_x_forwarded_for&lt;/span&gt;&quot;&#39;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token directive&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;access_log&lt;/span&gt;  /var/log/nginx/access.log  main&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token directive&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;sendfile&lt;/span&gt;        &lt;span class=&quot;token boolean&quot;&gt;on&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token directive&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;keepalive_timeout&lt;/span&gt;  &lt;span class=&quot;token number&quot;&gt;65&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    
    &lt;span class=&quot;token directive&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;server&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;&amp;#123;&lt;/span&gt;
        &lt;span class=&quot;token directive&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;listen&lt;/span&gt;       &lt;span class=&quot;token number&quot;&gt;80&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token directive&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;server_name&lt;/span&gt;  localhost&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;token directive&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;location&lt;/span&gt; /&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;&amp;#123;&lt;/span&gt;
            &lt;span class=&quot;token directive&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;root&lt;/span&gt;   /usr/share/nginx/html&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;token directive&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;index&lt;/span&gt;  index.html index.htm&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;&amp;#125;&lt;/span&gt;

        &lt;span class=&quot;token comment&quot;&gt;#error_page  404              /404.html;&lt;/span&gt;

        &lt;span class=&quot;token comment&quot;&gt;# redirect server error pages to the static page /50x.html&lt;/span&gt;
        &lt;span class=&quot;token directive&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;error_page&lt;/span&gt;   &lt;span class=&quot;token number&quot;&gt;500&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;502&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;503&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;504&lt;/span&gt;  /50x.html&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token directive&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;location&lt;/span&gt; = /50x.html&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;&amp;#123;&lt;/span&gt;
            &lt;span class=&quot;token directive&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;root&lt;/span&gt;   /usr/share/nginx/html&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;&amp;#125;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;&amp;#125;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;</summary>
    
    
    
    <category term="Linux" scheme="https://ifelif.cn/categories/Linux/"/>
    
    
    <category term="Linux" scheme="https://ifelif.cn/tags/Linux/"/>
    
    <category term="Nginx" scheme="https://ifelif.cn/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>Linux Firewall 学习笔记</title>
    <link href="https://ifelif.cn/2022/linux_firewall/"/>
    <id>https://ifelif.cn/2022/linux_firewall/</id>
    <published>2022-04-10T08:35:21.000Z</published>
    <updated>2022-11-13T15:05:30.109Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;iptables&quot;&gt;&lt;a href=&quot;#iptables&quot; class=&quot;headerlink&quot; title=&quot;iptables&quot;&gt;&lt;/a&gt;iptables&lt;/h1&gt;&lt;h2 id=&quot;netfilter-和-iptables&quot;&gt;&lt;a href=&quot;#netfilter-和-iptables&quot; class=&quot;headerlink&quot; title=&quot;netfilter 和 iptables&quot;&gt;&lt;/a&gt;netfilter 和 iptables&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;netfilter：内核态，即不以文件的形式存在的防火墙。&lt;/li&gt;
&lt;li&gt;iptables：用户态，在&lt;code&gt;/sbin/iptables&lt;/code&gt;存在的防火墙。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;防火墙的分类&quot;&gt;&lt;a href=&quot;#防火墙的分类&quot; class=&quot;headerlink&quot; title=&quot;防火墙的分类&quot;&gt;&lt;/a&gt;防火墙的分类&lt;/h2&gt;&lt;p&gt;按保护范围划分:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;主机防火墙:服务范围为当前一台主机&lt;/li&gt;
&lt;li&gt;网络防火墙:服务范围为防火墙一侧的局域网&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;4-Tables&quot;&gt;&lt;a href=&quot;#4-Tables&quot; class=&quot;headerlink&quot; title=&quot;4 Tables&quot;&gt;&lt;/a&gt;4 Tables&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;filter&lt;/li&gt;
&lt;li&gt;nat&lt;/li&gt;
&lt;li&gt;mangle&lt;/li&gt;
&lt;li&gt;raw&lt;/li&gt;
&lt;li&gt;security&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;5-Chains&quot;&gt;&lt;a href=&quot;#5-Chains&quot; class=&quot;headerlink&quot; title=&quot;5 Chains&quot;&gt;&lt;/a&gt;5 Chains&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;PREROUTING&lt;/li&gt;
&lt;li&gt;INPUT&lt;/li&gt;
&lt;li&gt;FORWARD&lt;/li&gt;
&lt;li&gt;OUTPUT&lt;/li&gt;
&lt;li&gt;POSTROUTING&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="Linux" scheme="https://ifelif.cn/categories/Linux/"/>
    
    
    <category term="Linux" scheme="https://ifelif.cn/tags/Linux/"/>
    
    <category term="iptables" scheme="https://ifelif.cn/tags/iptables/"/>
    
    <category term="firewalld" scheme="https://ifelif.cn/tags/firewalld/"/>
    
    <category term="nftables" scheme="https://ifelif.cn/tags/nftables/"/>
    
  </entry>
  
  <entry>
    <title>Python tkinter 布局管理</title>
    <link href="https://ifelif.cn/2022/tkinter_geometry_manager/"/>
    <id>https://ifelif.cn/2022/tkinter_geometry_manager/</id>
    <published>2022-02-16T15:56:21.000Z</published>
    <updated>2022-11-13T15:05:30.113Z</updated>
    
    
    <summary type="html">&lt;p&gt;本文讲述如何使用 tkinter 的布局管理 (被称作 layout managers 或 geometry managers)。tkinter 有三种布局管理方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;pack&lt;/li&gt;
&lt;li&gt;place&lt;/li&gt;
&lt;li&gt;grid&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;注意，这三种布局管理在同一个 master window 里一定不该被混用！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;布局管理有以下功能：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在屏幕上排列控件，包括确定组件的大小和位置&lt;/li&gt;
&lt;li&gt;注册窗口控件到底层窗口系统&lt;/li&gt;
&lt;li&gt;管理控件在屏幕上的显示&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;虽然控件自己也可以指定大小和对齐方式等信息， 但最终的控件大小及位置还是由布局管理决定的。&lt;/p&gt;</summary>
    
    
    
    <category term="Python" scheme="https://ifelif.cn/categories/Python/"/>
    
    
    <category term="Python" scheme="https://ifelif.cn/tags/Python/"/>
    
    <category term="tkinter" scheme="https://ifelif.cn/tags/tkinter/"/>
    
    <category term="GUI" scheme="https://ifelif.cn/tags/GUI/"/>
    
  </entry>
  
  <entry>
    <title>tkinter 一例</title>
    <link href="https://ifelif.cn/2022/tkinter_input_in_entry_widget%EF%BC%8Coutput_in_text_widget_in_real_time/"/>
    <id>https://ifelif.cn/2022/tkinter_input_in_entry_widget%EF%BC%8Coutput_in_text_widget_in_real_time/</id>
    <published>2022-02-16T15:56:21.000Z</published>
    <updated>2022-11-13T15:05:30.113Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;entry输入命令，text实时获得命令输出：&lt;/p&gt;
&lt;pre class=&quot;language-python&quot; data-language=&quot;python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token</summary>
        
      
    
    
    
    <category term="Python" scheme="https://ifelif.cn/categories/Python/"/>
    
    
    <category term="Python" scheme="https://ifelif.cn/tags/Python/"/>
    
    <category term="tkinter" scheme="https://ifelif.cn/tags/tkinter/"/>
    
    <category term="GUI" scheme="https://ifelif.cn/tags/GUI/"/>
    
  </entry>
  
  <entry>
    <title>CheatEngine Tutorial</title>
    <link href="https://ifelif.cn/2022/cheat_engine_tutorial/"/>
    <id>https://ifelif.cn/2022/cheat_engine_tutorial/</id>
    <published>2022-02-16T13:41:21.000Z</published>
    <updated>2022-11-13T15:05:30.085Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;CheatEngine-Tutorial&quot;&gt;&lt;a href=&quot;#CheatEngine-Tutorial&quot; class=&quot;headerlink&quot; title=&quot;CheatEngine Tutorial&quot;&gt;&lt;/a&gt;CheatEngine Tutorial&lt;/h1&gt;&lt;h2 id=&quot;Step-1&quot;&gt;&lt;a href=&quot;#Step-1&quot; class=&quot;headerlink&quot; title=&quot;Step 1&quot;&gt;&lt;/a&gt;Step 1&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/2022/cheat_engine_tutorial/image-20220215145201605.png&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;Description&quot;&gt;&lt;a href=&quot;#Description&quot; class=&quot;headerlink&quot; title=&quot;Description&quot;&gt;&lt;/a&gt;Description&lt;/h3&gt;&lt;pre class=&quot;language-text&quot; data-language=&quot;text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;Welcome to the Cheat Engine Tutorial (v3.6)

This tutorial will teach you the basics of cheating in video games. It will also show you foundational aspects of using Cheat Engine (or CE for short). Follow the steps below to get started.

1: Open Cheat Engine if it currently isn&#39;t running.
2: Click on the &quot;Open Process&quot; icon (it&#39;s the top-left icon with the computer on it, below &quot;File&quot;.).
3: With the Process List window now open, look for this tutorial&#39;s process in the list. It will look something like &quot;00001F98-Tutorial-x86_64.exe&quot; or &quot;0000047C-Tutorial-i386.exe&quot;. (The first 8 numbers/letters will probably be different.)
4: Once you&#39;ve found the process, click on it to select it, then click the &quot;Open&quot; button. (Don&#39;t worry about all the other buttons right now. You can learn about them later if you&#39;re interested.)

Congratulations! If you did everything correctly, the process window should be gone with Cheat Engine now attached to the tutorial (you will see the process name towards the top-center of CE).

Click the &quot;Next&quot; button below to continue, or fill in the password and click the &quot;OK&quot; button to proceed to that step.)

If you&#39;re having problems, simply head over to forum.cheatengine.org, then click on &quot;Tutorials&quot; to view beginner-friendly guides!&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;操作&quot;&gt;&lt;a href=&quot;#操作&quot; class=&quot;headerlink&quot; title=&quot;操作&quot;&gt;&lt;/a&gt;操作&lt;/h3&gt;&lt;h4 id=&quot;步骤1：选择要附加的进程&quot;&gt;&lt;a href=&quot;#步骤1：选择要附加的进程&quot; class=&quot;headerlink&quot; title=&quot;步骤1：选择要附加的进程&quot;&gt;&lt;/a&gt;步骤1：选择要附加的进程&lt;/h4&gt;&lt;p&gt;&lt;img src=&quot;/2022/cheat_engine_tutorial/image-20220215145836858.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2022/cheat_engine_tutorial/image-20220215150314077.png&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="PWN" scheme="https://ifelif.cn/categories/PWN/"/>
    
    
    <category term="Reverse" scheme="https://ifelif.cn/tags/Reverse/"/>
    
    <category term="PWN" scheme="https://ifelif.cn/tags/PWN/"/>
    
  </entry>
  
  <entry>
    <title>BIG-IP Local Traffic Manager Concepts v11.5.0</title>
    <link href="https://ifelif.cn/2017/BIG-IP-Local-Traffic-Manager-Concepts-v11-5-0/"/>
    <id>https://ifelif.cn/2017/BIG-IP-Local-Traffic-Manager-Concepts-v11-5-0/</id>
    <published>2017-11-30T03:30:15.000Z</published>
    <updated>2022-11-13T15:05:30.085Z</updated>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;本文是 F5官方文档 &lt;a href=&quot;https://techdocs.f5.com/kb/en-us/products/big-ip_ltm/manuals/product/ltm-concepts-11-5-0.html&quot;&gt;BIG-IP Local Traffic Manager Concepts v11.5.0&lt;/a&gt; 的中文翻译版。初次于2017年11月30日发布在 &lt;a href=&quot;https://github.com/filefi/CN_BIG-IP_Local_Traffic_Manager_Concepts_v11.5.0&quot;&gt;此repo&lt;/a&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;第1章-介绍本地流量管理器（Local-Traffic-Manager）&quot;&gt;&lt;a href=&quot;#第1章-介绍本地流量管理器（Local-Traffic-Manager）&quot; class=&quot;headerlink&quot; title=&quot;第1章 介绍本地流量管理器（Local Traffic Manager）&quot;&gt;&lt;/a&gt;第1章 介绍本地流量管理器（Local Traffic Manager）&lt;/h1&gt;&lt;h2 id=&quot;1-1-什么是BIG-IP本地流量管理器？&quot;&gt;&lt;a href=&quot;#1-1-什么是BIG-IP本地流量管理器？&quot; class=&quot;headerlink&quot; title=&quot;1.1 什么是BIG-IP本地流量管理器？&quot;&gt;&lt;/a&gt;1.1 什么是BIG-IP本地流量管理器？&lt;/h2&gt;&lt;p&gt;BIG-IP本地流量管理（Local Traffic Manager）控制流入或流出局域网LAN（包括内联网intranet）的网络流量。&lt;/p&gt;
&lt;p&gt;出于智能地调整网络服务器上负载的目的，LTM的一个常用功能是它拦截和重定向入站网络流量的能力。但是，调整服务器负载并不是唯一的本地流量管理方式。&lt;/p&gt;
&lt;p&gt;LTM包含了各种功能，例如，执行检查和转换报头和内容数据，管理基于SSL证书的认证，以及压缩HTTP响应。这样做，BIG-IP系统不仅会定向流量到适合的服务器资源，而且还通过执行Web服务器通常执行的任务来增强了网络安全，并释放了服务器资源。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意： BIG-IP LTM是组成BIG-IP产品系列的几种产品之一。BIG-IP产品线中的所有产品都运行在强大的流量管理操作系统（Traffic Management Operating System）（通常称为TMOS）上。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="F5" scheme="https://ifelif.cn/categories/F5/"/>
    
    
    <category term="F5" scheme="https://ifelif.cn/tags/F5/"/>
    
    <category term="LoadBalance" scheme="https://ifelif.cn/tags/LoadBalance/"/>
    
  </entry>
  
  <entry>
    <title>BIG-IP System iRules Concepts v11.6</title>
    <link href="https://ifelif.cn/2017/BIG-IP-System-iRules-Concepts-v11-6/"/>
    <id>https://ifelif.cn/2017/BIG-IP-System-iRules-Concepts-v11-6/</id>
    <published>2017-11-30T01:05:31.000Z</published>
    <updated>2022-11-13T15:05:30.085Z</updated>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;本文是 F5官方文档 &lt;a href=&quot;https://support.f5.com/kb/en-us/products/big-ip_ltm/manuals/product/bigip-system-irules-concepts-11-6-0.html&quot;&gt;BIG-IP System iRules Concepts v11.6&lt;/a&gt; 的中文翻译版。初次于2017年11月30日发布在 &lt;a href=&quot;https://github.com/filefi/CN_BIG-IP_System_iRules_Concepts_v11.6&quot;&gt;此repo&lt;/a&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;1-iRules介绍&quot;&gt;&lt;a href=&quot;#1-iRules介绍&quot; class=&quot;headerlink&quot; title=&quot;1 iRules介绍&quot;&gt;&lt;/a&gt;1 iRules介绍&lt;/h1&gt;&lt;h2 id=&quot;什么是iRule&quot;&gt;&lt;a href=&quot;#什么是iRule&quot; class=&quot;headerlink&quot; title=&quot;什么是iRule&quot;&gt;&lt;/a&gt;什么是iRule&lt;/h2&gt;&lt;p&gt;iRule是BIG-IP本地流量管理器（LTM）中的一个强大而灵活的功能，你可以用它来管理你的网络流量。使用基于行业标准工具命令语言（Tcl）的语法，iRules功能不仅允许您根据报头数据（header data）选择Pools，还可以通过搜索您自定义的任何类型的内容数据来定向流量。因此，iRules功能显著地增强了您自定义内容交换（content switching）以适应您确切需求的能力。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;重要：有关iRules语法的完整和详细信息，请参阅F5 Networks DevCentral网站 &lt;a href=&quot;http://devcentral.f5.com.请注意,irules必须符合标准的tcl语法规则/&quot;&gt;http://devcentral.f5.com。请注意，iRules必须符合标准的Tcl语法规则&lt;/a&gt;; 因此，有关Tcl语法的更多信息，请参见 &lt;a href=&quot;http://tmml.sourceforge.net/doc/tcl/index.html%E3%80%82&quot;&gt;http://tmml.sourceforge.net/doc/tcl/index.html。&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果您想要单独的连接来命中（target）除为Virtual Server定义的默认Pool之外的Pool，则你就可以写这样一个iRule脚本。iRules允许您更直接地指定要将流量定向到你想要的目的地。使用iRules，您不仅可以将流量发送到Pool，还可以向单个Pool Member，端口或URI发送流量。您创建的iRules可以很简单，也可以很复杂，具体取决于您的内容交换（content-switching）需求。&lt;/p&gt;
&lt;pre class=&quot;language-tcl&quot; data-language=&quot;tcl&quot;&gt;&lt;code class=&quot;language-tcl&quot;&gt;when CLIENT_ACCEPTED &lt;span class=&quot;token punctuation&quot;&gt;&amp;#123;&lt;/span&gt;
    &lt;span class=&quot;token builtin&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;&amp;#123;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;IP::addr &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;IP::client_addr&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; equals 10.10.10.10&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;&amp;#123;&lt;/span&gt;
        pool my_pool 
    &lt;span class=&quot;token punctuation&quot;&gt;&amp;#125;&lt;/span&gt; 
&lt;span class=&quot;token punctuation&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;当客户端连接被接受时，这条iRule会被触发。这时，如果客户端的地址与 &lt;code&gt;10.10.10.10&lt;/code&gt; 相匹配，将使得本地流量管理器（LTM）将数据包发送到my_pool池。&lt;/p&gt;</summary>
    
    
    
    <category term="F5" scheme="https://ifelif.cn/categories/F5/"/>
    
    
    <category term="F5" scheme="https://ifelif.cn/tags/F5/"/>
    
    <category term="LoadBalance" scheme="https://ifelif.cn/tags/LoadBalance/"/>
    
  </entry>
  
  <entry>
    <title>MPLS 实验13：Hub-and-Spoke</title>
    <link href="https://ifelif.cn/2014/MPLS_Lab_13/"/>
    <id>https://ifelif.cn/2014/MPLS_Lab_13/</id>
    <published>2014-03-19T15:59:51.000Z</published>
    <updated>2014-03-19T15:59:51.000Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;实验环境：&quot;&gt;&lt;a href=&quot;#实验环境：&quot; class=&quot;headerlink&quot; title=&quot;实验环境：&quot;&gt;&lt;/a&gt;实验环境：&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;模拟器：GNS3 0.8.6&lt;/li&gt;
&lt;li&gt;Cisco IOS：c7200-adventerprisek9-mz.151-4.M2.image&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;GNS3实验拓扑文件：&quot;&gt;&lt;a href=&quot;#GNS3实验拓扑文件：&quot; class=&quot;headerlink&quot; title=&quot;GNS3实验拓扑文件：&quot;&gt;&lt;/a&gt;GNS3实验拓扑文件：&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;topology.net&quot;&gt;拓扑文件&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;实验拓扑：&quot;&gt;&lt;a href=&quot;#实验拓扑：&quot; class=&quot;headerlink&quot; title=&quot;实验拓扑：&quot;&gt;&lt;/a&gt;实验拓扑：&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/2014/MPLS_Lab_13/topo.png&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Network" scheme="https://ifelif.cn/categories/Network/"/>
    
    
    <category term="MPLS" scheme="https://ifelif.cn/tags/MPLS/"/>
    
    <category term="Network" scheme="https://ifelif.cn/tags/Network/"/>
    
  </entry>
  
  <entry>
    <title>MPLS 实验12：SOO and EIGRP on Backdoor Link</title>
    <link href="https://ifelif.cn/2014/MPLS_Lab_12/"/>
    <id>https://ifelif.cn/2014/MPLS_Lab_12/</id>
    <published>2014-03-19T15:49:51.000Z</published>
    <updated>2014-03-19T15:49:51.000Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;实验环境：&quot;&gt;&lt;a href=&quot;#实验环境：&quot; class=&quot;headerlink&quot; title=&quot;实验环境：&quot;&gt;&lt;/a&gt;实验环境：&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;模拟器：GNS3 0.8.6&lt;/li&gt;
&lt;li&gt;Cisco IOS：c7200-adventerprisek9-mz.151-4.M2.image&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;实验拓扑：&quot;&gt;&lt;a href=&quot;#实验拓扑：&quot; class=&quot;headerlink&quot; title=&quot;实验拓扑：&quot;&gt;&lt;/a&gt;实验拓扑：&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/2014/MPLS_Lab_12/topo.png&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Network" scheme="https://ifelif.cn/categories/Network/"/>
    
    
    <category term="MPLS" scheme="https://ifelif.cn/tags/MPLS/"/>
    
    <category term="Network" scheme="https://ifelif.cn/tags/Network/"/>
    
  </entry>
  
</feed>
